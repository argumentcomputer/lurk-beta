# Run final tests only when attempting to merge, shown as skipped beforehand
name: Merge group tests

on:
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  linux-ignored:
    if: github.event_name != 'pull_request' || github.event.action == 'enqueued'
    runs-on: buildjet-16vcpu-ubuntu-2204
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
      - uses: taiki-e/install-action@nextest
      - uses: Swatinem/rust-cache@v2
      - name: Linux Tests
        run: |
          cargo nextest run --profile ci --workspace --cargo-profile dev-ci --run-ignored ignored-only -E 'all() - test(groth16::tests::outer_prove_recursion) - test(test_make_fcomm_examples) - test(test_functional_commitments_demo) - test(test_chained_functional_commitments_demo)'

  linux-arm:
    if: github.event_name != 'pull_request' || github.event.action == 'enqueued'
    runs-on: buildjet-16vcpu-ubuntu-2204-arm
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions-rs/toolchain@v1
      - uses: taiki-e/install-action@nextest
      - uses: Swatinem/rust-cache@v2
      - name: Linux Tests
        run: |
          cargo nextest run --profile ci --workspace --cargo-profile dev-ci
      - name: Linux Gadget Tests w/o debug assertions
        run: |
          cargo nextest run --profile ci --workspace --cargo-profile dev-no-assertions -E 'test(circuit::gadgets)'

  # Note: Currently impossible to require a CircleCI status check when running on `merge_group` only
  # If the M1 Mac test fails, merge will still occur
  # TODO: open an issue for this, including an automated alert on failure
  trigger-circleci-m1-mac:
    if: github.event_name != 'pull_request' || github.event.action == 'enqueued'
    runs-on: ubuntu-latest
    steps:
      - name: Trigger CircleCI M1 Mac workflow
        id: mac-circleci
        uses: CircleCI-Public/trigger-circleci-pipeline-action@v1.1.0
        env:
          CCI_TOKEN: ${{ secrets.CIRCLECI_API_TOKEN }}
