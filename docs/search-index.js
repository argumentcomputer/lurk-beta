var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLFLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","drop","from","handle_meta","handle_non_meta","init","into","name","new","process_line","prompt","public_param_dir","try_from","try_into","type_id","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5],"f":[0,[[]],[[]],[[],1],[2],[2],[2],[[]],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]],[0,[[9,[8]],10]]],11],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]]],11],[[],2],[[]],[[],12],[[[6,[3]],2,[13,[1]],[14,[3,[4,[3]]]]],[[5,[3,[4,[3]]]]]],[[[5,[3,[4,[3]]]],12],12],[[[5,[3,[4,[3]]]]],12],[[],15],[[],16],[[],16],[[],17],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[6,"Scalar"],[4,"Coproc"],[3,"ClutchState"],[3,"Store"],[3,"Ptr"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[3,"String"],[4,"Option"],[3,"Lang"],[3,"Utf8PathBuf"],[4,"Result"],[3,"TypeId"]]},\
"fcomm":{"doc":"","t":"DEDDGRNDNDNEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMMFMLLLLMMMLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLDILLFLLLLLLLLKKKLLLLLKK","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","file_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_param_dir","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","from","from","init","into","provide","source","to_string","try_from","try_into","type_id","vzip","FileMap","FileStore","borrow","borrow_mut","data_dir","deref","deref_mut","drop","from","get","init","into","new","read_from_json_path","read_from_path","read_from_stdin","set","try_from","try_into","type_id","vzip","write_to_json_path","write_to_path"],"q":[[0,"fcomm"],[527,"fcomm::error"],[564,"fcomm::file_map"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,28,0,9,0,16,0,0,0,16,16,0,9,0,28,0,0,9,0,0,27,16,28,0,0,0,0,27,24,24,17,20,21,24,25,26,27,28,4,9,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,22,15,30,16,17,20,21,22,23,24,25,26,27,28,4,9,30,16,17,20,21,22,23,24,25,26,27,28,4,9,30,21,22,24,4,0,17,20,17,20,28,16,17,20,27,28,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,17,20,17,20,16,17,20,21,22,23,24,25,26,27,28,4,9,30,16,16,16,17,17,17,20,20,20,21,21,21,24,24,24,25,25,25,27,27,27,28,28,28,9,9,9,0,17,23,15,0,9,15,17,20,23,4,17,20,4,0,17,20,21,22,23,24,25,26,27,28,4,37,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,21,28,21,27,21,21,16,16,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,22,24,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,15,9,9,17,20,24,0,15,24,24,9,15,24,15,30,9,15,21,27,9,15,0,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,15,4,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,30,17,20,24,16,17,20,21,22,23,24,25,26,27,28,4,9,30,21,16,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,37,30,30,15,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,70,70,0,70,70,70,70,70,70,70,70,69,69,69,70,70,70,70,70,69,69],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[16,16],[17,17],[[[20,[[0,[18,19]]]]],[[20,[[0,[18,19]]]]]],[[[21,[[0,[18,19]]]]],[[21,[[0,[18,19]]]]]],[[[22,[[0,[18,19]]]]],[[22,[[0,[18,19]]]]]],[[[23,[[0,[18,19]]]]],[[23,[[0,[18,19]]]]]],[[[24,[[0,[18,19]]]]],[[24,[[0,[18,19]]]]]],[25,25],[[[26,[[0,[18,19]]]]],[[26,[[0,[18,19]]]]]],[[[27,[[0,[18,19]]]]],[[27,[[0,[18,19]]]]]],[28,28],[[[4,[[0,[18,19,29]]]]],[[4,[[0,[18,19,29]]]]]],[[[9,[[0,[18,19]]]]],[[9,[[0,[18,19]]]]]],[[[30,[[0,[18,19]]]]],[[30,[[0,[18,19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],31],0,0,0,0,[[28,[2,[[0,[19,29,32]]]]],[[33,[[0,[19,29,32]]]]]],[16,5],[[],17],[[],[[20,[[0,[34,19]]]]]],[[],[[27,[19]]]],[[],28],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[35,[[11,[16]]]],[35,[[11,[17]]]],[35,[[11,[[20,[[0,[36,19]]]]]]]],[35,[[11,[[21,[19]]]]]],[35,[[11,[[22,[[0,[36,19]]]]]]]],[35,[[11,[[23,[[0,[36,19]]]]]]]],[35,[[11,[[24,[[0,[36,19]]]]]]]],[35,[[11,[25]]]],[35,[[11,[[26,[[0,[36,19]]]]]]]],[35,[[11,[[27,[[0,[36,19]]]]]]]],[35,[[11,[28]]]],[35,[[11,[[4,[[0,[36,19,29]]]]]]]],[35,[[11,[37]]]],[35,[[11,[[15,[[0,[36,38]]]]]]]],[35,[[11,[[9,[[0,[36,19]]]]]]]],[35,[[11,[[30,[[0,[36,19]]]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,0,0,[[16,16],6],[[17,17],6],[[[20,[[0,[39,19]]]],[20,[[0,[39,19]]]]],6],[[[21,[[0,[39,19]]]],[21,[[0,[39,19]]]]],6],[[[22,[[0,[39,19]]]],[22,[[0,[39,19]]]]],6],[[[23,[[0,[39,19]]]],[23,[[0,[39,19]]]]],6],[[[24,[[0,[39,19]]]],[24,[[0,[39,19]]]]],6],[[25,25],6],[[[26,[[0,[39,19]]]],[26,[[0,[39,19]]]]],6],[[[27,[[0,[39,19]]]],[27,[[0,[39,19]]]]],6],[[28,28],6],[[[4,[[0,[39,19,29]]]],[4,[[0,[39,19,29]]]]],6],[[[9,[[0,[39,19]]]],[9,[[0,[39,19]]]]],6],[[[30,[[0,[39,19]]]],[30,[[0,[39,19]]]]],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[2,[[0,[19,29]]]],[3,[[0,[19,29]]]],5],[[11,[17,10]]]],[[[23,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[11,[[3,[[0,[19,29,32]]]],10]]]],[[[2,[1]],[3,[1]],[40,[[3,[1]]]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[2,[19]],[3,[19]],[40,[[3,[19]]]],5,[8,[19,[7,[19]]]]],[[11,[10]]]],[[[9,[19]]],[[40,[17]]]],[[[15,[1]],[2,[1]]],[[11,[10]]]],0,0,0,0,0,0,[[[4,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[11,[[3,[[0,[19,29,32]]]],10]]]],0,[[17,41],42],[[[20,[[0,[43,19]]]],41],42],[[[21,[[0,[43,19]]]],41],42],[[[22,[[0,[43,19]]]],41],42],[[[23,[[0,[43,19]]]],41],42],[[[24,[[0,[43,19]]]],41],42],[[25,41],42],[[[26,[[0,[43,19]]]],41],42],[[[27,[[0,[43,19]]]],41],42],[[28,41],42],[[[4,[[0,[43,19,29]]]],41],42],[[37,41],42],[[[9,[[0,[43,19]]]],41],42],[[[30,[[0,[43,19]]]],41],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[11,[[21,[[0,[19,29,32]]]],10]]]],[[[2,[[0,[19,29]]]],[33,[[0,[19,29]]]]],28],[[[46,[[45,[44]]]]],[[11,[[21,[19]]]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[27,[[0,[19,29,32]]]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]],[0,[19,29,32]]],[[11,[[21,[[0,[19,29,32]]]],10]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[11,[10]]]],[[[0,[47,48]],49],50],[[16,51]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[[[9,[19]]],6],[[[9,[19]]],6],0,0,0,[5,52],0,[[[2,[1]],[22,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[22,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[9,[19]]],[[40,[[24,[19]]]]]],[[[15,[1]],[2,[1]]],[[11,[10]]]],0,0,0,[[[9,[[0,[19,29,36]]]]],[[11,[[53,[[0,[19,29,36]]]],10]]]],[[[2,[1]],[9,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[21,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]]],[[3,[[0,[19,29,32]]]]]],[[[27,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[3,[[0,[19,29,32]]]]]],[[[9,[19]]],[[40,[[20,[19]]]]]],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[[],54],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],0,0,[[16,57],11],[[17,57],11],[[[20,[[0,[29,19]]]],57],11],[[[21,[19]],57],11],[[[22,[[0,[29,19]]]],57],11],[[[23,[[0,[29,19]]]],57],11],[[[24,[[0,[29,19]]]],57],11],[[25,57],11],[[[26,[[0,[29,19]]]],57],11],[[[27,[[0,[29,19]]]],57],11],[[28,57],11],[[[4,[[0,[29,19,29]]]],57],11],[[37,57],11],[[[15,[[0,[29,38]]]],57],11],[[[9,[[0,[29,19]]]],57],11],[[[30,[[0,[29,19]]]],57],11],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[19]]],58],[5,[[11,[16]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],0,0,0,[[[15,[1]],[13,[1,[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[37,10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[5],[[10,41],42],[[10,41],42],[60,10],[[]],[56,10],[61,10],[62,10],[63,10],[64,10],[65,10],[[],5],[[]],[66],[10,[[40,[67]]]],[[],58],[[],11],[[],11],[[],59],[[]],0,0,[[]],[[]],[[],54],[5],[5],[5],[[]],[[[70,[68,69]],68],[[40,[69]]]],[[],5],[[]],[[[46,[55]]],[[11,[[70,[68,69]],56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[],[[11,[56]]]],[[[70,[68,69]],68,69],[[11,[56]]]],[[],11],[[],11],[[],59],[[]],[[[46,[55]]]],[[[46,[55]]]]],"c":[],"p":[[6,"S1"],[3,"Store"],[3,"Ptr"],[3,"CommittedExpression"],[15,"usize"],[15,"bool"],[4,"Coproc"],[3,"Lang"],[4,"Claim"],[4,"Error"],[4,"Result"],[3,"NovaProver"],[3,"PublicParams"],[3,"Arc"],[3,"Proof"],[4,"ReductionCount"],[3,"Evaluation"],[8,"Clone"],[8,"LurkField"],[3,"PtrEvaluation"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"ZBytes"],[3,"ZStorePtr"],[4,"LurkPtr"],[4,"LurkCont"],[8,"Serialize"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"DeserializeOwned"],[3,"ContPtr"],[8,"Default"],[8,"Deserializer"],[8,"Deserialize"],[3,"VerificationResult"],[8,"CurveCycleEquipped"],[8,"PartialEq"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u8"],[15,"slice"],[8,"AsRef"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[6,"NovaProofCache"],[6,"ZExprPtr"],[3,"Utf8PathBuf"],[3,"Path"],[4,"Error"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[4,"SerdeError"],[3,"Error"],[4,"SynthesisError"],[4,"FromHexError"],[3,"Error"],[3,"Error"],[3,"Demand"],[8,"Error"],[8,"ToString"],[8,"FileStore"],[3,"FileMap"]]},\
"lurk":{"doc":"","t":"ENCRNCLLOLLAOAALLAAOLLLLLLLLLAAAALLLLLLOLALALLLLLOAOOOLLLOOALAAAALAOLOAOAAOLLLLLAOOOLACACCCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLIAAKKDDLLLLLLLLLLLMLLLLLLLMLLLLLLLMMLLMLMMLLLLLMMLLLLLLLLLLLLLLMAAAFDFMMLLMMMMLLMMMLLLMMMMMMMLMMLLMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMLLLMMLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILKLLKLAGEGNDDNDDNNDGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIDDDDNENDMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLKLLLKLLLKLLLAKLLLLLMLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNDNNLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLNNNNNDEGGDEGGNNNNNNNNNNNNNNNNNNIDNNNNNRRNNNNNNNENNNNNLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNENENNNNDNNNNNENNNNNNNENNNNNNENNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEHNGGNALLLLLLLALLLLLALAALLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLNNNNNNDENNLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMLLLFLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLFFFFFFFFLLLLLFFFFFFFFFFFFFFFFFFFFIIIQLLAKLLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLGGQQQQNIGGGQGQDGEDNGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLDNNNDEIMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLMMMMLLLLLLLLLLLLLLLAFFNENNLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLMLLLLLLKLKLLLLLMMKLKLLLKLKLFFFLLLLLLLLLLDDDDLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMLMMMLMMLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMMLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMMMMMLMLLMLLLLMLMMMMMLMLMMLLLMMLLLMLLMLMLMLMLLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLMLMLNNNNNNNNNNRNNNNNRRNNNENNNNNNNNNNNNNNRRNNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLNNNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLNNELLLLLLLLLLLLLLLLLCLLLALLLLLLLCLLLLAAAANENLLLLALLLLLLCLLLALCLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","cache_map","char","circuit","cli","clone","clone_into","cont","coprocessor","ctrl","deref","deref_mut","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","init","into","into_scalar","is_negative","is_zero","keyword","lem","list","lit","lurksym","most_negative","most_positive","mul_assign","num","op","parser","partial_cmp","proof","ptr","public_parameters","repl","serialize","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","CacheMap","as_mut","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","from","get","get_copy","get_copy_or_insert","get_copy_or_insert_with","get_copy_or_insert_with_key","init","insert","insert_with","insert_with_key","into","is_empty","keys_cloned","len","map_get","new","try_from","try_into","type_id","vzip","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","blank","blank","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","deref","deref","deref_mut","deref_mut","drop","drop","fmt","frames","from","from","from_frame","from_frames","get_store","init","init","input","input","into","into","lang","output","output","output","precedes","precedes","public_input_size","public_inputs","reduction_count","store","store","synthesize","synthesize","synthesize_frames","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_groth16_proof","vzip","vzip","witness","constraints","data","pointer","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","from","fun_tag","if_cont_tag","init","into","lambda_sym","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","power2_32_num","power2_64_num","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","pick","pick","pick_const","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","z_ptr","get_config","parse_and_run","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","to_owned","try_from","try_into","type_id","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","eval_arity","evaluate","has_circuit","simple_evaluate","synthesize","trie","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","Trie","TrieCoproc","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","leaves","lookup","new","new_with_capacity","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","into","into","into","provide","provide","provide","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_frames","get_frames","i","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_terminal","is_terminal","is_terminal","iter","lang","log","log","log","maybe_emitted_expression","new","next","output","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","from","from","from","from","from","from","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","lookup","max_coprocessor_arity","new","new","new_with_bindings","serialize","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_keyword_sym","is_list","is_null","is_num","is_str","is_sym","is_thunk","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","BLS12_381","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","hex_digits","init","init","into","into","is_negative","most_negative","most_positive","partial_cmp","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_string","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","clone","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","ClosedEnv","Cons","ConsName","ConsStub","ConsWitness","Cont","ContName","ContStub","ContWitness","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cons","cons","cons","cons_named","cons_named","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","index","index","index","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","length","new_blank","new_dummy","new_from_stub","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","ApplyContinuation","Block","Call","Cast","Cont","Ctrl","Ctrl","CtrlTag","Div","Emit","Error","Expr","Func","Hash2","Hash3","Hash4","Hide","IfEq","Lit","Lit","MakeThunk","MatchTag","MatchVal","Mul","Null","Num","Op","Open","Return","Return","String","Sub","Symbol","Tag","Unhash2","Unhash3","Unhash4","Var","assert_all_paths_taken","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_until","check","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_ptr","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","name","new","num_constraints","num_paths","synthesize","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Error","LURK_WHITESPACE","NoInput","ParseResult","Span","Syntax","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","error","fmt","fmt","from","init","into","position","provide","string","syntax","to_owned","to_string","try_from","try_into","type_id","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","drop","encode","eq","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","radix","to_owned","try_from","try_into","type_id","vzip","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","init","init","input","into","into","is_nom_err","map_parse_err","new","opt","or","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","from","from_upto","init","into","range","to_owned","try_from","try_into","type_id","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","to_owned","try_from","try_into","type_id","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","lang","new","outer_prove","proof","proof_count","prove","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","CE1","CE2","CK1","CK2","Compressed","CurveCycleEquipped","EE1","EE2","G1","G1","G2","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","evaluate_and_prove","fmt","from","from","from","get_evaluation_frames","init","init","init","into","into","into","lang","new","prove","prove_recursively","public_params","reduction_count","serialize","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","ContPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","idx","index","index","init","init","init","into","into","into","is_atom","is_cons","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","new","new","null","null","opaque","opaque","opaque_idx","partial_cmp","raw","raw","tag","tag","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","error","public_params","public_params_default_dir","CacheError","Error","IOError","JsonError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","provide","source","to_string","try_from","try_into","type_id","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","drop","drop","env","eval_expr","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","limit","name","name","new","new","new","new","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ConstantPtrs","Error","NamedConstants","Store","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_syntax","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_begin","get_constants","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_lurk_sym","get_maybe_opaque","get_nil","get_num","get_opaque_ptr","get_quote","get_sym","get_t","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_strnil","intern_symbol","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","lurk_sym","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","poseidon_cache","product","provide","ptr","ptr_eq","quote","quotient","read","read_maybe_meta","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","Atom","Begin","Car","Cdr","Char","Comm","Commit","Cons","CurrentEnv","Dummy","ESCAPE_CHARS","Emit","Eq","Eval","Hide","If","KEYWORD_MARKER","LURK_SYMBOLS","Lambda","Let","Letrec","LurkSym","Nil","Num","OpAdd","OpDiv","OpEql","OpGte","OpGth","OpLte","OpLth","OpMod","OpMul","OpSub","Open","Quote","SYM_MARKER","SYM_SEPARATOR","Secret","Strcons","Symbol","T","U64","arbitrary_with","arbitrary_with","as_child","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","direct_child","direct_parent","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","escape_symbol_element","extend","fmt","fmt","fmt","fmt","from","from","get_hash","has_parent","hash","init","init","into","into","is_keyword","is_lurk_sym","is_root","is_whitespace","keyword","lurk_sym","lurk_syms","new","nil","partial_cmp","path","print_path","print_raw","prints_as_absolute","root","serialize","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Char","Improper","Keyword","List","LurkSym","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","init","into","nil","to_owned","to_string","try_from","try_into","type_id","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","init","into","is_zero","mul","partial_cmp","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","vzip","Write","fmt","fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","init","into","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","borrow","borrow_mut","custom","custom","de","deref","deref_mut","drop","fmt","fmt","from","from_z_data","init","into","provide","ser","to_string","to_z_data","try_from","try_into","type_id","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","try_from","try_into","type_id","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","serialize","to_owned","try_from","try_into","type_id","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","init","into","serialize","to_owned","to_string","try_from","try_into","type_id","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","init","into","into_hash_components","partial_cmp","parts","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","drop","eq","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","new","new_with_expr","nil_z_ptr","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","vzip"],"q":[[0,"lurk"],[91,"lurk::cache_map"],[120,"lurk::circuit"],[125,"lurk::circuit::circuit_frame"],[184,"lurk::circuit::gadgets"],[187,"lurk::circuit::gadgets::constraints"],[188,"lurk::circuit::gadgets::data"],[267,"lurk::circuit::gadgets::pointer"],[364,"lurk::cli"],[366,"lurk::cont"],[409,"lurk::cont::Continuation"],[441,"lurk::coprocessor"],[450,"lurk::coprocessor::trie"],[616,"lurk::error"],[687,"lurk::eval"],[851,"lurk::eval::lang"],[944,"lurk::expr"],[1018,"lurk::field"],[1103,"lurk::hash"],[1203,"lurk::hash_witness"],[1424,"lurk::lem"],[1652,"lurk::parser"],[1682,"lurk::parser::base"],[1723,"lurk::parser::error"],[1784,"lurk::parser::position"],[1810,"lurk::parser::position::Pos"],[1816,"lurk::parser::string"],[1848,"lurk::parser::syntax"],[1868,"lurk::proof"],[1887,"lurk::proof::groth16"],[1944,"lurk::proof::nova"],[2016,"lurk::ptr"],[2127,"lurk::public_parameters"],[2130,"lurk::public_parameters::error"],[2153,"lurk::repl"],[2211,"lurk::store"],[2459,"lurk::symbol"],[2573,"lurk::syntax"],[2608,"lurk::tag"],[2816,"lurk::uint"],[2851,"lurk::writer"],[2854,"lurk::z_data"],[2895,"lurk::z_data::serde"],[2920,"lurk::z_data::serde::de"],[2966,"lurk::z_data::serde::ser"],[3076,"lurk::z_data::z_cont"],[3118,"lurk::z_data::z_cont::ZCont"],[3150,"lurk::z_data::z_expr"],[3191,"lurk::z_data::z_expr::ZExpr"],[3194,"lurk::z_data::z_ptr"],[3236,"lurk::z_data::z_store"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","Returns the argument unchanged.","","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","This module offers a connection the the backend proving …","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","<code>CacheMap</code> is an adaptation of <code>FrozenMap</code>: …","Get mutable access to the underlying <code>HashMap</code>.","","","","","","","","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns a copy of the value corresponding to the key.","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","Calls <code>U::from(self)</code>.","Examples","","Examples","Applies a function to the owner of the value corresponding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","The <code>trie</code> module implements a Trie with the following …","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","","The basic control nodes for LEM logical paths.","","","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hash2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Hash3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Hash4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>IfEq(x, y, eq_block, else_block)</code> runs <code>eq_block</code> if <code>x == y</code>, …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","","<code>MatchTag(x, cases)</code> performs a match on the tag of <code>x</code>, …","<code>MatchSymbol(x, cases, def)</code> checks whether <code>x</code> matches some …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","","The atomic operations of LEMs.","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","LEM tags","<code>Unhash2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Unhash3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Unhash4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","LEM variables","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","Calls a <code>Func</code> on an input until the stop contidion is …","Performs the static checks described in LEM’s docstring.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Instantiates a <code>Func</code> with the appropriate transformations …","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","Create R1CS constraints for a LEM function given an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Generates an outer Groth16 proof using the given …","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","The number of reductions used in the proof.","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","The commitment engine type for the first curve in the …","The commitment engine type for the second curve in the …","Why the next 4 types?","The type of the commitment key used for points of the …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","Evaluates and proves the computation given the public …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Evaluates and generates the frames of the computation …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","A pointer to a continuation. Logically this is the same a …","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","A <code>Store</code> pointer","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","","Construct a Ptr from an opaque index","","get the index of an Opaque RawPtr","","The underlying pointer, which can be null, opaque, or an …","","An expression tag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","Intern a string into the Store, which generates the cons’…","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the <code>Symbol</code> is the root symbol, i.e. if it …","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","Calls <code>U::from(self)</code>.","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","Calls <code>U::from(self)</code>.","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","Calls <code>U::from(self)</code>.","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","",""],"i":[0,2,0,0,2,0,2,2,0,2,2,0,0,0,0,2,2,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,0,2,0,2,0,2,2,2,2,2,0,0,0,0,0,2,2,2,0,0,0,2,0,0,0,0,2,0,0,2,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,206,206,0,0,36,37,36,37,36,37,36,37,36,37,36,36,37,36,37,36,37,36,37,36,37,36,37,36,36,37,36,37,36,37,36,36,36,37,36,37,36,36,36,36,37,36,36,36,36,37,36,37,36,37,36,37,36,36,37,36,37,0,0,0,0,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,45,46,45,46,46,45,46,45,46,45,45,45,45,45,46,45,63,45,46,45,45,46,45,46,45,46,45,46,45,46,45,46,45,45,45,45,45,46,46,45,45,45,46,45,46,45,46,45,46,46,45,45,46,45,46,45,46,46,46,46,45,46,45,45,46,45,46,45,45,45,45,45,45,45,45,45,45,45,46,45,45,45,46,45,46,45,46,45,46,45,46,45,46,45,0,0,65,65,65,65,65,0,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,207,208,209,210,211,212,213,214,215,216,217,207,208,218,216,211,214,215,216,209,210,211,212,213,215,207,208,210,215,217,207,208,0,0,219,35,35,35,35,219,0,0,0,0,71,0,0,71,0,0,77,71,0,0,0,0,71,75,78,80,77,71,72,73,74,75,78,80,77,71,72,73,74,71,72,73,74,71,72,73,74,75,72,73,74,75,78,80,77,71,72,73,74,75,78,80,77,71,72,73,74,72,73,74,75,78,80,77,71,72,73,74,75,71,72,73,74,71,77,71,72,73,74,75,78,80,77,71,71,71,71,72,73,74,71,75,78,80,77,71,72,73,74,75,0,75,78,80,77,71,72,73,74,75,75,75,75,75,75,75,75,72,73,74,71,72,73,74,71,71,72,73,74,75,78,80,77,71,72,73,74,75,78,80,77,71,72,73,74,75,78,80,77,71,72,73,74,78,80,75,78,80,77,71,72,73,74,81,82,0,81,83,0,83,0,81,83,83,81,82,83,81,82,81,82,81,82,83,81,82,83,81,82,83,81,82,83,83,81,81,82,82,83,83,83,83,83,81,81,82,83,81,82,83,81,82,83,81,82,83,81,81,82,83,81,82,83,81,82,83,81,82,83,81,82,83,81,82,88,0,0,0,0,0,88,0,88,0,40,88,89,33,40,88,92,34,89,33,40,88,92,34,33,40,88,34,33,40,88,34,33,88,89,33,40,88,92,34,89,33,40,88,92,34,88,89,33,40,88,92,34,0,33,33,40,88,34,33,33,33,40,40,40,88,88,88,89,0,33,33,33,33,40,88,92,34,89,33,40,88,88,92,34,89,89,40,89,33,40,88,92,34,89,40,33,89,33,40,88,92,34,92,220,33,40,88,220,33,88,88,220,33,88,89,0,220,33,40,33,89,92,40,40,220,33,88,40,220,33,88,33,33,40,88,34,33,33,89,33,40,88,92,34,89,33,40,88,92,34,89,33,40,88,92,34,89,33,40,88,92,34,40,0,0,98,0,0,38,38,98,95,99,98,38,95,99,98,38,99,98,38,99,98,38,38,38,95,99,98,38,95,99,98,38,99,98,38,95,99,98,38,99,98,98,99,98,38,95,95,99,98,98,38,98,38,95,99,98,38,95,99,98,38,38,38,38,38,95,38,38,99,98,38,99,98,98,99,98,38,95,99,98,38,95,99,98,38,95,99,98,38,95,99,98,38,103,103,103,103,0,103,103,103,103,103,103,103,0,103,103,102,102,102,103,103,102,103,102,103,102,103,102,102,103,102,103,102,103,102,103,102,103,103,103,102,102,102,103,103,102,103,102,102,102,102,103,102,103,102,103,103,103,103,103,103,103,103,103,103,102,103,102,103,102,103,102,102,103,102,104,104,1,0,104,0,0,1,104,104,104,105,104,105,104,105,104,105,104,105,105,104,105,104,105,104,105,104,105,104,105,105,105,105,104,104,105,104,105,1,1,1,1,1,1,1,1,1,1,105,105,1,104,105,104,105,1,1,1,105,104,105,1,1,1,1,1,1,104,105,104,1,1,1,1,1,1,104,105,104,105,104,105,104,105,120,119,120,119,120,119,120,119,0,0,0,0,0,0,120,119,113,79,121,120,119,113,79,121,113,113,113,113,119,119,79,113,79,121,113,79,121,120,119,113,79,121,120,119,113,79,121,120,119,113,79,121,119,113,79,121,120,119,119,113,79,121,121,79,79,79,79,120,119,113,79,121,121,120,119,113,79,121,58,119,120,119,113,79,121,120,119,113,79,121,120,119,113,79,121,120,119,113,79,121,62,60,60,126,60,0,0,0,0,0,0,0,0,126,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,60,60,60,62,62,0,0,62,60,62,60,60,62,62,0,60,60,60,60,126,123,123,126,125,127,60,62,123,126,125,127,60,62,123,125,124,126,124,126,61,123,61,123,125,126,125,127,60,62,123,126,125,127,60,62,123,124,126,125,61,123,127,127,60,62,126,125,127,60,62,123,126,125,127,60,62,123,126,125,127,60,62,123,126,125,127,60,62,123,126,126,126,125,125,125,127,127,127,60,60,60,62,62,62,61,123,128,126,64,123,126,125,127,60,62,123,126,125,127,60,62,123,123,60,62,60,62,122,60,62,126,125,127,60,62,123,128,126,64,123,126,125,127,60,62,123,123,123,123,123,123,124,126,61,123,123,123,126,125,127,60,62,123,123,126,125,127,60,62,123,126,125,127,60,62,123,126,125,127,60,62,123,126,125,127,60,62,123,0,136,132,0,136,136,131,0,131,0,136,136,132,131,0,136,136,136,136,135,0,136,132,135,135,136,136,133,0,136,132,135,133,136,133,0,136,136,136,0,129,129,130,131,132,133,134,135,136,129,130,131,132,133,134,135,136,129,129,129,129,130,131,132,133,134,135,136,129,130,131,132,133,134,135,136,134,129,130,131,132,133,134,135,136,129,130,131,132,133,134,135,136,129,130,131,132,133,134,135,136,129,130,131,132,133,134,135,136,129,129,129,130,130,130,131,131,131,132,132,132,133,133,133,134,134,134,135,135,135,136,136,136,129,130,130,131,131,132,132,133,134,135,136,129,130,131,132,133,134,135,136,133,130,131,132,133,130,131,132,133,129,130,131,132,133,134,135,136,129,130,131,132,133,134,135,136,130,129,129,129,129,131,129,130,131,132,133,134,135,136,133,130,131,132,129,130,131,132,133,134,135,136,129,130,131,132,133,134,135,136,129,130,131,132,133,134,135,136,129,129,130,131,132,133,134,135,136,0,0,138,0,0,138,0,138,138,138,138,138,138,138,0,138,138,138,138,138,0,138,0,0,138,138,138,138,138,138,139,139,139,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,139,0,0,0,0,0,0,0,139,139,139,139,139,139,148,148,148,148,148,148,0,0,148,148,146,146,148,146,148,146,148,146,148,146,148,146,148,146,148,146,148,146,146,146,148,148,146,146,148,146,146,148,146,146,148,146,148,0,146,146,146,146,146,148,146,148,146,148,146,148,146,148,146,148,146,150,0,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,221,221,221,221,221,221,151,151,151,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,0,0,0,0,0,0,0,0,151,151,151,151,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,222,222,222,0,222,222,222,222,222,0,222,223,223,223,222,0,0,0,0,0,0,156,155,154,156,155,154,154,154,156,156,155,154,156,155,154,154,156,155,154,156,155,154,156,155,154,156,155,154,156,156,156,154,154,156,156,154,154,154,156,155,154,156,155,154,156,155,154,156,156,156,155,154,0,0,163,163,163,163,164,0,0,0,0,163,0,163,0,0,0,0,164,0,0,165,164,166,165,164,166,164,165,164,166,165,164,166,165,164,165,164,166,166,166,165,164,166,166,165,164,166,165,164,166,166,166,166,164,0,166,165,164,165,164,166,165,164,166,165,164,166,164,165,164,166,0,168,168,168,0,0,0,57,56,57,57,57,168,57,56,168,57,56,168,57,56,168,57,56,168,168,57,56,168,57,56,168,57,56,168,57,56,168,168,168,57,57,57,56,56,56,168,57,57,56,56,168,57,57,56,168,57,56,168,57,56,168,57,56,168,57,56,168,57,56,57,57,56,224,57,57,57,168,168,57,224,57,224,57,168,56,57,56,57,56,168,168,57,56,57,56,168,57,56,168,57,56,168,57,56,168,57,56,168,57,56,0,0,0,170,0,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,0,0,0,177,173,177,173,173,173,176,173,173,177,173,177,173,177,173,173,173,177,173,176,176,176,176,173,176,173,177,173,177,173,173,173,176,173,176,177,173,173,176,173,176,173,0,0,0,177,173,177,173,177,173,177,173,177,173,0,0,0,0,32,179,179,32,32,32,85,178,179,32,85,178,179,32,32,32,32,179,32,32,179,179,85,178,179,85,178,179,179,32,32,179,32,179,32,32,32,179,32,32,32,32,85,178,179,32,85,178,179,179,32,85,178,179,179,179,32,179,179,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,85,178,179,32,85,178,179,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,179,179,32,32,32,32,32,32,179,32,179,32,32,85,178,179,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,85,178,179,32,32,179,179,179,179,32,179,32,32,32,32,32,179,32,179,32,32,179,32,179,179,32,32,32,32,179,32,32,179,85,178,32,179,179,32,32,32,179,32,32,32,32,179,32,179,32,32,32,32,179,32,32,85,178,179,85,32,32,32,32,85,178,179,32,85,178,179,32,85,178,179,179,32,32,178,32,85,178,179,32,32,32,32,178,184,184,184,184,184,184,184,184,184,184,0,184,184,184,184,184,0,0,184,184,184,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,0,0,184,184,0,184,184,97,184,97,97,184,97,184,97,184,97,184,97,184,97,184,97,97,97,97,184,97,184,97,97,97,184,184,184,97,97,97,97,184,184,97,184,97,97,97,97,184,97,184,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,184,97,184,97,184,97,184,97,184,97,184,180,180,180,180,180,180,180,180,180,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,109,110,68,68,68,68,68,109,109,108,109,108,109,109,108,110,0,110,68,68,109,110,68,109,110,0,108,110,110,110,68,108,110,110,68,68,68,110,108,108,109,110,0,0,0,109,68,110,110,109,108,110,110,108,0,68,68,108,108,109,68,225,109,110,225,108,68,109,110,108,68,109,110,108,68,109,110,108,68,109,110,108,68,109,110,108,68,109,110,108,68,109,110,108,68,109,110,108,68,109,110,108,68,109,110,108,68,109,110,108,108,108,68,68,68,109,109,109,110,110,110,108,108,68,68,109,109,110,110,108,68,109,110,203,108,68,109,110,108,68,109,110,108,68,109,110,108,68,109,110,108,68,109,110,108,110,108,108,109,110,108,68,109,110,225,109,110,225,109,110,203,108,68,109,110,203,108,68,109,110,108,68,109,110,108,68,109,110,108,108,68,68,109,109,110,110,108,68,109,110,108,68,109,110,108,68,109,110,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,226,226,187,187,0,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,0,187,187,187,0,187,187,187,187,187,187,187,0,187,187,187,187,0,0,0,0,189,0,189,189,189,189,189,0,189,189,189,189,189,189,0,189,189,189,0,189,0,189,189,189,189,0,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,0,190,190,190,190,190,190,190,190,0,0,0,0,0,196,192,193,194,195,196,192,193,194,195,196,192,193,194,195,196,192,193,194,195,196,192,193,194,195,192,192,192,193,194,195,195,196,192,193,194,195,196,192,193,194,195,196,192,193,194,195,196,196,196,196,192,192,196,196,192,194,195,195,196,196,196,196,193,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,193,0,196,192,193,194,195,196,192,193,194,195,196,192,193,194,195,196,192,193,194,195,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,0,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,227,228,229,230,231,232,233,234,235,236,237,227,228,238,236,231,234,235,236,229,230,231,232,233,235,227,228,230,235,237,227,228,183,183,183,183,183,183,183,183,183,183,183,183,183,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,239,239,239,0,0,0,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,54,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,0,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181],"f":[0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],0,[[]],[[]],0,0,0,0,[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],0,0,0,[4],[4],[5,[[6,[[2,[1]]]]]],[[[2,[1]],[2,[1]]]],[4],[[[2,[[0,[7,1]]]],[2,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],0,0,0,0,[[[2,[[0,[9,1]]]],10],11],[[[2,[1]],10],11],[[]],[12,[[2,[1]]]],[13,[[2,[1]]]],[1,[[2,[1]]]],0,[[[0,[14,15]],16],13],0,[[[2,[1]],17]],0,[[],4],[[]],[[[2,[1]]],1],[[[2,[1]]],8],[[[2,[1]]],8],0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,0,[[[2,[1]],[2,[1]]],[[19,[18]]]],0,0,0,0,[[[2,[1]],20],6],0,0,[[[2,[1]],[2,[1]]]],0,0,0,0,0,0,[[]],[[],21],[[],6],[[],6],[[],22],0,0,0,0,[[]],0,0,0,0,0,0,0,[23,[[25,[24]]]],[[]],[[]],[[],23],[4],[4],[4],[[[23,[9,9]],10],11],[[]],[[[23,[[27,[[0,[14,26,15]]]],[0,[26,14]],28]],[0,[14,26,15]]],19],[[[23,[[27,[[0,[14,26,15]]]],[0,[26,14]],29]],[0,[14,26,15]]],[[19,[29]]]],[[[23,[[0,[26,14]],29]],[0,[26,14]],29],29],[[[23,[[0,[26,14]],29]],[0,[26,14]],30],29],[[[23,[[0,[26,14]],29]],[0,[26,14]],30],29],[[],4],[[[23,[[0,[26,14]],28]],[0,[26,14]],28]],[[[23,[[0,[26,14]],28]],[0,[26,14]],30]],[[[23,[[0,[26,14]],28]],[0,[26,14]],30]],[[]],[[[23,[[0,[26,14]],28]]],8],[[[23,[3]]],[[31,[3]]]],[[[23,[[0,[26,14]],28]]],4],[[[23,[[27,[[0,[14,26,15]]]],[0,[26,14]],28]],[0,[14,26,15]],30],19],[[],23],[[],6],[[],6],[[],22],[[]],0,0,0,[[],4],[32,31],0,0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]]],4],[[],[[37,[1,[0,[3,29]],29,[35,[1]]]]]],[[4,[39,[[38,[1,[35,[1]]]]]]],[[36,[1,[0,[3,29,7]],29,[35,[1]]]]]],[[]],[[]],[[]],[[]],[[[37,[[0,[3,1]],3,3,[0,[3,[35,[[0,[3,1]]]]]]]]],[[37,[[0,[3,1]],3,3,[0,[3,[35,[[0,[3,1]]]]]]]]]],[[[36,[[0,[3,1]],[0,[3,29]],3,[0,[3,[35,[[0,[3,1]]]]]]]]],[[36,[[0,[3,1]],[0,[3,29]],3,[0,[3,[35,[[0,[3,1]]]]]]]]]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[[[37,[[0,[9,1]],9,9,[0,[9,[35,[[0,[9,1]]]]]]]],10],11],0,[[]],[[]],[[[40,[[0,[3,29]],29,[35,[1]]]],[32,[1]]],[[37,[1,[0,[3,29]],29,[35,[1]]]]]],[[4,[41,[[40,[[0,[3,29,7]],29,[35,[1]]]]]],[32,[1]],[39,[[38,[1,[35,[1]]]]]]],[[31,[[36,[1,[0,[3,29,7]],29,[35,[1]]]]]]]],[[[36,[1,[0,[3,29,7]],29,[35,[1]]]]],[[32,[1]]]],[[],4],[[],4],0,0,[[]],[[]],0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[41,[1]]],[[31,[1]]]],0,0,[[[37,[1,[0,[7,9]],[35,[1]]]],[37,[1,[0,[7,9]],[35,[1]]]]],8],[[[36,[1,[0,[7,9,29]],[35,[1]]]],[36,[1,[0,[7,9,29]],[35,[1]]]]],8],[[],4],[[[36,[1,[33,[1]],29,[35,[1]]]]],[[31,[1]]]],[[[36,[1,[33,[1]],29,[35,[1]]]]],4],0,0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[42,[1]]],[[6,[43]]]],[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[42,[1]],[41,[[44,[1]]]]],[[6,[[31,[[44,[1]]]],43]]]],[[[36,[1,[0,[3,29,7]],29,[35,[1]]]],[42,[1]],[32,[1]],[45,[1]],[45,[1]],[46,[1]],[41,[[37,[1,[33,[1]],[34,[1]],[35,[1]]]]]],[47,[1]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[[36,[33,34,[35,[48]]]],[50,[49]],[51,[49]]],[[6,[8,43]]]],[[]],[[]],0,0,0,0,[[[42,[52]],[44,[52]],[44,[52]]],[[6,[53,43]]]],0,[[[42,[1]],1],[[6,[[44,[1]],43]]]],0,0,[[]],[[]],0,0,0,0,[[[47,[[0,[3,1]]]]],[[47,[[0,[3,1]]]]]],[[]],0,0,0,[4],[4],[4],0,0,0,0,0,0,0,[[]],0,0,[[],4],[[]],0,0,0,0,[[[42,[1]],[32,[1]]],[[6,[[47,[1]],43]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,[[],6],[[],6],[[],22],0,0,[[]],0,0,0,[[[42,[1]],30],[[6,[[45,[1]],43]]]],[[[42,[1]],30],[[6,[[46,[1]],43]]]],[[[42,[1]],[54,[1]]],[[6,[[45,[1]],43]]]],[[[42,[1]],[55,[1]]],[[6,[[46,[1]],43]]]],[[[42,[1]],[32,[1]],[56,[1]]],[[6,[[46,[1]],43]]]],[[[42,[1]],[32,[1]],[57,[1]]],[[6,[[45,[1]],43]]]],[[[42,[1]],[32,[1]],30],[[6,[[46,[1]],43]]]],[[[45,[1]],[42,[1]],[45,[1]]],[[6,[53,43]]]],[[[46,[1]],[42,[1]],[46,[1]]],[[6,[53,43]]]],[[[42,[1]],[58,[1]]],[[6,[[45,[1]],43]]]],[[[45,[1]],[42,[1]],1],[[6,[53,43]]]],[[[42,[1]],[32,[1]],30],[[6,[[45,[1]],43]]]],[[[42,[1]],1,[44,[1]]],[[6,[[45,[1]],43]]]],[[[45,[1]],[42,[1]],1],[[6,[53,43]]]],[[[46,[1]],[42,[1]],1],[[6,[53,43]]]],[[[45,[1]],[42,[1]],[32,[1]]],[[6,[43]]]],[[],[[59,[44]]]],[[[45,[1]]],[[59,[[44,[1]]]]]],[[[46,[1]]],[[59,[[44,[1]]]]]],[[[42,[1]],[32,[1]],53],[[6,[[45,[1]],43]]]],[[[42,[1]],[19,[[57,[1]]]],[32,[1]]],[[6,[[45,[1]],43]]]],[[[42,[1]],[19,[[56,[1]]]],[32,[1]]],[[6,[[46,[1]],43]]]],[[]],[[]],[[]],[[]],[[4,[41,[[44,[1]]]]],[[45,[1]]]],[[4,[41,[[44,[1]]]]],[[46,[1]]]],[[[45,[[0,[3,52]]]]],[[45,[[0,[3,52]]]]]],[[[46,[[0,[3,1]]]]],[[46,[[0,[3,1]]]]]],[[]],[[]],[[[42,[1]],[47,[1]],[32,[1]],[44,[1]],[45,[1]]],[[6,[[45,[1]],43]]]],[[[42,[1]],[47,[1]],[32,[1]],[45,[1]],[45,[1]]],[[6,[[45,[1]],43]]]],[[[42,[1]],[47,[1]],[45,[1]],[45,[1]],60,[0,[[61,[1]],60,[0,[1,[45,[1]]]]]],53],[[6,[[45,[1]],43]]]],[[[42,[1]],[47,[1]],[32,[1]],[45,[1]],[45,[1]],[45,[1]]],[[6,[[45,[1]],43]]]],[[[42,[1]],[47,[1]],[32,[1]],[41,[[45,[1]]]]],[[6,[[45,[1]],43]]]],[[[42,[1]],62,[44,[1]],[59,[63]],[0,[[64,[1]],62,[0,[1,[44,[1]]]]]],53],[[6,[[46,[1]],43]]]],[[[42,[1]],62,[44,[1]],[59,[63]],[0,[[64,[1]],62,[0,[1,[44,[1]]]]]]],[[6,[43]]]],[[[42,[1]],[47,[1]],[32,[1]],[45,[1]],[45,[1]]],[[6,[[45,[1]],43]]]],[[[42,[1]],[47,[1]],[32,[1]],[45,[1]],[46,[1]]],[[6,[[45,[1]],43]]]],[4],[4],[4],[4],[4],[4],[[[45,[1]],[42,[1]],[45,[1]]]],[[[46,[1]],[42,[1]],[46,[1]]]],[[[46,[1]],[32,[1]]],21],[[[45,[1]],[32,[1]]],21],[[[45,[1]],10],11],[[[46,[1]],10],11],[[]],[[]],[[[44,[1]],[44,[1]]],[[45,[1]]]],[[[44,[1]],[44,[1]]],[[46,[1]]]],[[[46,[1]],[32,[1]]],[[19,[[65,[1]]]]]],[[[46,[1]],[32,[1]]],[[19,[[56,[1]]]]]],[[[46,[1]],[32,[1]]],[[19,[[55,[1]]]]]],[[[45,[1]]],[[44,[1]]]],[[[46,[1]]],[[44,[1]]]],[[[45,[1]],[42,[1]],53,[45,[1]]],[[6,[43]]]],[[],4],[[],4],[[]],[[]],[[[45,[1]],[42,[1]]],[[6,[53,43]]]],[[[45,[1]],[42,[1]]],[[6,[53,43]]]],[[[45,[1]],[42,[1]]],[[6,[53,43]]]],[[[45,[1]],[42,[1]]],[[6,[53,43]]]],[[[45,[1]],[42,[1]],[47,[1]]],[[6,[53,43]]]],[[[45,[1]],[42,[1]]],[[6,[53,43]]]],[[[45,[1]],[42,[1]]],[[6,[53,43]]]],[[[45,[1]],[42,[1]]],[[6,[53,43]]]],[[[45,[1]],[42,[1]]],[[6,[53,43]]]],[[[45,[1]],[42,[1]]],[[6,[53,43]]]],[[[42,[1]],53,[45,[1]],[45,[1]]],[[6,[[45,[1]],43]]]],[[[42,[1]],53,[46,[1]],[46,[1]]],[[6,[[46,[1]],43]]]],[[[42,[1]],53,[54,[1]],[54,[1]]],[[6,[[45,[1]],43]]]],[[[45,[1]],[32,[1]]],[[19,[[57,[1]]]]]],[[[45,[1]]],[[44,[1]]]],[[[46,[1]]],[[44,[1]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[]],[[]],[[[45,[1]],[32,[1]]],[[19,[[54,[1]]]]]],[[[19,[66]]],[[67,[[25,[21,21]]]]]],[[],67],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[65,[[0,[3,1]]]]],[[65,[[0,[3,1]]]]]],[[]],[[[65,[1]]],68],[4],[4],[4],[[[65,[[0,[7,1]]]],[65,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[65,[[0,[9,1]]]],10],11],[[[65,[1]],[32,[1]],69],70],[[]],[[[0,[14,15]],16],13],[[[65,[1]]],[[56,[1]]]],[[[65,[[0,[14,1]]]],17]],[[],4],[[[65,[1]],[32,[1]]]],[[]],[[]],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[],4],[[32,57,57,56],33],[[],8],[[32,[41,[57]]],57],[[42,47,32,[41,[45]],45,46],[[6,[43]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[71,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[71,[[0,[3,1]]]]],[[71,[[0,[3,1]]]]]],[[[72,[[0,[3,1]]]]],[[72,[[0,[3,1]]]]]],[[[73,[[0,[3,1]]]]],[[73,[[0,[3,1]]]]]],[[[74,[[0,[3,1]]]]],[[74,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[],[[75,[1]]]],[[],[[72,[[0,[76,1]]]]]],[[],[[73,[[0,[76,1]]]]]],[[],[[74,[[0,[76,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[72,[1]]]]]],[5,[[6,[[73,[1]]]]]],[5,[[6,[[74,[1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[[75,[1]]],1],[[[71,[1]]],4],[[[72,[1]]],4],[[[73,[1]]],4],[[[74,[1]]],4],[[[71,[1]],[32,[1]],[57,[1]],[57,[1]],[56,[1]]],[[33,[1]]]],[[[77,[9]],10],11],[[[71,[[0,[9,1]]]],10],11],[[[72,[[0,[9,1]]]],10],11],[[[73,[[0,[9,1]]]],10],11],[[[74,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[[73,[1]]],[[71,[1]]]],[[[74,[1]]],[[71,[1]]]],[[[72,[1]]],[[71,[1]]]],[[]],[[]],[[]],[[]],[[[71,[1]]],8],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[75,[1]],1,1],[[6,[8,[77,[1]]]]]],[[[32,[1]],[38,[1,[71,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[75,[1]]],4],[[[75,[1]],1],[[6,[[19,[1]],[77,[1]]]]]],[[[32,[1]]],[[75,[1]]]],[[[32,[1]],4],[[75,[1]]]],[[[75,[1]],1,1],[[6,[[77,[1]]]]]],[[[75,[1]],1],[[6,[[78,[1]],[77,[1]]]]]],[[[75,[1]]],1],[[[75,[1]],4],4],[[[72,[1]],20],6],[[[73,[1]],20],6],[[[74,[1]],20],6],[[[71,[1]],[32,[1]],[41,[[57,[1]]]]],[[57,[1]]]],[[[72,[1]],[32,[1]],[41,[[57,[1]]]]],[[57,[1]]]],[[[73,[1]],[32,[1]],[41,[[57,[1]]]]],[[57,[1]]]],[[[74,[1]],[32,[1]],[41,[[57,[1]]]]],[[57,[1]]]],[[[71,[1]],[42,[1]],[47,[1]],[32,[1]],[41,[[45,[1]]]],[45,[1]],[46,[1]]],[[6,[43]]]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[[78,[1]],1,1,1,[79,[1]]],8],[[[80,[1]],1,1,1,[19,[1]],1,[79,[1]]],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[81,81],[[[82,[[0,[3,1]]]]],[[82,[[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[83,10],11],[[83,10],11],[[81,10],11],[[81,10],11],[[[82,[[0,[9,1]]]],10],11],[[[82,[1]],10],11],[84,83],[[]],[85,83],[43,83],[81,83],[[]],[85,81],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[86],[86],[86],[83,[[19,[87]]]],[81,[[19,[87]]]],[[]],[[]],[[],21],[[],21],[[],21],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[33,[[0,[3,1]]]]],[[33,[[0,[3,1]]]]]],[[[40,[[0,[3,29]],[0,[3,29]],3]]],[[40,[[0,[3,29]],[0,[3,29]],3]]]],[88,88],[[[34,[[0,[3,1]]]]],[[34,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],0,[[],88],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[88]]]],[4],[4],[4],[4],[4],[4],[[[32,[1]]],[[57,[1]]]],0,[[[33,[[0,[7,1]]]],[33,[[0,[7,1]]]]],8],[[[40,[[0,[7,29]],[0,[7,29]],7]],[40,[[0,[7,29]],[0,[7,29]],7]]],8],[[88,88],8],[[[34,[[0,[7,1]]]],[34,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[89,[1,[35,[1]]]]],[[6,[81]]]],[[[32,[1]],90],[[6,[[57,[1]],81]]]],0,[[[33,[[0,[9,1]]]],10],11],[[[33,[1]],[32,[1]],69],70],[[[33,[1]],10],[[6,[91]]]],[[[40,[[0,[9,29]],[0,[9,29]],9]],10],11],[[88,10],11],[[[92,[[0,[9,29]],[0,[9,1]],[0,[9,[35,[[0,[9,1]]]]]]]],10],11],[[[34,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[[56,[1]]],88],[[]],[[]],[[[57,[1]],[57,[1]],[32,[1]],4,93,[38,[1,[35,[1]]]]],[[6,[[31,[[40,[[33,[1]],[34,[1]],[35,[1]]]]]],81]]]],[[[89,[1,[35,[1]]]]],[[6,[[31,[[40,[[33,[1]],[34,[1]],[35,[1]]]]]],81]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[89,[1,[35,[1]]]]],[[33,[1]]]],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[[33,[1]]],8],[[[40,[[33,[1]],29,[35,[1]]]]],8],[88,8],[[],8],[[[33,[1]]],8],[88,8],[88,8],[[],8],[[[33,[1]]],8],[88,8],[[[89,[1,[35,[1]]]]],[[6,[[94,[[92,[[34,[1]],1,[35,[1]]]]]],81]]]],0,[[32,4]],[[[33,[1]],[32,[1]],4]],[[[40,[[33,[1]],29,[35,[1]]]],[32,[1]]]],[[[33,[1]],[32,[1]]],[[19,[[57,[1]]]]]],[[[57,[1]],[57,[1]],[32,[1]],4,[38,[1,[35,[1]]]]],[[89,[1,[35,[1]]]]]],[[[92,[[34,[1]],1,[35,[1]]]]],19],0,[[[40,[[33,[1]],29,[35,[1]]]],[40,[[33,[1]],29,[35,[1]]]]],8],[[15,32,38],[[6,[81]]]],[[[33,[1]],[32,[1]],[38,[1,[35,[1]]]]],[[6,[81]]]],[[88,20],6],[[[41,[[40,[[33,[1]],29,[35,[1]]]]]]],4],[[],88],[[[33,[1]]],88],[[88,[32,[1]]],[[19,[[56,[1]]]]]],[[[33,[1]],[32,[1]]],[[31,[1]]]],[[]],[[]],[[]],[[]],[[],21],[[[33,[1]],[32,[1]]],[[6,[[31,[1]],85]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[38,[1,[35,[1]]]],[96,[[95,[1,[35,[1]]]]]],[32,[1]]]],[[[38,[1,[35,[1]]]],[96,[97]],[96,[[35,[1]]]],[32,[1]]]],[[[98,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[99,[[0,[3,1]]]]],[[99,[[0,[3,1]]]]]],[[[98,[[0,[3,1]]]]],[[98,[[0,[3,1]]]]]],[[[38,[[0,[3,1]],[0,[3,[35,[[0,[3,1]]]]]]]]],[[38,[[0,[3,1]],[0,[3,[35,[[0,[3,1]]]]]]]]]],[[]],[[]],[[]],[[[38,[1,[35,[1]]]]],[[25,[97]]]],[[],[[38,[[0,[76,1]],[0,[76,[35,[[0,[76,1]]]]]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[99,[1]]]]]],[5,[[6,[[98,[[0,[100,1]]]]]]]],[5,[[6,[[38,[[0,[100,1]],[0,[100,[35,[[0,[100,1]]]]]]]]]]]],[4],[4],[4],[4],[[[99,[1]]],4],[[[98,[1]]],4],[[[98,[1]],[32,[1]],[57,[1]],[57,[1]],[56,[1]]],[[33,[1]]]],[[[99,[[0,[9,1]]]],10],11],[[[98,[[0,[9,1]]]],10],11],[[[38,[[0,[9,1]],[0,[9,[35,[[0,[9,1]]]]]]]],10],11],[[]],[[],[[95,[1,[35,[1]]]]]],[[]],[[]],[[[99,[1]]],[[98,[1]]]],[[]],[[[98,[1]]],8],[[[38,[1,[35,[1]]]]],8],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[38,[1,[35,[1]]]]],8],[[[38,[1,[35,[1]]]]],21],[[[38,[1,[35,[1]]]],[32,[1]],[57,[1]]],19],[[[38,[1,[35,[1]]]]],4],[[[96,[97]],[96,[[35,[1]]]]],[[95,[1,[35,[1]]]]]],[[],[[38,[1,[35,[1]]]]]],[[[32,[1]],[31,[[96,[[95,[1,[35,[1]]]]]]]]],[[38,[1,[35,[1]]]]]],[[[99,[1]],20],6],[[[98,[[0,[101,1]]]],20],6],[[[38,[[0,[101,1]],[0,[101,[35,[[0,[101,1]]]]]]]],20],6],[[[99,[1]],[32,[1]],[41,[[57,[1]]]]],[[57,[1]]]],[[[98,[1]],[32,[1]],[41,[[57,[1]]]]],[[57,[1]]]],[[[98,[1]],[42,[1]],[47,[1]],[32,[1]],[41,[[45,[1]]]],[45,[1]],[46,[1]]],[[6,[43]]]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[102,[1]],[42,[1]],[32,[1]]],[[6,[43]]]],[[[42,[1]],[32,[1]]],[[6,[43]]]],[[[42,[1]],[19,[[102,[1]]]],[32,[1]]],[[6,[43]]]],[[[103,[1]]],[[19,[90]]]],[[]],[[]],[[]],[[]],[[[103,[[0,[3,1]]]]],[[103,[[0,[3,1]]]]]],[[[102,[[0,[3,1]]]]],[[102,[[0,[3,1]]]]]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[[[103,[[0,[7,1]]]],[103,[[0,[7,1]]]]],8],[[[102,[[0,[7,1]]]],[102,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[103,[[0,[9,1]]]],10],11],[[[103,[1]],[32,[1]],69],70],[[[102,[[0,[9,1]]]],10],11],[[]],[[]],[[[0,[14,15]],16],13],[[[102,[1]],17]],[[[42,[1]],[32,[1]],[45,[1]],[46,[1]]],[[6,[[44,[1]],43]]]],[[],4],[[],4],[[]],[[]],[[[103,[1]]],8],[[[103,[1]]],8],[[[103,[1]]],8],[[[103,[1]]],8],[[[103,[1]]],8],[[[103,[1]]],8],[[[103,[1]]],8],[[[103,[1]]],8],[[[103,[1]]],8],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[104,104],[[[105,[[0,[3,1]]]]],[[105,[[0,[3,1]]]]]],[[]],[[]],[[[105,[1]],[105,[1]]],18],[4],[4],[4],[4],[5,[[6,[104]]]],[5,[[6,[[105,[1]]]]]],[4],[4],[[104,104],8],[[[105,[[0,[7,1]]]],[105,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[104,10],11],[[104,10],11],[[[105,[[0,[9,1]]]],10],11],[[]],[[]],[[[41,[106]]],19],[107],[68],[108],[109],[110],[111],[112],[13],[[],104],[[[0,[14,15]],16],13],[[[105,[1]],17]],[[],21],[[],4],[[],4],[[]],[[]],[[],8],[[]],[[]],[[[105,[1]],[105,[1]]],[[19,[18]]]],[[104,20],6],[[[105,[1]],20],6],[[],[[31,[106]]]],[[],[[19,[107]]]],[[],[[19,[68]]]],[[],[[19,[108]]]],[[],[[19,[109]]]],[[],[[19,[110]]]],[[]],[[]],[[],21],[[],[[19,[111]]]],[[],[[19,[112]]]],[[],112],[[],[[19,[13]]]],[[],13],[[],21],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[113,[1]]],[[115,[1,114]]]],[[[113,[1]]],[[115,[1,116]]]],[[[113,[1]]],[[115,[1,117]]]],[[[113,[1]]],[[115,[1,118]]]],[119,119],[[]],[[[79,[1]],[59,[1]]],1],[[[113,[1]],119],[[120,[1]]]],0,0,[[],[[113,[1]]]],[[],[[79,[[0,[76,1]]]]]],[[],[[121,[[0,[76,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[119,10],11],[[[113,[[0,[9,1]]]],10],11],[[[79,[[0,[9,1]]]],10],11],[[[121,[[0,[9,1]]]],10],11],[[]],[[]],[4,119],[[]],[[]],[[]],[[[121,[1]],[105,[1]]],[[19,[[59,[1]]]]]],[[[79,[1]],[59,[1]]],1],[[[79,[1]],[59,[1]]],1],[[[79,[1]],[59,[1]]],1],[[[79,[1]],[59,[1]]],1],[[],4],[[],4],[[],4],[[],4],[[],4],[[[121,[1]],[105,[1]],[59,[1]]]],[[]],[[]],[[]],[[]],[[]],[[],59],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[123,[[0,[122,76,29,26,9]],29,1]]],[[31,[[0,[122,76,29,26,9]]]]]],[[[123,[[0,[122,76,29,26,9]],29,1]],[32,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[124,[1]],[32,[1]],[57,[1]]],[[6,[85]]]],[[[126,[[125,[1]]]],[32,[1]],[57,[1]]],[[6,[85]]]],[[[124,[1]],[32,[1]],[57,[1]]],[[6,[85]]]],[[[126,[[125,[1]]]],[32,[1]],[57,[1]]],[[6,[85]]]],[[[61,[1]],60,[32,[1]],[57,[1]]],[[6,[85]]]],[[[123,[60,[125,[1]],1]],60,[32,[1]],[57,[1]]],[[6,[85]]]],[[[61,[1]],60,[32,[1]],[57,[1]]],[[6,[81]]]],[[[123,[60,[125,[1]],1]],60,[32,[1]],[57,[1]]],[[6,[81]]]],0,[[[126,[3]]],[[126,[3]]]],[[[125,[[0,[3,1]]]]],[[125,[[0,[3,1]]]]]],[[[127,[[0,[3,1]]]]],[[127,[[0,[3,1]]]]]],[60,60],[62,62],[[[123,[[0,[3,122]],3,[0,[3,1]]]]],[[123,[[0,[3,122]],3,[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[124,[1]],[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[126,[[125,[1]]]],[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,[[[61,[1]],60,[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[123,[60,[125,[1]],1]],60,[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,0,[[],60],[[],62],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[126,[7]],[126,[7]]],8],[[[125,[[0,[7,1]]]],[125,[[0,[7,1]]]]],8],[[[127,[[0,[7,1]]]],[127,[[0,[7,1]]]]],8],[[60,60],8],[[62,62],8],[[[123,[[0,[7,122]],7,[0,[7,1]]]],[123,[[0,[7,122]],7,[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[61,[1]],60,[57,[1]],[57,[1]],[57,[1]],[32,[1]]],[[57,[1]]]],[[[123,[60,[125,[1]],1]],60,[57,[1]],[57,[1]],[57,[1]],[32,[1]]],[[57,[1]]]],[[[128,[1]],[32,[1]],[56,[1]]],[[19,[[65,[1]]]]]],[[[126,[[127,[1]]]],[32,[1]],[56,[1]]],[[19,[[65,[1]]]]]],[[[64,[1]],62,[32,[1]],[56,[1]]],[[19,[[65,[1]]]]]],[[[123,[62,[127,[1]],1]],62,[32,[1]],[56,[1]]],[[19,[[65,[1]]]]]],[[[126,[9]],10],11],[[[125,[[0,[9,1]]]],10],11],[[[127,[[0,[9,1]]]],10],11],[[60,10],11],[[62,10],11],[[[123,[[0,[9,122]],9,[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[[123,[[0,[122,76,29,26,9]],29,1]],[0,[122,76,29,26,9]]],[[126,[29]]]],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[60,17]],[[62,17]],[[],4],[60,4],[62,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[128,[1]],[32,[1]],[65,[1]]],[[56,[1]]]],[[[126,[[127,[1]]]],[32,[1]],[65,[1]]],[[56,[1]]]],[[[64,[1]],62,[32,[1]],[65,[1]]],[[56,[1]]]],[[[123,[62,[127,[1]],1]],62,[32,[1]],[65,[1]]],[[56,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],[[123,[[0,[122,76,29,26,9]],29,1]]]],[[],[[123,[[0,[122,76,29,26,9]],29,1]]]],[[[126,[29]]],[[123,[[0,[122,76,29,26,9]],29,1]]]],0,[[[124,[1]],[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[126,[[125,[1]]]],[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[61,[1]],60,[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[123,[60,[125,[1]],1]],60,[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[123,[[0,[122,76,29,26,9]],29,1]]],[[31,[[126,[29]]]]]],[[[123,[[0,[122,76,29,26,9]],29,1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[123,[[0,[122,76,29,26,9]],29,1]]],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[129,[41,[0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[129,[31,[[0,[1]]]],[0,[1]],[0,[1]]],67],[[129,[31,[[0,[1]]]],[0,[1]],93],67],[129,67],[129,129],[130,130],[131,131],[132,132],[133,133],[134,134],[135,135],[136,136],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[129,129],8],[[130,130],8],[[131,131],8],[[132,132],8],[[133,133],8],[[134,134],8],[[135,135],8],[[136,136],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[129,10],11],[[130,10],11],[[130,10],11],[[131,10],11],[[131,10],11],[[132,10],11],[[132,10],11],[[133,10],11],[[134,10],11],[[135,10],11],[[136,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[1]],[0,[1]]],[[19,[133]]]],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[130,17]],[[131,17]],[[132,17]],[[133,17]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[130,137],[[21,[31,[130]],4,134],[[67,[129]]]],[[129,[0,[1]]],4],[129,4],[[129,[42,[1]],[0,[1]],[0,[1]]],67],[131,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[133,[0,[1]]],[[0,[1]]]],[[],21],[[],21],[[],21],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[129,4],[[67,[129]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[138,138],[[]],[4],[4],[4],0,[[138,10],11],[[138,10],11],[[]],[[],4],[[]],0,[86],0,0,[[]],[[],21],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,[139,90],[[]],[[]],[139,139],[[]],[139,107],[[139,140],[[141,[1,[31,[106]]]]]],[[],139],[4],[4],[4],[[139,[142,[[41,[106]]]]],21],[[139,139],8],[[],8],[[],8],[[],8],[[139,10],11],[[]],[[],4],[[]],[[139,107],8],[[],93],[140,[[141,[1,139]]]],[[],93],[[],93],[139,93],[[],93],[139,[[143,[93]]]],[139,93],[[],93],[139,112],[[]],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,[[[0,[144,3,145]],90,[146,[[0,[144,3,145]],1]]],[[146,[[0,[144,3,145]],1]]]],[[[0,[144,3,145]],147,[146,[[0,[144,3,145]],1]]],[[146,[[0,[144,3,145]],1]]]],[[]],[[]],[[]],[[]],[[[148,[[0,[3,1]]]]],[[148,[[0,[3,1]]]]]],[[[146,[[0,[3,145]],[0,[3,1]]]]],[[146,[[0,[3,145]],[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[[[148,[[0,[7,1]]]],[148,[[0,[7,1]]]]],8],[[[146,[[0,[7,145]],[0,[7,1]]]],[146,[[0,[7,145]],[0,[7,1]]]]],8],0,0,[[[148,[[0,[9,1]]]],10],11],[[[148,[1]],10],11],[[[146,[140,1]],10],11],[[[146,[[0,[9,145]],[0,[9,1]]]],10],11],[[]],[[]],[[[0,[144,3,145]],147],[[146,[[0,[144,3,145]],1]]]],[[],4],[[],4],0,[[]],[[]],[[[148,[1]]],8],[[[149,[145,[146,[145,1]]]],93],[[149,[145,[146,[145,1]]]]]],[[145,[148,[1]]],[[146,[145,1]]]],[[19,145,[148,[1]]],[[149,[145,[146,[145,1]]]]]],[[[146,[[0,[144,3,145]],1]],[146,[[0,[144,3,145]],1]]],[[146,[[0,[144,3,145]],1]]]],[[6,145,93],[[149,[145,[146,[145,1]]]]]],[[145,[148,[1]]],[[149,[145,[146,[145,1]]]]]],[[]],[[]],[[],21],[[],21],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[]],[[]],0,0,0,[[]],[[]],[[]],[150,150],[[]],[4],[4],[4],[[150,150],8],[[],8],[[],8],[[],8],[[150,10],11],[[]],[[140,140],150],[[],4],[[]],[[90,4,4,4,4],21],[[]],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[151,151],[[]],[4],[4],[4],[[151,151],8],[[],8],[[],8],[[],8],[[151,10],11],[[]],[[],4],[[]],[[107,90],93],[[],93],[[107,8,90],93],[[107,8,90],93],[107,93],[[107,8,90],93],[[107,8,90],93],[[],93],[[]],[[],6],[[],6],[[],22],[[]],[[],93],[[],93],[[],93],[140,[[141,[1,140]]]],[[],93],[[],93],[[],93],[139,93],[[],93],[[],93],[97,93],[140,[[141,[1,[31,[140]]]]]],[140,[[141,[1,[31,[140]]]]]],[[],93],[[],93],[90,93],[90,93],[[],93],[[],93],[[],93],0,0,0,0,[4,4],[4,4],0,[[],38],[4,4],[4,8],[4,8],[[4,38]],0,[[[41,[[36,[33,34]]]]],[[6,[31,43]]]],[[],4],[[],31],[[],4],[[],4],[31,[[6,[8,43]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[154,[[0,[3,152,153]]]]],[[154,[[0,[3,152,153]]]]]],[[]],[[4,[39,[[38,[48,[35,[48]]]]]]],[[6,[[155,[49]],43]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[154,[[0,[152,153]]]]]]]],[4],[4],[4],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[156,[49,[35,[48]],48]]],[[38,[48,[35,[48]]]]]],[[4,[38,[48,[35,[48]]]]],[[156,[49,[35,[48]],48]]]],[[[156,[49,[35,[48]],48]],[157,[49]],[158,[49]],[57,[48]],[57,[48]],[32,[48]],4,[0,[159,3]],[39,[[38,[48,[35,[48]]]]]]],[[6,[83]]]],0,0,[[[156,[49,[35,[48]],48]],[36,[48,[33,[48]],[34,[48]],[35,[48]]]],[157,[49]],159],[[6,[[51,[49]],43]]]],[[[156,[49,[35,[48]],48]]],4],0,[[[154,[[0,[152,153]]]],20],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[[50,[49]],[160,[49]],[41,[48]],[41,[48]],[161,[49]],[0,[159,162]]],[[6,[8,43]]]],[[[36,[48,[33,[48]],[34,[48]],[35,[48]]]],[50,[49]],[51,[49]]],[[6,[8,43]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[164,[163,[35,[163]]]],[165,[163,[35,[163]]]]],[[6,[[164,[163,[35,[163]]]],83]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[165,[163,[35,[163]]]]]]]],[5,[[6,[[164,[[0,[100,163]],[0,[100,[35,[[0,[100,163]]]]]]]]]]]],[4],[4],[4],[[[166,[163,[35,[163]]]],[165,[163,[35,[163]]]],[57,[163]],[57,[163]],[32,[163]],4,[39,[[38,[163,[35,[163]]]]]]],[[6,[83]]]],[[[166,[[0,[9,163]],[0,[9,[35,[[0,[9,163]]]]]]]],10],11],[[]],[[]],[[]],[[[166,[163,[35,[163]]]],[57,[163]],[57,[163]],[32,[163]],4,[38,[163,[35,[163]]]]],[[6,[[31,[[40,[[33,[163]],[34,[163]],[35,[163]]]]]],83]]]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[166,[163,[35,[163]]]]],[[38,[163,[35,[163]]]]]],[[4,[38,[163,[35,[163]]]]],[[166,[163,[35,[163]]]]]],[[[166,[163,[35,[163]]]],[165,[163,[35,[163]]]],[41,[[40,[[33,[163]],[34,[163]],[35,[163]]]]]],[32,[163]],[39,[[38,[163,[35,[163]]]]]]],[[6,[83]]]],[[[165,[163,[35,[163]]]],[32,[163]],[41,[[167,[163,[35,[163]]]]]],4,[31,[163]],[39,[[38,[163,[35,[163]]]]]]],[[6,[[164,[163,[35,[163]]]],83]]]],[[4,[39,[[38,[163,[35,[163]]]]]]],[[165,[163,[35,[163]]]]]],[[[166,[163,[35,[163]]]]],4],[[[165,[163,[35,[163]]]],20],6],[[[164,[[0,[101,163]],[0,[101,[35,[[0,[101,163]]]]]]]],20],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[[164,[163,[35,[163]]]],[165,[163,[35,[163]]]],4,[41,[163]],[41,[163]]],[[6,[8,84]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[[42,[1]],[32,[1]],[19,[[57,[1]]]]],[[6,[43]]]],[[[57,[1]]],[[19,[[57,[1]]]]]],[[[57,[1]]],[[19,[[57,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[168,168],[[[57,[[0,[3,1]]]]],[[57,[[0,[3,1]]]]]],[[[56,[[0,[3,1]]]]],[[56,[[0,[3,1]]]]]],[[]],[[]],[[]],[[168,168],18],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[168,168],8],[[[57,[[0,[7,1]]]],[57,[[0,[7,1]]]]],8],[[[56,[[0,[7,1]]]],[56,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[168,10],11],[[[57,[1]],[32,[1]],69],70],[[[57,[[0,[9,1]]]],10],11],[[[56,[1]],[32,[1]],69],70],[[[56,[[0,[9,1]]]],10],11],[[]],[107,[[57,[1]]]],[[]],[[]],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[168,17]],[[[57,[1]],17]],[[[56,[1]],17]],[168,[[19,[4]]]],[[108,4],[[57,[1]]]],[[68,4],[[56,[1]]]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[57,[1]]],8],[[[57,[1]]],8],[[[56,[1]]],8],[[],8],[[[57,[1]]],8],[[[57,[1]]],8],[[[57,[1]]],8],[168,8],[168,8],[[[57,[1]]],8],[108,8],[[[57,[1]],108],8],[[],8],[[[57,[1]]],8],[4,168],[[68,168],[[56,[1]]]],[108,[[57,[1]]]],[68,[[56,[1]]]],[[108,4],[[57,[1]]]],[[68,4],[[56,[1]]]],[168,[[19,[4]]]],[[168,168],[[19,[18]]]],0,0,0,0,[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[]],[[]],[[]],0,[[4,[39,[[38,[163,[35,[163]]]]]],169],[[6,[[39,[[165,[163,[35,[163]]]]]],170]]]],[[],66],0,0,0,0,[[]],[[]],[4],[4],[4],[[170,10],11],[[170,10],11],[[]],[171,170],[172,170],[[],4],[[]],[86],[170,[[19,[87]]]],[[],21],[[],6],[[],6],[[],22],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[173,[[0,[3,1]],[0,[3,[35,[[0,[3,1]]]]]]]]],[[173,[[0,[3,1]],[0,[3,[35,[[0,[3,1]]]]]]]]]],[[]],[[],174],[[],174],0,[4],[4],[4],[4],[4],[4],0,[[[173,[1,[35,[1]]]],[57,[1]],[32,[1]]],67],[[]],[[]],[[32,[0,[[142,[175]],29]]],67],[[32,140,[0,[[142,[175]],29]]],[[67,[140]]]],[[32,[142,[175]]],67],[[32,57,[0,[[142,[175]],29]]],67],[[[173,[1,[35,[1]]]],[32,[1]],[57,[1]],[0,[[142,[175]],29]]],67],[[32,57],67],[[[173,[1,[35,[1]]]],[32,[1]],[57,[1]]],67],[[],4],[[],4],[[]],[[]],0,0,[[],21],[[],21],[[32,4,[19,[174]],38]],[[[32,[1]],4,[19,[174]],[38,[1,[35,[1]]]]],[[67,[[177,[1,[176,[1,[35,[1]]]],[35,[1]]]]]]]],[[[32,[1]],4,[19,[174]],[38,[1,[35,[1]]]]],[[173,[1,[35,[1]]]]]],[[[32,[1]],4,[19,[174]],[38,[1,[35,[1]]]]],[[173,[1,[35,[1]]]]]],[21,21],[[[173,[1,[35,[1]]]],21],21],[[],21],[[[173,[1,[35,[1]]]]],21],[[[19,[[142,[175]]]],[38,[[0,[1,100]],[35,[[0,[1,100]]]]]]],67],[[[38,[[0,[1,100]],[35,[[0,[1,100]]]]]]],67],[[[32,[1]],[177,[1,[176,[1,[35,[1]]]],[35,[1]]]],[19,[[142,[175]]]]],67],[[[177,[1,[176,[1,[35,[1]]]],[35,[1]]]]],67],[[]],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[]],[[]],0,0,0,0,[[[32,[1]],8],[[57,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[32,[1]],[57,[1]]],[[6,[[57,[1]],85]]]],0,[[[32,[1]],[57,[1]]],[[6,[85]]]],[[[32,[1]],[57,[1]]],[[6,[[57,[1]],85]]]],0,0,[85,85],[[[178,[[0,[3,1]]]]],[[178,[[0,[3,1]]]]]],[[[179,[[0,[3,1]]]]],[[179,[[0,[3,1]]]]]],[[]],[[]],[[]],0,0,[[[32,[1]],[57,[1]]],[[57,[1]]]],0,[[[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,[[[32,[1]],[57,[1]],[57,[1]]],8],0,0,0,[[],[[32,[1]]]],0,0,[4],[4],[4],[4],[4],[4],[4],[4],0,[4],[4],[4],[4],0,0,0,0,0,[[[32,[1]],[57,[1]]],[[19,[[103,[1]]]]]],[[[32,[1]],[57,[1]]],[[19,[107]]]],[[[32,[1]],[57,[1]]],19],[[[32,[1]],[57,[1]]],19],[[[32,[1]],[56,[1]]],[[19,[[65,[1]]]]]],[[[32,[1]],[57,[1]]],19],[[[32,[1]],[57,[1]]],[[19,[97]]]],[[[32,[1]],[57,[1]]],[[19,[[31,[[57,[1]]]]]]]],[[[32,[1]],[57,[1]]],[[19,[97]]]],[[[32,[1]],[57,[1]]],[[19,[[2,[1]]]]]],[[[32,[1]],[57,[1]]],19],[[[32,[1]],[57,[1]]],[[19,[21]]]],[[[32,[1]],[57,[1]]],[[19,[97]]]],[[[32,[1]],[57,[1]]],[[19,[97]]]],[[[32,[1]],[57,[1]]],19],[[[32,[1]],[57,[1]]],[[19,[[180,[1]]]]]],[[[32,[1]],[57,[1]]],[[19,[[102,[1]]]]]],[[[32,[1]],[57,[1]]],[[19,[12]]]],[[[32,[1]],[55,[1]]],[[19,[[56,[1]]]]]],[[[32,[1]],[54,[1]]],[[19,[[57,[1]]]]]],[[[32,[[0,[9,1]]]],10],11],[[85,10],11],[[85,10],11],[[[178,[[0,[9,1]]]],10],11],[[[179,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],0,[[[32,[1]]],[[57,[1]]]],[[[32,[1]]],[[179,[1]]]],[[[32,[1]]],[[56,[1]]]],[[[32,[1]]],[[56,[1]]]],[[[32,[1]]],[[56,[1]]]],[[[32,[1]]],[[56,[1]]]],[[[32,[1]],[56,[1]]],[[19,[[59,[1]]]]]],[[[32,[1]],[102,[1]]],[[19,[[59,[1]]]]]],[[[32,[1]],[142,[90]]],[[19,[[57,[1]]]]]],[[[32,[1]],108,1],[[19,[[57,[1]]]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]],[96,[[2,[1]]]]],[[19,[[57,[1]]]]]],[[[32,[1]],[57,[1]]],[[19,[[54,[1]]]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]],97],[[19,[[57,[1]]]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]],[56,[1]],[19,[[181,[1]]]]],[[6,[85]]]],[[[32,[1]],[57,[1]],[19,[[181,[1]]]]],[[6,[85]]]],0,0,[[[32,[1]],[56,[1]]],[[19,[[55,[1]]]]]],[[[32,[1]],[57,[1]]],[[19,[[54,[1]]]]]],[[[32,[1]],90],[[54,[1]]]],[[[32,[1]],97],[[54,[1]]]],[[[32,[1]],1,[57,[1]]],[[19,[[57,[1]]]]]],[[[32,[1]],1,[57,[1]]],[[57,[1]]]],0,[[[32,[1]]]],0,0,[[],4],[[],4],[[],4],[[],4],[[[32,[1]],107],[[57,[1]]]],[[[32,[1]],1,[57,[1]]],[[57,[1]]]],[[[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[32,[1]]],[[56,[1]]]],[[[32,[1]]],[[56,[1]]]],[[[32,[1]]],[[56,[1]]]],[[[32,[1]]],[[56,[1]]]],[[[32,[1]],[57,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[32,[1]],[41,[[57,[1]]]]],[[57,[1]]]],[[[32,[1]],108,1],[[57,[1]]]],[[[32,[1]],1],[[57,[1]]]],[[[32,[1]],1],[[57,[1]]]],[[[32,[1]],1],[[57,[1]]]],[[[32,[1]],1],[[57,[1]]]],[[[32,[1]],[96,[[2,[1]]]]],[[57,[1]]]],[[[32,[1]],1],[[57,[1]]]],[[[32,[1]],1],[[57,[1]]]],[[[32,[1]],1],[[57,[1]]]],[[[32,[1]],1],[[57,[1]]]],[[[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[32,[1]],[142,[90]]],[[57,[1]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]],97],[[57,[1]]]],[[[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[32,[1]],8],[[57,[1]]]],[[[32,[1]],[180,[1]]],[[57,[1]]]],[[[32,[1]],[102,[1]]],[[57,[1]]]],[[[32,[1]],13],[[57,[1]]]],[[[32,[1]],12],[[57,[1]]]],[[[32,[1]],[55,[1]],[181,[1]]],[[19,[[56,[1]]]]]],[[[32,[1]],[54,[1]],[181,[1]]],[[19,[[57,[1]]]]]],[[]],[[]],[[]],[[]],0,[[[32,[1]],[142,[90]]],[[57,[1]]]],0,0,0,0,0,0,0,[[[32,[1]],[41,[[57,[1]]]]],[[57,[1]]]],0,[[[32,[1]],[142,[90]]],[[57,[1]]]],[[[32,[1]],[56,[1]]],[[56,[1]]]],0,[[],[[32,[1]]]],[[[32,[1]]],[[179,[1]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]]],[[57,[1]]]],0,[[[32,[1]],[96,[[2,[1]]]]],[[57,[1]]]],0,0,0,0,0,[[[32,[1]],[57,[1]]],19],0,[[[32,[1]],[57,[1]]],[[6,[85]]]],0,0,[86],[[[178,[1]]],[[57,[1]]]],[[[32,[1]],[57,[1]],[57,[1]]],[[6,[8,85]]]],0,0,[[[32,[1]],90],[[6,[[57,[1]],138]]]],[[[32,[1]],140],[[6,[138]]]],[[[32,[1]],[57,[1]]],[[19,[[57,[1]]]]]],0,[[[32,[1]],[57,[1]]],[[6,[[57,[1]],85]]]],[[[32,[1]],[142,[90]]],[[57,[1]]]],0,[[[32,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,[[[32,[1]]],[[57,[1]]]],0,[[[32,[1]],[142,[90]]],[[57,[1]]]],0,[[[32,[1]]],[[57,[1]]]],[[[32,[1]]],[[57,[1]]]],0,0,0,[[]],[[]],[[]],[[],21],[[[32,[1]],[56,[1]]],[[19,[[182,[1]]]]]],[[[32,[1]],[57,[1]]],[[19,[[183,[1]]]]]],[[[32,[1]],[57,[1]]],[[6,[85]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],0,[[[32,[1]],13],[[57,[1]]]],0,[[[178,[1]]],1],[[]],[[]],[[]],[[]],[[[32,[1]],1,1],[[6,[[55,[1]],85]]]],0,[[[32,[1]],1,1],[[6,[[54,[1]],85]]]],0,[[[178,[1]]],[[54,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[97,97],[[19,[97]]]],[[]],[[]],[[]],[[]],[97,97],[184,184],[[]],[[]],[4],[4],[4],[4],[5,[[6,[97]]]],[[97,90],97],[97,[[19,[97]]]],[4],[4],[[97,97],8],[[184,184],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[90,21],[[97,[41,[[142,[90]]]]],97],[[97,10],11],[[97,10],11],[[184,10],11],[[184,10],11],[[]],[[]],[[[0,[14,15]],16],13],[[97,97],8],[[97,17]],[[],4],[[],4],[[]],[[]],[97,8],[97,8],[97,8],[107,8],[[[41,[[142,[90]]]]],97],[90,97],[[],[[25,[97,184]]]],[[[41,[[142,[90]]]]],97],[[],97],[[97,97],[[19,[18]]]],0,[97,21],[97,21],[97,8],[[],97],[[97,20],6],[[]],[[]],[[],21],[[],21],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[180,[[0,[3,1]]]]],[[180,[[0,[3,1]]]]]],[[]],[4],[4],[4],[[[180,[[0,[7,1]]]],[180,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[180,[[0,[9,1]]]],10],11],[[[180,[1]],10],11],[[]],[[],4],[[]],[150,[[180,[1]]]],[[]],[[],21],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],31],[[],[[31,[109]]]],[[],[[31,[110]]]],[[],[[31,[90]]]],[[108,[42,[1]]],[[6,[[44,[1]],43]]]],[[68,[42,[1]]],[[6,[[44,[1]],43]]]],[[109,[42,[1]]],[[6,[[44,[1]],43]]]],[[110,[42,[1]]],[[6,[[44,[1]],43]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[108,108],[68,68],[109,109],[110,110],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[108]]]],[5,[[6,[68]]]],[5,[[6,[109]]]],[5,[[6,[110]]]],[4],[4],[4],[4],[[108,108],8],[[68,68],8],[[109,109],8],[[110,110],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[108,10],11],[[108,10],11],[[68,10],11],[[68,10],11],[[109,10],11],[[109,10],11],[[110,10],11],[[110,10],11],[[]],[[]],[[]],[[]],[1,19],[1,[[19,[108]]]],[1,[[19,[68]]]],[1,[[19,[109]]]],[1,[[19,[110]]]],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[108,17]],[[68,17]],[[109,17]],[[110,17]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[108,8],[110,8],[[108,108],8],[108,8],[[109,109],[[19,[18]]]],[[110,110],[[19,[18]]]],[[108,20],6],[[68,20],6],[[109,20],6],[[110,20],6],[4,8],[[109,4],8],[[110,4],8],[[],90],[109,90],[110,90],[[],1],[108,1],[68,1],[109,1],[110,[[0,[[185,[13]],186]]]],[[]],[108],[68],[109],[110],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[111,[[6,[108]]]],[[],6],[[],6],[111,[[6,[68]]]],[[],6],[111,[[6,[109]]]],[[],6],[111,[[6,[110]]]],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],0,0,[[12,12],12],[[]],[[]],[[]],[12,12],[[]],[4],[4],[5,[[6,[12]]]],[[12,12],12],[4],[[12,12],8],[[],8],[[],8],[[],8],[[12,10],11],[[12,10],11],[13,12],[[]],[[],4],[[]],[12,8],[[12,12],12],[[12,12],[[19,[18]]]],[[12,12],12],[[12,20],6],[[12,12],12],[[]],[[],21],[[],6],[[],6],[[],22],[[]],0,[[32,69],70],[32,21],0,0,0,[[]],[[]],[[]],[4,106],[187,187],[[]],[4],[4],[4],[[187,187],8],[[],8],[[],8],[[],8],[[187,10],11],[[187,10],11],[[]],[[[41,[106]]],[[67,[187]]]],0,[[],4],[[]],[[[41,[106]]],[[19,[4]]]],0,[187,106],[106,8],[106,8],[187,[[31,[106]]]],[[]],[[],21],[4,[[31,[106]]]],0,[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,[[]],[[]],[188,189],[188,189],0,[4],[4],[4],[[189,10],11],[[189,10],11],[[]],0,[[],4],[[]],[86],0,[[],21],0,[[],6],[[],6],[[],22],[[]],0,[[]],[[]],[4],[4],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,90,[41,[90]],191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,90,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,90,[41,[90]],191],6],[[190,4,191],6],[[190,90,4,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,191],6],[[190,90,191],6],[4],[[190,10],11],[[]],[187,[[6,[100,189]]]],[187,190],[[],4],[[]],[190,8],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[192,6],[192,6],[192,6],[193,6],[194,6],[195,6],[195,6],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[196,8],[[196,8],6],[[196,[41,[106]]],6],[[196,107],6],[[192,[0,[101,15]]],6],[[192,[0,[101,15]]],6],[[196,197],6],[[196,198],6],[[192,[0,[101,15]]],6],[[194,[0,[101,15]]],6],[[195,90,[0,[101,15]]],6],[[195,90,[0,[101,15]]],6],[[196,199],6],[[196,200],6],[[196,201],6],[[196,202],6],[[193,[0,[101,15]]],6],[[196,[19,[4]]],6],[[196,90,[0,[101,15]]],6],[[196,90,112,90,[0,[101,15]]],6],[196,6],[[196,[19,[4]]],6],[[196,[0,[101,15]]],6],[[196,90],6],[[196,90,4],6],[[196,90,112,90,4],6],[[196,4],6],[[196,90,4],6],[[196,90,112,90,4],6],[[196,111],6],[[196,112],6],[[196,13],6],[[196,106],6],[196,6],[[196,90],6],[[196,90,112,90],6],[[193,[0,[101,15]]],6],[101,[[6,[187,189]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[182,[[0,[3,1]]]]],[[182,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[182,[[0,[100,1]]]]]]]],[4],[[[182,[[0,[7,1]]]],[182,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[182,[[0,[9,1]]]],10],11],[[]],[[[182,[1]]],[[59,[1]]]],[[],4],[[]],[[[182,[[0,[101,1]]]],20],6],[[]],[[],6],[[],6],[[],22],[[]],[[[182,[1]],[79,[1]]],[[55,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[183,[[0,[3,1]]]]],[[183,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[183,[[0,[100,1]]]]]]]],[4],[[[183,[[0,[7,1]]]],[183,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[183,[1]],10],11],[[[183,[[0,[9,1]]]],10],11],[[]],[[[32,[1]],[57,[1]]],[[19,[[183,[1]]]]]],[[],4],[[]],[[[183,[[0,[101,1]]]],20],6],[[]],[[],21],[[],6],[[],6],[[],22],[[]],[[[183,[1]],[79,[1]]],[[54,[1]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[[204,[[0,[3,203]],[0,[3,1]]]]],[[204,[[0,[3,203]],[0,[3,1]]]]]],[[]],[[[204,[203,1]],[204,[203,1]]],18],[4],[4],[5,[[6,[[204,[[0,[100,203]],[0,[100,1]]]]]]]],[4],[[[204,[[0,[7,203]],[0,[7,1]]]],[204,[[0,[7,203]],[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[204,[[0,[203,188]],1]],10],11],[[[204,[[0,[9,203]],[0,[9,1]]]],10],11],[[]],[90,[[6,[[204,[203,1]],205]]]],[90,[[6,[[54,[1]],85]]]],[90,[[6,[[204,[108,1]],85]]]],[[203,1],[[204,[203,1]]]],[[[0,[14,15]],16],13],[[[204,[203,1]],17]],[[],4],[[]],[[[204,[203,1]]],[[59,[1]]]],[[[204,[203,1]],[204,[203,1]]],[[19,[18]]]],[[[204,[203,1]]]],[[[204,[[0,[101,203]],[0,[101,1]]]],20],6],[[[204,[203,1]]],203],[[[204,[203,1]]],1],[[[204,[203,1]]],21],[[]],[[],21],[[],6],[[],6],[[],22],[[[204,[203,1]]],1],[[]],0,[[]],[[]],[[]],[[[181,[[0,[3,1]]]]],[[181,[[0,[3,1]]]]]],[[]],0,[[],[[181,[[0,[76,1]]]]]],[4],[4],[5,[[6,[[181,[[0,[100,1]]]]]]]],[4],[[[181,[[0,[7,1]]]],[181,[[0,[7,1]]]]],8],0,[[[181,[[0,[9,1]]]],10],11],[[]],[[[181,[1]],[55,[1]]],[[19,[[182,[1]]]]]],[[[181,[1]],[54,[1]]],[[19,[[183,[1]]]]]],[[[54,[1]]],[[19,[[183,[1]]]]]],[[],4],[[[181,[1]],[32,[1]],[57,[1]]],[[19,[[54,[1]]]]]],[[[181,[1]],[54,[1]],[19,[[183,[1]]]]],[[19,[[19,[[183,[1]]]]]]]],[[]],[[],[[181,[1]]]],[[[32,[1]],[57,[1]]]],[[[181,[1]],[79,[1]]],[[54,[1]]]],[[[181,[1]],90,[79,[1]]]],[[[181,[1]],97,[79,[1]]]],[[[181,[[0,[101,1]]]],20],6],[[]],[[[181,[1]]],[[32,[1]]]],[[[181,[1]],[54,[1]]],[[6,[85]]]],[[[32,[1]]],[[181,[1]]]],[[],6],[[],6],[[],22],[[]]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"UInt"],[15,"u64"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[4,"Ordering"],[4,"Option"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[3,"CacheMap"],[3,"RandomState"],[3,"HashMap"],[8,"Eq"],[8,"Borrow"],[8,"StableDeref"],[8,"Copy"],[8,"FnOnce"],[3,"Vec"],[3,"Store"],[3,"IO"],[3,"Witness"],[8,"Coprocessor"],[3,"MultiFrame"],[3,"CircuitFrame"],[3,"Lang"],[3,"Arc"],[3,"Frame"],[15,"slice"],[8,"ConstraintSystem"],[4,"SynthesisError"],[3,"AllocatedNum"],[3,"AllocatedPtr"],[3,"AllocatedContPtr"],[3,"GlobalAllocations"],[3,"Scalar"],[3,"Bls12"],[3,"PreparedVerifyingKey"],[3,"Proof"],[8,"PrimeField"],[4,"Boolean"],[6,"ZExprPtr"],[6,"ZContPtr"],[3,"ContPtr"],[3,"Ptr"],[8,"IntoHashComponents"],[15,"array"],[4,"ConsName"],[6,"ConsWitness"],[4,"ContName"],[8,"AsAllocatedHashComponents"],[6,"ContWitness"],[4,"Continuation"],[3,"Utf8PathBuf"],[6,"Result"],[4,"ContTag"],[8,"Write"],[6,"Result"],[4,"TrieCoproc"],[3,"NewCoprocessor"],[3,"LookupCoprocessor"],[3,"InsertCoprocessor"],[3,"Trie"],[8,"Default"],[4,"Error"],[3,"LookupProof"],[3,"PoseidonCache"],[3,"InsertProof"],[4,"ReductionError"],[4,"LurkError"],[4,"ProofError"],[4,"NovaError"],[3,"Error"],[3,"Demand"],[8,"Error"],[4,"Status"],[3,"Evaluator"],[15,"str"],[3,"Error"],[3,"FrameIt"],[8,"Fn"],[3,"Take"],[3,"Binding"],[8,"Into"],[3,"Symbol"],[4,"Coproc"],[3,"DummyCoprocessor"],[8,"Deserialize"],[8,"Serialize"],[3,"Thunk"],[4,"Expression"],[4,"LanguageField"],[3,"FWrap"],[15,"u8"],[15,"char"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[3,"HashConstants"],[6,"U3"],[3,"PoseidonConstants"],[6,"U4"],[6,"U6"],[6,"U8"],[4,"HashArity"],[4,"HashConst"],[3,"InversePoseidonCache"],[8,"HashName"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[3,"Cont"],[6,"ContStub"],[3,"Func"],[3,"Var"],[4,"Tag"],[4,"CtrlTag"],[4,"Lit"],[3,"Block"],[4,"Ctrl"],[4,"Op"],[6,"AString"],[4,"Error"],[4,"LitBase"],[6,"Span"],[6,"ParseResult"],[8,"AsRef"],[3,"Box"],[8,"InputLength"],[8,"AsBytes"],[3,"ParseError"],[4,"ErrorKind"],[4,"ParseErrorKind"],[6,"IResult"],[4,"Pos"],[4,"StringFragment"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"PublicParams"],[3,"Groth16Prover"],[3,"Parameters"],[3,"GenericSRS"],[8,"RngCore"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[8,"Send"],[8,"CurveCycleEquipped"],[4,"Proof"],[3,"PublicParams"],[3,"NovaProver"],[6,"C1"],[4,"RawPtr"],[3,"Utf8Path"],[4,"Error"],[3,"Error"],[3,"Error"],[3,"ReplState"],[3,"Command"],[3,"Path"],[8,"ReplTrait"],[3,"Repl"],[3,"ConstantPtrs"],[3,"NamedConstants"],[4,"Syntax"],[3,"ZStore"],[4,"ZCont"],[4,"ZExpr"],[4,"LurkSym"],[8,"From"],[8,"Field"],[4,"ZData"],[8,"Display"],[4,"SerdeError"],[3,"Deserializer"],[8,"Visitor"],[3,"SerializeCell"],[3,"SerializeMap"],[3,"SerializeTupleVariant"],[3,"StructSerializer"],[3,"Serializer"],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[8,"Tag"],[3,"ZPtr"],[3,"Error"],[8,"ToInputs"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"CoCircuit"],[8,"Evaluable"],[13,"Pos"],[8,"Prover"],[8,"Provable"],[8,"TypePredicates"],[8,"Op"],[8,"Write"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YOOX","n":["Coproc","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0],"f":[0,0,0,0],"c":[],"p":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,2,1,2,1,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1],"f":[0,0,0,[[]],[[]],[[]],[[]],[1],[[2,3],4],[[1,3],4],[[]],[[]],[[],1],[[]],[[]],[1],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6]],"c":[],"p":[[3,"MetricsSinkHandle"],[3,"MetricsSink"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
