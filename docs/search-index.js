var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLFLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","deserialize","drop","from","handle_meta","handle_non_meta","init","into","layout_raw","name","new","pointer_metadata","process_line","prompt","public_param_dir","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"clutch"],[27,"clap_builder::builder::command"],[28,"rkyv::with"],[29,"core::result"],[30,"pasta_curves::pallas"],[31,"lurk::eval::lang"],[32,"lurk::store"],[33,"lurk::state"],[34,"core::cell"],[35,"alloc::rc"],[36,"lurk::ptr"],[37,"std::path"],[38,"core::convert"],[39,"core::marker"],[40,"anyhow"],[41,"core::alloc::layout"],[42,"core::alloc::layout"],[43,"core::option"],[44,"lurk::eval::lang"],[45,"core::any"],[46,"alloc::alloc"],[47,"alloc::boxed"],[48,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,7,7],"f":[0,[[]],[[]],[[],1],[2],[2],[[],[[4,[3]]]],[2],[[]],[[[7,[5,[6,[5]]]],[8,[5]],[11,[[10,[9]]]],[12,[5]],[0,[[14,[13]],15]]],16],[[[7,[5,[6,[5]]]],[8,[5]],9,[12,[5]]],16],[[],2],[[]],[[],[[4,[17,18]]]],[[],19],[[[8,[5]],2,[20,[1]],[21,[5,[6,[5]]]]],[[7,[5,[6,[5]]]]]],[[]],[[[7,[5,[6,[5]]]],19],19],[[[7,[5,[6,[5]]]]],19],[[],22],[[],4],[[],4],[[],23],[[[25,[24]]],[[25,[26,24]]]],[[],26],[[],26],[[]]],"c":[],"p":[[3,"Command",27],[15,"usize"],[3,"With",28],[4,"Result",29],[6,"Scalar",30],[4,"Coproc",31],[3,"ClutchState",0],[3,"Store",32],[3,"State",33],[3,"RefCell",34],[3,"Rc",35],[6,"Ptr",36],[3,"Path",37],[8,"AsRef",38],[8,"Copy",39],[6,"Result",40],[3,"Layout",41],[3,"LayoutError",41],[3,"String",42],[4,"Option",43],[3,"Lang",31],[3,"Utf8PathBuf",44],[3,"TypeId",45],[3,"Global",46],[3,"Box",47],[8,"Any",45]]},\
"fcomm":{"doc":"","t":"DEDDGRNDNDNEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMFMLLLLMLLLLLLLLLLLLLLLLMMLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLFLLLLLLLLLLLLKKKLLLLLLLLKK","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","file_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_param_dir","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","from","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","FileMap","FileStore","borrow","borrow_mut","data_dir","deref","deref_mut","deserialize","drop","fmt","from","get","init","into","layout_raw","new","pointer_metadata","read_from_json_path","read_from_path","read_from_stdin","set","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","write_to_json_path","write_to_path"],"q":[[0,"fcomm"],[639,"fcomm::error"],[684,"fcomm::file_map"],[714,"lurk::store"],[715,"lurk::ptr"],[716,"lurk::eval::lang"],[717,"lurk::eval::lang"],[718,"lurk::proof::nova"],[719,"lurk::proof::nova"],[720,"core::clone"],[721,"lurk::field"],[722,"serde::ser"],[723,"serde::de"],[724,"lurk::ptr"],[725,"rkyv::with"],[726,"serde::de"],[727,"core::option"],[728,"core::fmt"],[729,"core::fmt"],[730,"core::hash"],[731,"core::marker"],[732,"core::hash"],[733,"core::alloc::layout"],[734,"camino"],[735,"std::path"],[736,"lurk::public_parameters::error"],[737,"serde::ser"],[738,"core::any"],[739,"alloc::alloc"],[740,"alloc::boxed"],[741,"core::any"],[742,"lurk::z_data::serde"],[743,"anyhow"],[744,"std::io::error"],[745,"bellpepper_core::constraint_system"],[746,"hex::error"],[747,"lurk::store"],[748,"alloc::string"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,28,0,9,0,16,0,0,0,16,16,0,9,0,28,0,0,9,0,0,27,16,28,0,0,0,0,27,24,24,17,20,21,24,25,26,27,28,4,9,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,22,15,30,16,17,20,21,22,23,24,25,26,27,28,4,9,30,16,17,20,21,22,23,24,25,26,27,28,4,9,30,21,22,24,4,0,17,20,17,20,28,16,17,20,27,28,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,16,17,17,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,4,4,38,38,15,15,9,9,30,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,17,20,17,20,16,17,20,21,22,23,24,25,26,27,28,4,9,30,16,16,16,17,17,17,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,4,4,4,9,9,9,30,30,30,0,17,23,15,0,9,15,17,20,23,4,17,20,4,0,16,17,20,21,22,23,24,25,26,27,28,4,38,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,21,28,21,27,21,21,16,16,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,22,24,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,15,9,9,17,20,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,24,0,15,24,24,9,15,24,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,15,30,9,15,21,27,9,15,0,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,15,4,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,30,17,20,24,16,17,20,21,22,23,24,25,26,27,28,4,9,30,21,16,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,38,30,30,15,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,79,79,0,79,79,79,79,79,79,79,79,79,79,79,79,78,78,78,79,79,79,79,79,79,79,79,78,78],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[16,16],[17,17],[[[20,[[0,[18,19]]]]],[[20,[[0,[18,19]]]]]],[[[21,[[0,[18,19]]]]],[[21,[[0,[18,19]]]]]],[[[22,[[0,[18,19]]]]],[[22,[[0,[18,19]]]]]],[[[23,[[0,[18,19]]]]],[[23,[[0,[18,19]]]]]],[[[24,[[0,[18,19]]]]],[[24,[[0,[18,19]]]]]],[25,25],[[[26,[[0,[18,19]]]]],[[26,[[0,[18,19]]]]]],[[[27,[[0,[18,19]]]]],[[27,[[0,[18,19]]]]]],[28,28],[[[4,[[0,[18,19,29]]]]],[[4,[[0,[18,19,29]]]]]],[[[9,[[0,[18,19]]]]],[[9,[[0,[18,19]]]]]],[[[30,[[0,[18,19]]]]],[[30,[[0,[18,19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],31],0,0,0,0,[[28,[2,[[0,[19,29,32]]]]],[[33,[[0,[19,29,32]]]]]],[16,5],[[],17],[[],[[20,[[0,[34,19]]]]]],[[],[[27,[19]]]],[[],28],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[],[[11,[35]]]],[36,[[11,[16]]]],[[],[[11,[35]]]],[36,[[11,[17]]]],[36,[[11,[[20,[[0,[37,19]]]]]]]],[[],[[11,[35]]]],[36,[[11,[[21,[19]]]]]],[[],[[11,[35]]]],[36,[[11,[[22,[[0,[37,19]]]]]]]],[[],[[11,[35]]]],[36,[[11,[[23,[[0,[37,19]]]]]]]],[[],[[11,[35]]]],[[],[[11,[35]]]],[36,[[11,[[24,[[0,[37,19]]]]]]]],[[],[[11,[35]]]],[36,[[11,[25]]]],[[],[[11,[35]]]],[36,[[11,[[26,[[0,[37,19]]]]]]]],[[],[[11,[35]]]],[36,[[11,[[27,[[0,[37,19]]]]]]]],[[],[[11,[35]]]],[36,[[11,[28]]]],[36,[[11,[[4,[[0,[37,19,29]]]]]]]],[[],[[11,[35]]]],[[],[[11,[35]]]],[36,[[11,[38]]]],[[],[[11,[35]]]],[36,[[11,[[15,[[0,[37,39]]]]]]]],[[],[[11,[35]]]],[36,[[11,[[9,[[0,[37,19]]]]]]]],[36,[[11,[[30,[[0,[37,19]]]]]]]],[[],[[11,[35]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,0,0,[[16,16],6],[[17,17],6],[[[20,[[0,[40,19]]]],[20,[[0,[40,19]]]]],6],[[[21,[[0,[40,19]]]],[21,[[0,[40,19]]]]],6],[[[22,[[0,[40,19]]]],[22,[[0,[40,19]]]]],6],[[[23,[[0,[40,19]]]],[23,[[0,[40,19]]]]],6],[[[24,[[0,[40,19]]]],[24,[[0,[40,19]]]]],6],[[25,25],6],[[[26,[[0,[40,19]]]],[26,[[0,[40,19]]]]],6],[[[27,[[0,[40,19]]]],[27,[[0,[40,19]]]]],6],[[28,28],6],[[[4,[[0,[40,19,29]]]],[4,[[0,[40,19,29]]]]],6],[[[9,[[0,[40,19]]]],[9,[[0,[40,19]]]]],6],[[[30,[[0,[40,19]]]],[30,[[0,[40,19]]]]],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[2,[[0,[19,29]]]],[3,[[0,[19,29]]]],5],[[11,[17,10]]]],[[[23,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[11,[[3,[[0,[19,29,32]]]],10]]]],[[[2,[1]],[3,[1]],[41,[[3,[1]]]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[2,[19]],[3,[19]],[41,[[3,[19]]]],5,[8,[19,[7,[19]]]]],[[11,[10]]]],[[[9,[19]]],[[41,[17]]]],[[[15,[1]],[2,[1]]],[[11,[10]]]],0,0,0,0,0,0,[[[4,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[11,[[3,[[0,[19,29,32]]]],10]]]],0,[[16,42],43],[[17,42],43],[[[20,[[0,[44,19]]]],42],43],[[[21,[[0,[44,19]]]],42],43],[[[22,[[0,[44,19]]]],42],43],[[[23,[[0,[44,19]]]],42],43],[[[24,[[0,[44,19]]]],42],43],[[25,42],43],[[[26,[[0,[44,19]]]],42],43],[[[27,[[0,[44,19]]]],42],43],[[28,42],43],[[[4,[[0,[44,19,29]]]],42],43],[[38,42],43],[[[9,[[0,[44,19]]]],42],43],[[[30,[[0,[44,19]]]],42],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[11,[[21,[[0,[19,29,32]]]],10]]]],[[[2,[[0,[19,29]]]],[33,[[0,[19,29]]]]],28],[[[47,[[46,[45]]]]],[[11,[[21,[19]]]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[27,[[0,[19,29,32]]]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]],[0,[19,29,32]]],[[11,[[21,[[0,[19,29,32]]]],10]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[11,[10]]]],[[[0,[48,49]],50],51],[[16,52]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[[[9,[19]]],6],[[[9,[19]]],6],0,0,[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],0,[5,55],0,[[[2,[1]],[22,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[22,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[9,[19]]],[[41,[[24,[19]]]]]],[[[15,[1]],[2,[1]]],[[11,[10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[9,[[0,[19,29,37]]]]],[[11,[[56,[[0,[19,29,37]]]],10]]]],[[[2,[1]],[9,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[21,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]]],[[3,[[0,[19,29,32]]]]]],[[[27,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[3,[[0,[19,29,32]]]]]],[[[9,[19]]],[[41,[[20,[19]]]]]],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[[],57],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],0,0,[[16,60],11],[[17,60],11],[[[20,[[0,[29,19]]]],60],11],[[[21,[19]],60],11],[[[22,[[0,[29,19]]]],60],11],[[[23,[[0,[29,19]]]],60],11],[[[24,[[0,[29,19]]]],60],11],[[25,60],11],[[[26,[[0,[29,19]]]],60],11],[[[27,[[0,[29,19]]]],60],11],[[28,60],11],[[[4,[[0,[29,19,29]]]],60],11],[[38,60],11],[[[15,[[0,[29,39]]]],60],11],[[[9,[[0,[29,19]]]],60],11],[[[30,[[0,[29,19]]]],60],11],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[19]]],61],[[],11],[5,[[11,[16]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],0,0,0,[[[15,[1]],[13,[1,[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[38,10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],66],[[]],[[]],[5],[5],[[],[[11,[35]]]],[5],[[10,42],43],[[10,42],43],[59,10],[67,10],[68,10],[69,10],[70,10],[[]],[71,10],[72,10],[[[0,[73,74,75]]],[[76,[[0,[73,74,75]]]]]],[[]],[[],5],[[]],[[],[[11,[53,54]]]],[[]],[10,[[41,[66]]]],[[],61],[[],11],[[],11],[[],62],[[[64,[63]]],[[64,[65,63]]]],[[],65],[[],65],[[]],0,0,[[]],[[]],[[],57],[5],[5],[[],[[11,[35]]]],[5],[[[79,[[0,[44,77]],[0,[44,78]]]],42],43],[[]],[[[79,[77,78]],77],[[41,[78]]]],[[],5],[[]],[[],[[11,[53,54]]]],[[[47,[58]]],[[11,[[79,[77,78]],59]]]],[[]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[],[[11,[59]]]],[[[79,[77,78]],77,78],[[11,[59]]]],[[],11],[[],11],[[],62],[[[64,[63]]],[[64,[65,63]]]],[[],65],[[],65],[[]],[[[47,[58]]]],[[[47,[58]]]]],"c":[],"p":[[6,"S1",0],[3,"Store",714],[6,"Ptr",715],[3,"CommittedExpression",0],[15,"usize"],[15,"bool"],[4,"Coproc",716],[3,"Lang",716],[4,"Claim",0],[4,"Error",639],[4,"Result",717],[3,"NovaProver",718],[3,"PublicParams",718],[3,"Arc",719],[3,"Proof",0],[4,"ReductionCount",0],[3,"Evaluation",0],[8,"Clone",720],[8,"LurkField",721],[3,"PtrEvaluation",0],[3,"Commitment",0],[3,"OpeningRequest",0],[3,"Expression",0],[3,"Opening",0],[3,"ZBytes",0],[3,"ZStorePtr",0],[4,"LurkPtr",0],[4,"LurkCont",0],[8,"Serialize",722],[3,"Cert",0],[6,"CommittedExpressionMap",0],[8,"DeserializeOwned",723],[6,"ContPtr",715],[8,"Default",724],[3,"With",725],[8,"Deserializer",723],[8,"Deserialize",723],[3,"VerificationResult",0],[8,"CurveCycleEquipped",718],[8,"PartialEq",726],[4,"Option",727],[3,"Formatter",728],[6,"Result",728],[8,"Debug",728],[15,"u8"],[15,"slice"],[8,"AsRef",729],[8,"Hash",730],[8,"Sized",731],[8,"BuildHasher",730],[15,"u64"],[8,"Hasher",730],[3,"Layout",732],[3,"LayoutError",732],[6,"NovaProofCache",0],[6,"ZExprPtr",733],[3,"Utf8PathBuf",734],[3,"Path",735],[4,"Error",736],[8,"Serializer",722],[3,"String",737],[3,"TypeId",738],[3,"Global",739],[3,"Box",740],[8,"Any",738],[8,"Error",741],[4,"SerdeError",742],[3,"Error",743],[3,"Error",744],[4,"SynthesisError",745],[4,"FromHexError",746],[3,"Error",714],[8,"Display",728],[8,"Send",731],[8,"Sync",731],[3,"IndentedSection",747],[8,"ToString",737],[8,"FileStore",684],[3,"FileMap",684]]},\
"lurk":{"doc":"","t":"ENCRNCLLOLLAOAALLAAAOLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIAAKKDDLLLLLLLMLLLLMLLLLLLLLLLMLLLLLLLMMLLMLLMMLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMAAAAIKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFFAAENNLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLHDENDNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLKLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGDELLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIDDDDNENDMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLKLLLKLLLKLLLALLLLLLKLLLLLMLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMMLMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNNNNENENNNNNNNNNNDNNENNNNNNNNENNNNNNENDLLMLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLLLLMLLLMLLLLLLLLALLMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLADLLLLLLLLLLLLLLLLLLLFFFFNNDEDNLLMLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLMMMLLLMLLLLLLMLMLLLMLLLLLLLLLLLLLLLLLLLLLLLLNNENNNNNNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLDLLLLLLLLLLLLLLLLFFLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFIIIQLLAKLLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLGGQQQQNIGGGQGQDGEDNGGLLLLLLMLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLMLLLLMLLLLLFLLLMLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLLLMLLLLLLLLKLKLLLLLMLLMKLKLLLLLKLKLFFFLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMLMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLMMLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLNNELLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","cache_map","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","repl","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","CacheMap","as_mut","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","from","get","get_copy","get_copy_or_insert","get_copy_or_insert_with","get_copy_or_insert_with_key","init","insert","insert_with","insert_with_key","into","is_empty","keys_cloned","layout_raw","len","map_get","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","blank","blank","borrow","borrow","borrow_mut","borrow_mut","cached_witness","clone","clone","clone_into","clone_into","count","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","frames","from","from","from_frame","from_frames","get_store","init","init","input","input","into","into","lang","layout_raw","layout_raw","output","output","pointer_metadata","pointer_metadata","precedes","precedes","public_input_size","public_inputs","reduction_count","store","store","synthesize","synthesize","synthesize_frames","synthesize_frames_parallel","synthesize_frames_sequential","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","verify_groth16_proof","vzip","vzip","witness","circom","constraints","data","pointer","CircomGadget","into_circom_input","name","simple_evaluate","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","get_config","parse_and_run","paths","repl","Backend","Nova","SnarkPackPlus","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","from","header","init","into","layout_raw","pointer_metadata","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","CONFIG","Config","Flow","Parallel","ParallelConfig","ParallelN","Sequential","WitnessGeneration","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","num_threads","parallelism","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","has_circuit","simple_evaluate","synthesize","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","simple_evaluate","synthesize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","Trie","TrieCoproc","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_frames","get_frames","header","i","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_terminal","is_terminal","is_terminal","iter","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","log","log","log","maybe_emitted_expression","new","next","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","from","from","from","from","from","from","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup","max_coprocessor_arity","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BLS12_381","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","length","names_and_ptrs","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_blank","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","ApplyContinuation","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Ctrl","Ctrl","CtrlTag","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Error","Expr","Func","Hide","IfEq","Lit","Lit","Lt","MakeThunk","MatchSymbol","MatchTag","Mul","Null","Num","Op","Open","Return","Return","String","Sub","Symbol","Tag","Trunc","Var","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_until","call_until_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_ptr","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","init","init","init","init","init","init","init","init","init_store","input_params","interpreter","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","name","name","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","serialize","slot","store","synthesize_frame","synthesize_frame_aux","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_ptr_cached","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zstore","GlobalAllocator","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","eval_step","evaluate","evaluate_simple","evaluate_with_env_and_cont","FPair","FPtr","Frame","PreimageData","Preimages","PtrVec","blank","blank","blank","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone","clone_into","clone_into","clone_into","commitment","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","from","hash4","hash6","hash8","init","init","init","input","into","into","into","layout_raw","layout_raw","layout_raw","less_than","new_from_func","output","pointer_metadata","pointer_metadata","pointer_metadata","preimages","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Atom","Atom","Ptr","Tuple2","Tuple2","Tuple3","Tuple3","Tuple4","Tuple4","ZChildren","ZPtr","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","char","clone","clone","clone_into","clone_into","cmp","comm","dbg_display","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt_to_string","from","from","from","get_atom","get_hash","get_hash","get_index2","get_index3","get_index4","hash","hash","hash","init","init","init","into","into","into","is_nil","is_null","layout_raw","layout_raw","layout_raw","null","num","num_u64","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","tag","tag","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","u64","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Store","borrow","borrow_mut","car_cdr","commit","default","deref","deref_mut","deserialize","drop","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_string","fetch_sym","fetch_symbol","fetch_symbol_path","fmt","from","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","init","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_lurk_sym","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","interned_string","interned_symbol","into","key","layout_raw","list","open","pointer_metadata","poseidon_cache","read","read_maybe_meta","read_with_default_state","to_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ZStore","add_comm","borrow","borrow_mut","default","deref","deref_mut","deserialize","deserialize","drop","from","get_children","init","into","layout_raw","open","pointer_metadata","populate_store","populate_z_store","serialize","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","from_upto","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","outer_prove","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_count","prove","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","CE1","CE2","CK1","CK2","Compressed","CurveCycleEquipped","EE1","EE2","G1","G1","G2","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached_witness","clone","clone_into","compress","count","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","frames","from","from","from","get_evaluation_frames","init","init","init","input","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","new","output","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","reduction_count","serialize","serialize","store","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","allocate_maybe_fun_unconstrained","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","error","public_params","public_params_default_dir","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","env","eval_expr","fmt","fmt","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","layout_raw","layout_raw","limit","name","name","new","new","new","new","pointer_metadata","pointer_metadata","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","quote","quotient","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","fmt_to_string_raw","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[101,"lurk::cache_map"],[136,"lurk::circuit"],[141,"lurk::circuit::circuit_frame"],[215,"lurk::circuit::gadgets"],[219,"lurk::circuit::gadgets::circom"],[223,"lurk::circuit::gadgets::constraints"],[224,"lurk::circuit::gadgets::data"],[310,"lurk::circuit::gadgets::pointer"],[419,"lurk::cli"],[424,"lurk::cli::backend"],[448,"lurk::cli::repl"],[469,"lurk::config"],[567,"lurk::cont"],[616,"lurk::cont::Continuation"],[648,"lurk::coprocessor"],[658,"lurk::coprocessor::circom"],[659,"lurk::coprocessor::circom::non_wasm"],[690,"lurk::coprocessor::trie"],[908,"lurk::error"],[1003,"lurk::eval"],[1208,"lurk::eval::lang"],[1326,"lurk::expr"],[1411,"lurk::field"],[1514,"lurk::hash"],[1655,"lurk::hash_witness"],[2034,"lurk::lem"],[2339,"lurk::lem::circuit"],[2359,"lurk::lem::eval"],[2363,"lurk::lem::interpreter"],[2450,"lurk::lem::pointers"],[2562,"lurk::lem::store"],[2619,"lurk::lem::zstore"],[2646,"lurk::package"],[2674,"lurk::parser"],[2715,"lurk::parser::base"],[2762,"lurk::parser::error"],[2844,"lurk::parser::position"],[2876,"lurk::parser::position::Pos"],[2882,"lurk::parser::string"],[2920,"lurk::parser::syntax"],[2941,"lurk::proof"],[2960,"lurk::proof::groth16"],[3037,"lurk::proof::nova"],[3140,"lurk::ptr"],[3246,"lurk::public_parameters"],[3250,"lurk::public_parameters::error"],[3281,"lurk::repl"],[3353,"lurk::state"],[3391,"lurk::store"],[3657,"lurk::symbol"],[3726,"lurk::syntax"],[3765,"lurk::tag"],[4001,"lurk::uint"],[4043,"lurk::writer"],[4046,"lurk::z_data"],[4094,"lurk::z_data::serde"],[4127,"lurk::z_data::serde::de"],[4179,"lurk::z_data::serde::ser"],[4324,"lurk::z_data::z_cont"],[4372,"lurk::z_data::z_cont::ZCont"],[4404,"lurk::z_data::z_expr"],[4453,"lurk::z_data::z_expr::ZExpr"],[4456,"lurk::z_data::z_ptr"],[4505,"lurk::z_data::z_store"],[4551,"core::clone"],[4552,"serde::de"],[4553,"core::result"],[4554,"rkyv::with"],[4555,"core::cmp"],[4556,"core::fmt"],[4557,"core::fmt"],[4558,"core::marker"],[4559,"core::hash"],[4560,"core::alloc::layout"],[4561,"core::alloc::layout"],[4562,"serde::ser"],[4563,"alloc::string"],[4564,"core::any"],[4565,"alloc::alloc"],[4566,"alloc::boxed"],[4567,"core::any"],[4568,"std::collections::hash::map"],[4569,"core::cmp"],[4570,"stable_deref_trait"],[4571,"core::marker"],[4572,"alloc::vec"],[4573,"alloc::sync"],[4574,"bellpepper_core::constraint_system"],[4575,"bellpepper_core::gadgets::num"],[4576,"bellpepper_core::constraint_system"],[4577,"blstrs"],[4578,"bellperson::groth16::verifying_key"],[4579,"bellperson::groth16::proof"],[4580,"ff"],[4581,"bellpepper_core::gadgets::boolean"],[4582,"camino"],[4583,"anyhow"],[4584,"pasta_curves::pallas"],[4585,"camino"],[4586,"std::io::error"],[4587,"core::default"],[4588,"core::cell"],[4589,"alloc::rc"],[4590,"core::error"],[4591,"nova_snark::errors"],[4592,"core::fmt"],[4593,"core::convert"],[4594,"serde::de"],[4595,"neptune::poseidon"],[4596,"typenum::generated::consts"],[4597,"nom::traits"],[4598,"nom::internal"],[4599,"pairing"],[4600,"pairing"],[4601,"bellperson::groth16::aggregate::srs"],[4602,"rand_core"],[4603,"bellperson::groth16::aggregate::srs"],[4604,"std::io::error"],[4605,"clap_builder::builder::command"],[4606,"std::path"],[4607,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","Global config for parallelism.","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","","Returns the argument unchanged.","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","<code>CacheMap</code> is an adaptation of <code>FrozenMap</code>: …","Get mutable access to the underlying <code>HashMap</code>.","","","","","","","","","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns a copy of the value corresponding to the key.","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","Calls <code>U::from(self)</code>.","Examples","","","Examples","Applies a function to the owner of the value corresponding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Precompute the witness blocks for all the named hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","The basic control nodes for LEM logical paths.","","","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a.val != b.val</code>, or to <code>0</code> …","","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>IfEq(x, y, eq_block, else_block)</code> runs <code>eq_block</code> if <code>x == y</code>, …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","","The atomic operations of LEMs.","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","LEM tags","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","LEM variables","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","","Calls a <code>Func</code> on an input until the stop contidion is …","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Lurk’s step function","","","","","","A <code>Frame</code> carries the data that results from interpreting a …","","<code>Preimages</code> hold the non-deterministic advices for hashes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","","","","<code>ZChildren</code> keeps track of the children of <code>ZPtr</code>s, in case …","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Recursively hashes the children of a <code>Ptr</code> in order to …","","","Hashes <code>Ptr</code> trees from the bottom to the top, avoiding deep …","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Generates an outer Groth16 proof using the given …","","","","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","The number of reductions used in the proof.","","","","","","","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","The commitment engine type for the first curve in the …","The commitment engine type for the second curve in the …","Why the next 4 types?","The type of the commitment key used for points of the …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Evaluates and generates the frames of the computation …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","","","","",""],"if":[0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],0,[[]],[[]],0,0,0,0,[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],0,0,0,0,[4],[4],[5,[[6,[[2,[1]]]]]],[[],[[6,[7]]]],[[[2,[1]],[2,[1]]]],[4],[[[2,[[0,[8,1]]]],[2,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],0,0,0,0,[[[2,[1]],10],11],[[[2,[[0,[12,1]]]],10],11],[13,[[2,[1]]]],[14,[[2,[1]]]],[[]],[1,[[2,[1]]]],0,[[[0,[15,16]],17],13],0,[[[2,[1]],18]],0,[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[[2,[1]]],1],[[[2,[1]]],9],[[[2,[1]]],9],0,[[],[[6,[23,24]]]],0,0,0,0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,0,0,[[[2,[1]],[2,[1]]],[[26,[25]]]],[[]],0,0,0,0,[[[2,[1]],27],6],0,0,0,[[[2,[1]],[2,[1]]]],0,0,0,0,0,0,[[]],[[],28],[[],6],[[],6],[[],29],0,0,[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],0,0,[[]],0,0,0,0,0,0,0,[33,[[35,[34]]]],[[]],[[]],[[],33],[4],[4],[[],[[6,[7]]]],[4],[[[33,[12,12]],10],11],[[]],[[[33,[[37,[[0,[15,36,16]]]],[0,[36,15]],38]],[0,[15,36,16]]],26],[[[33,[[37,[[0,[15,36,16]]]],[0,[36,15]],39]],[0,[15,36,16]]],[[26,[39]]]],[[[33,[[0,[36,15]],39]],[0,[36,15]],39],39],[[[33,[[0,[36,15]],39]],[0,[36,15]],40],39],[[[33,[[0,[36,15]],39]],[0,[36,15]],40],39],[[],4],[[[33,[[0,[36,15]],38]],[0,[36,15]],38]],[[[33,[[0,[36,15]],38]],[0,[36,15]],40]],[[[33,[[0,[36,15]],38]],[0,[36,15]],40]],[[]],[[[33,[[0,[36,15]],38]]],9],[[[33,[3]]],[[41,[3]]]],[[],[[6,[23,24]]]],[[[33,[[0,[36,15]],38]]],4],[[[33,[[37,[[0,[15,36,16]]]],[0,[36,15]],38]],[0,[15,36,16]],40],26],[[],33],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,[[],4],[42,41],0,0,[[[44,[1,[43,[1]]]]],4],[[],[[45,[1,[43,[1]]]]]],[[4,[47,[[46,[1,[43,[1]]]]]]],[[44,[1,[43,[1]]]]]],[[]],[[]],[[]],[[]],0,[[[45,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]],[[45,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]]],[[[44,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]],[[44,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]]],[[]],[[]],0,[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[[[45,[[0,[12,1]],[0,[12,[43,[[0,[12,1]]]]]]]],10],11],[[[44,[[0,[12,1]],[0,[12,[43,[[0,[12,1]]]]]]]],10],11],0,[[]],[[]],[[[50,[[48,[1]],[49,[1]],[43,[1]]]],[42,[1]]],[[45,[1,[43,[1]]]]]],[[4,[51,[[50,[[48,[1]],[49,[1]],[43,[1]]]]]],[42,[1]],[47,[[46,[1,[43,[1]]]]]]],[[41,[[44,[1,[43,[1]]]]]]]],[[[44,[1,[43,[1]]]]],[[42,[1]]]],[[],4],[[],4],0,0,[[]],[[]],0,[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],0,0,[[]],[[]],[[[45,[1,[43,[1]]]],[45,[1,[43,[1]]]]],9],[[[44,[1,[43,[1]]]],[44,[1,[43,[1]]]]],9],[[],4],[[[44,[1,[43,[1]]]]],[[41,[1]]]],[[[44,[1,[43,[1]]]]],4],0,0,[[[44,[1,[43,[1]]]],[52,[1]],[51,[[53,[1]]]]],[[6,[[41,[[53,[1]]]],54]]]],[[[44,[1,[43,[1]]]],[52,[1]]],[[6,[54]]]],[[[44,[1,[43,[1]]]],[52,[1]],[42,[1]],[55,[1]],[55,[1]],[56,[1]],[51,[[45,[1,[43,[1]]]]]],[57,[1]]]],[[[44,[1,[43,[1]]]],[52,[1]],[42,[1]],[55,[1]],[55,[1]],[56,[1]],[51,[[45,[1,[43,[1]]]]]],[57,[1]]]],[[[44,[1,[43,[1]]]],[52,[1]],[42,[1]],[55,[1]],[55,[1]],[56,[1]],[51,[[45,[1,[43,[1]]]]]],[26,[41]],[57,[1]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[[44,[[43,[58]]]],[60,[59]],[61,[59]]],[[6,[9,54]]]],[[]],[[]],0,0,0,0,0,0,[[[51,[55]]],41],[[],62],[[42,[51,[63]]],63],[[[52,[64]],[53,[64]],[53,[64]]],[[6,[65,54]]]],0,[[[52,[1]],1],[[53,[1]]]],0,0,[[]],[[]],0,0,0,0,[[[57,[[0,[3,1]]]]],[[57,[[0,[3,1]]]]]],[[]],0,0,0,[4],[4],[[],[[6,[7]]]],[4],0,0,0,0,0,0,0,[[[57,[[0,[12,1]]]],10],11],[[]],0,0,[[],4],[[]],0,[[],[[6,[23,24]]]],0,0,0,[[[52,[1]],[42,[1]]],[[6,[[57,[1]],54]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,[[]],0,[[],6],[[],6],[[],29],0,0,[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,[[[52,[1]],40],[[6,[[55,[1]],54]]]],[[[52,[1]],40],[[6,[[56,[1]],54]]]],[[[52,[1]],[66,[1]]],[[6,[[55,[1]],54]]]],[[[52,[1]],[67,[1]]],[[6,[[56,[1]],54]]]],[[[52,[1]],[42,[1]],[68,[1]]],[[6,[[56,[1]],54]]]],[[[52,[1]],[42,[1]],[63,[1]]],[[6,[[55,[1]],54]]]],[[[52,[1]],[42,[1]],40],[[6,[[56,[1]],54]]]],[[[55,[1]],[52,[1]],[55,[1]]],[[6,[65,54]]]],[[[56,[1]],[52,[1]],[56,[1]]],[[6,[65,54]]]],[[[52,[1]],[69,[1]]],[[6,[[55,[1]],54]]]],[[[55,[1]],[52,[1]],1],[[6,[65,54]]]],[[[52,[1]],[42,[1]],40],[[6,[[55,[1]],54]]]],[[[52,[1]],1,[53,[1]]],[[6,[[55,[1]],54]]]],[[[55,[1]],[52,[1]],1],[[6,[65,54]]]],[[[56,[1]],[52,[1]],1],[[6,[65,54]]]],[[[55,[1]],[52,[1]],[42,[1]]],[[6,[54]]]],[[],[[70,[53]]]],[[[55,[1]]],[[70,[[53,[1]]]]]],[[[56,[1]]],[[70,[[53,[1]]]]]],[[[52,[1]],[42,[1]],65],[[6,[[55,[1]],54]]]],[[[52,[1]],[26,[[63,[1]]]],[42,[1]]],[[6,[[55,[1]],54]]]],[[[52,[1]],[26,[[68,[1]]]],[42,[1]]],[[6,[[56,[1]],54]]]],[[]],[[]],[[]],[[]],[[4,[51,[[53,[1]]]]],[[55,[1]]]],[[4,[51,[[53,[1]]]]],[[56,[1]]]],[[[55,[[0,[3,64]]]]],[[55,[[0,[3,64]]]]]],[[[56,[[0,[3,1]]]]],[[56,[[0,[3,1]]]]]],[[]],[[]],[[[52,[1]],[57,[1]],[42,[1]],[53,[1]],[55,[1]]],[[6,[[55,[1]],54]]]],[[[52,[1]],[57,[1]],[42,[1]],[55,[1]],[55,[1]]],[[6,[[55,[1]],54]]]],[[[52,[1]],[57,[1]],[55,[1]],[55,[1]],71,[0,[71,[0,[1,[55,[1]]]]]],65],[[6,[[55,[1]],54]]]],[[[52,[1]],[57,[1]],[42,[1]],[55,[1]],[55,[1]],[55,[1]]],[[6,[[55,[1]],54]]]],[[[52,[1]],[57,[1]],[42,[1]],[51,[[55,[1]]]]],[[6,[[55,[1]],54]]]],[[[52,[1]],72,[53,[1]],[70,[73]],[0,[72,[0,[1,[53,[1]]]]]],65],[[6,[[56,[1]],54]]]],[[[52,[1]],72,[53,[1]],[70,[73]],[0,[72,[0,[1,[53,[1]]]]]]],[[6,[54]]]],[[[52,[1]],[57,[1]],[42,[1]],[55,[1]],[55,[1]]],[[6,[[55,[1]],54]]]],[[[52,[1]],[57,[1]],[42,[1]],[55,[1]],[56,[1]]],[[6,[[55,[1]],54]]]],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[[[55,[1]],[52,[1]],[55,[1]]]],[[[56,[1]],[52,[1]],[56,[1]]]],[[[56,[1]],[42,[1]]],28],[[[55,[1]],[42,[1]]],28],[[[55,[1]],10],11],[[[56,[1]],10],11],[[]],[[]],[[[53,[1]],[53,[1]]],[[55,[1]]]],[[[53,[1]],[53,[1]]],[[56,[1]]]],[[[56,[1]],[42,[1]]],[[26,[[74,[1]]]]]],[[[56,[1]],[42,[1]]],[[26,[[68,[1]]]]]],[[[56,[1]],[42,[1]]],[[26,[[67,[1]]]]]],[[[55,[1]]],[[53,[1]]]],[[[56,[1]]],[[53,[1]]]],[[[55,[1]],[52,[1]],65,[55,[1]]]],[[],4],[[],4],[[]],[[]],[[[55,[1]],[52,[1]]],[[6,[65,54]]]],[[[55,[1]],[52,[1]]],[[6,[65,54]]]],[[[55,[1]],[52,[1]]],[[6,[65,54]]]],[[[55,[1]],[52,[1]]],[[6,[65,54]]]],[[[55,[1]],[52,[1]],[57,[1]]],[[6,[65,54]]]],[[[55,[1]],[52,[1]]],[[6,[65,54]]]],[[[55,[1]],[52,[1]]],[[6,[65,54]]]],[[[55,[1]],[52,[1]]],[[6,[65,54]]]],[[[55,[1]],[52,[1]]],[[6,[65,54]]]],[[[55,[1]],[52,[1]]],[[6,[65,54]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[[52,[1]],65,[55,[1]],[55,[1]]],[[6,[[55,[1]],54]]]],[[[52,[1]],65,[56,[1]],[56,[1]]],[[6,[[56,[1]],54]]]],[[[52,[1]],65,[66,[1]],[66,[1]]],[[6,[[55,[1]],54]]]],[[]],[[]],[[[55,[1]],[42,[1]]],[[26,[[63,[1]]]]]],[[[55,[1]]],[[53,[1]]]],[[[56,[1]]],[[53,[1]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[[55,[1]],[42,[1]]],[[26,[[66,[1]]]]]],0,[[[26,[75]]],[[76,[[35,[28,28]]]]]],[[],76],0,0,0,0,0,[[]],[[]],[4],[4],[[],[[6,[7]]]],[4],[[77,10],11],[[]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,[[]],[[]],[4],[4],[[],[[6,[7]]]],[4],[[]],[[],4],[[]],[[],[[6,[23,24]]]],[[[79,[78]],80],76],[[[42,[78]],4,4,77],[[79,[78]]]],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[81,4,4],4],[[],81],[[],82],[[],83],[[],84],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[[81,10],11],[[82,10],11],[[83,10],11],[[84,10],11],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[81,9],[81,9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[81,4],0,[[]],[[]],[[]],[[]],0,0,0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[74,[[0,[3,1]]]]],[[74,[[0,[3,1]]]]]],[[]],[[[74,[1]]],85],[4],[4],[[],[[6,[7]]]],[4],[[[74,[[0,[8,1]]]],[74,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[74,[[0,[12,1]]]],10],11],[[[74,[1]],[42,[1]],86,87],88],[[]],[[[0,[15,16]],17],13],[[[74,[1]]],[[68,[1]]]],[[[74,[[0,[15,1]]]],18]],[[],4],[[[74,[1]],[42,[1]]]],[[]],[[],[[6,[23,24]]]],[[]],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],0,[[],4],[[42,63,63,68],48],[[],9],[[42,[51,[63]]],63],[[52,57,42,[51,[55]],55,56],[[6,[54]]]],0,0,0,[[[90,[1,[89,[1]]]]],4],[[]],[[]],[[[90,[1,[89,[1]]]]],[[90,[1,[89,[1]]]]]],[[]],[[[89,[1]]],[[76,[[90,[1,[89,[1]]]]]]]],[4],[4],[[],[[6,[7]]]],[4],[[[90,[1,[0,[[89,[1]],12]]]]],4],[[[90,[[0,[12,1]],[0,[12,[89,[[0,[12,1]]]]]]]],10],11],[[]],[[[90,[1,[0,[[89,[1]],12]]]]],9],[[],4],[[]],[[],[[6,[23,24]]]],[[[90,[1,[89,[1]]]]],62],[[[89,[1]]],[[90,[1,[89,[1]]]]]],[[]],[[[90,[1,[0,[[89,[1]],12]]]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[90,[1,[89,[1]]]],[52,[1]],[57,[1]],[42,[1]],[51,[[55,[1]]]],[55,[1]],[56,[1]]],[[76,[54]]]],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[91,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[91,[[0,[3,1]]]]],[[91,[[0,[3,1]]]]]],[[[92,[[0,[3,1]]]]],[[92,[[0,[3,1]]]]]],[[[93,[[0,[3,1]]]]],[[93,[[0,[3,1]]]]]],[[[94,[[0,[3,1]]]]],[[94,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],0,[[],[[92,[[0,[95,1]]]]]],[[],[[93,[[0,[95,1]]]]]],[[],[[94,[[0,[95,1]]]]]],[[],[[96,[1]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[[92,[1]]]]]],[[],[[6,[7]]]],[5,[[6,[[93,[1]]]]]],[[],[[6,[7]]]],[5,[[6,[[94,[1]]]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[[96,[1]]],1],[[[91,[1]]],4],[[[92,[1]]],4],[[[93,[1]]],4],[[[94,[1]]],4],[[[91,[1]],[42,[1]],[63,[1]],[63,[1]],[68,[1]]],[[48,[1]]]],[[[97,[12]],10],11],[[[91,[[0,[12,1]]]],10],11],[[[92,[[0,[12,1]]]],10],11],[[[93,[[0,[12,1]]]],10],11],[[[94,[[0,[12,1]]]],10],11],[[[96,[[0,[12,1]]]],10],11],[[[98,[[0,[12,1]]]],10],11],[[[99,[[0,[12,1]]]],10],11],[[]],[[[92,[1]]],[[91,[1]]]],[[]],[[[94,[1]]],[[91,[1]]]],[[[93,[1]]],[[91,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[91,[1]]],9],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[96,[1]],1,1],[[6,[9,[97,[1]]]]]],[[[42,[1]],[101,[[100,[86]]]],[46,[1,[91,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[[96,[1]]],4],[[[96,[1]],1],[[6,[[26,[1]],[97,[1]]]]]],[[[42,[1]]],[[96,[1]]]],[[[42,[1]],4],[[96,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[96,[1]],1,1],[[6,[[97,[1]]]]]],[[[96,[1]],1],[[6,[[98,[1]],[97,[1]]]]]],[[[96,[1]]],1],[[[96,[1]],4],4],[[[92,[1]],27],6],[[[93,[1]],27],6],[[[94,[1]],27],6],[[[91,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[92,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[93,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[94,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[91,[1]],[52,[1]],[57,[1]],[42,[1]],[51,[[55,[1]]]],[55,[1]],[56,[1]]],[[6,[54]]]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[98,[1]],1,1,1,[102,[1]]],9],[[[99,[1]],1,1,1,[26,[1]],1,[102,[1]]],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[],103],[[],103],[[],103],[[]],[[]],[[]],[[]],[[]],[[]],[104,104],[[[105,[[0,[3,1]]]]],[[105,[[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[[106,10],11],[[106,10],11],[[104,10],11],[[104,10],11],[[[105,[[0,[12,1]]]],10],11],[[[105,[1]],10],11],[54,106],[107,106],[[]],[104,106],[108,106],[108,104],[[]],[[]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[]],[[]],[[]],[106,[[26,[103]]]],[104,[[26,[103]]]],[[]],[[]],[[],28],[[],28],[[],28],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[48,[[0,[3,1]]]]],[[48,[[0,[3,1]]]]]],[[[50,[[0,[3,39]],[0,[3,39]],3]]],[[50,[[0,[3,39]],[0,[3,39]],3]]]],[109,109],[[[49,[[0,[3,1]]]]],[[49,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],0,[[],109],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[109]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[4],[[[42,[1]]],[[63,[1]]]],0,[[[48,[[0,[8,1]]]],[48,[[0,[8,1]]]]],9],[[[50,[[0,[8,39]],[0,[8,39]],8]],[50,[[0,[8,39]],[0,[8,39]],8]]],9],[[109,109],9],[[[49,[[0,[8,1]]]],[49,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[110,[1,[43,[1]]]]],[[6,[104]]]],[[[42,[1]],62],[[6,[[63,[1]],104]]]],0,[[[48,[1]],[42,[1]],86,87],88],[[[48,[1]],10],[[6,[111]]]],[[[48,[[0,[12,1]]]],10],11],[[[50,[[0,[12,39]],[0,[12,39]],12]],10],11],[[109,10],11],[[[112,[[0,[12,39]],[0,[12,1]],[0,[12,[43,[[0,[12,1]]]]]]]],10],11],[[[49,[[0,[12,1]]]],10],11],[[[110,[[0,[12,1]],[0,[12,[43,[[0,[12,1]]]]]]]],10],11],[[]],[[]],[[]],[[[68,[1]]],109],[[]],[[]],[[]],[[[63,[1]],[63,[1]],[42,[1]],4,113,[46,[1,[43,[1]]]]],[[6,[[41,[[50,[[48,[1]],[49,[1]],[43,[1]]]]]],104]]]],[[[110,[1,[43,[1]]]]],[[6,[[41,[[50,[[48,[1]],[49,[1]],[43,[1]]]]]],104]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[110,[1,[43,[1]]]]],[[48,[1]]]],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[[48,[1]]],9],[[[50,[[48,[1]],39,[43,[1]]]]],9],[109,9],[[],9],[[[48,[1]]],9],[109,9],[109,9],[[],9],[[[48,[1]]],9],[109,9],[[[110,[1,[43,[1]]]]],[[6,[[114,[[112,[[49,[1]],1,[43,[1]]]]]],104]]]],0,[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[42,4]],[[[48,[1]],[42,[1]],4]],[[[50,[[48,[1]],39,[43,[1]]]],[42,[1]]]],[[[48,[1]],[42,[1]]],[[26,[[63,[1]]]]]],[[[63,[1]],[63,[1]],[42,[1]],4,[46,[1,[43,[1]]]]],[[110,[1,[43,[1]]]]]],[[[112,[[49,[1]],1,[43,[1]]]]],26],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[[48,[1]],39,[43,[1]]]],[50,[[48,[1]],39,[43,[1]]]]],9],[[16,42,46],[[6,[104]]]],[[[48,[1]],[42,[1]],[46,[1,[43,[1]]]]],[[6,[104]]]],[[109,27],6],[[[51,[[50,[[48,[1]],39,[43,[1]]]]]]],4],[[],109],[[[48,[1]]],109],[[109,[42,[1]]],[[26,[[68,[1]]]]]],[[[48,[1]],[42,[1]]],[[41,[1]]]],[[]],[[]],[[]],[[]],[[],28],[[[48,[1]],[42,[1]]],[[6,[[41,[1]],108]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[46,[1,[43,[1]]]],[116,[[115,[1,[43,[1]]]]]],[42,[1]]]],[[[46,[1,[43,[1]]]],[116,[117]],[116,[[43,[1]]]],[42,[1]]]],[[[118,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[119,[[0,[3,1]]]]],[[119,[[0,[3,1]]]]]],[[[118,[[0,[3,1]]]]],[[118,[[0,[3,1]]]]]],[[[46,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]],[[46,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]]],[[]],[[]],[[]],[[[46,[1,[43,[1]]]]],[[35,[117]]]],[[],[[46,[[0,[95,1]],[0,[95,[43,[[0,[95,1]]]]]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[5,[[6,[[119,[1]]]]]],[5,[[6,[[118,[[0,[120,1]]]]]]]],[[],[[6,[7]]]],[5,[[6,[[46,[[0,[120,1]],[0,[120,[43,[[0,[120,1]]]]]]]]]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[[[119,[1]]],4],[[[118,[1]]],4],[[[118,[1]],[42,[1]],[63,[1]],[63,[1]],[68,[1]]],[[48,[1]]]],[[[119,[[0,[12,1]]]],10],11],[[[118,[[0,[12,1]]]],10],11],[[[46,[[0,[12,1]],[0,[12,[43,[[0,[12,1]]]]]]]],10],11],[[[115,[[0,[12,1]],[0,[12,[43,[[0,[12,1]]]]]]]],10],11],[[]],[[[119,[1]]],[[118,[1]]]],[[]],[[]],[[]],[[],[[115,[1,[43,[1]]]]]],[[[118,[1]]],9],[[[46,[1,[43,[1]]]]],9],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[46,[1,[43,[1]]]]],9],[[[46,[1,[43,[1]]]]],28],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[[46,[1,[43,[1]]]],[42,[1]],[63,[1]]],26],[[[46,[1,[43,[1]]]]],4],[[],[[46,[1,[43,[1]]]]]],[[[116,[117]],[116,[[43,[1]]]]],[[115,[1,[43,[1]]]]]],[[[42,[1]],[41,[[116,[[115,[1,[43,[1]]]]]]]]],[[46,[1,[43,[1]]]]]],[[]],[[]],[[]],[[]],[[[119,[1]],27],6],[[[118,[[0,[121,1]]]],27],6],[[[46,[[0,[121,1]],[0,[121,[43,[[0,[121,1]]]]]]]],27],6],[[[119,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[118,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[118,[1]],[52,[1]],[57,[1]],[42,[1]],[51,[[55,[1]]]],[55,[1]],[56,[1]]],[[6,[54]]]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[122,[1]],[52,[1]],[42,[1]]],[[6,[54]]]],[[[52,[1]],[42,[1]]],[[6,[54]]]],[[[52,[1]],[26,[[122,[1]]]],[42,[1]]],[[6,[54]]]],[[]],[[]],[[]],[[]],[[[123,[[0,[3,1]]]]],[[123,[[0,[3,1]]]]]],[[[122,[[0,[3,1]]]]],[[122,[[0,[3,1]]]]]],[[]],[[]],0,[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[[[123,[[0,[8,1]]]],[123,[[0,[8,1]]]]],9],[[[122,[[0,[8,1]]]],[122,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[123,[[0,[12,1]]]],10],11],[[[123,[1]],[42,[1]],86,87],88],[[[122,[[0,[12,1]]]],10],11],[[]],[[]],[[[0,[15,16]],17],13],[[[122,[1]],18]],[[[52,[1]],[42,[1]],[55,[1]],[56,[1]]],[[6,[[53,[1]],54]]]],[[],4],[[],4],[[]],[[]],[[[123,[1]]],9],[[[123,[1]]],9],[[[123,[1]]],9],[[[123,[1]]],9],[[[123,[1]]],9],[[[123,[1]]],9],[[[123,[1]]],9],[[[123,[1]]],9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[124,124],[[[125,[[0,[3,1]]]]],[[125,[[0,[3,1]]]]]],[[]],[[]],[[[125,[1]],[125,[1]]],25],[4],[4],[4],[4],[5,[[6,[124]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[[125,[1]]]]]],[4],[4],[[124,124],9],[[[125,[[0,[8,1]]]],[125,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[124,10],11],[[124,10],11],[[[125,[[0,[12,1]]]],10],11],[[]],[[]],[[[51,[126]]],26],[127],[85],[128],[129],[130],[131],[132],[13],[[],124],[[[0,[15,16]],17],13],[[[125,[1]],18]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],28],[[],4],[[],4],[[]],[[]],[[],9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[]],[[]],[[[125,[1]],[125,[1]]],[[26,[25]]]],[[]],[[]],[[124,27],6],[[[125,[1]],27],6],[[],[[41,[126]]]],[[],[[26,[127]]]],[[],[[26,[85]]]],[[],[[26,[128]]]],[[],[[26,[129]]]],[[],[[26,[130]]]],[[]],[[]],[[],28],[[],[[26,[133]]]],[[],133],[[],[[26,[131]]]],[[],[[26,[132]]]],[[],132],[[],[[26,[13]]]],[[],13],[[],28],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[134,[1]]],[[136,[1,135]]]],[[[134,[1]]],[[136,[1,137]]]],[[[134,[1]]],[[136,[1,138]]]],[[[134,[1]]],[[136,[1,139]]]],[[[140,[1]],[41,[1]]]],[141,141],[[[134,[[0,[3,1]]]]],[[134,[[0,[3,1]]]]]],[[[102,[[0,[3,1]]]]],[[102,[[0,[3,1]]]]]],[[[142,[[0,[3,1]]]]],[[142,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[[102,[1]],[70,[1]]],1],[[[134,[1]],141],[[140,[1]]]],0,0,[[],[[134,[1]]]],[[],[[102,[[0,[95,1]]]]]],[[],[[142,[[0,[95,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[[141,10],11],[[[140,[[0,[12,1]]]],10],11],[[[134,[[0,[12,1]]]],10],11],[[[102,[[0,[12,1]]]],10],11],[[[142,[[0,[12,1]]]],10],11],[[]],[4,141],[[]],[[]],[[]],[[]],[[[142,[1]],[125,[1]]],[[26,[[70,[1]]]]]],[[[102,[1]],[70,[1]]],1],[[[102,[1]],[70,[1]]],1],[[[102,[1]],[70,[1]]],1],[[[102,[1]],[70,[1]]],1],[[],4],[[],4],[[],4],[[],4],[[],4],[[[142,[1]],[125,[1]],[70,[1]]]],[[]],[[]],[[]],[[]],[[]],[[],70],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[144,[[0,[143,95,39,36,12]],39,1]]],[[41,[[0,[143,95,39,36,12]]]]]],[[[144,[[0,[143,95,39,36,12]],39,1]],[42,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[145,[1]],[42,[1]],[63,[1]]],[[76,[108]]]],[[[147,[[146,[1]]]],[42,[1]],[63,[1]]],[[76,[108]]]],[[[145,[1]],[42,[1]],[63,[1]]],[[76,[108]]]],[[[147,[[146,[1]]]],[42,[1]],[63,[1]]],[[76,[108]]]],[[[148,[1]],71,[42,[1]],[63,[1]]],[[76,[108]]]],[[[144,[71,[146,[1]],1]],71,[42,[1]],[63,[1]]],[[76,[108]]]],[[[148,[1]],71,[42,[1]],[63,[1]]],[[76,[104]]]],[[[144,[71,[146,[1]],1]],71,[42,[1]],[63,[1]]],[[76,[104]]]],0,0,[[[150,[143,[149,[1]],1]],[42,[1]],[140,[1]]],[[151,[1]]]],0,0,0,[[[147,[3]]],[[147,[3]]]],[[[146,[[0,[3,1]]]]],[[146,[[0,[3,1]]]]]],[[[152,[[0,[3,1]]]]],[[152,[[0,[3,1]]]]]],[[[153,[[0,[3,1]]]]],[[153,[[0,[3,1]]]]]],[[[154,[[0,[3,1]]]]],[[154,[[0,[3,1]]]]]],[71,71],[72,72],[[[144,[[0,[3,143]],3,[0,[3,1]]]]],[[144,[[0,[3,143]],3,[0,[3,1]]]]]],[[[150,[[0,[3,143]],[0,[3,[149,[[0,[3,1]]]]]],[0,[3,1]]]]],[[150,[[0,[3,143]],[0,[3,[149,[[0,[3,1]]]]]],[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[145,[1]],[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[147,[[146,[1]]]],[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],0,0,[[[148,[1]],71,[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[144,[71,[146,[1]],1]],71,[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],0,0,0,[[],71],[[],72],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[147,[8]],[147,[8]]],9],[[[146,[[0,[8,1]]]],[146,[[0,[8,1]]]]],9],[[[154,[[0,[8,1]]]],[154,[[0,[8,1]]]]],9],[[71,71],9],[[72,72],9],[[[144,[[0,[8,143]],8,[0,[8,1]]]],[144,[[0,[8,143]],8,[0,[8,1]]]]],9],[[[150,[[0,[8,143]],[0,[8,[149,[[0,[8,1]]]]]],[0,[8,1]]]],[150,[[0,[8,143]],[0,[8,[149,[[0,[8,1]]]]]],[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[148,[1]],71,[63,[1]],[63,[1]],[63,[1]],[42,[1]]],[[63,[1]]]],[[[144,[71,[146,[1]],1]],71,[63,[1]],[63,[1]],[63,[1]],[42,[1]]],[[63,[1]]]],[[[155,[1]],[42,[1]],[68,[1]]],[[26,[[74,[1]]]]]],[[[147,[[154,[1]]]],[42,[1]],[68,[1]]],[[26,[[74,[1]]]]]],[[[156,[1]],72,[42,[1]],[68,[1]]],[[26,[[74,[1]]]]]],[[[144,[72,[154,[1]],1]],72,[42,[1]],[68,[1]]],[[26,[[74,[1]]]]]],[[[147,[12]],10],11],[[[146,[[0,[12,1]]]],10],11],[[[152,[[0,[12,1]]]],10],11],[[[153,[[0,[12,1]]]],10],11],[[[154,[[0,[12,1]]]],10],11],[[71,10],11],[[72,10],11],[[[144,[[0,[12,143]],12,[0,[12,1]]]],10],11],[[[150,[[0,[12,143]],[0,[12,[149,[[0,[12,1]]]]]],[0,[12,1]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[144,[143,[149,[1]],1]]],[[150,[143,[149,[1]],1]]]],[[]],[[[144,[[0,[143,95,39,36,12]],39,1]],[0,[143,95,39,36,12]]],[[147,[39]]]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[71,18]],[[72,18]],0,0,0,[[],4],[71,4],[72,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[155,[1]],[42,[1]],[74,[1]]],[[68,[1]]]],[[[147,[[154,[1]]]],[42,[1]],[74,[1]]],[[68,[1]]]],[[[156,[1]],72,[42,[1]],[74,[1]]],[[68,[1]]]],[[[144,[72,[154,[1]],1]],72,[42,[1]],[74,[1]]],[[68,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],4],[[[150,[143,[149,[1]],1]],[42,[1]]],41],0,0,0,[[],[[144,[[0,[143,95,39,36,12]],39,1]]]],[[],[[144,[[0,[143,95,39,36,12]],39,1]]]],[[[147,[39]]],[[144,[[0,[143,95,39,36,12]],39,1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],157],[42,[[76,[157]]]],[[[146,[1]],[42,[1]]],[[76,[[157,[1]]]]]],[[[152,[1]]],[[157,[1]]]],[[[153,[1]]],[[157,[1]]]],[[[154,[1]],[42,[1]]],[[76,[[157,[1]]]]]],0,0,0,[[[145,[1]],[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[147,[[146,[1]]]],[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[148,[1]],71,[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[144,[71,[146,[1]],1]],71,[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[144,[[0,[143,95,39,36,12]],39,1]]],[[41,[[147,[39]]]]]],[[[144,[[0,[143,95,39,36,12]],39,1]]],4],[[],26],[[],26],[[],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,26],[[[147,[[149,[1]]]],[42,[1]]],26],[[[146,[1]],[42,[1]]],26],[[[154,[1]],[42,[1]]],26],[[[144,[[0,[143,95,39,36,12]],39,1]]],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[158,[52,[1]],[159,[1]]],[[76,[[160,[1]],54]]]],[[158,[51,[0]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[158,[51,[[161,[1]]]],[159,[1]],[162,[1]],[41,[[161,[1]]]]],76],[[158,[51,[[161,[1]]]],[159,[1]],113,4,113],76],[[158,[41,[[161,[1]]]],[159,[1]],113,4],76],[158,76],0,[158,158],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[169,169],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[164]]]],[[],[[6,[7]]]],[5,[[6,[165]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[158,158],9],[[163,163],9],[[164,164],9],[[165,165],9],[[166,166],9],[[167,167],9],[[168,168],9],[[169,169],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[158,10],11],[[163,10],11],[[163,10],11],[[164,10],11],[[164,10],11],[[165,10],11],[[165,10],11],[[166,10],11],[[167,10],11],[[168,10],11],[[169,10],11],[[]],[[[46,[1,[43,[1]]]]],158],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[161,[1]],[159,[1]]],[[26,[166]]]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[163,18]],[[164,18]],[[165,18]],[[166,18]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[158,[[159,[1]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[163,170],0,[[28,[41,[163]],4,167],[[76,[158]]]],[[158,[159,[1]]],4],[158,4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[164,27],6],[[165,27],6],0,0,[[158,[52,[1]],[159,[1]],[171,[1]],[160,[1]],[0,[[55,[1]]]]],[[76,[[41,[[55,[1]]]]]]]],[[158,[52,[1]],[159,[1]],[171,[1]]],76],[164,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[166,[159,[1]]],[[161,[1]]]],[[166,[159,[1]]],[[161,[1]]]],[[],28],[[],28],[[],28],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[158,4],[[76,[158]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[],[[160,[[0,[95,1]]]]]],[4],[4],[[],[[6,[7]]]],[4],[[]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],[[],158],[[[161,[1]],[159,[1]],4],76],[[[161,[1]],[159,[1]],4],76],[[[161,[1]],[161,[1]],[161,[1]],[159,[1]],4],76],0,0,0,0,0,0,[158,[[162,[1]]]],[158,[[171,[1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[[172,[[0,[3,1]]]]],[[172,[[0,[3,1]]]]]],[[[162,[[0,[3,1]]]]],[[162,[[0,[3,1]]]]]],[[[171,[[0,[3,1]]]]],[[171,[[0,[3,1]]]]]],[[]],[[]],[[]],0,[[],[[162,[[0,[95,1]]]]]],[[],[[171,[[0,[95,1]]]]]],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[[[172,[[0,[12,1]]]],10],11],[[[162,[[0,[12,1]]]],10],11],[[[171,[[0,[12,1]]]],10],11],[[]],[[]],[[]],0,0,0,[[],4],[[],4],[[],4],0,[[]],[[]],[[]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],0,[158,[[162,[1]]]],0,[[]],[[]],[[]],0,[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[161,[1]],164],[[161,[1]]]],[127,[[161,[1]]]],[[[161,[[0,[3,1]]]]],[[161,[[0,[3,1]]]]]],[[[173,[[0,[3,1]]]]],[[173,[[0,[3,1]]]]]],[[]],[[]],[[[173,[1]],[173,[1]]],25],[1,[[161,[1]]]],[[[161,[1]],[159,[1]]],28],[4],[4],[4],[4],[4],[4],[5,[[6,[[161,[[0,[120,1]]]]]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[[173,[[0,[120,1]]]]]]]],[[],[[6,[7]]]],[5,[[6,[[174,[[0,[120,1]]]]]]]],[4],[4],[4],[[[161,[[0,[8,1]]]],[161,[[0,[8,1]]]]],9],[[[173,[[0,[8,1]]]],[173,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[161,[[0,[12,1]]]],10],11],[[[173,[[0,[12,1]]]],10],11],[[[174,[[0,[12,1]]]],10],11],[[[161,[1]],[159,[1]],86],28],[[]],[[]],[[]],[[[161,[1]]],[[26,[1]]]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[161,[1]]],[[26,[4]]]],[[[161,[1]]],[[26,[4]]]],[[[161,[1]]],[[26,[4]]]],[[[161,[1]],18]],[[[173,[1]],18]],0,[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[161,[1]]],9],[[[161,[1]]],9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[164,[[161,[1]]]],[1,[[161,[1]]]],[13,[[161,[1]]]],[[[173,[1]],[173,[1]]],[[26,[25]]]],[[]],[[]],[[]],[[[161,[[0,[121,1]]]],27],6],[[[173,[[0,[121,1]]]],27],6],[[[174,[[0,[121,1]]]],27],6],[[[161,[1]]],164],0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[13,[[161,[1]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],0,[[]],[[]],[[[159,[1]],[161,[1]]],76],[[[159,[1]],[161,[1]]],[[76,[[161,[1]]]]]],[[],[[159,[[0,[95,1]]]]]],[4],[4],[[],[[6,[7]]]],[4],[[[159,[1]],4],26],[[[159,[1]],4],26],[[[159,[1]],4],26],[[[159,[1]],[161,[1]]],[[26,[117]]]],[[[159,[1]],[161,[1]]],[[26,[28]]]],[[[159,[1]],[161,[1]]],[[26,[117]]]],[[[159,[1]],[161,[1]]],[[26,[117]]]],[[[159,[1]],4],[[26,[[41,[28]]]]]],[[[159,[[0,[12,1]]]],10],11],[[]],[[[159,[1]],[161,[1]]],[[76,[[173,[1]]]]]],[[[159,[1]],1,[161,[1]]],[[76,[[161,[1]]]]]],[[[159,[1]],1,[161,[1]]],76],[[[159,[1]]]],[[],4],[[[159,[1]],164,[161,[1]],[161,[1]]],[[161,[1]]]],[[[159,[1]],164,[161,[1]],[161,[1]],[173,[1]]],[[161,[1]]]],[[[159,[1]],164,[161,[1]],[161,[1]],[161,[1]]],[[161,[1]]]],[[[159,[1]],164,[161,[1]],[161,[1]],[161,[1]],[173,[1]]],[[161,[1]]]],[[[159,[1]],164,[161,[1]],[161,[1]],[161,[1]],[161,[1]]],[[161,[1]]]],[[[159,[1]],164,[161,[1]],[161,[1]],[161,[1]],[161,[1]],[173,[1]]],[[161,[1]]]],[[[159,[1]],62],[[161,[1]]]],[[[159,[1]]],[[161,[1]]]],[[[159,[1]],62],[[161,[1]]]],[[[159,[1]],117],[[161,[1]]]],[[[159,[1]],[51,[28]]],[[161,[1]]]],[[[159,[1]],[175,[1]]],[[161,[1]]]],[[[159,[1]],62],[[26,[[161,[1]]]]]],[[[159,[1]],117],[[26,[[161,[1]]]]]],[[]],[[[159,[1]],62],[[161,[1]]]],[[],[[6,[23,24]]]],[[[159,[1]],[41,[[161,[1]]]]],[[161,[1]]]],[[[159,[1]],1],26],[[]],0,[[[159,[1]],[101,[[100,[86]]]],62],[[76,[[161,[1]]]]]],[[[159,[1]],[101,[[100,[86]]]],62],[[76,[176]]]],[[[159,[1]],62],[[76,[[161,[1]]]]]],[[[159,[1]],[51,[[161,[1]]]]],[[76,[[41,[1]]]]]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,[[[177,[1]],1,1,[173,[1]]]],[[]],[[]],[[],[[177,[[0,[95,1]]]]]],[4],[4],[5,[[6,[[177,[[0,[120,1]]]]]]]],[[],[[6,[7]]]],[4],[[]],[[[177,[1]],[173,[1]]],[[26,[[174,[1]]]]]],[[],4],[[]],[[],[[6,[23,24]]]],[[[177,[1]],1],26],[[]],[[[159,[1]],[173,[1]],[177,[1]]],[[76,[[161,[1]]]]]],[[[177,[1]],[161,[1]],[159,[1]]],[[76,[[173,[1]]]]]],[[[177,[[0,[121,1]]]],27],6],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,[[]],[[]],[4],[4],[[],[[6,[7]]]],[4],[[178,10],11],[[178,179],28],[[]],[[178,[51,[179]]],76],[[],4],[[178,28],179],[[]],[[],[[6,[23,24]]]],[178,179],[179,178],[[]],[[178,62],[[26,[179]]]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[178,178],76],[[]],0,0,0,0,0,0,0,0,[[],103],0,[[]],[[]],[176,176],[[]],[4],[4],[[],[[6,[7]]]],[4],0,0,[[176,10],11],[[176,10],11],[[]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],0,0,0,[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,[180,62],[[]],[[]],[180,180],[[]],[180,127],[[180,181],[[182,[1,[41,[126]]]]]],[[],180],[4],[4],[[],[[6,[7]]]],[4],[[180,[183,[[51,[126]]]]],28],[[180,180],9],[[],9],[[],9],[[],9],[[180,10],11],[[]],[[],4],[[]],[[180,127],9],[[],[[6,[23,24]]]],[[],113],[181,[[182,[1,180]]]],[[],113],[[],113],[180,113],[[],113],[180,[[31,[113]]]],[180,113],[[],113],[[]],[180,132],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,0,[[[0,[184,3,185]],62,[186,[[0,[184,3,185]],1]]],[[186,[[0,[184,3,185]],1]]]],[[[0,[184,3,185]],187,[186,[[0,[184,3,185]],1]]],[[186,[[0,[184,3,185]],1]]]],[[]],[[]],[[]],[[]],[[[188,[[0,[3,1]]]]],[[188,[[0,[3,1]]]]]],[[[186,[[0,[3,185]],[0,[3,1]]]]],[[186,[[0,[3,185]],[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[[[188,[[0,[8,1]]]],[188,[[0,[8,1]]]]],9],[[[186,[[0,[8,185]],[0,[8,1]]]],[186,[[0,[8,185]],[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[[[188,[[0,[12,1]]]],10],11],[[[188,[1]],10],11],[[[186,[181,1]],10],11],[[[186,[[0,[12,185]],[0,[12,1]]]],10],11],[[]],[[]],[[[0,[184,3,185]],187],[[186,[[0,[184,3,185]],1]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[],4],0,[[]],[[]],[[[188,[1]]],9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[[189,[185,[186,[185,1]]]],113],[[189,[185,[186,[185,1]]]]]],[[185,[188,[1]]],[[186,[185,1]]]],[[26,185,[188,[1]]],[[189,[185,[186,[185,1]]]]]],[[[186,[[0,[184,3,185]],1]],[186,[[0,[184,3,185]],1]]],[[186,[[0,[184,3,185]],1]]]],[[]],[[]],[[6,185,113],[[189,[185,[186,[185,1]]]]]],[[185,[188,[1]]],[[189,[185,[186,[185,1]]]]]],[[]],[[]],[[],28],[[],28],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[]],[[]],0,0,0,[[]],[[]],[[]],[190,190],[[]],[4],[4],[[],[[6,[7]]]],[4],[[190,190],9],[[],9],[[],9],[[],9],[[190,10],11],[[]],[[181,181],190],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[62,4,4,4,4],28],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[191,191],[[]],[4],[4],[[],[[6,[7]]]],[4],[[191,191],9],[[],9],[[],9],[[],9],[[191,10],11],[[]],[[],4],[[]],[[],[[6,[23,24]]]],[[127,62],113],[[],113],[[127,9,62],113],[[127,9,62],113],[127,113],[[127,9,62],113],[[127,9,62],113],[[],113],[[]],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],[[[101,[[100,[86]]]],9],113],[[],113],[[],113],[181,[[182,[1,181]]]],[[[101,[[100,[86]]]],9,9],113],[[[101,[[100,[86]]]],9],113],[[],113],[180,113],[[[101,[[100,[86]]]],9],113],[[[101,[[100,[86]]]],9],113],[[[101,[[100,[86]]]],9],113],[[[101,[[100,[86]]]],9],113],[181,[[182,[1,[41,[181]]]]]],[181,[[182,[1,[41,[181]]]]]],[[],113],[[[101,[[100,[86]]]],9],113],[62,113],[62,113],[[],113],[[[101,[[100,[86]]]],9,9],113],[[],113],0,0,0,0,[4,4],[4,4],0,[[],46],[4,4],[4,9],[4,9],[[4,46]],0,[[[51,[44]]],[[6,[41,54]]]],[[],4],[[],41],[[],4],[[],4],[41,[[6,[9,54]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[194,[[0,[3,192,193]]]]],[[194,[[0,[3,192,193]]]]]],[[]],[[4,[47,[[46,[58,[43,[58]]]]]]],[[6,[[195,[59]],54]]]],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[5,[[6,[[194,[[0,[192,193]]]]]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[[[194,[[0,[12,192,193]]]],10],11],[[[196,[[0,[12,192,193]],[0,[12,[43,[[0,[12,1]]]]]],[0,[12,1]]]],10],11],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[196,[59,[43,[58]],58]]],[[46,[58,[43,[58]]]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[4,[46,[58,[43,[58]]]]],[[196,[59,[43,[58]],58]]]],[[[196,[59,[43,[58]],58]],[197,[59]],[198,[59]],[63,[58]],[63,[58]],[42,[58]],4,[0,[199,3]],[47,[[46,[58,[43,[58]]]]]]],[[6,[106]]]],[[]],[[]],[[]],0,0,[[[196,[59,[43,[58]],58]],[44,[58,[43,[58]]]],[197,[59]],199],[[6,[[61,[59]],54]]]],[[[196,[59,[43,[58]],58]]],4],0,[[[194,[[0,[192,193]]]],27],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[60,[59]],[200,[59]],[51,[58]],[51,[58]],[201,[59]],[0,[199,20]]],[[6,[9,54]]]],[[[44,[58,[43,[58]]]],[60,[59]],[61,[59]]],[[6,[9,54]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[[203,[[0,[202,3]],[0,[3,[43,[[0,[202,3]]]]]]]]],[[203,[[0,[202,3]],[0,[3,[43,[[0,[202,3]]]]]]]]]],[[]],[[[204,[202,[43,[202]]]],[203,[202,[43,[202]]]]],[[6,[[204,[202,[43,[202]]]],106]]]],0,[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[5,[[6,[[203,[202,[43,[202]]]]]]]],[5,[[6,[[204,[[0,[120,202]],[0,[120,[43,[[0,[120,202]]]]]]]]]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[[[203,[202,[43,[202]]]],87],88],[[[205,[202,[43,[202]]]],[203,[202,[43,[202]]]],[63,[202]],[63,[202]],[42,[202]],4,[47,[[46,[202,[43,[202]]]]]]],[[6,[106]]]],[[[203,[202,[43,[202]]]],[51,[126]]],[[26,[[51,[126]]]]]],[[[203,[202,[43,[202]]]]],4],[[[205,[[0,[12,202]],[0,[12,[43,[[0,[12,202]]]]]]]],10],11],0,[[]],[[]],[[]],[[[205,[202,[43,[202]]]],[63,[202]],[63,[202]],[42,[202]],4,[46,[202,[43,[202]]]]],[[6,[[41,[[50,[[48,[202]],[49,[202]],[43,[202]]]]]],106]]]],[[],4],[[],4],[[],4],0,[[]],[[]],[[]],[[[205,[202,[43,[202]]]]],[[46,[202,[43,[202]]]]]],0,[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[4,[46,[202,[43,[202]]]]],[[205,[202,[43,[202]]]]]],0,[[]],[[]],[[]],[[[205,[202,[43,[202]]]],[203,[202,[43,[202]]]],[51,[[50,[[48,[202]],[49,[202]],[43,[202]]]]]],[42,[202]],[47,[[46,[202,[43,[202]]]]]]],[[6,[106]]]],[[[203,[202,[43,[202]]]],[42,[202]],[51,[[206,[202,[43,[202]]]]]],4,[41,[202]],[47,[[46,[202,[43,[202]]]]]]],[[6,[[204,[202,[43,[202]]]],106]]]],[[4,[47,[[46,[202,[43,[202]]]]]]],[[203,[202,[43,[202]]]]]],[[[205,[202,[43,[202]]]]],4],[[[203,[202,[43,[202]]]],27],6],[[[204,[[0,[121,202]],[0,[121,[43,[[0,[121,202]]]]]]]],27],6],0,[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[204,[202,[43,[202]]]],[203,[202,[43,[202]]]],4,[51,[202]],[51,[202]]],[[6,[9,107]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[[52,[1]],[42,[1]],[26,[[63,[1]]]]],[[6,[54]]]],[[[52,[1]],[42,[1]],[26,[[63,[1]]]]],[[6,[54]]]],[[[207,[1,128]]],[[26,[[207,[1,128]]]]]],[[[207,[1,128]]],[[26,[[207,[1,128]]]]]],[[]],[[]],[[]],[[]],[[[207,[1,128]],128],[[207,[1,128]]]],[208,208],[[[207,[[0,[3,1]],[0,[3,209]]]]],[[207,[[0,[3,1]],[0,[3,209]]]]]],[[]],[[]],[[208,208],25],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[[208,208],9],[[[207,[[0,[8,1]],[0,[8,209]]]],[207,[[0,[8,1]],[0,[8,209]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[63,[1]],[42,[1]],86,87],88],[[[68,[1]],[42,[1]],86,87],88],[[208,10],11],[[[207,[[0,[12,1]],[0,[12,209]]]],10],11],[127,[[63,[1]]]],[[]],[[]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[208,18]],[[[207,[1,209]],18]],[208,[[26,[4]]]],[[209,4],[[207,[1,209]]]],[[],4],[[],4],[[]],[[]],[[[207,[1,128]]],9],[[[207,[1,128]]],9],[[[68,[1]]],9],[[[207,[1,85]]],9],[[],9],[[[63,[1]]],9],[[[207,[1,128]]],9],[[[207,[1,128]]],9],[208,9],[208,9],[[[207,[1,209]]],9],[128,9],[[[63,[1]],128],9],[[],9],[[[63,[1]]],9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[85,208],[[68,[1]]]],[4,208],[[85,208],[[207,[1,85]]]],[209,[[207,[1,209]]]],[[209,4],[[207,[1,209]]]],[208,[[26,[4]]]],[[208,208],[[26,[25]]]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[]],[[]],0,[[4,9,[47,[[46,[202,[43,[202]]]]]],80],[[6,[[47,[[203,[202,[43,[202]]]]]],210]]]],[[],75],[[4,[47,[[46,[202,[43,[202]]]]]],40],[[6,[210]]]],0,0,0,0,[[],103],[[]],[[]],[4],[4],[[],[[6,[7]]]],[4],[[210,10],11],[[210,10],11],[[]],[211,210],[212,210],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[210,[[26,[103]]]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[213,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]],[[213,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]]],[[]],[[],214],[[],214],0,[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],0,[[[213,[1,[43,[1]]]],[63,[1]],[42,[1]]],76],[[[213,[[0,[12,1]],[0,[12,[43,[[0,[12,1]]]]]]]],10],11],[[[216,[[0,[12,1]],[0,[12,[215,[[0,[12,1]],[0,[12,[43,[[0,[12,1]]]]]]]]]],[0,[12,[43,[[0,[12,1]]]]]]]],10],11],[[]],[[]],[[42,[101,[[100,[86]]]],[0,[[183,[217]],39]]],76],[[42,[101,[[100,[86]]]],181,[0,[[183,[217]],39]]],[[76,[181]]]],[[42,[101,[[100,[86]]]],[183,[217]]],76],[[42,[101,[[100,[86]]]],63,[0,[[183,[217]],39]]],76],[[[213,[1,[43,[1]]]],[42,[1]],[101,[[100,[86]]]],[63,[1]],[0,[[183,[217]],39]]],76],[[42,86,63],76],[[[213,[1,[43,[1]]]],[42,[1]],86,[63,[1]]],76],[[],4],[[],4],[[]],[[]],0,[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],0,[[],28],[[],28],[[42,4,[26,[214]],46]],[[[42,[1]],4,[26,[214]],[46,[1,[43,[1]]]]],[[213,[1,[43,[1]]]]]],[[[42,[1]],4,[26,[214]],[46,[1,[43,[1]]]]],[[213,[1,[43,[1]]]]]],[[[42,[1]],4,[26,[214]],[46,[1,[43,[1]]]]],[[76,[[216,[1,[215,[1,[43,[1]]]],[43,[1]]]]]]]],[[]],[[]],[28,28],[[[213,[1,[43,[1]]]],28],28],[[],28],[[[213,[1,[43,[1]]]]],28],[[[26,[[183,[217]]]],[46,[[0,[1,120]],[43,[[0,[1,120]]]]]]],76],[[[46,[[0,[1,120]],[43,[[0,[1,120]]]]]]],76],[[[42,[1]],[216,[1,[215,[1,[43,[1]]]],[43,[1]]]],[26,[[183,[217]]]]],76],[[[216,[1,[215,[1,[43,[1]]]],[43,[1]]]]],76],[[]],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[]],[[]],0,[[86,178]],[[]],[[]],[[],86],[4],[4],[[],[[6,[7]]]],[4],[[86,10],11],[[86,179],28],[[]],[86,179],[[86,[51,[179]]],76],[[],4],[[],86],[[],86],[[86,[183,[62]]],179],[[86,[51,[[183,[62]]]],9,9],[[76,[179]]]],[[86,[51,[[183,[62]]]],9],[[76,[179]]]],[[]],[[],[[6,[23,24]]]],[62,117],[[],117],[178,86],[[]],[86,[[101,[[100,[86]]]]]],[[86,62],[[26,[179]]]],[[86,179],76],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[86,178],76],[62,117],[[]],0,0,0,0,[[],103],[[[42,[1]],9],[[63,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[42,[1]],[63,[1]]],[[6,[[63,[1]],108]]]],0,[[[42,[1]],[63,[1]]],[[6,[108]]]],[[[42,[1]],[63,[1]]],[[6,[[63,[1]],108]]]],0,0,[108,108],[[[218,[[0,[3,1]]]]],[[218,[[0,[3,1]]]]]],[[[219,[[0,[3,1]]]]],[[219,[[0,[3,1]]]]]],[[]],[[]],[[]],0,0,[[[42,[1]],[63,[1]]],[[63,[1]]]],0,[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],0,[[[42,[1]],[63,[1]],[63,[1]]],9],0,0,0,[[],[[42,[1]]]],0,0,[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],0,[4],[4],[4],[4],0,0,0,0,0,[[[42,[1]]],[[219,[1]]]],[[[42,[1]],[63,[1]]],[[26,[[123,[1]]]]]],[[[42,[1]],[63,[1]]],[[26,[127]]]],[[[42,[1]],[63,[1]]],26],[[[42,[1]],[63,[1]]],26],[[[42,[1]],[68,[1]]],[[26,[[74,[1]]]]]],[[[42,[1]],[63,[1]]],26],[[[42,[1]],[63,[1]]],[[26,[117]]]],[[[42,[1]],[63,[1]]],[[26,[[41,[[63,[1]]]]]]]],[[[42,[1]],[63,[1]]],[[26,[117]]]],[[[42,[1]],[63,[1]]],[[26,[[2,[1]]]]]],[[[42,[1]],[63,[1]]],26],[[[42,[1]],[63,[1]]],[[26,[28]]]],[[[42,[1]],[63,[1]]],[[26,[117]]]],[[[42,[1]],[63,[1]]],[[26,[117]]]],[[[42,[1]],[63,[1]]],26],[[[42,[1]],[63,[1]]],[[26,[[122,[1]]]]]],[[[42,[1]],[63,[1]]],[[26,[14]]]],[[[42,[1]],[67,[1]]],[[26,[[68,[1]]]]]],[[[42,[1]],[66,[1]]],[[26,[[63,[1]]]]]],[[[42,[[0,[12,1]]]],10],11],[[108,10],11],[[108,10],11],[[[218,[[0,[12,1]]]],10],11],[[[219,[[0,[12,1]]]],10],11],[[]],[[]],[[]],[[]],0,[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]],[68,[1]]],[[26,[[70,[1]]]]]],[[[42,[1]],[122,[1]]],[[26,[[70,[1]]]]]],[[[42,[1]],128,1],[[26,[[63,[1]]]]]],[[[42,[1]],[116,[[2,[1]]]]],[[26,[[63,[1]]]]]],[[[42,[1]],[63,[1]]],[[26,[[66,[1]]]]]],[[[42,[1]],[68,[1]],[26,[[220,[1]]]]],[[6,[108]]]],[[[42,[1]],[63,[1]],[26,[[220,[1]]]]],[[6,[108]]]],0,0,[[[42,[1]],[68,[1]]],[[26,[[67,[1]]]]]],[[[42,[1]],[63,[1]]],[[26,[[66,[1]]]]]],[[[42,[1]],62],[[66,[1]]]],[[[42,[1]],117],[[66,[1]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[42,[1]],1,[63,[1]]],[[26,[[63,[1]]]]]],[[[42,[1]],1,[63,[1]]],[[63,[1]]]],0,[[[42,[1]]]],0,0,[[]],[[],4],[[],4],[[],4],[[],4],[[[42,[1]],127],[[63,[1]]]],[[[42,[1]],1,[63,[1]]],[[63,[1]]]],[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]],[63,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[42,[1]],128,1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],[116,[[2,[1]]]]],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[42,[1]],62],[[63,[1]]]],[[[42,[1]],117],[[63,[1]]]],[[[42,[1]],[51,[28]]],[[63,[1]]]],[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[42,[1]],9],[[63,[1]]]],[[[42,[1]],[175,[1]]],[[63,[1]]]],[[[42,[1]],[122,[1]]],[[63,[1]]]],[[[42,[1]],13],[[63,[1]]]],[[[42,[1]],14],[[63,[1]]]],[[[42,[1]],[67,[1]],[220,[1]]],[[26,[[68,[1]]]]]],[[[42,[1]],[66,[1]],[220,[1]]],[[26,[[63,[1]]]]]],[[]],[[]],[[]],[[]],0,[[[42,[1]],[183,[62]]],[[63,[1]]]],0,[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],0,0,0,0,0,0,[[[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],0,[[[42,[1]],[68,[1]]],[[68,[1]]]],0,[[],[[42,[1]]]],[[[42,[1]]],[[219,[1]]]],[[[42,[1]]],[[63,[1]]]],0,[[[42,[1]],[116,[[2,[1]]]]],[[63,[1]]]],0,0,0,0,0,[[[42,[1]],[63,[1]]],26],0,[[[42,[1]],[63,[1]]],[[6,[108]]]],[[]],[[]],[[]],[[]],0,0,[[[218,[1]]],[[63,[1]]]],[[[42,[1]],[63,[1]],[63,[1]]],[[6,[9,108]]]],0,0,[[[42,[1]],62],[[6,[[63,[1]],176]]]],[[[42,[1]],[101,[[100,[86]]]],181],[[6,[176]]]],[[[42,[1]],[101,[[100,[86]]]],62],[[6,[[63,[1]],176]]]],[[[42,[1]],[63,[1]]],[[26,[[63,[1]]]]]],0,[[[42,[1]],[63,[1]]],[[6,[[63,[1]],108]]]],[[[42,[1]],62],[[63,[1]]]],0,[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],0,[[[42,[1]]],[[63,[1]]]],0,[[[42,[1]],[183,[62]]],[[63,[1]]]],0,[[[42,[1]]],[[63,[1]]]],0,0,0,[[]],[[]],[[]],[[],28],[[[42,[1]],[68,[1]]],[[26,[[221,[1]]]]]],[[[42,[1]],[63,[1]]],[[26,[[222,[1]]]]]],[[[42,[1]],[63,[1]]],[[6,[108]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],0,[[[42,[1]],13],[[63,[1]]]],0,[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[42,[1]],62],[[63,[1]]]],[[[218,[1]]],1],[[]],[[]],[[]],[[]],[[[42,[1]],1,1],[[6,[[67,[1]],108]]]],0,[[[42,[1]],1,1],[[6,[[66,[1]],108]]]],0,[[[218,[1]]],[[66,[1]]]],0,0,0,0,0,[[]],[[117,117],[[26,[117]]]],[[]],[[]],[117,117],[[]],[4],[4],[5,[[6,[117]]]],[[],[[6,[7]]]],[[117,62],117],[117,[[26,[117]]]],[4],[[117,117],9],[[],9],[[],9],[[],9],[[117,[51,[[183,[62]]]]],117],[[117,10],11],[[117,10],11],[62,28],[117,28],[117,28],[117,28],[62,117],[[]],[62,[[26,[117]]]],[[[0,[15,16]],17],13],[[117,117],9],[[117,18]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[117,9],[117,9],[117,9],[117,9],[127,9],[[[51,[[183,[62]]]]],117],[[[41,[28]]],117],[[],[[6,[23,24]]]],[117,[[76,[62]]]],[[[51,[[183,[62]]]],9],117],[[[41,[28]],9],117],[[117,117],[[26,[25]]]],[117,[[51,[28]]]],[[]],[117,9],[9,117],[[],117],[[],117],[[117,27],6],[117],[[[51,[[183,[62]]]]],117],[[[41,[28]]],117],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[175,[[0,[3,1]]]]],[[175,[[0,[3,1]]]]]],[[]],[4],[4],[[],[[6,[7]]]],[4],[[[175,[[0,[8,1]]]],[175,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[175,[[0,[12,1]]]],10],11],[[[175,[1]],10],11],[[]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],41],[[],[[41,[129]]]],[[],[[41,[130]]]],[[],[[41,[62]]]],[[128,[52,[1]]],[[53,[1]]]],[[85,[52,[1]]],[[53,[1]]]],[[129,[52,[1]]],[[53,[1]]]],[[130,[52,[1]]],[[53,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[128,128],[85,85],[129,129],[130,130],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[5,[[6,[128]]]],[5,[[6,[85]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[129]]]],[5,[[6,[130]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[[128,128],9],[[85,85],9],[[129,129],9],[[130,130],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[128,10],11],[[128,10],11],[[85,10],11],[[85,10],11],[[129,10],11],[[129,10],11],[[130,10],11],[[130,10],11],[[]],[[]],[[]],[[]],[1,26],[1,[[26,[128]]]],[1,[[26,[85]]]],[1,[[26,[129]]]],[1,[[26,[130]]]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[128,18]],[[85,18]],[[129,18]],[[130,18]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[128,9],[130,9],[[128,128],9],[128,9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[129,129],[[26,[25]]]],[[130,130],[[26,[25]]]],[[]],[[]],[[]],[[]],[[128,27],6],[[85,27],6],[[129,27],6],[[130,27],6],[4,9],[[129,4],9],[[130,4],9],[[],62],[129,62],[130,62],[[],1],[128,1],[85,1],[129,1],[130,[[0,[[223,[13]],224]]]],[[]],[128],[85],[129],[130],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[131,[[6,[128]]]],[[],6],[131,[[6,[85]]]],[[],6],[131,[[6,[129]]]],[[],6],[131,[[6,[130]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],0,0,[[14,14],14],[[]],[[]],[[]],[14,14],[[]],[4],[4],[5,[[6,[14]]]],[[],[[6,[7]]]],[[14,14],14],[4],[[14,14],9],[[],9],[[],9],[[],9],[[14,10],11],[[14,10],11],[13,14],[[]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[14,9],[[],[[6,[23,24]]]],[[14,14],14],[[14,14],[[26,[25]]]],[[]],[[14,14],14],[[14,27],6],[[14,14],14],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,[[42,86,87],88],[[42,86],28],0,0,0,[[]],[[]],[[]],[4,126],[225,225],[[]],[4],[4],[[],[[6,[7]]]],[4],[[225,225],9],[[],9],[[],9],[[],9],[[225,10],11],[[225,10],11],[[]],[[[51,[126]]],[[76,[225]]]],0,[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[[51,[126]]],[[26,[4]]]],0,[225,126],[126,9],[126,9],[225,[[41,[126]]]],[[]],[[],28],[4,[[41,[126]]]],0,[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,[[],103],[[]],[[]],[19,226],[19,226],0,[4],[4],[[],[[6,[7]]]],[4],[[226,10],11],[[226,10],11],[[]],0,[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],0,[[],28],0,[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,[[]],[[]],[4],[4],[[],[[6,[7]]]],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,62,[51,[62]],228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,62,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,62,[51,[62]],228],6],[[227,4,228],6],[[227,62,4,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,228],6],[[227,62,228],6],[4],[[227,10],11],[[]],[225,[[6,[120,226]]]],[225,227],[[],4],[[]],[227,9],[[],[[6,[23,24]]]],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[229,6],[229,6],[229,6],[230,6],[231,6],[232,6],[232,6],[[233,10],11],[[229,10],11],[[230,10],11],[[231,10],11],[[232,10],11],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[233,9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[]],[[]],[[]],[[]],[[]],[[233,9],6],[[233,[51,[126]]],6],[[233,127],6],[[229,[0,[121,16]]],6],[[229,[0,[121,16]]],6],[[233,234],6],[[233,235],6],[[229,[0,[121,16]]],6],[[231,[0,[121,16]]],6],[[232,62,[0,[121,16]]],6],[[232,62,[0,[121,16]]],6],[[233,236],6],[[233,237],6],[[233,238],6],[[233,239],6],[[230,[0,[121,16]]],6],[[233,[26,[4]]],6],[[233,62,[0,[121,16]]],6],[[233,62,132,62,[0,[121,16]]],6],[233,6],[[233,[26,[4]]],6],[[233,[0,[121,16]]],6],[[233,62],6],[[233,62,4],6],[[233,62,132,62,4],6],[[233,4],6],[[233,62,4],6],[[233,62,132,62,4],6],[[233,131],6],[[233,132],6],[[233,13],6],[[233,126],6],[233,6],[[233,62],6],[[233,62,132,62],6],[[230,[0,[121,16]]],6],[121,[[6,[225,226]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[221,[[0,[3,1]]]]],[[221,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[221,[[0,[120,1]]]]]]]],[[],[[6,[7]]]],[4],[[[221,[[0,[8,1]]]],[221,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[221,[[0,[12,1]]]],10],11],[[]],[[[221,[1]]],[[70,[1]]]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[[221,[[0,[121,1]]]],27],6],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],[[[221,[1]],[102,[1]]],[[67,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[222,[[0,[3,1]]]]],[[222,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[222,[[0,[120,1]]]]]]]],[[],[[6,[7]]]],[4],[[[222,[[0,[8,1]]]],[222,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[222,[[0,[12,1]]]],10],11],[[[222,[1]],10],11],[[]],[[[42,[1]],[63,[1]]],[[26,[[222,[1]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[[222,[[0,[121,1]]]],27],6],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],[[[222,[1]],[102,[1]]],[[66,[1]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[[240,[[0,[3,209]],[0,[3,1]]]]],[[240,[[0,[3,209]],[0,[3,1]]]]]],[[]],[[[240,[209,1]],[240,[209,1]]],25],[4],[4],[5,[[6,[[240,[[0,[120,209]],[0,[120,1]]]]]]]],[[],[[6,[7]]]],[4],[[[240,[[0,[8,209]],[0,[8,1]]]],[240,[[0,[8,209]],[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[240,[[0,[12,209]],[0,[12,1]]]],10],11],[[[240,[[0,[209,19]],1]],10],11],[[]],[62,[[6,[[240,[209,1]],241]]]],[62,[[6,[[66,[1]],108]]]],[62,[[6,[[240,[128,1]],108]]]],[[209,1],[[240,[209,1]]]],[[[0,[15,16]],17],13],[[[240,[209,1]],18]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[[240,[209,1]]],[[70,[1]]]],[[],[[6,[23,24]]]],[[[240,[209,1]],[240,[209,1]]],[[26,[25]]]],[[[240,[209,1]]]],[[]],[[[240,[[0,[121,209]],[0,[121,1]]]],27],6],[[[240,[209,1]]],209],[[[240,[209,1]]],1],[[[240,[209,1]]],28],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[[240,[209,1]]],1],[[]],0,[[]],[[]],[[]],[[[220,[[0,[3,1]]]]],[[220,[[0,[3,1]]]]]],[[]],0,[[],[[220,[[0,[95,1]]]]]],[4],[4],[[],[[6,[7]]]],[5,[[6,[[220,[[0,[120,1]]]]]]]],[4],[[[220,[[0,[8,1]]]],[220,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],0,[[[220,[[0,[12,1]]]],10],11],[[]],[[[220,[1]],[67,[1]]],[[26,[[221,[1]]]]]],[[[220,[1]],[66,[1]]],[[26,[[222,[1]]]]]],[[[66,[1]]],[[26,[[222,[1]]]]]],[[],4],[[[220,[1]],[42,[1]],[63,[1]]],[[26,[[66,[1]]]]]],[[[220,[1]],[66,[1]],[26,[[222,[1]]]]],[[26,[[26,[[222,[1]]]]]]]],[[]],[[],[[6,[23,24]]]],[[],[[220,[1]]]],[[[42,[1]],[63,[1]]]],[[[220,[1]],[102,[1]]],[[66,[1]]]],[[]],[[[220,[1]],62,[102,[1]]]],[[[220,[1]],117,[102,[1]]]],[[[220,[[0,[121,1]]]],27],6],[[]],[[[220,[1]]],[[42,[1]]]],[[[220,[1]],[66,[1]]],[[6,[108]]]],[[[42,[1]]],[[220,[1]]]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]]],"c":[],"p":[[8,"LurkField",1411],[4,"Num",0],[8,"Clone",4551],[15,"usize"],[8,"Deserializer",4552],[4,"Result",4553],[3,"With",4554],[8,"PartialEq",4555],[15,"bool"],[3,"Formatter",4556],[6,"Result",4556],[8,"Debug",4556],[15,"u64"],[4,"UInt",4001],[8,"Hash",4557],[8,"Sized",4558],[8,"BuildHasher",4557],[8,"Hasher",4557],[8,"Display",4556],[8,"Send",4558],[8,"Sync",4558],[3,"IndentedSection",4559],[3,"Layout",4560],[3,"LayoutError",4560],[4,"Ordering",4555],[4,"Option",4561],[8,"Serializer",4562],[3,"String",4563],[3,"TypeId",4564],[3,"Global",4565],[3,"Box",4566],[8,"Any",4564],[3,"CacheMap",101],[3,"RandomState",4567],[3,"HashMap",4568],[8,"Eq",4555],[8,"Borrow",4569],[8,"StableDeref",4570],[8,"Copy",4558],[8,"FnOnce",4571],[3,"Vec",4572],[3,"Store",3391],[8,"Coprocessor",648],[3,"MultiFrame",141],[3,"CircuitFrame",141],[3,"Lang",1208],[3,"Arc",4573],[3,"IO",1003],[3,"Witness",1003],[3,"Frame",1003],[15,"slice"],[8,"ConstraintSystem",4574],[3,"AllocatedNum",4575],[4,"SynthesisError",4574],[3,"AllocatedPtr",310],[3,"AllocatedContPtr",310],[3,"GlobalAllocations",224],[3,"Scalar",4576],[3,"Bls12",4577],[3,"PreparedVerifyingKey",4578],[3,"Proof",4579],[15,"str"],[6,"Ptr",3140],[8,"PrimeField",4580],[4,"Boolean",4581],[6,"ZExprPtr",4456],[6,"ZContPtr",4456],[6,"ContPtr",3140],[8,"IntoHashComponents",1514],[15,"array"],[4,"ConsName",1655],[4,"ContName",1655],[8,"AsAllocatedHashComponents",310],[4,"Continuation",567],[3,"Utf8PathBuf",4582],[6,"Result",4583],[4,"Backend",424],[6,"Scalar",4584],[3,"Repl",448],[3,"Utf8Path",4582],[4,"Flow",469],[3,"ParallelConfig",469],[3,"WitnessGeneration",469],[3,"Config",469],[4,"ContTag",3765],[3,"State",3353],[8,"Write",4585],[6,"Result",4586],[8,"CircomGadget",219],[3,"CircomCoprocessor",659],[4,"TrieCoproc",690],[3,"NewCoprocessor",690],[3,"LookupCoprocessor",690],[3,"InsertCoprocessor",690],[8,"Default",4587],[3,"Trie",690],[4,"Error",690],[3,"LookupProof",690],[3,"InsertProof",690],[3,"RefCell",4588],[3,"Rc",4589],[3,"PoseidonCache",1514],[8,"Error",4590],[4,"ReductionError",908],[4,"LurkError",908],[4,"ProofError",908],[4,"NovaError",4591],[3,"Error",3391],[4,"Status",1003],[3,"Evaluator",1003],[3,"Error",4556],[3,"FrameIt",1003],[8,"Fn",4571],[3,"Take",4592],[3,"Binding",1208],[8,"Into",4593],[3,"Symbol",3657],[4,"Coproc",1208],[3,"DummyCoprocessor",1208],[8,"Deserialize",4552],[8,"Serialize",4562],[3,"Thunk",1326],[4,"Expression",1326],[4,"LanguageField",1411],[3,"FWrap",1411],[15,"u8"],[15,"char"],[4,"ExprTag",3765],[4,"Op1",3765],[4,"Op2",3765],[15,"u16"],[15,"u32"],[15,"u128"],[3,"HashConstants",1514],[6,"U3",4594],[3,"PoseidonConstants",4595],[6,"U4",4594],[6,"U6",4594],[6,"U8",4594],[4,"HashConst",1514],[4,"HashArity",1514],[3,"InversePoseidonCache",1514],[8,"HashName",1655],[3,"HashWitness",1655],[6,"ConsStub",1655],[3,"Cons",1655],[4,"Stub",1655],[6,"ConsWitness",1655],[8,"ContentAddressed",1655],[3,"CircuitHashWitness",1655],[6,"HashCircuitWitnessBlocks",1655],[3,"ScalarCons",1655],[3,"ScalarCont",1655],[3,"Cont",1655],[6,"ContStub",1655],[6,"ContWitness",1655],[6,"Preimage",1655],[3,"Func",2034],[3,"Store",2562],[3,"GlobalAllocator",2339],[4,"Ptr",2450],[3,"Preimages",2363],[3,"Var",2034],[4,"Tag",2034],[4,"CtrlTag",2034],[4,"Lit",2034],[3,"Block",2034],[4,"Ctrl",2034],[4,"Op",2034],[6,"AString",2034],[3,"Frame",2363],[4,"PreimageData",2363],[3,"ZPtr",2450],[4,"ZChildren",2450],[4,"Syntax",3726],[4,"Error",2674],[3,"ZStore",2619],[3,"Package",2646],[6,"SymbolRef",2646],[4,"LitBase",2715],[6,"Span",2674],[6,"ParseResult",2674],[8,"AsRef",4593],[8,"InputLength",4596],[8,"AsBytes",4596],[3,"ParseError",2762],[4,"ErrorKind",4597],[4,"ParseErrorKind",2762],[6,"IResult",4598],[4,"Pos",2844],[4,"StringFragment",2882],[8,"Engine",4599],[8,"MultiMillerLoop",4599],[3,"Proof",2960],[3,"PublicParams",2960],[3,"Groth16Prover",2960],[3,"Parameters",4600],[3,"GenericSRS",4601],[8,"RngCore",4602],[3,"VerifierSRS",4601],[3,"AggregateProofAndInstance",4603],[8,"CurveCycleEquipped",3037],[3,"PublicParams",3037],[4,"Proof",3037],[3,"NovaProver",3037],[6,"C1",3037],[3,"GPtr",3140],[4,"RawPtr",3140],[8,"Tag",3765],[4,"Error",3250],[3,"Error",4586],[3,"Error",4604],[3,"ReplState",3281],[3,"Command",4605],[8,"ReplTrait",3281],[3,"Repl",3281],[3,"Path",4606],[3,"ConstantPtrs",3391],[3,"NamedConstants",3391],[3,"ZStore",4505],[4,"ZCont",4324],[4,"ZExpr",4404],[8,"From",4593],[8,"Field",4580],[4,"ZData",4046],[4,"SerdeError",4094],[3,"Deserializer",4127],[8,"Visitor",4552],[3,"SerializeCell",4179],[3,"SerializeMap",4179],[3,"SerializeTupleVariant",4179],[3,"StructSerializer",4179],[3,"Serializer",4179],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"ZPtr",4456],[3,"Error",4583],[8,"ToInputs",136],[13,"Let",616],[13,"LetRec",616],[13,"Call0",616],[13,"Call",616],[13,"Call2",616],[13,"Tail",616],[13,"Lookup",616],[13,"Unop",616],[13,"Binop",616],[13,"Binop2",616],[13,"If",616],[13,"Emit",616],[8,"CoCircuit",648],[6,"ChildMap",690],[8,"Evaluable",1003],[6,"ConsCircuitWitness",1655],[6,"ContCircuitWitness",1655],[8,"CAddr",1655],[13,"Pos",2876],[8,"Prover",2941],[8,"Provable",2941],[8,"TypePredicates",3140],[8,"Op",3765],[8,"Write",4043],[13,"Let",4372],[13,"LetRec",4372],[13,"Call0",4372],[13,"Call",4372],[13,"Call2",4372],[13,"Tail",4372],[13,"Lookup",4372],[13,"Unop",4372],[13,"Binop",4372],[13,"Binop2",4372],[13,"If",4372],[13,"Emit",4372],[13,"Fun",4453]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,2,1,2,1,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1],"f":[0,0,0,[[]],[[]],[[]],[[]],[1],[[2,3],4],[[1,3],4],[[]],[[]],[[],1],[[]],[[]],[1],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6]],"c":[],"p":[[3,"MetricsSinkHandle",0],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
