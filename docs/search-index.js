var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLFLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","deserialize","drop","from","handle_meta","handle_non_meta","init","into","layout_raw","name","new","pointer_metadata","process_line","prompt","public_param_dir","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,0,7,7,7,7,7,7,7],"f":[0,[[]],[[]],[[],1],[2],[2],[[],[[4,[3]]]],[2],[[]],[[[7,[5,[6,[5]]]],[8,[5]],[11,[[10,[9]]]],[12,[5]],[0,[[14,[13]],15]]],16],[[[7,[5,[6,[5]]]],[8,[5]],9,[12,[5]]],16],[[],2],[[]],[[],[[4,[17,18]]]],[[],19],[[[8,[5]],2,[20,[1]],[21,[5,[6,[5]]]]],[[7,[5,[6,[5]]]]]],[[]],[[[7,[5,[6,[5]]]],19],19],[[[7,[5,[6,[5]]]]],19],[[],22],[[],4],[[],4],[[],23],[[[25,[24]]],[[25,[26,24]]]],[[],26],[[],26],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[3,"With"],[4,"Result"],[6,"Scalar"],[4,"Coproc"],[3,"ClutchState"],[3,"Store"],[3,"State"],[3,"RefCell"],[3,"Rc"],[3,"Ptr"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[3,"Layout"],[3,"LayoutError"],[3,"String"],[4,"Option"],[3,"Lang"],[3,"Utf8PathBuf"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"]]},\
"fcomm":{"doc":"","t":"DEDDGRNDNDNEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMFMLLLLMLLLLLLLLLLLLLLLLMMLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLFLLLLLLLLLLLKKKLLLLLLLLKK","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","file_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_param_dir","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","from","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","FileMap","FileStore","borrow","borrow_mut","data_dir","deref","deref_mut","deserialize","drop","from","get","init","into","layout_raw","new","pointer_metadata","read_from_json_path","read_from_path","read_from_stdin","set","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","write_to_json_path","write_to_path"],"q":[[0,"fcomm"],[638,"fcomm::error"],[683,"fcomm::file_map"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,28,0,9,0,16,0,0,0,16,16,0,9,0,28,0,0,9,0,0,27,16,28,0,0,0,0,27,24,24,17,20,21,24,25,26,27,28,4,9,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,22,15,30,16,17,20,21,22,23,24,25,26,27,28,4,9,30,16,17,20,21,22,23,24,25,26,27,28,4,9,30,21,22,24,4,0,17,20,17,20,28,16,17,20,27,28,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,16,17,17,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,4,4,38,38,15,15,9,9,30,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,17,20,17,20,16,17,20,21,22,23,24,25,26,27,28,4,9,30,16,16,16,17,17,17,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,4,4,4,9,9,9,30,30,30,0,17,23,15,0,9,15,17,20,23,4,17,20,4,0,17,20,21,22,23,24,25,26,27,28,4,38,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,21,28,21,27,21,21,16,16,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,22,24,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,15,9,9,17,20,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,24,0,15,24,24,9,15,24,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,15,30,9,15,21,27,9,15,0,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,15,4,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,30,17,20,24,16,17,20,21,22,23,24,25,26,27,28,4,9,30,21,16,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,38,30,30,15,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,38,15,9,30,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,79,79,0,79,79,79,79,79,79,79,79,79,79,79,78,78,78,79,79,79,79,79,79,79,79,78,78],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[16,16],[17,17],[[[20,[[0,[18,19]]]]],[[20,[[0,[18,19]]]]]],[[[21,[[0,[18,19]]]]],[[21,[[0,[18,19]]]]]],[[[22,[[0,[18,19]]]]],[[22,[[0,[18,19]]]]]],[[[23,[[0,[18,19]]]]],[[23,[[0,[18,19]]]]]],[[[24,[[0,[18,19]]]]],[[24,[[0,[18,19]]]]]],[25,25],[[[26,[[0,[18,19]]]]],[[26,[[0,[18,19]]]]]],[[[27,[[0,[18,19]]]]],[[27,[[0,[18,19]]]]]],[28,28],[[[4,[[0,[18,19,29]]]]],[[4,[[0,[18,19,29]]]]]],[[[9,[[0,[18,19]]]]],[[9,[[0,[18,19]]]]]],[[[30,[[0,[18,19]]]]],[[30,[[0,[18,19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],31],0,0,0,0,[[28,[2,[[0,[19,29,32]]]]],[[33,[[0,[19,29,32]]]]]],[16,5],[[],17],[[],[[20,[[0,[34,19]]]]]],[[],[[27,[19]]]],[[],28],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[35,[[11,[16]]]],[[],[[11,[36]]]],[35,[[11,[17]]]],[[],[[11,[36]]]],[35,[[11,[[20,[[0,[37,19]]]]]]]],[[],[[11,[36]]]],[[],[[11,[36]]]],[35,[[11,[[21,[19]]]]]],[35,[[11,[[22,[[0,[37,19]]]]]]]],[[],[[11,[36]]]],[35,[[11,[[23,[[0,[37,19]]]]]]]],[[],[[11,[36]]]],[35,[[11,[[24,[[0,[37,19]]]]]]]],[[],[[11,[36]]]],[[],[[11,[36]]]],[35,[[11,[25]]]],[35,[[11,[[26,[[0,[37,19]]]]]]]],[[],[[11,[36]]]],[35,[[11,[[27,[[0,[37,19]]]]]]]],[[],[[11,[36]]]],[35,[[11,[28]]]],[[],[[11,[36]]]],[[],[[11,[36]]]],[35,[[11,[[4,[[0,[37,19,29]]]]]]]],[[],[[11,[36]]]],[35,[[11,[38]]]],[35,[[11,[[15,[[0,[37,39]]]]]]]],[[],[[11,[36]]]],[[],[[11,[36]]]],[35,[[11,[[9,[[0,[37,19]]]]]]]],[[],[[11,[36]]]],[35,[[11,[[30,[[0,[37,19]]]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,0,0,[[16,16],6],[[17,17],6],[[[20,[[0,[40,19]]]],[20,[[0,[40,19]]]]],6],[[[21,[[0,[40,19]]]],[21,[[0,[40,19]]]]],6],[[[22,[[0,[40,19]]]],[22,[[0,[40,19]]]]],6],[[[23,[[0,[40,19]]]],[23,[[0,[40,19]]]]],6],[[[24,[[0,[40,19]]]],[24,[[0,[40,19]]]]],6],[[25,25],6],[[[26,[[0,[40,19]]]],[26,[[0,[40,19]]]]],6],[[[27,[[0,[40,19]]]],[27,[[0,[40,19]]]]],6],[[28,28],6],[[[4,[[0,[40,19,29]]]],[4,[[0,[40,19,29]]]]],6],[[[9,[[0,[40,19]]]],[9,[[0,[40,19]]]]],6],[[[30,[[0,[40,19]]]],[30,[[0,[40,19]]]]],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[2,[[0,[19,29]]]],[3,[[0,[19,29]]]],5],[[11,[17,10]]]],[[[23,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[11,[[3,[[0,[19,29,32]]]],10]]]],[[[2,[1]],[3,[1]],[41,[[3,[1]]]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[2,[19]],[3,[19]],[41,[[3,[19]]]],5,[8,[19,[7,[19]]]]],[[11,[10]]]],[[[9,[19]]],[[41,[17]]]],[[[15,[1]],[2,[1]]],[[11,[10]]]],0,0,0,0,0,0,[[[4,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[11,[[3,[[0,[19,29,32]]]],10]]]],0,[[17,42],43],[[[20,[[0,[44,19]]]],42],43],[[[21,[[0,[44,19]]]],42],43],[[[22,[[0,[44,19]]]],42],43],[[[23,[[0,[44,19]]]],42],43],[[[24,[[0,[44,19]]]],42],43],[[25,42],43],[[[26,[[0,[44,19]]]],42],43],[[[27,[[0,[44,19]]]],42],43],[[28,42],43],[[[4,[[0,[44,19,29]]]],42],43],[[38,42],43],[[[9,[[0,[44,19]]]],42],43],[[[30,[[0,[44,19]]]],42],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[11,[[21,[[0,[19,29,32]]]],10]]]],[[[2,[[0,[19,29]]]],[33,[[0,[19,29]]]]],28],[[[47,[[46,[45]]]]],[[11,[[21,[19]]]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[27,[[0,[19,29,32]]]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]],[0,[19,29,32]]],[[11,[[21,[[0,[19,29,32]]]],10]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[11,[10]]]],[[[0,[48,49]],50],51],[[16,52]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[[[9,[19]]],6],[[[9,[19]]],6],0,0,[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],[[],[[11,[53,54]]]],0,[5,55],0,[[[2,[1]],[22,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[22,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[9,[19]]],[[41,[[24,[19]]]]]],[[[15,[1]],[2,[1]]],[[11,[10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[9,[[0,[19,29,37]]]]],[[11,[[56,[[0,[19,29,37]]]],10]]]],[[[2,[1]],[9,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[21,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]]],[[3,[[0,[19,29,32]]]]]],[[[27,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[3,[[0,[19,29,32]]]]]],[[[9,[19]]],[[41,[[20,[19]]]]]],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[[],57],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],[[],[[11,[59]]]],0,0,[[16,60],11],[[17,60],11],[[[20,[[0,[29,19]]]],60],11],[[[21,[19]],60],11],[[[22,[[0,[29,19]]]],60],11],[[[23,[[0,[29,19]]]],60],11],[[[24,[[0,[29,19]]]],60],11],[[25,60],11],[[[26,[[0,[29,19]]]],60],11],[[[27,[[0,[29,19]]]],60],11],[[28,60],11],[[[4,[[0,[29,19,29]]]],60],11],[[38,60],11],[[[15,[[0,[29,39]]]],60],11],[[[9,[[0,[29,19]]]],60],11],[[[30,[[0,[29,19]]]],60],11],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[19]]],61],[5,[[11,[16]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[],62],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[[64,[63]]],[[64,[65,63]]]],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],[[],65],0,0,0,[[[15,[1]],[13,[1,[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[38,10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],[[[47,[58]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[],66],[[]],[[]],[5],[5],[[],[[11,[36]]]],[5],[[10,42],43],[[10,42],43],[[]],[67,10],[68,10],[69,10],[59,10],[70,10],[71,10],[72,10],[[[0,[73,74,75]]],[[76,[[0,[73,74,75]]]]]],[[]],[[],5],[[]],[[],[[11,[53,54]]]],[[]],[10,[[41,[66]]]],[[],61],[[],11],[[],11],[[],62],[[[64,[63]]],[[64,[65,63]]]],[[],65],[[],65],[[]],0,0,[[]],[[]],[[],57],[5],[5],[[],[[11,[36]]]],[5],[[]],[[[79,[77,78]],77],[[41,[78]]]],[[],5],[[]],[[],[[11,[53,54]]]],[[[47,[58]]],[[11,[[79,[77,78]],59]]]],[[]],[[[47,[58]]],[[11,[59]]]],[[[47,[58]]],[[11,[59]]]],[[],[[11,[59]]]],[[[79,[77,78]],77,78],[[11,[59]]]],[[],11],[[],11],[[],62],[[[64,[63]]],[[64,[65,63]]]],[[],65],[[],65],[[]],[[[47,[58]]]],[[[47,[58]]]]],"c":[],"p":[[6,"S1"],[3,"Store"],[3,"Ptr"],[3,"CommittedExpression"],[15,"usize"],[15,"bool"],[4,"Coproc"],[3,"Lang"],[4,"Claim"],[4,"Error"],[4,"Result"],[3,"NovaProver"],[3,"PublicParams"],[3,"Arc"],[3,"Proof"],[4,"ReductionCount"],[3,"Evaluation"],[8,"Clone"],[8,"LurkField"],[3,"PtrEvaluation"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"ZBytes"],[3,"ZStorePtr"],[4,"LurkPtr"],[4,"LurkCont"],[8,"Serialize"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"DeserializeOwned"],[3,"ContPtr"],[8,"Default"],[8,"Deserializer"],[3,"With"],[8,"Deserialize"],[3,"VerificationResult"],[8,"CurveCycleEquipped"],[8,"PartialEq"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u8"],[15,"slice"],[8,"AsRef"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[3,"Layout"],[3,"LayoutError"],[6,"NovaProofCache"],[6,"ZExprPtr"],[3,"Utf8PathBuf"],[3,"Path"],[4,"Error"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[8,"Error"],[4,"SerdeError"],[4,"FromHexError"],[3,"Error"],[4,"SynthesisError"],[3,"Error"],[3,"Error"],[8,"Display"],[8,"Send"],[8,"Sync"],[3,"IndentedSection"],[8,"ToString"],[8,"FileStore"],[3,"FileMap"]]},\
"lurk":{"doc":"","t":"ENCRNCLLOLLAOAALLAAAOLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIAAKKDDLLLLLLLMLLLLMLLLLLLLLLMLLLLLLLMMLLMLLMMLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMAAAAIKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFAHDENDNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLKLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIDDDDNENDMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLKLLLKLLLKLLLALLLLLLKLLLLLMLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNGLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMMLMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLKLLLLLMLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNENENNNNNNNDNNNNNENNNNNNNNENNNNNNENNNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLEHNGGNLALLLLLLLLALLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFIIIQLLAKLLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLGGQQQQNIGGGQGQDGEDNGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLDNNNDEIMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLAFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLLLMLLLLLLKLKLLLLLMLLMKLKLLLLLKLKLFFFLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMLMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLMMLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLNNELLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","cache_map","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","repl","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","CacheMap","as_mut","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","from","get","get_copy","get_copy_or_insert","get_copy_or_insert_with","get_copy_or_insert_with_key","init","insert","insert_with","insert_with_key","into","is_empty","keys_cloned","layout_raw","len","map_get","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","blank","blank","borrow","borrow","borrow_mut","borrow_mut","cached_witness","clone","clone","clone_into","clone_into","count","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","frames","from","from","from_frame","from_frames","get_store","init","init","input","input","into","into","lang","layout_raw","layout_raw","output","output","pointer_metadata","pointer_metadata","precedes","precedes","public_input_size","public_inputs","reduction_count","store","store","synthesize","synthesize","synthesize_frames","synthesize_frames_parallel","synthesize_frames_sequential","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","verify_groth16_proof","vzip","vzip","witness","circom","constraints","data","pointer","CircomGadget","into_circom_input","name","simple_evaluate","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","get_config","parse_and_run","paths","CONFIG","Config","Flow","Parallel","ParallelConfig","ParallelN","Sequential","WitnessGeneration","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","num_threads","parallelism","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","has_circuit","simple_evaluate","synthesize","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","simple_evaluate","synthesize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","Trie","TrieCoproc","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_frames","get_frames","header","i","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_terminal","is_terminal","is_terminal","iter","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","log","log","log","maybe_emitted_expression","new","next","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","from","from","from","from","from","from","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup","max_coprocessor_arity","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BLS12_381","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","WitnessBlock","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","length","names_and_ptrs","names_and_ptrs","new_blank","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","ApplyContinuation","Block","Call","Cast","Cont","Ctrl","Ctrl","CtrlTag","Div","DivRem64","Emit","EqTag","EqVal","Error","Expr","Func","Hash2","Hash3","Hash4","Hide","IfEq","Lit","Lit","Lt","MakeThunk","MatchTag","MatchVal","Mul","Null","Num","Op","Open","Return","Return","String","Sub","Symbol","Tag","Trunc","Unhash2","Unhash3","Unhash4","Var","assert_all_paths_taken","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_until","check","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_ptr","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","name","new","num_constraints","num_paths","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","synthesize","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Error","LURK_WHITESPACE","NoInput","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","from_upto","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","outer_prove","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_count","prove","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","CE1","CE2","CK1","CK2","Compressed","CurveCycleEquipped","EE1","EE2","G1","G1","G2","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","from","from","from","get_evaluation_frames","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","reduction_count","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","ContPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone_into","clone_into","clone_into","cmp","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","idx","index","index","init","init","init","into","into","into","is_atom","is_cons","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","layout_raw","new","new","null","null","opaque","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","raw","raw","tag","tag","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","error","public_params","public_params_default_dir","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","env","eval_expr","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","layout_raw","layout_raw","limit","name","name","new","new","new","new","pointer_metadata","pointer_metadata","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","quote","quotient","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","fmt_to_string_raw","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[101,"lurk::cache_map"],[136,"lurk::circuit"],[141,"lurk::circuit::circuit_frame"],[214,"lurk::circuit::gadgets"],[218,"lurk::circuit::gadgets::circom"],[222,"lurk::circuit::gadgets::constraints"],[223,"lurk::circuit::gadgets::data"],[308,"lurk::circuit::gadgets::pointer"],[417,"lurk::cli"],[420,"lurk::config"],[518,"lurk::cont"],[567,"lurk::cont::Continuation"],[599,"lurk::coprocessor"],[609,"lurk::coprocessor::circom"],[610,"lurk::coprocessor::circom::non_wasm"],[641,"lurk::coprocessor::trie"],[855,"lurk::error"],[950,"lurk::eval"],[1154,"lurk::eval::lang"],[1271,"lurk::expr"],[1356,"lurk::field"],[1459,"lurk::hash"],[1599,"lurk::hash_witness"],[1964,"lurk::lem"],[2248,"lurk::package"],[2275,"lurk::parser"],[2313,"lurk::parser::base"],[2360,"lurk::parser::error"],[2442,"lurk::parser::position"],[2474,"lurk::parser::position::Pos"],[2480,"lurk::parser::string"],[2518,"lurk::parser::syntax"],[2539,"lurk::proof"],[2558,"lurk::proof::groth16"],[2633,"lurk::proof::nova"],[2729,"lurk::ptr"],[2859,"lurk::public_parameters"],[2863,"lurk::public_parameters::error"],[2894,"lurk::repl"],[2964,"lurk::state"],[3001,"lurk::store"],[3267,"lurk::symbol"],[3336,"lurk::syntax"],[3375,"lurk::tag"],[3611,"lurk::uint"],[3653,"lurk::writer"],[3656,"lurk::z_data"],[3704,"lurk::z_data::serde"],[3737,"lurk::z_data::serde::de"],[3789,"lurk::z_data::serde::ser"],[3929,"lurk::z_data::z_cont"],[3977,"lurk::z_data::z_cont::ZCont"],[4009,"lurk::z_data::z_expr"],[4058,"lurk::z_data::z_expr::ZExpr"],[4061,"lurk::z_data::z_ptr"],[4110,"lurk::z_data::z_store"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","Global config for parallelism.","","","","","","","","","","","","","","","","","The finite field used in the language.","","","Returns the argument unchanged.","","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","<code>CacheMap</code> is an adaptation of <code>FrozenMap</code>: …","Get mutable access to the underlying <code>HashMap</code>.","","","","","","","","","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns a copy of the value corresponding to the key.","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","Calls <code>U::from(self)</code>.","Examples","","","Examples","Applies a function to the owner of the value corresponding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","Parses CLI arguments and continues the program flow …","","","","","","","","","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Precompute the witness blocks for all the named hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","","The basic control nodes for LEM logical paths.","","","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a.val != b.val</code>, or to <code>0</code> …","","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hash2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Hash3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Hash4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>IfEq(x, y, eq_block, else_block)</code> runs <code>eq_block</code> if <code>x == y</code>, …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","","<code>MatchTag(x, cases)</code> performs a match on the tag of <code>x</code>, …","<code>MatchSymbol(x, cases, def)</code> checks whether <code>x</code> matches some …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","","The atomic operations of LEMs.","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","LEM tags","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","<code>Unhash2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Unhash3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Unhash4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","LEM variables","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","Calls a <code>Func</code> on an input until the stop contidion is …","Performs the static checks described in LEM’s docstring.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","Create R1CS constraints for a LEM function given an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Generates an outer Groth16 proof using the given …","","","","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","The number of reductions used in the proof.","","","","","","","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","The commitment engine type for the first curve in the …","The commitment engine type for the second curve in the …","Why the next 4 types?","The type of the commitment key used for points of the …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Evaluates and generates the frames of the computation …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","A pointer to a continuation. Logically this is the same a …","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","A <code>Store</code> pointer","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","","Construct a Ptr from an opaque index","","get the index of an Opaque RawPtr","","","","","The underlying pointer, which can be null, opaque, or an …","","An expression tag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","","","","",""],"i":[0,2,0,0,2,0,2,2,0,2,2,0,0,0,0,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,0,2,0,2,0,2,2,2,2,2,2,0,2,0,0,0,0,2,2,2,0,0,0,0,2,2,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,2,2,2,2,2,0,0,2,2,2,0,0,2,0,0,0,0,0,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,0,229,229,0,0,44,45,44,45,44,45,44,44,45,44,45,44,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,44,45,44,45,44,45,44,44,45,44,45,44,45,44,45,44,44,44,44,45,44,44,44,44,44,44,45,44,45,44,45,44,45,44,45,44,45,44,45,44,44,45,44,45,0,0,0,0,0,85,85,85,0,0,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,0,0,55,56,55,56,56,55,56,55,56,55,55,55,55,55,56,55,73,55,56,55,55,56,55,56,55,56,55,56,55,56,55,56,55,55,55,55,55,56,56,55,55,55,56,55,56,55,56,55,56,55,56,56,55,55,56,55,56,55,56,56,56,56,55,56,55,55,56,55,56,55,55,55,55,55,55,55,55,55,55,55,56,55,56,55,55,56,55,55,56,55,56,55,56,55,56,55,56,55,56,55,56,55,56,55,56,55,0,0,0,0,0,0,77,0,77,77,0,77,78,79,80,77,78,79,80,77,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,77,77,78,79,80,77,80,77,78,79,80,78,79,78,78,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,77,78,79,80,80,74,74,74,74,74,0,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,230,231,232,233,234,235,236,237,238,239,240,230,231,241,239,234,237,238,239,232,233,234,235,236,238,230,231,233,238,240,230,231,0,0,242,0,43,43,43,43,242,0,0,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,0,0,87,0,0,87,0,0,93,87,0,0,0,0,87,91,96,98,93,87,88,89,90,91,96,98,93,87,88,89,90,87,88,89,90,87,88,89,90,91,88,89,90,91,96,98,93,87,88,89,90,91,96,98,93,87,88,89,90,91,96,98,93,87,88,88,89,89,90,90,91,96,98,93,87,88,89,90,91,87,88,89,90,87,93,87,88,89,90,91,96,98,93,87,87,87,87,88,89,90,87,91,96,98,93,87,88,89,90,91,0,91,96,98,93,87,88,89,90,91,96,98,93,87,88,89,90,91,91,91,91,91,96,98,93,87,88,89,90,91,91,91,91,88,89,90,87,88,89,90,87,87,88,89,90,91,96,98,93,87,88,89,90,91,96,98,93,87,88,89,90,91,96,98,93,87,88,89,90,91,96,98,93,87,88,89,90,91,96,98,93,87,88,89,90,91,96,98,93,87,88,89,90,96,98,91,96,98,93,87,88,89,90,100,101,0,100,102,0,102,0,100,102,102,100,101,102,100,101,102,100,101,100,101,100,101,102,100,101,102,100,101,102,100,101,102,100,101,102,102,100,100,101,101,102,102,102,102,102,100,100,101,102,100,101,102,100,101,102,100,101,102,100,101,102,100,101,102,100,101,102,100,100,101,102,100,101,102,100,101,102,100,101,102,100,101,102,100,101,102,100,101,102,100,101,102,100,101,105,0,0,0,0,0,105,0,105,0,50,105,106,48,50,105,108,49,106,48,50,105,108,49,48,50,105,49,48,50,105,49,48,105,106,48,50,105,108,49,106,48,50,105,108,49,106,48,50,105,105,108,49,106,48,50,105,108,49,0,48,48,50,105,49,48,48,48,50,50,50,105,105,105,49,49,49,106,0,48,48,48,48,50,105,108,49,106,48,50,105,105,108,49,106,106,48,50,106,48,50,105,108,49,106,50,48,106,48,50,105,108,49,108,243,48,50,105,243,48,105,105,243,48,105,106,0,106,48,50,105,108,49,243,48,50,48,106,108,50,106,48,50,105,108,49,50,243,48,105,50,243,48,105,48,48,50,105,49,48,48,106,48,50,105,108,49,106,48,50,105,108,49,106,48,50,105,108,49,106,48,50,105,108,49,106,48,50,105,108,49,106,48,50,105,108,49,106,48,50,105,108,49,50,0,0,114,0,0,46,46,114,111,115,114,46,111,115,114,46,115,114,46,115,114,46,46,46,111,115,114,46,111,115,114,46,111,115,115,114,114,46,46,111,115,114,46,115,114,114,115,114,46,111,111,115,114,114,46,114,46,111,115,114,46,111,115,114,46,46,46,111,115,114,46,46,46,111,46,46,111,115,114,46,115,114,46,115,114,114,115,114,46,111,115,114,46,111,115,114,46,111,115,114,46,111,115,114,46,111,115,114,46,111,115,114,46,111,115,114,46,119,119,119,119,0,119,119,119,119,119,119,119,119,0,119,119,118,118,118,119,118,119,118,119,118,119,118,118,119,118,119,118,119,118,119,118,119,118,119,119,119,118,118,118,119,119,118,119,118,118,118,118,119,118,119,118,119,119,119,119,119,119,119,119,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,119,118,118,119,118,120,120,1,0,120,0,0,1,120,120,120,121,120,121,120,121,120,121,120,121,121,120,121,120,121,120,120,121,121,120,121,120,121,120,120,120,121,121,121,120,120,121,120,121,1,1,1,1,1,1,1,1,1,1,121,121,120,1,120,121,120,121,1,120,121,1,1,121,120,121,120,121,1,1,1,1,1,1,120,121,120,1,1,1,1,1,1,1,1,120,121,120,121,120,121,120,121,120,121,120,121,120,121,136,137,136,137,136,137,136,137,0,0,0,0,0,0,136,137,130,97,138,136,137,130,97,138,130,130,130,130,136,137,130,97,138,137,130,97,138,97,130,97,138,130,97,138,136,137,130,97,138,136,137,130,97,138,136,137,130,97,138,136,137,130,97,138,137,130,97,138,136,137,137,130,97,138,138,97,97,97,97,136,137,130,97,138,138,136,137,130,97,138,69,136,137,130,97,138,136,137,130,97,138,137,130,97,138,136,137,130,97,138,136,137,130,97,138,136,137,130,97,138,136,137,130,97,138,136,137,130,97,138,136,137,130,97,138,136,137,130,97,138,72,71,71,143,0,0,71,0,0,0,0,0,0,0,0,0,0,0,0,143,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,0,71,71,71,72,72,0,0,72,71,72,71,71,72,72,0,0,0,0,145,0,71,71,71,71,143,0,140,140,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,142,148,141,143,141,143,144,140,144,140,142,148,146,146,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,149,141,143,142,148,144,140,149,150,150,71,72,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,143,142,150,71,72,140,146,143,143,143,142,142,142,150,150,150,71,71,71,72,72,72,140,140,140,144,140,151,143,152,140,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,146,140,71,72,71,72,146,139,71,72,143,142,148,149,150,71,72,140,146,151,143,152,140,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,140,146,146,140,140,140,143,142,148,149,150,71,72,140,146,244,145,142,148,149,150,140,141,143,144,140,140,140,145,142,150,143,142,148,149,150,71,72,140,146,145,143,142,150,140,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,143,142,148,149,150,71,72,140,146,0,161,157,0,161,161,156,0,156,0,161,161,161,161,161,157,156,0,161,161,161,161,160,0,161,161,157,160,160,161,161,158,0,161,157,160,158,161,158,0,161,161,161,161,0,154,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,154,154,154,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,159,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,154,154,154,155,155,155,156,156,156,157,157,157,158,158,158,159,159,159,160,160,160,161,161,161,154,155,155,156,156,157,157,158,159,160,161,154,155,156,157,158,159,160,161,158,155,156,157,158,155,156,157,158,155,156,157,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,155,154,154,154,154,155,156,157,158,159,160,161,154,156,154,155,156,157,158,159,160,161,158,155,156,157,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,154,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,154,155,156,157,158,159,160,161,0,0,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,0,0,165,0,0,165,165,0,165,165,165,165,165,165,165,165,0,165,165,165,165,165,165,165,165,165,0,0,0,165,165,165,165,165,165,165,165,165,166,166,166,0,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,0,166,0,0,0,0,0,0,0,166,166,166,166,166,166,166,166,166,166,174,174,174,174,174,174,174,0,0,174,174,172,172,174,172,174,172,174,172,174,172,174,172,174,172,174,172,174,172,174,172,174,174,174,172,172,172,172,172,174,174,172,172,174,172,172,174,172,174,172,172,174,172,174,174,172,0,172,172,172,174,172,172,172,174,172,174,172,174,172,174,172,174,172,174,172,174,172,174,172,174,172,176,0,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,245,245,245,245,245,245,177,177,177,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,246,246,246,0,246,246,246,246,246,0,246,247,247,247,246,0,0,0,0,0,0,182,181,180,182,181,180,180,180,182,182,181,180,182,181,180,182,181,180,180,182,181,180,182,181,180,182,181,180,182,181,180,182,182,181,180,182,182,182,181,180,180,180,182,182,180,180,180,182,181,180,182,181,180,182,181,180,182,181,180,182,181,180,182,181,180,182,182,182,181,180,0,0,188,188,188,188,190,0,0,0,0,188,0,188,0,0,0,0,190,0,0,189,190,191,189,190,191,189,189,190,189,190,191,189,190,191,189,189,190,190,191,189,190,191,189,191,189,189,191,189,190,191,191,189,190,191,189,190,191,191,189,190,191,191,189,190,191,191,190,0,191,189,190,189,189,190,191,189,190,191,189,190,191,189,190,191,189,190,191,189,190,191,190,189,190,191,0,193,193,193,0,0,0,63,68,63,63,63,193,63,68,193,63,68,63,193,63,68,193,63,68,193,193,63,68,193,63,68,193,63,68,193,63,68,193,63,68,193,193,193,63,63,63,68,68,68,193,63,63,68,68,193,63,63,68,193,63,68,193,63,68,193,63,68,193,63,68,193,63,68,63,63,68,248,63,63,63,193,193,63,248,63,248,63,193,63,68,193,68,63,68,63,68,193,193,193,63,68,63,68,63,68,193,63,68,193,63,68,193,63,68,193,63,68,193,63,68,193,63,68,193,63,68,193,63,68,0,0,0,0,195,0,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,0,0,0,202,198,202,198,198,198,201,198,198,202,198,202,198,202,198,202,198,198,198,202,198,201,201,201,201,198,201,198,202,198,202,198,198,202,198,198,201,198,201,202,198,198,202,198,201,198,201,198,0,0,0,202,198,202,198,202,198,202,198,202,198,202,198,202,198,202,198,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,82,82,82,82,82,0,0,82,82,82,82,82,82,82,82,82,82,82,82,0,82,0,0,0,0,103,42,204,204,42,42,42,103,203,204,42,103,203,204,42,42,42,42,204,42,42,204,204,103,203,204,103,203,204,204,42,42,204,42,204,42,42,42,204,42,42,42,42,103,203,204,42,103,203,204,42,103,203,204,204,42,103,203,204,204,204,42,204,204,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,103,103,203,204,42,103,203,204,42,42,42,42,42,42,42,42,42,42,42,42,204,204,42,42,42,42,103,42,42,204,42,204,42,103,42,103,203,204,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,103,203,204,42,42,204,42,103,203,204,204,204,204,42,204,42,42,42,42,204,42,204,42,204,42,204,204,42,42,42,42,204,42,42,103,203,204,42,204,203,42,204,204,42,42,42,42,204,42,42,42,42,204,42,204,42,42,42,204,42,42,103,203,204,103,42,42,42,42,103,203,204,42,103,203,204,42,103,203,204,204,42,42,42,103,203,204,42,103,203,204,42,103,203,204,42,203,42,103,203,204,42,42,42,42,203,0,0,0,0,0,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,206,206,206,206,206,206,206,0,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,125,126,81,81,81,81,81,125,125,124,125,124,125,125,124,126,0,126,81,81,125,126,81,125,126,0,124,126,126,126,81,124,126,126,81,81,81,126,124,124,125,126,0,0,0,125,81,126,126,125,124,126,126,124,0,81,81,124,124,125,81,249,125,126,249,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,124,124,81,81,125,125,126,126,124,81,125,126,124,81,125,126,124,124,124,81,81,81,125,125,125,126,126,126,124,124,81,81,125,125,126,126,124,81,125,126,226,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,124,126,124,124,124,81,125,126,125,126,124,81,125,126,124,81,125,126,249,125,126,249,125,126,226,124,81,125,126,226,124,81,125,126,124,81,125,126,124,81,125,126,124,124,81,81,125,125,126,126,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,124,81,125,126,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,250,250,211,211,0,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,0,211,211,211,211,211,211,0,211,211,211,211,211,211,211,0,211,211,211,211,211,211,211,0,0,0,0,212,0,212,212,212,212,212,212,0,212,212,212,212,212,212,212,0,212,212,212,212,212,212,0,212,0,212,212,212,212,212,212,212,0,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,0,213,213,213,213,213,213,213,213,213,213,213,213,213,0,0,0,0,0,219,215,216,217,218,219,215,216,217,218,219,215,216,217,218,219,215,216,217,218,219,215,216,217,218,219,215,216,217,218,215,215,215,216,217,218,218,219,215,216,217,218,219,215,216,217,218,219,215,216,217,218,219,219,215,216,217,218,219,215,216,217,218,219,219,219,215,215,219,219,215,217,218,218,219,219,219,219,216,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,216,0,219,215,216,217,218,219,215,216,217,218,219,215,216,217,218,219,215,216,217,218,219,215,216,217,218,219,215,216,217,218,219,215,216,217,218,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,0,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,251,252,253,254,255,256,257,258,259,260,261,251,252,262,260,255,258,259,260,253,254,255,256,257,259,251,252,254,259,261,251,252,208,208,208,208,208,208,208,208,208,208,208,208,208,208,0,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,263,263,263,0,0,0,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,66,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,0,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205],"f":[0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],0,[[]],[[]],0,0,0,0,[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],0,0,0,0,[4],[4],[5,[[6,[[2,[1]]]]]],[[],[[6,[7]]]],[[[2,[1]],[2,[1]]]],[4],[[[2,[[0,[8,1]]]],[2,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],0,0,0,0,[[[2,[[0,[10,1]]]],11],12],[[[2,[1]],11],12],[[]],[13,[[2,[1]]]],[14,[[2,[1]]]],[1,[[2,[1]]]],0,[[[0,[15,16]],17],14],0,[[[2,[1]],18]],0,[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[[2,[1]]],1],[[[2,[1]]],9],[[[2,[1]]],9],0,[[],[[6,[23,24]]]],0,0,0,0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,0,0,[[[2,[1]],[2,[1]]],[[26,[25]]]],[[]],0,0,0,0,[[[2,[1]],27],6],0,0,0,[[[2,[1]],[2,[1]]]],0,0,0,0,0,0,[[]],[[],28],[[],6],[[],6],[[],29],0,0,[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],0,0,[[]],0,0,0,0,0,0,0,[33,[[35,[34]]]],[[]],[[]],[[],33],[4],[4],[[],[[6,[7]]]],[4],[[[33,[10,10]],11],12],[[]],[[[33,[[37,[[0,[15,36,16]]]],[0,[36,15]],38]],[0,[15,36,16]]],26],[[[33,[[37,[[0,[15,36,16]]]],[0,[36,15]],39]],[0,[15,36,16]]],[[26,[39]]]],[[[33,[[0,[36,15]],39]],[0,[36,15]],39],39],[[[33,[[0,[36,15]],39]],[0,[36,15]],40],39],[[[33,[[0,[36,15]],39]],[0,[36,15]],40],39],[[],4],[[[33,[[0,[36,15]],38]],[0,[36,15]],38]],[[[33,[[0,[36,15]],38]],[0,[36,15]],40]],[[[33,[[0,[36,15]],38]],[0,[36,15]],40]],[[]],[[[33,[[0,[36,15]],38]]],9],[[[33,[3]]],[[41,[3]]]],[[],[[6,[23,24]]]],[[[33,[[0,[36,15]],38]]],4],[[[33,[[37,[[0,[15,36,16]]]],[0,[36,15]],38]],[0,[15,36,16]],40],26],[[],33],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,[[],4],[42,41],0,0,[[[44,[1,[43,[1]]]]],4],[[],[[45,[1,[43,[1]]]]]],[[4,[47,[[46,[1,[43,[1]]]]]]],[[44,[1,[43,[1]]]]]],[[]],[[]],[[]],[[]],0,[[[45,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]],[[45,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]]],[[[44,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]],[[44,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]]],[[]],[[]],0,[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[[[45,[[0,[10,1]],[0,[10,[43,[[0,[10,1]]]]]]]],11],12],0,[[]],[[]],[[[50,[[48,[1]],[49,[1]],[43,[1]]]],[42,[1]]],[[45,[1,[43,[1]]]]]],[[4,[51,[[50,[[48,[1]],[49,[1]],[43,[1]]]]]],[42,[1]],[47,[[46,[1,[43,[1]]]]]]],[[41,[[44,[1,[43,[1]]]]]]]],[[[44,[1,[43,[1]]]]],[[42,[1]]]],[[],4],[[],4],0,0,[[]],[[]],0,[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],0,0,[[]],[[]],[[[45,[1,[43,[1]]]],[45,[1,[43,[1]]]]],9],[[[44,[1,[43,[1]]]],[44,[1,[43,[1]]]]],9],[[],4],[[[44,[1,[43,[1]]]]],[[41,[1]]]],[[[44,[1,[43,[1]]]]],4],0,0,[[[44,[1,[43,[1]]]],[52,[1]]],[[6,[53]]]],[[[44,[1,[43,[1]]]],[52,[1]],[51,[[54,[1]]]]],[[6,[[41,[[54,[1]]]],53]]]],[[[44,[1,[43,[1]]]],[52,[1]],[42,[1]],[55,[1]],[55,[1]],[56,[1]],[51,[[45,[1,[43,[1]]]]]],[57,[1]]]],[[[44,[1,[43,[1]]]],[52,[1]],[42,[1]],[55,[1]],[55,[1]],[56,[1]],[51,[[45,[1,[43,[1]]]]]],[57,[1]]]],[[[44,[1,[43,[1]]]],[52,[1]],[42,[1]],[55,[1]],[55,[1]],[56,[1]],[51,[[45,[1,[43,[1]]]]]],[26,[41]],[57,[1]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[[44,[[43,[58]]]],[60,[59]],[61,[59]]],[[6,[9,53]]]],[[]],[[]],0,0,0,0,0,0,[[[51,[55]]],41],[[],62],[[42,[51,[63]]],63],[[[52,[64]],[54,[64]],[54,[64]]],[[6,[65,53]]]],0,[[[52,[1]],1],[[6,[[54,[1]],53]]]],0,0,[[]],[[]],0,0,0,0,[[[57,[[0,[3,1]]]]],[[57,[[0,[3,1]]]]]],[[]],0,0,0,[4],[4],[[],[[6,[7]]]],[4],0,0,0,0,0,0,0,[[]],0,0,[[],4],[[]],0,[[],[[6,[23,24]]]],0,0,0,[[[52,[1]],[42,[1]]],[[6,[[57,[1]],53]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,[[]],0,[[],6],[[],6],[[],29],0,0,[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,[[[52,[1]],40],[[6,[[55,[1]],53]]]],[[[52,[1]],40],[[6,[[56,[1]],53]]]],[[[52,[1]],[66,[1]]],[[6,[[55,[1]],53]]]],[[[52,[1]],[67,[1]]],[[6,[[56,[1]],53]]]],[[[52,[1]],[42,[1]],[68,[1]]],[[6,[[56,[1]],53]]]],[[[52,[1]],[42,[1]],[63,[1]]],[[6,[[55,[1]],53]]]],[[[52,[1]],[42,[1]],40],[[6,[[56,[1]],53]]]],[[[55,[1]],[52,[1]],[55,[1]]],[[6,[65,53]]]],[[[56,[1]],[52,[1]],[56,[1]]],[[6,[65,53]]]],[[[52,[1]],[69,[1]]],[[6,[[55,[1]],53]]]],[[[55,[1]],[52,[1]],1],[[6,[65,53]]]],[[[52,[1]],[42,[1]],40],[[6,[[55,[1]],53]]]],[[[52,[1]],1,[54,[1]]],[[6,[[55,[1]],53]]]],[[[55,[1]],[52,[1]],1],[[6,[65,53]]]],[[[56,[1]],[52,[1]],1],[[6,[65,53]]]],[[[55,[1]],[52,[1]],[42,[1]]],[[6,[53]]]],[[],[[70,[54]]]],[[[55,[1]]],[[70,[[54,[1]]]]]],[[[56,[1]]],[[70,[[54,[1]]]]]],[[[52,[1]],[42,[1]],65],[[6,[[55,[1]],53]]]],[[[52,[1]],[26,[[63,[1]]]],[42,[1]]],[[6,[[55,[1]],53]]]],[[[52,[1]],[26,[[68,[1]]]],[42,[1]]],[[6,[[56,[1]],53]]]],[[]],[[]],[[]],[[]],[[4,[51,[[54,[1]]]]],[[55,[1]]]],[[4,[51,[[54,[1]]]]],[[56,[1]]]],[[[55,[[0,[3,64]]]]],[[55,[[0,[3,64]]]]]],[[[56,[[0,[3,1]]]]],[[56,[[0,[3,1]]]]]],[[]],[[]],[[[52,[1]],[57,[1]],[42,[1]],[54,[1]],[55,[1]]],[[6,[[55,[1]],53]]]],[[[52,[1]],[57,[1]],[42,[1]],[55,[1]],[55,[1]]],[[6,[[55,[1]],53]]]],[[[52,[1]],[57,[1]],[55,[1]],[55,[1]],71,[0,[71,[0,[1,[55,[1]]]]]],65],[[6,[[55,[1]],53]]]],[[[52,[1]],[57,[1]],[42,[1]],[55,[1]],[55,[1]],[55,[1]]],[[6,[[55,[1]],53]]]],[[[52,[1]],[57,[1]],[42,[1]],[51,[[55,[1]]]]],[[6,[[55,[1]],53]]]],[[[52,[1]],72,[54,[1]],[70,[73]],[0,[72,[0,[1,[54,[1]]]]]],65],[[6,[[56,[1]],53]]]],[[[52,[1]],72,[54,[1]],[70,[73]],[0,[72,[0,[1,[54,[1]]]]]]],[[6,[53]]]],[[[52,[1]],[57,[1]],[42,[1]],[55,[1]],[55,[1]]],[[6,[[55,[1]],53]]]],[[[52,[1]],[57,[1]],[42,[1]],[55,[1]],[56,[1]]],[[6,[[55,[1]],53]]]],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[[[55,[1]],[52,[1]],[55,[1]]]],[[[56,[1]],[52,[1]],[56,[1]]]],[[[56,[1]],[42,[1]]],28],[[[55,[1]],[42,[1]]],28],[[[55,[1]],11],12],[[[56,[1]],11],12],[[]],[[]],[[[54,[1]],[54,[1]]],[[55,[1]]]],[[[54,[1]],[54,[1]]],[[56,[1]]]],[[[56,[1]],[42,[1]]],[[26,[[74,[1]]]]]],[[[56,[1]],[42,[1]]],[[26,[[68,[1]]]]]],[[[56,[1]],[42,[1]]],[[26,[[67,[1]]]]]],[[[55,[1]]],[[54,[1]]]],[[[56,[1]]],[[54,[1]]]],[[[55,[1]],[52,[1]],65,[55,[1]]],[[6,[53]]]],[[],4],[[],4],[[]],[[]],[[[55,[1]],[52,[1]]],[[6,[65,53]]]],[[[55,[1]],[52,[1]]],[[6,[65,53]]]],[[[55,[1]],[52,[1]]],[[6,[65,53]]]],[[[55,[1]],[52,[1]]],[[6,[65,53]]]],[[[55,[1]],[52,[1]],[57,[1]]],[[6,[65,53]]]],[[[55,[1]],[52,[1]]],[[6,[65,53]]]],[[[55,[1]],[52,[1]]],[[6,[65,53]]]],[[[55,[1]],[52,[1]]],[[6,[65,53]]]],[[[55,[1]],[52,[1]]],[[6,[65,53]]]],[[[55,[1]],[52,[1]]],[[6,[65,53]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[[52,[1]],65,[55,[1]],[55,[1]]],[[6,[[55,[1]],53]]]],[[[52,[1]],65,[56,[1]],[56,[1]]],[[6,[[56,[1]],53]]]],[[[52,[1]],65,[66,[1]],[66,[1]]],[[6,[[55,[1]],53]]]],[[]],[[]],[[[55,[1]],[42,[1]]],[[26,[[63,[1]]]]]],[[[55,[1]]],[[54,[1]]]],[[[56,[1]]],[[54,[1]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[[55,[1]],[42,[1]]],[[26,[[66,[1]]]]]],[[[26,[75]]],[[76,[[35,[28,28]]]]]],[[],76],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[77,4,4],4],[[],77],[[],78],[[],79],[[],80],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[[77,11],12],[[78,11],12],[[79,11],12],[[80,11],12],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[77,9],[77,9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[77,4],0,[[]],[[]],[[]],[[]],0,0,0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[74,[[0,[3,1]]]]],[[74,[[0,[3,1]]]]]],[[]],[[[74,[1]]],81],[4],[4],[[],[[6,[7]]]],[4],[[[74,[[0,[8,1]]]],[74,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[74,[1]],[42,[1]],82,83],84],[[[74,[[0,[10,1]]]],11],12],[[]],[[[0,[15,16]],17],14],[[[74,[1]]],[[68,[1]]]],[[[74,[[0,[15,1]]]],18]],[[],4],[[[74,[1]],[42,[1]]]],[[]],[[],[[6,[23,24]]]],[[]],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],0,[[],4],[[42,63,63,68],48],[[],9],[[42,[51,[63]]],63],[[52,57,42,[51,[55]],55,56],[[6,[53]]]],0,0,0,[[[86,[1,[85,[1]]]]],4],[[]],[[]],[[[86,[1,[85,[1]]]]],[[86,[1,[85,[1]]]]]],[[]],[[[85,[1]]],[[76,[[86,[1,[85,[1]]]]]]]],[4],[4],[[],[[6,[7]]]],[4],[[[86,[1,[0,[[85,[1]],10]]]]],4],[[[86,[[0,[10,1]],[0,[10,[85,[[0,[10,1]]]]]]]],11],12],[[]],[[[86,[1,[0,[[85,[1]],10]]]]],9],[[],4],[[]],[[],[[6,[23,24]]]],[[[86,[1,[85,[1]]]]],62],[[[85,[1]]],[[86,[1,[85,[1]]]]]],[[]],[[[86,[1,[0,[[85,[1]],10]]]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[86,[1,[85,[1]]]],[52,[1]],[57,[1]],[42,[1]],[51,[[55,[1]]]],[55,[1]],[56,[1]]],[[76,[53]]]],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[87,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[87,[[0,[3,1]]]]],[[87,[[0,[3,1]]]]]],[[[88,[[0,[3,1]]]]],[[88,[[0,[3,1]]]]]],[[[89,[[0,[3,1]]]]],[[89,[[0,[3,1]]]]]],[[[90,[[0,[3,1]]]]],[[90,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[],[[91,[1]]]],[[],[[88,[[0,[92,1]]]]]],[[],[[89,[[0,[92,1]]]]]],[[],[[90,[[0,[92,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[[88,[1]]]]]],[[],[[6,[7]]]],[5,[[6,[[89,[1]]]]]],[5,[[6,[[90,[1]]]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[[91,[1]]],1],[[[87,[1]]],4],[[[88,[1]]],4],[[[89,[1]]],4],[[[90,[1]]],4],[[[87,[1]],[42,[1]],[63,[1]],[63,[1]],[68,[1]]],[[48,[1]]]],[[[93,[10]],11],12],[[[87,[[0,[10,1]]]],11],12],[[[88,[[0,[10,1]]]],11],12],[[[89,[[0,[10,1]]]],11],12],[[[90,[[0,[10,1]]]],11],12],[[]],[[]],[[]],[[]],[[[90,[1]]],[[87,[1]]]],[[]],[[[88,[1]]],[[87,[1]]]],[[[89,[1]]],[[87,[1]]]],[[]],[[]],[[]],[[[87,[1]]],9],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[91,[1]],1,1],[[6,[9,[93,[1]]]]]],[[[42,[1]],[95,[[94,[82]]]],[46,[1,[87,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[[91,[1]]],4],[[[91,[1]],1],[[6,[[26,[1]],[93,[1]]]]]],[[[42,[1]]],[[91,[1]]]],[[[42,[1]],4],[[91,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[91,[1]],1,1],[[6,[[93,[1]]]]]],[[[91,[1]],1],[[6,[[96,[1]],[93,[1]]]]]],[[[91,[1]]],1],[[[91,[1]],4],4],[[[88,[1]],27],6],[[[89,[1]],27],6],[[[90,[1]],27],6],[[[87,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[88,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[89,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[90,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[87,[1]],[52,[1]],[57,[1]],[42,[1]],[51,[[55,[1]]]],[55,[1]],[56,[1]]],[[6,[53]]]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[96,[1]],1,1,1,[97,[1]]],9],[[[98,[1]],1,1,1,[26,[1]],1,[97,[1]]],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[],99],[[],99],[[],99],[[]],[[]],[[]],[[]],[[]],[[]],[100,100],[[[101,[[0,[3,1]]]]],[[101,[[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[[102,11],12],[[102,11],12],[[100,11],12],[[100,11],12],[[[101,[1]],11],12],[[[101,[[0,[10,1]]]],11],12],[[]],[100,102],[53,102],[103,102],[104,102],[103,100],[[]],[[]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[]],[[]],[[]],[102,[[26,[99]]]],[100,[[26,[99]]]],[[]],[[]],[[],28],[[],28],[[],28],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[48,[[0,[3,1]]]]],[[48,[[0,[3,1]]]]]],[[[50,[[0,[3,39]],[0,[3,39]],3]]],[[50,[[0,[3,39]],[0,[3,39]],3]]]],[105,105],[[[49,[[0,[3,1]]]]],[[49,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],0,[[],105],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[105]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[4],[[[42,[1]]],[[63,[1]]]],0,[[[48,[[0,[8,1]]]],[48,[[0,[8,1]]]]],9],[[[50,[[0,[8,39]],[0,[8,39]],8]],[50,[[0,[8,39]],[0,[8,39]],8]]],9],[[105,105],9],[[[49,[[0,[8,1]]]],[49,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[106,[1,[43,[1]]]]],[[6,[100]]]],[[[42,[1]],62],[[6,[[63,[1]],100]]]],0,[[[48,[1]],11],[[6,[107]]]],[[[48,[[0,[10,1]]]],11],12],[[[48,[1]],[42,[1]],82,83],84],[[[50,[[0,[10,39]],[0,[10,39]],10]],11],12],[[105,11],12],[[[108,[[0,[10,39]],[0,[10,1]],[0,[10,[43,[[0,[10,1]]]]]]]],11],12],[[[49,[[0,[10,1]]]],11],12],[[]],[[]],[[]],[[]],[[[68,[1]]],105],[[]],[[]],[[[63,[1]],[63,[1]],[42,[1]],4,109,[46,[1,[43,[1]]]]],[[6,[[41,[[50,[[48,[1]],[49,[1]],[43,[1]]]]]],100]]]],[[[106,[1,[43,[1]]]]],[[6,[[41,[[50,[[48,[1]],[49,[1]],[43,[1]]]]]],100]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[106,[1,[43,[1]]]]],[[48,[1]]]],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[[48,[1]]],9],[[[50,[[48,[1]],39,[43,[1]]]]],9],[105,9],[[],9],[[[48,[1]]],9],[105,9],[105,9],[[],9],[[[48,[1]]],9],[105,9],[[[106,[1,[43,[1]]]]],[[6,[[110,[[108,[[49,[1]],1,[43,[1]]]]]],100]]]],0,[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[42,4]],[[[48,[1]],[42,[1]],4]],[[[50,[[48,[1]],39,[43,[1]]]],[42,[1]]]],[[[48,[1]],[42,[1]]],[[26,[[63,[1]]]]]],[[[63,[1]],[63,[1]],[42,[1]],4,[46,[1,[43,[1]]]]],[[106,[1,[43,[1]]]]]],[[[108,[[49,[1]],1,[43,[1]]]]],26],0,[[]],[[]],[[]],[[]],[[]],[[]],[[[50,[[48,[1]],39,[43,[1]]]],[50,[[48,[1]],39,[43,[1]]]]],9],[[16,42,46],[[6,[100]]]],[[[48,[1]],[42,[1]],[46,[1,[43,[1]]]]],[[6,[100]]]],[[105,27],6],[[[51,[[50,[[48,[1]],39,[43,[1]]]]]]],4],[[],105],[[[48,[1]]],105],[[105,[42,[1]]],[[26,[[68,[1]]]]]],[[[48,[1]],[42,[1]]],[[41,[1]]]],[[]],[[]],[[]],[[]],[[],28],[[[48,[1]],[42,[1]]],[[6,[[41,[1]],103]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[46,[1,[43,[1]]]],[112,[[111,[1,[43,[1]]]]]],[42,[1]]]],[[[46,[1,[43,[1]]]],[112,[113]],[112,[[43,[1]]]],[42,[1]]]],[[[114,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[115,[[0,[3,1]]]]],[[115,[[0,[3,1]]]]]],[[[114,[[0,[3,1]]]]],[[114,[[0,[3,1]]]]]],[[[46,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]],[[46,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]]],[[]],[[]],[[]],[[[46,[1,[43,[1]]]]],[[35,[113]]]],[[],[[46,[[0,[92,1]],[0,[92,[43,[[0,[92,1]]]]]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[[115,[1]]]]]],[5,[[6,[[114,[[0,[116,1]]]]]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[[46,[[0,[116,1]],[0,[116,[43,[[0,[116,1]]]]]]]]]]]],[4],[4],[4],[4],[[[115,[1]]],4],[[[114,[1]]],4],[[[114,[1]],[42,[1]],[63,[1]],[63,[1]],[68,[1]]],[[48,[1]]]],[[[115,[[0,[10,1]]]],11],12],[[[114,[[0,[10,1]]]],11],12],[[[46,[[0,[10,1]],[0,[10,[43,[[0,[10,1]]]]]]]],11],12],[[],[[111,[1,[43,[1]]]]]],[[]],[[]],[[]],[[[115,[1]]],[[114,[1]]]],[[]],[[[114,[1]]],9],[[[46,[1,[43,[1]]]]],9],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[46,[1,[43,[1]]]]],9],[[[46,[1,[43,[1]]]]],28],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[[46,[1,[43,[1]]]],[42,[1]],[63,[1]]],26],[[[46,[1,[43,[1]]]]],4],[[[112,[113]],[112,[[43,[1]]]]],[[111,[1,[43,[1]]]]]],[[],[[46,[1,[43,[1]]]]]],[[[42,[1]],[41,[[112,[[111,[1,[43,[1]]]]]]]]],[[46,[1,[43,[1]]]]]],[[]],[[]],[[]],[[]],[[[115,[1]],27],6],[[[114,[[0,[117,1]]]],27],6],[[[46,[[0,[117,1]],[0,[117,[43,[[0,[117,1]]]]]]]],27],6],[[[115,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[114,[1]],[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[114,[1]],[52,[1]],[57,[1]],[42,[1]],[51,[[55,[1]]]],[55,[1]],[56,[1]]],[[6,[53]]]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[118,[1]],[52,[1]],[42,[1]]],[[6,[53]]]],[[[52,[1]],[42,[1]]],[[6,[53]]]],[[[52,[1]],[26,[[118,[1]]]],[42,[1]]],[[6,[53]]]],[[]],[[]],[[]],[[]],[[[119,[[0,[3,1]]]]],[[119,[[0,[3,1]]]]]],[[[118,[[0,[3,1]]]]],[[118,[[0,[3,1]]]]]],[[]],[[]],0,[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[[[119,[[0,[8,1]]]],[119,[[0,[8,1]]]]],9],[[[118,[[0,[8,1]]]],[118,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[119,[[0,[10,1]]]],11],12],[[[119,[1]],[42,[1]],82,83],84],[[[118,[[0,[10,1]]]],11],12],[[]],[[]],[[[0,[15,16]],17],14],[[[118,[1]],18]],[[[52,[1]],[42,[1]],[55,[1]],[56,[1]]],[[6,[[54,[1]],53]]]],[[],4],[[],4],[[]],[[]],[[[119,[1]]],9],[[[119,[1]]],9],[[[119,[1]]],9],[[[119,[1]]],9],[[[119,[1]]],9],[[[119,[1]]],9],[[[119,[1]]],9],[[[119,[1]]],9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[120,120],[[[121,[[0,[3,1]]]]],[[121,[[0,[3,1]]]]]],[[]],[[]],[[[121,[1]],[121,[1]]],25],[4],[4],[4],[4],[[],[[6,[7]]]],[5,[[6,[120]]]],[[],[[6,[7]]]],[5,[[6,[[121,[1]]]]]],[4],[4],[[120,120],9],[[[121,[[0,[8,1]]]],[121,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[120,11],12],[[120,11],12],[[[121,[[0,[10,1]]]],11],12],[[]],[[]],[[[51,[122]]],26],[123],[81],[124],[125],[126],[127],[128],[14],[[],120],[[[0,[15,16]],17],14],[[[121,[1]],18]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],28],[[],4],[[],4],[[]],[[]],[[],9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[]],[[]],[[[121,[1]],[121,[1]]],[[26,[25]]]],[[]],[[]],[[120,27],6],[[[121,[1]],27],6],[[],[[41,[122]]]],[[],[[26,[123]]]],[[],[[26,[81]]]],[[],[[26,[124]]]],[[],[[26,[125]]]],[[],[[26,[126]]]],[[]],[[]],[[],28],[[],[[26,[129]]]],[[],129],[[],[[26,[127]]]],[[],[[26,[128]]]],[[],128],[[],[[26,[14]]]],[[],14],[[],28],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[130,[1]]],[[132,[1,131]]]],[[[130,[1]]],[[132,[1,133]]]],[[[130,[1]]],[[132,[1,134]]]],[[[130,[1]]],[[132,[1,135]]]],[[[136,[1]],[41,[1]]]],[137,137],[[[130,[[0,[3,1]]]]],[[130,[[0,[3,1]]]]]],[[[97,[[0,[3,1]]]]],[[97,[[0,[3,1]]]]]],[[[138,[[0,[3,1]]]]],[[138,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[[97,[1]],[70,[1]]],1],[[[130,[1]],137],[[136,[1]]]],0,0,[[],[[130,[1]]]],[[],[[97,[[0,[92,1]]]]]],[[],[[138,[[0,[92,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[[137,11],12],[[[130,[[0,[10,1]]]],11],12],[[[97,[[0,[10,1]]]],11],12],[[[138,[[0,[10,1]]]],11],12],[[]],[[]],[4,137],[[]],[[]],[[]],[[[138,[1]],[121,[1]]],[[26,[[70,[1]]]]]],[[[97,[1]],[70,[1]]],1],[[[97,[1]],[70,[1]]],1],[[[97,[1]],[70,[1]]],1],[[[97,[1]],[70,[1]]],1],[[],4],[[],4],[[],4],[[],4],[[],4],[[[138,[1]],[121,[1]],[70,[1]]]],[[]],[[]],[[]],[[]],[[]],[[],70],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[140,[[0,[139,92,39,36,10]],39,1]]],[[41,[[0,[139,92,39,36,10]]]]]],[[[140,[[0,[139,92,39,36,10]],39,1]],[42,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[141,[1]],[42,[1]],[63,[1]]],[[76,[103]]]],[[[143,[[142,[1]]]],[42,[1]],[63,[1]]],[[76,[103]]]],[[[141,[1]],[42,[1]],[63,[1]]],[[76,[103]]]],[[[143,[[142,[1]]]],[42,[1]],[63,[1]]],[[76,[103]]]],[[[144,[1]],71,[42,[1]],[63,[1]]],[[76,[103]]]],[[[140,[71,[142,[1]],1]],71,[42,[1]],[63,[1]]],[[76,[103]]]],[[[144,[1]],71,[42,[1]],[63,[1]]],[[76,[100]]]],[[[140,[71,[142,[1]],1]],71,[42,[1]],[63,[1]]],[[76,[100]]]],0,0,[[[146,[139,[145,[1]],1]],[42,[1]],[136,[1]]],[[147,[1]]]],0,[[[143,[3]]],[[143,[3]]]],[[[142,[[0,[3,1]]]]],[[142,[[0,[3,1]]]]]],[[[148,[[0,[3,1]]]]],[[148,[[0,[3,1]]]]]],[[[149,[[0,[3,1]]]]],[[149,[[0,[3,1]]]]]],[[[150,[[0,[3,1]]]]],[[150,[[0,[3,1]]]]]],[71,71],[72,72],[[[140,[[0,[3,139]],3,[0,[3,1]]]]],[[140,[[0,[3,139]],3,[0,[3,1]]]]]],[[[146,[[0,[3,139]],[0,[3,[145,[[0,[3,1]]]]]],[0,[3,1]]]]],[[146,[[0,[3,139]],[0,[3,[145,[[0,[3,1]]]]]],[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[141,[1]],[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[143,[[142,[1]]]],[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],0,0,[[[144,[1]],71,[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[140,[71,[142,[1]],1]],71,[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],0,0,0,[[],71],[[],72],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[143,[8]],[143,[8]]],9],[[[142,[[0,[8,1]]]],[142,[[0,[8,1]]]]],9],[[[150,[[0,[8,1]]]],[150,[[0,[8,1]]]]],9],[[71,71],9],[[72,72],9],[[[140,[[0,[8,139]],8,[0,[8,1]]]],[140,[[0,[8,139]],8,[0,[8,1]]]]],9],[[[146,[[0,[8,139]],[0,[8,[145,[[0,[8,1]]]]]],[0,[8,1]]]],[146,[[0,[8,139]],[0,[8,[145,[[0,[8,1]]]]]],[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[144,[1]],71,[63,[1]],[63,[1]],[63,[1]],[42,[1]]],[[63,[1]]]],[[[140,[71,[142,[1]],1]],71,[63,[1]],[63,[1]],[63,[1]],[42,[1]]],[[63,[1]]]],[[[151,[1]],[42,[1]],[68,[1]]],[[26,[[74,[1]]]]]],[[[143,[[150,[1]]]],[42,[1]],[68,[1]]],[[26,[[74,[1]]]]]],[[[152,[1]],72,[42,[1]],[68,[1]]],[[26,[[74,[1]]]]]],[[[140,[72,[150,[1]],1]],72,[42,[1]],[68,[1]]],[[26,[[74,[1]]]]]],[[[143,[10]],11],12],[[[142,[[0,[10,1]]]],11],12],[[[148,[[0,[10,1]]]],11],12],[[[149,[[0,[10,1]]]],11],12],[[[150,[[0,[10,1]]]],11],12],[[71,11],12],[[72,11],12],[[[140,[[0,[10,139]],10,[0,[10,1]]]],11],12],[[[146,[[0,[10,139]],[0,[10,[145,[[0,[10,1]]]]]],[0,[10,1]]]],11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[140,[139,[145,[1]],1]]],[[146,[139,[145,[1]],1]]]],[[]],[[[140,[[0,[139,92,39,36,10]],39,1]],[0,[139,92,39,36,10]]],[[143,[39]]]],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[71,18]],[[72,18]],0,[[],4],[71,4],[72,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[151,[1]],[42,[1]],[74,[1]]],[[68,[1]]]],[[[143,[[150,[1]]]],[42,[1]],[74,[1]]],[[68,[1]]]],[[[152,[1]],72,[42,[1]],[74,[1]]],[[68,[1]]]],[[[140,[72,[150,[1]],1]],72,[42,[1]],[74,[1]]],[[68,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],4],[[[146,[139,[145,[1]],1]],[42,[1]]],41],0,[[],[[140,[[0,[139,92,39,36,10]],39,1]]]],[[],[[140,[[0,[139,92,39,36,10]],39,1]]]],[[[143,[39]]],[[140,[[0,[139,92,39,36,10]],39,1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],153],[42,[[76,[153]]]],[[[142,[1]],[42,[1]]],[[76,[[153,[1]]]]]],[[[148,[1]]],[[153,[1]]]],[[[149,[1]]],[[153,[1]]]],[[[150,[1]],[42,[1]]],[[76,[[153,[1]]]]]],0,[[[141,[1]],[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[143,[[142,[1]]]],[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[144,[1]],71,[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[140,[71,[142,[1]],1]],71,[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[140,[[0,[139,92,39,36,10]],39,1]]],[[41,[[143,[39]]]]]],[[[140,[[0,[139,92,39,36,10]],39,1]]],4],[[],26],[[],26],[[],26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[42,26],[[[143,[[145,[1]]]],[42,[1]]],26],[[[142,[1]],[42,[1]]],26],[[[150,[1]],[42,[1]]],26],[[[140,[[0,[139,92,39,36,10]],39,1]]],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[154,[51,[0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[154,[41,[[0,[1]]]],[0,[1]],[0,[1]]],76],[[154,[41,[[0,[1]]]],[0,[1]],109],76],[154,76],[154,154],[155,155],[156,156],[157,157],[158,158],[159,159],[160,160],[161,161],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[154,154],9],[[155,155],9],[[156,156],9],[[157,157],9],[[158,158],9],[[159,159],9],[[160,160],9],[[161,161],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[154,11],12],[[155,11],12],[[155,11],12],[[156,11],12],[[156,11],12],[[157,11],12],[[157,11],12],[[158,11],12],[[159,11],12],[[160,11],12],[[161,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[1]],[0,[1]]],[[26,[158]]]],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[155,18]],[[156,18]],[[157,18]],[[158,18]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[155,162],[[28,[41,[155]],4,159],[[76,[154]]]],[[154,[0,[1]]],4],[154,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[154,[52,[1]],[0,[1]],[0,[1]]],76],[156,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[158,[0,[1]]],[[0,[1]]]],[[],28],[[],28],[[],28],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[154,4],[[76,[154]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[4],[4],[[],[[6,[7]]]],[4],[[163,164],28],[[]],[[163,[51,[164]]],76],[[],4],[[163,28],164],[[]],[[],[[6,[23,24]]]],[163,164],[164,163],[[]],[[163,62],[[26,[164]]]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[163,163],76],[[]],0,0,0,0,0,0,[[],99],0,[[]],[[]],[165,165],[[]],[4],[4],[[],[[6,[7]]]],[4],0,[[165,11],12],[[165,11],12],[[]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],0,0,0,[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,[166,62],[[]],[[]],[166,166],[[]],[166,123],[[166,167],[[168,[1,[41,[122]]]]]],[[],166],[4],[4],[[],[[6,[7]]]],[4],[[166,[169,[[51,[122]]]]],28],[[166,166],9],[[],9],[[],9],[[],9],[[166,11],12],[[]],[[],4],[[]],[[166,123],9],[[],[[6,[23,24]]]],[[],109],[167,[[168,[1,166]]]],[[],109],[[],109],[166,109],[[],109],[166,[[31,[109]]]],[166,109],[[],109],[[]],[166,128],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,0,[[[0,[170,3,171]],62,[172,[[0,[170,3,171]],1]]],[[172,[[0,[170,3,171]],1]]]],[[[0,[170,3,171]],173,[172,[[0,[170,3,171]],1]]],[[172,[[0,[170,3,171]],1]]]],[[]],[[]],[[]],[[]],[[[174,[[0,[3,1]]]]],[[174,[[0,[3,1]]]]]],[[[172,[[0,[3,171]],[0,[3,1]]]]],[[172,[[0,[3,171]],[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[[[174,[[0,[8,1]]]],[174,[[0,[8,1]]]]],9],[[[172,[[0,[8,171]],[0,[8,1]]]],[172,[[0,[8,171]],[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,0,[[[174,[1]],11],12],[[[174,[[0,[10,1]]]],11],12],[[[172,[[0,[10,171]],[0,[10,1]]]],11],12],[[[172,[167,1]],11],12],[[]],[[]],[[[0,[170,3,171]],173],[[172,[[0,[170,3,171]],1]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[],4],0,[[]],[[]],[[[174,[1]]],9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[[175,[171,[172,[171,1]]]],109],[[175,[171,[172,[171,1]]]]]],[[171,[174,[1]]],[[172,[171,1]]]],[[26,171,[174,[1]]],[[175,[171,[172,[171,1]]]]]],[[[172,[[0,[170,3,171]],1]],[172,[[0,[170,3,171]],1]]],[[172,[[0,[170,3,171]],1]]]],[[]],[[]],[[6,171,109],[[175,[171,[172,[171,1]]]]]],[[171,[174,[1]]],[[175,[171,[172,[171,1]]]]]],[[]],[[]],[[],28],[[],28],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[]],[[]],0,0,0,[[]],[[]],[[]],[176,176],[[]],[4],[4],[[],[[6,[7]]]],[4],[[176,176],9],[[],9],[[],9],[[],9],[[176,11],12],[[]],[[167,167],176],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[62,4,4,4,4],28],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[177,177],[[]],[4],[4],[[],[[6,[7]]]],[4],[[177,177],9],[[],9],[[],9],[[],9],[[177,11],12],[[]],[[],4],[[]],[[],[[6,[23,24]]]],[[123,62],109],[[],109],[[123,9,62],109],[[123,9,62],109],[123,109],[[123,9,62],109],[[123,9,62],109],[[],109],[[]],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],[[[95,[[94,[82]]]],9],109],[[],109],[[],109],[167,[[168,[1,167]]]],[[[95,[[94,[82]]]],9,9],109],[[[95,[[94,[82]]]],9],109],[[],109],[166,109],[[[95,[[94,[82]]]],9],109],[[[95,[[94,[82]]]],9],109],[[[95,[[94,[82]]]],9],109],[[[95,[[94,[82]]]],9],109],[167,[[168,[1,[41,[167]]]]]],[167,[[168,[1,[41,[167]]]]]],[[],109],[[[95,[[94,[82]]]],9],109],[62,109],[62,109],[[],109],[[[95,[[94,[82]]]],9,9],109],[[],109],0,0,0,0,[4,4],[4,4],0,[[],46],[4,4],[4,9],[4,9],[[4,46]],0,[[[51,[44]]],[[6,[41,53]]]],[[],4],[[],41],[[],4],[[],4],[41,[[6,[9,53]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[180,[[0,[3,178,179]]]]],[[180,[[0,[3,178,179]]]]]],[[]],[[4,[47,[[46,[58,[43,[58]]]]]]],[[6,[[181,[59]],53]]]],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[5,[[6,[[180,[[0,[178,179]]]]]]]],[[],[[6,[7]]]],[4],[4],[4],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[182,[59,[43,[58]],58]]],[[46,[58,[43,[58]]]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[4,[46,[58,[43,[58]]]]],[[182,[59,[43,[58]],58]]]],[[[182,[59,[43,[58]],58]],[183,[59]],[184,[59]],[63,[58]],[63,[58]],[42,[58]],4,[0,[185,3]],[47,[[46,[58,[43,[58]]]]]]],[[6,[102]]]],[[]],[[]],[[]],0,0,[[[182,[59,[43,[58]],58]],[44,[58,[43,[58]]]],[183,[59]],185],[[6,[[61,[59]],53]]]],[[[182,[59,[43,[58]],58]]],4],0,[[[180,[[0,[178,179]]]],27],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[60,[59]],[186,[59]],[51,[58]],[51,[58]],[187,[59]],[0,[185,20]]],[[6,[9,53]]]],[[[44,[58,[43,[58]]]],[60,[59]],[61,[59]]],[[6,[9,53]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[189,[[0,[188,3]],[0,[3,[43,[[0,[188,3]]]]]]]]],[[189,[[0,[188,3]],[0,[3,[43,[[0,[188,3]]]]]]]]]],[[]],[[[190,[188,[43,[188]]]],[189,[188,[43,[188]]]]],[[6,[[190,[188,[43,[188]]]],102]]]],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[5,[[6,[[189,[188,[43,[188]]]]]]]],[[],[[6,[7]]]],[5,[[6,[[190,[[0,[116,188]],[0,[116,[43,[[0,[116,188]]]]]]]]]]]],[[],[[6,[7]]]],[4],[4],[4],[[[189,[188,[43,[188]]]],83],84],[[[191,[188,[43,[188]]]],[189,[188,[43,[188]]]],[63,[188]],[63,[188]],[42,[188]],4,[47,[[46,[188,[43,[188]]]]]]],[[6,[102]]]],[[[189,[188,[43,[188]]]],[51,[122]]],[[26,[[51,[122]]]]]],[[[189,[188,[43,[188]]]]],4],[[[191,[[0,[10,188]],[0,[10,[43,[[0,[10,188]]]]]]]],11],12],[[]],[[]],[[]],[[[191,[188,[43,[188]]]],[63,[188]],[63,[188]],[42,[188]],4,[46,[188,[43,[188]]]]],[[6,[[41,[[50,[[48,[188]],[49,[188]],[43,[188]]]]]],102]]]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[191,[188,[43,[188]]]]],[[46,[188,[43,[188]]]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[4,[46,[188,[43,[188]]]]],[[191,[188,[43,[188]]]]]],[[]],[[]],[[]],[[[191,[188,[43,[188]]]],[189,[188,[43,[188]]]],[51,[[50,[[48,[188]],[49,[188]],[43,[188]]]]]],[42,[188]],[47,[[46,[188,[43,[188]]]]]]],[[6,[102]]]],[[[189,[188,[43,[188]]]],[42,[188]],[51,[[192,[188,[43,[188]]]]]],4,[41,[188]],[47,[[46,[188,[43,[188]]]]]]],[[6,[[190,[188,[43,[188]]]],102]]]],[[4,[47,[[46,[188,[43,[188]]]]]]],[[189,[188,[43,[188]]]]]],[[[191,[188,[43,[188]]]]],4],[[[189,[188,[43,[188]]]],27],6],[[[190,[[0,[117,188]],[0,[117,[43,[[0,[117,188]]]]]]]],27],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[190,[188,[43,[188]]]],[189,[188,[43,[188]]]],4,[51,[188]],[51,[188]]],[[6,[9,104]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[[52,[1]],[42,[1]],[26,[[63,[1]]]]],[[6,[53]]]],[[[63,[1]]],[[26,[[63,[1]]]]]],[[[63,[1]]],[[26,[[63,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[63,[1]],124],[[63,[1]]]],[193,193],[[[63,[[0,[3,1]]]]],[[63,[[0,[3,1]]]]]],[[[68,[[0,[3,1]]]]],[[68,[[0,[3,1]]]]]],[[]],[[]],[[]],[[193,193],25],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[[193,193],9],[[[63,[[0,[8,1]]]],[63,[[0,[8,1]]]]],9],[[[68,[[0,[8,1]]]],[68,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[193,11],12],[[[63,[[0,[10,1]]]],11],12],[[[63,[1]],[42,[1]],82,83],84],[[[68,[[0,[10,1]]]],11],12],[[[68,[1]],[42,[1]],82,83],84],[[]],[[]],[123,[[63,[1]]]],[[]],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[193,18]],[[[63,[1]],18]],[[[68,[1]],18]],[193,[[26,[4]]]],[[124,4],[[63,[1]]]],[[81,4],[[68,[1]]]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[63,[1]]],9],[[[63,[1]]],9],[[[68,[1]]],9],[[],9],[[[63,[1]]],9],[[[63,[1]]],9],[[[63,[1]]],9],[193,9],[193,9],[[[63,[1]]],9],[124,9],[[[63,[1]],124],9],[[],9],[[[63,[1]]],9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[4,193],[[81,193],[[68,[1]]]],[124,[[63,[1]]]],[81,[[68,[1]]]],[[124,4],[[63,[1]]]],[[81,4],[[68,[1]]]],[193,[[26,[4]]]],[[193,193],[[26,[25]]]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],0,[[4,9,[47,[[46,[188,[43,[188]]]]]],194],[[6,[[47,[[189,[188,[43,[188]]]]]],195]]]],[[],75],[[4,[47,[[46,[188,[43,[188]]]]]],40],[[6,[195]]]],0,0,0,0,[[],99],[[]],[[]],[4],[4],[[],[[6,[7]]]],[4],[[195,11],12],[[195,11],12],[196,195],[[]],[197,195],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[195,[[26,[99]]]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[198,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]],[[198,[[0,[3,1]],[0,[3,[43,[[0,[3,1]]]]]]]]]],[[]],[[],199],[[],199],0,[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],0,[[[198,[1,[43,[1]]]],[63,[1]],[42,[1]]],76],[[]],[[]],[[42,[95,[[94,[82]]]],[0,[[169,[200]],39]]],76],[[42,[95,[[94,[82]]]],167,[0,[[169,[200]],39]]],[[76,[167]]]],[[42,[95,[[94,[82]]]],[169,[200]]],76],[[42,[95,[[94,[82]]]],63,[0,[[169,[200]],39]]],76],[[[198,[1,[43,[1]]]],[42,[1]],[95,[[94,[82]]]],[63,[1]],[0,[[169,[200]],39]]],76],[[42,82,63],76],[[[198,[1,[43,[1]]]],[42,[1]],82,[63,[1]]],76],[[],4],[[],4],[[]],[[]],0,[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],0,[[],28],[[],28],[[42,4,[26,[199]],46]],[[[42,[1]],4,[26,[199]],[46,[1,[43,[1]]]]],[[76,[[202,[1,[201,[1,[43,[1]]]],[43,[1]]]]]]]],[[[42,[1]],4,[26,[199]],[46,[1,[43,[1]]]]],[[198,[1,[43,[1]]]]]],[[[42,[1]],4,[26,[199]],[46,[1,[43,[1]]]]],[[198,[1,[43,[1]]]]]],[[]],[[]],[28,28],[[[198,[1,[43,[1]]]],28],28],[[],28],[[[198,[1,[43,[1]]]]],28],[[[26,[[169,[200]]]],[46,[[0,[1,116]],[43,[[0,[1,116]]]]]]],76],[[[46,[[0,[1,116]],[43,[[0,[1,116]]]]]]],76],[[[42,[1]],[202,[1,[201,[1,[43,[1]]]],[43,[1]]]],[26,[[169,[200]]]]],76],[[[202,[1,[201,[1,[43,[1]]]],[43,[1]]]]],76],[[]],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[]],[[]],0,[[82,163]],[[]],[[]],[[],82],[4],[4],[[],[[6,[7]]]],[4],[[82,164],28],[[]],[82,164],[[82,[51,[164]]],76],[[],4],[[],82],[[],82],[[82,[169,[62]]],164],[[82,[51,[[169,[62]]]],9,9],[[76,[164]]]],[[82,[51,[[169,[62]]]],9],[[76,[164]]]],[[]],[[],[[6,[23,24]]]],[62,113],[[],113],[163,82],[[]],[82,[[95,[[94,[82]]]]]],[[82,62],[[26,[164]]]],[[82,164],76],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[82,163],76],[62,113],[[]],0,0,0,0,[[],99],[[[42,[1]],9],[[63,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[42,[1]],[63,[1]]],[[6,[[63,[1]],103]]]],0,[[[42,[1]],[63,[1]]],[[6,[103]]]],[[[42,[1]],[63,[1]]],[[6,[[63,[1]],103]]]],0,0,[103,103],[[[203,[[0,[3,1]]]]],[[203,[[0,[3,1]]]]]],[[[204,[[0,[3,1]]]]],[[204,[[0,[3,1]]]]]],[[]],[[]],[[]],0,0,[[[42,[1]],[63,[1]]],[[63,[1]]]],0,[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],0,[[[42,[1]],[63,[1]],[63,[1]]],9],0,0,0,[[],[[42,[1]]]],0,0,[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],0,[4],[4],[4],[4],0,0,0,0,0,[[[42,[1]]],[[204,[1]]]],[[[42,[1]],[63,[1]]],[[26,[[119,[1]]]]]],[[[42,[1]],[63,[1]]],[[26,[123]]]],[[[42,[1]],[63,[1]]],26],[[[42,[1]],[63,[1]]],26],[[[42,[1]],[68,[1]]],[[26,[[74,[1]]]]]],[[[42,[1]],[63,[1]]],26],[[[42,[1]],[63,[1]]],[[26,[113]]]],[[[42,[1]],[63,[1]]],[[26,[[41,[[63,[1]]]]]]]],[[[42,[1]],[63,[1]]],[[26,[113]]]],[[[42,[1]],[63,[1]]],[[26,[[2,[1]]]]]],[[[42,[1]],[63,[1]]],26],[[[42,[1]],[63,[1]]],[[26,[28]]]],[[[42,[1]],[63,[1]]],[[26,[113]]]],[[[42,[1]],[63,[1]]],[[26,[113]]]],[[[42,[1]],[63,[1]]],26],[[[42,[1]],[63,[1]]],[[26,[[118,[1]]]]]],[[[42,[1]],[63,[1]]],[[26,[13]]]],[[[42,[1]],[67,[1]]],[[26,[[68,[1]]]]]],[[[42,[1]],[66,[1]]],[[26,[[63,[1]]]]]],[[[42,[[0,[10,1]]]],11],12],[[103,11],12],[[103,11],12],[[[203,[[0,[10,1]]]],11],12],[[[204,[[0,[10,1]]]],11],12],[[]],[[]],[[]],[[]],0,[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]],[68,[1]]],[[26,[[70,[1]]]]]],[[[42,[1]],[118,[1]]],[[26,[[70,[1]]]]]],[[[42,[1]],124,1],[[26,[[63,[1]]]]]],[[[42,[1]],[112,[[2,[1]]]]],[[26,[[63,[1]]]]]],[[[42,[1]],[63,[1]]],[[26,[[66,[1]]]]]],[[[42,[1]],[68,[1]],[26,[[205,[1]]]]],[[6,[103]]]],[[[42,[1]],[63,[1]],[26,[[205,[1]]]]],[[6,[103]]]],0,0,[[[42,[1]],[68,[1]]],[[26,[[67,[1]]]]]],[[[42,[1]],[63,[1]]],[[26,[[66,[1]]]]]],[[[42,[1]],62],[[66,[1]]]],[[[42,[1]],113],[[66,[1]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[42,[1]],1,[63,[1]]],[[26,[[63,[1]]]]]],[[[42,[1]],1,[63,[1]]],[[63,[1]]]],0,[[[42,[1]]]],0,0,[[]],[[],4],[[],4],[[],4],[[],4],[[[42,[1]],123],[[63,[1]]]],[[[42,[1]],1,[63,[1]]],[[63,[1]]]],[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]]],[[68,[1]]]],[[[42,[1]],[63,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],[[[42,[1]],124,1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],[112,[[2,[1]]]]],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],1],[[63,[1]]]],[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[42,[1]],62],[[63,[1]]]],[[[42,[1]],113],[[63,[1]]]],[[[42,[1]],[51,[28]]],[[63,[1]]]],[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],[[[42,[1]],9],[[63,[1]]]],[[[42,[1]],[206,[1]]],[[63,[1]]]],[[[42,[1]],[118,[1]]],[[63,[1]]]],[[[42,[1]],14],[[63,[1]]]],[[[42,[1]],13],[[63,[1]]]],[[[42,[1]],[67,[1]],[205,[1]]],[[26,[[68,[1]]]]]],[[[42,[1]],[66,[1]],[205,[1]]],[[26,[[63,[1]]]]]],[[]],[[]],[[]],[[]],0,[[[42,[1]],[169,[62]]],[[63,[1]]]],0,[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],0,0,0,0,0,0,[[[42,[1]],[51,[[63,[1]]]]],[[63,[1]]]],0,[[[42,[1]],[68,[1]]],[[68,[1]]]],0,[[],[[42,[1]]]],[[[42,[1]]],[[204,[1]]]],[[[42,[1]]],[[63,[1]]]],0,[[[42,[1]],[112,[[2,[1]]]]],[[63,[1]]]],0,0,0,0,0,[[[42,[1]],[63,[1]]],26],0,[[[42,[1]],[63,[1]]],[[6,[103]]]],[[]],[[]],[[]],[[]],0,0,[[[203,[1]]],[[63,[1]]]],[[[42,[1]],[63,[1]],[63,[1]]],[[6,[9,103]]]],0,0,[[[42,[1]],62],[[6,[[63,[1]],165]]]],[[[42,[1]],[95,[[94,[82]]]],167],[[6,[165]]]],[[[42,[1]],[95,[[94,[82]]]],62],[[6,[[63,[1]],165]]]],[[[42,[1]],[63,[1]]],[[26,[[63,[1]]]]]],0,[[[42,[1]],[63,[1]]],[[6,[[63,[1]],103]]]],[[[42,[1]],62],[[63,[1]]]],0,[[[42,[1]],[63,[1]],[63,[1]]],[[63,[1]]]],0,[[[42,[1]]],[[63,[1]]]],0,[[[42,[1]],[169,[62]]],[[63,[1]]]],0,[[[42,[1]]],[[63,[1]]]],0,0,0,[[]],[[]],[[]],[[],28],[[[42,[1]],[68,[1]]],[[26,[[207,[1]]]]]],[[[42,[1]],[63,[1]]],[[26,[[208,[1]]]]]],[[[42,[1]],[63,[1]]],[[6,[103]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],0,[[[42,[1]],14],[[63,[1]]]],0,[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[[42,[1]],62],[[63,[1]]]],[[[203,[1]]],1],[[]],[[]],[[]],[[]],[[[42,[1]],1,1],[[6,[[67,[1]],103]]]],0,[[[42,[1]],1,1],[[6,[[66,[1]],103]]]],0,[[[203,[1]]],[[66,[1]]]],0,0,0,0,0,[[]],[[113,113],[[26,[113]]]],[[]],[[]],[113,113],[[]],[4],[4],[[],[[6,[7]]]],[5,[[6,[113]]]],[[113,62],113],[113,[[26,[113]]]],[4],[[113,113],9],[[],9],[[],9],[[],9],[[113,[51,[[169,[62]]]]],113],[[113,11],12],[[113,11],12],[62,28],[113,28],[113,28],[113,28],[[]],[62,113],[62,[[26,[113]]]],[[[0,[15,16]],17],14],[[113,113],9],[[113,18]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[113,9],[113,9],[113,9],[113,9],[123,9],[[[51,[[169,[62]]]]],113],[[[41,[28]]],113],[[],[[6,[23,24]]]],[113,[[76,[62]]]],[[[51,[[169,[62]]]],9],113],[[[41,[28]],9],113],[[113,113],[[26,[25]]]],[113,[[51,[28]]]],[[]],[113,9],[9,113],[[],113],[[],113],[[113,27],6],[113],[[[51,[[169,[62]]]]],113],[[[41,[28]]],113],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[206,[[0,[3,1]]]]],[[206,[[0,[3,1]]]]]],[[]],[4],[4],[[],[[6,[7]]]],[4],[[[206,[[0,[8,1]]]],[206,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[206,[[0,[10,1]]]],11],12],[[[206,[1]],11],12],[[]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],41],[[],[[41,[125]]]],[[],[[41,[126]]]],[[],[[41,[62]]]],[[124,[52,[1]]],[[6,[[54,[1]],53]]]],[[81,[52,[1]]],[[6,[[54,[1]],53]]]],[[125,[52,[1]]],[[6,[[54,[1]],53]]]],[[126,[52,[1]]],[[6,[[54,[1]],53]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[124,124],[81,81],[125,125],[126,126],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[5,[[6,[124]]]],[[],[[6,[7]]]],[5,[[6,[81]]]],[[],[[6,[7]]]],[5,[[6,[125]]]],[5,[[6,[126]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[[124,124],9],[[81,81],9],[[125,125],9],[[126,126],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[124,11],12],[[124,11],12],[[81,11],12],[[81,11],12],[[125,11],12],[[125,11],12],[[126,11],12],[[126,11],12],[[]],[[]],[[]],[[]],[1,26],[1,[[26,[124]]]],[1,[[26,[81]]]],[1,[[26,[125]]]],[1,[[26,[126]]]],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[124,18]],[[81,18]],[[125,18]],[[126,18]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[124,9],[126,9],[[124,124],9],[124,9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[125,125],[[26,[25]]]],[[126,126],[[26,[25]]]],[[]],[[]],[[]],[[]],[[124,27],6],[[81,27],6],[[125,27],6],[[126,27],6],[4,9],[[125,4],9],[[126,4],9],[[],62],[125,62],[126,62],[[],1],[124,1],[81,1],[125,1],[126,[[0,[[209,[14]],210]]]],[[]],[124],[81],[125],[126],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],6],[127,[[6,[124]]]],[[],6],[127,[[6,[81]]]],[127,[[6,[125]]]],[[],6],[[],6],[127,[[6,[126]]]],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],0,0,[[13,13],13],[[]],[[]],[[]],[13,13],[[]],[4],[4],[[],[[6,[7]]]],[5,[[6,[13]]]],[[13,13],13],[4],[[13,13],9],[[],9],[[],9],[[],9],[[13,11],12],[[13,11],12],[14,13],[[]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[13,9],[[],[[6,[23,24]]]],[[13,13],13],[[13,13],[[26,[25]]]],[[]],[[13,13],13],[[13,27],6],[[13,13],13],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,[[42,82,83],84],[[42,82],28],0,0,0,[[]],[[]],[[]],[4,122],[211,211],[[]],[4],[4],[[],[[6,[7]]]],[4],[[211,211],9],[[],9],[[],9],[[],9],[[211,11],12],[[211,11],12],[[]],[[[51,[122]]],[[76,[211]]]],0,[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[[51,[122]]],[[26,[4]]]],0,[211,122],[122,9],[122,9],[211,[[41,[122]]]],[[]],[[],28],[4,[[41,[122]]]],0,[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,0,0,[[],99],[[]],[[]],[19,212],[19,212],0,[4],[4],[[],[[6,[7]]]],[4],[[212,11],12],[[212,11],12],[[]],0,[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],0,[[],28],0,[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,[[]],[[]],[4],[4],[[],[[6,[7]]]],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,62,[51,[62]],214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,62,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,62,[51,[62]],214],6],[[213,4,214],6],[[213,62,4,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,214],6],[[213,62,214],6],[4],[[213,11],12],[[]],[211,[[6,[116,212]]]],[211,213],[[],4],[[]],[213,9],[[],[[6,[23,24]]]],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[[],[[6,[7]]]],[4],[4],[4],[4],[4],[215,6],[215,6],[215,6],[216,6],[217,6],[218,6],[218,6],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[219,9],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[],[[6,[23,24]]]],[[]],[[]],[[]],[[]],[[]],[[219,9],6],[[219,[51,[122]]],6],[[219,123],6],[[215,[0,[117,16]]],6],[[215,[0,[117,16]]],6],[[219,220],6],[[219,221],6],[[215,[0,[117,16]]],6],[[217,[0,[117,16]]],6],[[218,62,[0,[117,16]]],6],[[218,62,[0,[117,16]]],6],[[219,222],6],[[219,223],6],[[219,224],6],[[219,225],6],[[216,[0,[117,16]]],6],[[219,[26,[4]]],6],[[219,62,[0,[117,16]]],6],[[219,62,128,62,[0,[117,16]]],6],[219,6],[[219,[26,[4]]],6],[[219,[0,[117,16]]],6],[[219,62],6],[[219,62,4],6],[[219,62,128,62,4],6],[[219,4],6],[[219,62,4],6],[[219,62,128,62,4],6],[[219,127],6],[[219,128],6],[[219,14],6],[[219,122],6],[219,6],[[219,62],6],[[219,62,128,62],6],[[216,[0,[117,16]]],6],[117,[[6,[211,212]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],29],[[],29],[[],29],[[],29],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[207,[[0,[3,1]]]]],[[207,[[0,[3,1]]]]]],[[]],[4],[4],[[],[[6,[7]]]],[5,[[6,[[207,[[0,[116,1]]]]]]]],[4],[[[207,[[0,[8,1]]]],[207,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[207,[[0,[10,1]]]],11],12],[[]],[[[207,[1]]],[[70,[1]]]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[[207,[[0,[117,1]]]],27],6],[[]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],[[[207,[1]],[97,[1]]],[[67,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[208,[[0,[3,1]]]]],[[208,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[208,[[0,[116,1]]]]]]]],[[],[[6,[7]]]],[4],[[[208,[[0,[8,1]]]],[208,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[208,[1]],11],12],[[[208,[[0,[10,1]]]],11],12],[[]],[[[42,[1]],[63,[1]]],[[26,[[208,[1]]]]]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[],[[6,[23,24]]]],[[]],[[[208,[[0,[117,1]]]],27],6],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]],[[[208,[1]],[97,[1]]],[[66,[1]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[[227,[[0,[3,226]],[0,[3,1]]]]],[[227,[[0,[3,226]],[0,[3,1]]]]]],[[]],[[[227,[226,1]],[227,[226,1]]],25],[4],[4],[[],[[6,[7]]]],[5,[[6,[[227,[[0,[116,226]],[0,[116,1]]]]]]]],[4],[[[227,[[0,[8,226]],[0,[8,1]]]],[227,[[0,[8,226]],[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[227,[[0,[226,19]],1]],11],12],[[[227,[[0,[10,226]],[0,[10,1]]]],11],12],[[]],[62,[[6,[[227,[226,1]],228]]]],[62,[[6,[[66,[1]],103]]]],[62,[[6,[[227,[124,1]],103]]]],[[226,1],[[227,[226,1]]]],[[[0,[15,16]],17],14],[[[227,[226,1]],18]],[[[0,[19,20,21]]],[[22,[[0,[19,20,21]]]]]],[[],4],[[]],[[[227,[226,1]]],[[70,[1]]]],[[],[[6,[23,24]]]],[[[227,[226,1]],[227,[226,1]]],[[26,[25]]]],[[[227,[226,1]]]],[[]],[[[227,[[0,[117,226]],[0,[117,1]]]],27],6],[[[227,[226,1]]],226],[[[227,[226,1]]],1],[[[227,[226,1]]],28],[[]],[[],28],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[[227,[226,1]]],1],[[]],0,[[]],[[]],[[]],[[[205,[[0,[3,1]]]]],[[205,[[0,[3,1]]]]]],[[]],0,[[],[[205,[[0,[92,1]]]]]],[4],[4],[[],[[6,[7]]]],[5,[[6,[[205,[[0,[116,1]]]]]]]],[4],[[[205,[[0,[8,1]]]],[205,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],0,[[[205,[[0,[10,1]]]],11],12],[[]],[[[205,[1]],[67,[1]]],[[26,[[207,[1]]]]]],[[[205,[1]],[66,[1]]],[[26,[[208,[1]]]]]],[[[66,[1]]],[[26,[[208,[1]]]]]],[[],4],[[[205,[1]],[42,[1]],[63,[1]]],[[26,[[66,[1]]]]]],[[[205,[1]],[66,[1]],[26,[[208,[1]]]]],[[26,[[26,[[208,[1]]]]]]]],[[]],[[],[[6,[23,24]]]],[[],[[205,[1]]]],[[[42,[1]],[63,[1]]]],[[[205,[1]],[97,[1]]],[[66,[1]]]],[[]],[[[205,[1]],62,[97,[1]]]],[[[205,[1]],113,[97,[1]]]],[[[205,[[0,[117,1]]]],27],6],[[]],[[[205,[1]]],[[42,[1]]]],[[[205,[1]],[66,[1]]],[[6,[103]]]],[[[42,[1]]],[[205,[1]]]],[[],6],[[],6],[[],29],[[[31,[30]]],[[31,[32,30]]]],[[],32],[[],32],[[]]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[3,"With"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"UInt"],[15,"u64"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[8,"Display"],[8,"Send"],[8,"Sync"],[3,"IndentedSection"],[3,"Layout"],[3,"LayoutError"],[4,"Ordering"],[4,"Option"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[3,"Global"],[3,"Box"],[8,"Any"],[3,"CacheMap"],[3,"RandomState"],[3,"HashMap"],[8,"Eq"],[8,"Borrow"],[8,"StableDeref"],[8,"Copy"],[8,"FnOnce"],[3,"Vec"],[3,"Store"],[8,"Coprocessor"],[3,"MultiFrame"],[3,"CircuitFrame"],[3,"Lang"],[3,"Arc"],[3,"IO"],[3,"Witness"],[3,"Frame"],[15,"slice"],[8,"ConstraintSystem"],[4,"SynthesisError"],[3,"AllocatedNum"],[3,"AllocatedPtr"],[3,"AllocatedContPtr"],[3,"GlobalAllocations"],[3,"Scalar"],[3,"Bls12"],[3,"PreparedVerifyingKey"],[3,"Proof"],[15,"str"],[3,"Ptr"],[8,"PrimeField"],[4,"Boolean"],[6,"ZExprPtr"],[6,"ZContPtr"],[3,"ContPtr"],[8,"IntoHashComponents"],[15,"array"],[4,"ConsName"],[4,"ContName"],[8,"AsAllocatedHashComponents"],[4,"Continuation"],[3,"Utf8PathBuf"],[6,"Result"],[4,"Flow"],[3,"ParallelConfig"],[3,"WitnessGeneration"],[3,"Config"],[4,"ContTag"],[3,"State"],[8,"Write"],[6,"Result"],[8,"CircomGadget"],[3,"CircomCoprocessor"],[4,"TrieCoproc"],[3,"NewCoprocessor"],[3,"LookupCoprocessor"],[3,"InsertCoprocessor"],[3,"Trie"],[8,"Default"],[4,"Error"],[3,"RefCell"],[3,"Rc"],[3,"LookupProof"],[3,"PoseidonCache"],[3,"InsertProof"],[8,"Error"],[4,"ReductionError"],[4,"LurkError"],[4,"ProofError"],[3,"Error"],[4,"NovaError"],[4,"Status"],[3,"Evaluator"],[3,"Error"],[3,"FrameIt"],[8,"Fn"],[3,"Take"],[3,"Binding"],[8,"Into"],[3,"Symbol"],[4,"Coproc"],[3,"DummyCoprocessor"],[8,"Deserialize"],[8,"Serialize"],[3,"Thunk"],[4,"Expression"],[4,"LanguageField"],[3,"FWrap"],[15,"u8"],[15,"char"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[15,"u128"],[3,"HashConstants"],[6,"U3"],[3,"PoseidonConstants"],[6,"U4"],[6,"U6"],[6,"U8"],[4,"HashConst"],[4,"HashArity"],[3,"InversePoseidonCache"],[8,"HashName"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[6,"ConsWitness"],[8,"ContentAddressed"],[3,"CircuitHashWitness"],[6,"HashCircuitWitnessBlocks"],[3,"ScalarCons"],[3,"ScalarCont"],[3,"Cont"],[6,"ContStub"],[6,"ContWitness"],[6,"Preimage"],[3,"Func"],[3,"Var"],[4,"Tag"],[4,"CtrlTag"],[4,"Lit"],[3,"Block"],[4,"Ctrl"],[4,"Op"],[6,"AString"],[3,"Package"],[6,"SymbolRef"],[4,"Error"],[4,"LitBase"],[6,"Span"],[6,"ParseResult"],[8,"AsRef"],[8,"InputLength"],[8,"AsBytes"],[3,"ParseError"],[4,"ErrorKind"],[4,"ParseErrorKind"],[6,"IResult"],[4,"Pos"],[4,"StringFragment"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"PublicParams"],[3,"Groth16Prover"],[3,"Parameters"],[3,"GenericSRS"],[8,"RngCore"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[8,"CurveCycleEquipped"],[3,"PublicParams"],[4,"Proof"],[3,"NovaProver"],[6,"C1"],[4,"RawPtr"],[3,"Utf8Path"],[4,"Error"],[3,"Error"],[3,"Error"],[3,"ReplState"],[3,"Command"],[3,"Path"],[8,"ReplTrait"],[3,"Repl"],[3,"ConstantPtrs"],[3,"NamedConstants"],[3,"ZStore"],[4,"Syntax"],[4,"ZCont"],[4,"ZExpr"],[8,"From"],[8,"Field"],[4,"ZData"],[4,"SerdeError"],[3,"Deserializer"],[8,"Visitor"],[3,"SerializeCell"],[3,"SerializeMap"],[3,"SerializeTupleVariant"],[3,"StructSerializer"],[3,"Serializer"],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[8,"Tag"],[3,"ZPtr"],[3,"Error"],[8,"ToInputs"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"CoCircuit"],[8,"Evaluable"],[8,"CAddr"],[13,"Pos"],[8,"Prover"],[8,"Provable"],[8,"TypePredicates"],[8,"Op"],[8,"Write"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,2,1,2,1,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1],"f":[0,0,0,[[]],[[]],[[]],[[]],[1],[[2,3],4],[[1,3],4],[[]],[[]],[[],1],[[]],[[]],[1],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6]],"c":[],"p":[[3,"MetricsSinkHandle"],[3,"MetricsSink"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
