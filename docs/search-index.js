var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","drop","from","handle_meta","handle_non_meta","init","into","name","new","process_line","prompt","references","try_from","try_into","type_id","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[0,[[]],[[]],[[],1],[2],[2],[2],[[]],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]],8,[0,[[10,[9]],11]]],12],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]]],12],[[],2],[[]],[[],13],[[[6,[3]],2,[14,[1]],[15,[3,[4,[3]]]]],[[5,[3,[4,[3]]]]]],[[[5,[3,[4,[3]]]],13],13],[[[5,[3,[4,[3]]]]],13],[[16,17,[19,[18]]],[[21,[20]]]],[[],21],[[],21],[[],22],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[6,"Scalar"],[4,"Coproc"],[3,"ClutchState"],[3,"Store"],[3,"Ptr"],[3,"Package"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[3,"String"],[4,"Option"],[3,"Lang"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"fcomm":{"doc":"","t":"DEDNDNDNDNDNFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMLLLLLLLLLLLLLLLLLLLLLMLMFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLFMLLLLLLLLLMMMMMFLFFMMMLMFFFMMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLL","n":["Cli","Command","Commit","Commit","Eval","Eval","Open","Open","Prove","Prove","Verify","Verify","_lurk_function","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim","command","commit","commitment","commitment","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","error","eval","eval_input","expression","expression","expression","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","function","function","has_subcommand","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into_app","into_app_for_update","limit","lurk","lurk","lurk","lurk","main","open","opening_request","proof","proof","proof","proof","prove","quote_input","read_eval_from_path","read_from_path","read_no_eval_from_path","reduction_count","reduction_count","references","references","references","references","references","references","references","request","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"fcomm"]],"d":["Functional commitments","","","Creates a hiding commitment to a function","","Evaluates an expression","","Creates an opening","","Generates a proof for the given expression","","Verifies a proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Chain commitment openings. Opening includes commitment to …","Wrap evaluation result in a claim","Path to claim to prove","","","Path to functional commitment","Optional commitment value (hex string). Function will be …","","","","","","","","","","","","","","","","","","","","","","Exit with error on failed verification","","Evaluate inputs before passing to function (outside the …","","Path to expression source","Path to expression source","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Path to function","Optional path to function used if commitment is not …","","","","","","","","","","Path to function input","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Iteration limit","","Function is lurk source.","","","","","","","Path to proof output if prove requested","Path to proof input","Path to proof input","","Quote input before passing to function when opening. …","","","","Number of circuit reductions per step","Number of circuit reductions per step","","","","","","","","Optional path to OpeningRequest – which subsumes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Be verbose","","","","","","","",""],"i":[0,0,0,21,0,21,0,21,0,21,0,21,0,18,12,22,14,23,24,18,12,22,14,23,24,21,21,18,21,12,22,14,23,24,18,21,12,22,14,23,24,22,14,23,18,12,12,22,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,14,18,0,14,23,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,12,22,21,18,21,12,22,14,23,24,0,22,18,21,12,22,14,23,24,18,18,18,12,22,14,23,0,22,0,0,22,23,24,23,22,0,0,0,22,23,18,21,12,22,14,23,24,22,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,24,18,21,12,22,14,23,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]],[5,[4]],6,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[9]]]],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[12,6,[8,[13,[7,[13]]]]]],0,0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],0,[[14,6,[8,[13,[7,[13]]]]]],0,[[[3,[[0,[1,2,15]]]],[5,[4]],16,6,[8,[[0,[1,2,15]],[7,[[0,[1,2,15]]]]]]],[[10,[[17,[[0,[1,2,15]]]],9]]]],0,0,[[18,19],20],[[21,19],20],[[12,19],20],[[22,19],20],[[14,19],20],[[23,19],20],[[24,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,[[10,[18,26]]]],[25,[[10,[21,26]]]],[25,[[10,[12,26]]]],[25,[[10,[22,26]]]],[25,[[10,[14,26]]]],[25,[[10,[23,26]]]],[25,[[10,[24,26]]]],[25,[[10,[18,26]]]],[25,[[10,[21,26]]]],[25,[[10,[12,26]]]],[25,[[10,[22,26]]]],[25,[[10,[14,26]]]],[25,[[10,[23,26]]]],[25,[[10,[24,26]]]],0,0,[27,16],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[3,[[0,[1,2]]]],[5,[4]],16,6,16,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[[17,[[0,[1,2]]]],9]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],0,0,0,0,0,[[]],[[22,6,16,[8,[13,[7,[13]]]]]],[[[5,[4]]],[[10,[[28,[[0,[1,2,15]]]],9]]]],[[[29,[[5,[4]]]]],[[10,[[31,[[0,[2,30,1]]]],9]]]],0,0,0,[[23,6,[8,[13,[7,[13]]]]]],0,[[[3,[[0,[1,2]]]],[5,[4]],6,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[9]]]],[[[3,[[0,[1,2]]]],[5,[4]]],[[10,[[17,[[0,[1,2]]]],9]]]],[[[3,[[0,[1,2]]]],[5,[4]]],[[10,[9]]]],0,0,[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[18,25],[[10,[26]]]],[[21,25],[[10,[26]]]],[[12,25],[[10,[26]]]],[[22,25],[[10,[26]]]],[[14,25],[[10,[26]]]],[[23,25],[[10,[26]]]],[[24,25],[[10,[26]]]],[[18,25],[[10,[26]]]],[[21,25],[[10,[26]]]],[[12,25],[[10,[26]]]],[[22,25],[[10,[26]]]],[[14,25],[[10,[26]]]],[[23,25],[[10,[26]]]],[[24,25],[[10,[26]]]],0,[[24,16,[8,[13,[7,[13]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[8,"LurkField"],[8,"Serialize"],[3,"Store"],[3,"Path"],[8,"AsRef"],[15,"usize"],[4,"Coproc"],[3,"Lang"],[4,"Error"],[4,"Result"],[6,"Command"],[3,"Commit"],[6,"S1"],[3,"Eval"],[8,"DeserializeOwned"],[15,"bool"],[3,"Ptr"],[3,"Cli"],[3,"Formatter"],[6,"Result"],[4,"Command"],[3,"Open"],[3,"Prove"],[3,"Verify"],[3,"ArgMatches"],[3,"Error"],[15,"str"],[3,"OpeningRequest"],[4,"Option"],[8,"Deserialize"],[3,"Proof"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[3,"TypeId"]]},\
"lurk":{"doc":"","t":"ENCCRNCLLLLALLAALLLLLLLLAAAALLLLLLLLALALLLLLLAOOAOOLLLAALAAALLLAALALAALLLLLALLAIAAKKDDLLLLLLLLLLLMLLLLLLLMLLLLLLLMMLLMLMMLLLLLLLMMLLLLLLLLLLLLLLMAADMMLLMMMMLLMMMLLLMMMMMMMLMMLLMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMLMLLLMMLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILKLLKLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIDDDDNENDMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLKLLLKLLLKLLLAKLLLLLMLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNDNNLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNSDEINNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLNNNNNDEGGDEGGNNNNNNNNNNNNNNNNNNIDNNNNNRRNNNNNNNENNNNNLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNDENNDNNNNNNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNIEEDNNNLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLRDLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLERNRRNLLLLLLLLLLLLFLFLLLLLLLIIIQLLAKLLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLMLLLLLLLLLLLLLLLLLLLLGGNGGGGDGEDNGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLDNNNDEDGGMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLDEDDGRNDNDININEEDDGNNDNDNDDNEGNNNNHDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMMFMLLLLMMMLLLLLFKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMMMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLMLLLLLLKLKLLLLLMMKLKLLLKLKLLLFFFLLLLLLLLLLNNNNNNNNNNNNNNNNNNEEDDNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDNDNEDDDILMMMMLLLLLLLLLLLLMMMLMLLLMMLLLLLLLLMMMLMLMMMLLMMLLLLLLLLLLLLMLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLMMMMMMMLMMLLMLLLLMLMMMMMLMLMMMLLLMMLLLLLLLLLLLLLLLMMLMLLMLMMLMLMMMLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLNENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKL","n":["Num","Scalar","Sym","Symbol","TEST_SEED","U64","UInt","add_assign","borrow","borrow_mut","cid","circuit","clone","clone_into","cont","coprocessor","deref","deref_mut","deserialize","div_assign","drop","eq","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","get_hash","has_id","hash","hash","hash_witness","id","init","into","into_scalar","is_negative","is_zero","lem","lem","lemop","light_data","metaptr","metaptrs","most_negative","most_positive","mul_assign","package","parser","partial_cmp","proof","ptr","public_parameters","read_from_path","read_from_stdin","references","repl","scalar_store","serialize","store","sub_assign","sym","tag","to_owned","to_string","try_from","try_into","type_id","uint","vzip","write_to_path","writer","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","blank","blank","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","deref","deref","deref_mut","deref_mut","drop","drop","fmt","frames","from","from","from_frame","from_frames","get_store","init","init","input","input","into","into","lang","output","output","output","precedes","precedes","public_input_size","public_inputs","reduction_count","references","references","store","store","synthesize","synthesize","synthesize_frames","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_groth16_proof","vzip","vzip","witness","data","pointer","GlobalAllocations","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","from","fun_tag","if_cont_tag","init","into","lambda_sym","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","power2_32_num","power2_64_num","references","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_scalar_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","pick","pick","pick_const","ptr","references","references","scalar_ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","references","to_owned","try_from","try_into","type_id","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","eval_arity","evaluate","has_circuit","simple_evaluate","synthesize","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","into","into","into","provide","provide","provide","references","references","references","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Status","Terminal","Witness","_p","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_frames","get_frames","has_id","i","id","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_terminal","is_terminal","is_terminal","iter","lang","log","log","log","maybe_emitted_expression","new","next","output","peekmore","precedes","read_from_path","read_from_stdin","reduce","reduce","references","references","references","references","references","references","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","witness","write_to_path","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","cid","clone","clone","clone","clone_into","clone_into","clone_into","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","from","from","from","from","from","from","has_circuit","has_coprocessors","has_id","has_id","id","id","init","init","init","init","into","into","into","into","is_default","key","lookup","max_coprocessor_arity","new","new","new_with_bindings","read_from_path","read_from_path","read_from_stdin","read_from_stdin","references","references","references","references","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_path","write_to_path","Char","Comm","Cons","Expression","Fun","Nil","Num","Opaque","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","as_simple_keyword_string","as_str","as_sym","as_sym_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_keyword_sym","is_list","is_null","is_num","is_opaque","is_str","is_sym","is_thunk","references","references","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","BLS12_381","FIELD","FWrap","LanguageField","LurkField","Pallas","Vesta","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","cid","clone","clone_into","cmp","de","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","equivalent","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","has_id","hash","hex_digits","id","init","init","into","into","is_negative","most_negative","most_positive","partial_cmp","read_from_path","read_from_stdin","references","references","ser","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_path","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","PoseidonCache","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","constants","constants","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","hash3","hash4","hash6","hash8","init","init","init","init","into","into","into","into","into_hash_components","references","references","references","references","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","ClosedEnv","Cons","ConsName","ConsStub","ConsWitness","Cont","ContName","ContStub","ContWitness","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cons","cons","cons","cons_named","cons_named","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","index","index","index","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","length","new_blank","new_dummy","new_from_stub","references","references","references","references","references","references","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Hash2","Hash3","Hash4","Hide","LEM","LEMOP","MatchSymPath","MatchTag","MetaPtr","Null","Open","Return","Seq","Unhash2","Unhash3","Unhash4","Witness","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone_into","clone_into","clone_into","constrain","deconflict","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","equivalent","equivalent","eval","from","from","from","from","get_hash","get_ptr","hash","init","init","init","init","intern_matched_sym_paths","into","into","into","into","name","new","references","references","references","references","run","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Atom","Cell","Comm","Cons","Encodable","LightData","LightExpr","LightStore","Nil","StrCons","SymCons","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_count","clone","clone","clone_into","clone_into","de","de","de","de","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","read_size_bytes","references","references","references","scalar_map","ser","ser","ser","ser","tag","tag_is_atom","tag_is_small","to_owned","to_owned","to_string","to_string","to_trimmed_le_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LURK_EXTERNAL_SYMBOL_NAMES","Package","add_external_symbol","add_external_symbols","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","external_symbols","fmt","from","init","into","local_symbol","lurk","name","name","new","references","relative_abbreviation","remove_external_symbol","remove_external_symbols","root","to_owned","try_from","try_into","type_id","vzip","Error","KEYWORD_MARKER","NoInput","SYM_MARKER","SYM_SEPARATOR","Syntax","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","names_keyword","provide","read_symbol_path","references","to_owned","to_string","try_from","try_into","type_id","vzip","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","has_id","id","init","init","init","into","into","into","lang","new","outer_prove","proof","proof_count","prove","read_from_path","read_from_stdin","reduction_count","reduction_count","references","references","references","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_groth16_proof","vzip","vzip","vzip","write_to_path","C1","C2","Compressed","EE1","EE2","G1","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","S1","S2","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cid","cid","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","evaluate_and_prove","from","from","from","get_evaluation_frames","has_id","has_id","id","id","init","init","init","into","into","into","lang","new","prove","prove_recursively","public_params","read_from_path","read_from_path","read_from_stdin","read_from_stdin","reduction_count","references","references","references","serialize","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","write_to_path","write_to_path","ContPtr","Index","Null","Opaque","Ptr","RawPtr","SPtr","ScalarContPtr","ScalarPtr","_f","_f","allocate_maybe_fun_unconstrained","arbitrary_with","as_cons","as_list","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","de","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parts","get_hash","get_hash","get_hash","get_hash","has_id","hash","hash","hash","hash","id","idx","index","index","init","init","init","init","into","into","into","into","into_hash_components","is_atom","is_cons","is_error","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_self_evaluating","new","new","null","null","opaque","opaque","opaque_idx","partial_cmp","partial_cmp","raw","raw","read_from_path","read_from_stdin","references","references","references","references","ser","serialize","tag","tag","tag","tag_field","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","write_to_path","Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","FileStore","Five","Id","Ipld","LurkCont","LurkPtr","LurkScalarBytes","LurkScalarIpld","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","ScalarBytes","Source","Ten","Terminal","VERBOSE","VerificationResult","apply","apply_and_prove","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid_from_string","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","hash","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","proof","proof_cid","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_params","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","string_cid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","JsonError","OpeningFailure","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","init","into","provide","references","source","to_string","try_from","try_into","type_id","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","drop","drop","env","eval_expr","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","limit","name","name","new","new","new","new","process_line","process_line","prompt","prompt","references","references","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binop","Binop2","Call","Call2","Char","Comm","Cons","Dummy","Emit","Error","Fun","If","Let","LetRec","Lookup","Nil","Num","Outermost","ScalarContinuation","ScalarExpression","ScalarStore","ScalarThunk","Str","Sym","Tail","Terminal","Thunk","UInt","Unop","add_one_ptr","add_ptr","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","cid","cid","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finalize","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_cont","get_expr","get_hash","has_id","has_id","has_id","has_id","hash","id","id","id","id","init","init","init","init","into","into","into","into","new_with_expr","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","references","references","references","references","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_store","to_store_with_expr","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","arg","body","closed_env","ConstantPtrs","Create","Error","Get","HashScalar","NamedConstants","Store","StringSet","TypePredicates","all_strings","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","car_cdr_mut","cdr","cdr","char","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comm","comm_store","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diff","drop","drop","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_list","fetch_maybe_sym","fetch_num","fetch_scalar","fetch_scalar_cont","fetch_str","fetch_sym","fetch_uint","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","fun_store","get_begin","get_char","get_char_from_u32","get_constants","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_expr_hash","get_hash_components_cont","get_hash_components_thunk","get_lurk_sym","get_maybe_opaque","get_nil","get_num","get_opaque_ptr","get_quote","get_str","get_sym","get_t","get_u64","greater","greater_equal","hash_cont","hash_expr","hash_expr_aux","hash_nil","hash_string_mut","hash_sym","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","init","init","init","init","init","init","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_key","intern_list","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_nil","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_scalar_cont_ptr","intern_scalar_ptr","intern_str","intern_strcons","intern_sym","intern_sym_and_ancestors","intern_sym_with_case_conversion","intern_thunk","into","into","into","into","into","into","is_fun","is_potentially","is_self_evaluating","key","lambda","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","lurk_package","lurk_sym","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_scalar_ptr_cache","poseidon_cache","product","provide","ptr","ptr_eq","quote","quotient","read","read_in_package","read_maybe_meta","read_next","read_string","references","references","references","references","references","references","root_sym","scalar_from_parts","scalar_from_parts_cont","scalar_ptr","scalar_ptr_cont_map","scalar_ptr_map","secret","secret","secret_mut","str","str_store","strcons","strcons","sum","sym","sym_store","t","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","u64","uint64","unop_store","value","vzip","vzip","vzip","vzip","vzip","vzip","Key","Sym","Sym","Symbol","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","child","child","cid","cid","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","from","from","from","from","full_name","full_name","full_sym_name","get_hash","get_hash","has_id","has_id","hash","hash","id","id","init","init","into","into","is_keyword","is_keyword","is_opaque","is_root","is_root","is_toplevel","is_toplevel","key_root","keyword_name","name","name","new","new","new_absolute","new_absolute","new_from_path","new_key","new_opaque","new_opaque","new_sym","opaque","parent","parent","partial_cmp","partial_cmp","path","path","path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","references","references","root","root","serialize","serialize","simple_keyword_name","symbol","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_path","write_to_path","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","cid","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","has_id","has_id","has_id","hash","hash","hash","hash","id","id","id","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","partial_cmp","partial_cmp","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","references","references","references","references","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","U64","UInt","add","arbitrary_with","borrow","borrow_mut","cid","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","equivalent","equivalent","fmt","fmt","from","from","has_id","id","init","into","is_zero","mul","partial_cmp","read_from_path","read_from_stdin","references","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","vzip","write_to_path","Write","fmt","fmt_to_string"],"q":[[0,"lurk"],[79,"lurk::circuit"],[84,"lurk::circuit::circuit_frame"],[145,"lurk::circuit::gadgets"],[147,"lurk::circuit::gadgets::data"],[226,"lurk::circuit::gadgets::pointer"],[324,"lurk::cont"],[367,"lurk::cont::Continuation"],[399,"lurk::coprocessor"],[407,"lurk::error"],[481,"lurk::eval"],[654,"lurk::eval::lang"],[761,"lurk::expr"],[837,"lurk::field"],[918,"lurk::hash"],[999,"lurk::hash_witness"],[1221,"lurk::lem"],[1314,"lurk::light_data"],[1402,"lurk::package"],[1434,"lurk::parser"],[1462,"lurk::proof"],[1481,"lurk::proof::groth16"],[1547,"lurk::proof::nova"],[1628,"lurk::ptr"],[1780,"lurk::public_parameters"],[2329,"lurk::public_parameters::error"],[2364,"lurk::repl"],[2424,"lurk::scalar_store"],[2583,"lurk::scalar_store::ScalarContinuation"],[2613,"lurk::scalar_store::ScalarExpression"],[2616,"lurk::store"],[2902,"lurk::sym"],[3009,"lurk::tag"],[3233,"lurk::uint"],[3274,"lurk::writer"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","Returns the argument unchanged.","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","","<code>LightData</code> is a lightweight binary data serialization …","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","This module offers a connection the the backend proving …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Hash2(x, t, is)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Hash3(x, t, is)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Hash4(x, t, is)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","Lurk Evaluation Model (LEM)","The basic building blocks of LEMs.","<code>MatchSymPath(x, cases, def)</code> checks whether <code>x</code> matches some …","<code>MatchTag(x, cases)</code> performs a match on the tag of <code>x</code>, …","Named references to be bound to <code>Ptr</code>s.","<code>MkNull(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Return([a, b, c])</code> sets the output as <code>[a, b, c]</code>","<code>Seq(ops)</code> executes each <code>op: LEMOP</code> in <code>ops</code> sequentially","<code>Unhash2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Unhash3([a, b, c], x)</code> binds <code>a</code> and <code>b</code> to the 3 children of <code>x</code>","<code>Unhash4([a, b, c, d], x)</code> binds <code>a</code> and <code>b</code> to the 4 children …","A <code>Witness</code> carries the data that results from interpreting …","","","","","","","","","Performs the static checks of correctness described in <code>LEM</code>.","","","","","","","Create R1CS constraints for LEM given an evaluation …","Removes conflicting names in parallel logical LEM paths. …","","","","","","","","","","","","","","","","","Calls <code>run</code> until the stop contidion is satisfied, using the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Intern all symbol paths that are matched on <code>MatchSymPath</code>s","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Instantiates a <code>LEM</code> with the appropriate checks and …","","","","","Interprets a LEM using a stack of operations to be popped …","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","Analogous to ScalarExpression::Comm","Analogous to ScalarExpression::Cons","A trait for types that can be serialized and deserialized …","<code>LightData</code> is a binary tree with two types of nodes: Atom …","Enum to represent a light expression.","LightStore contains a fragment of the ScalarStore, but …","Analogous to ScalarExpression::Nil","Replaces ScalarExpression::Str, contains a string and a …","Replaces ScalarExpression::Sym, contains a symbol and a …","","","","","","","","","","Returns the number of bytes required to encode the given …","","","","","Deserializes a <code>LightData</code> into this value.","","","Deserializes a <code>LightData</code> from a <code>&amp;[u8]</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the <code>usize</code> that’s represented by a little endian …","","","","An analogous to the ScalarStore’s scalar_map, but with …","Serializes this value into a <code>LightData</code>.","","","Serializes this <code>LightData</code> into a <code>Vec&lt;u8&gt;</code>.","Returns the tag byte for this <code>LightData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","","","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Generates an outer Groth16 proof using the given …","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","","","The number of reductions used in the proof.","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","","Type alias for a MultiFrame with S1 field elements.","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Type alias for G1 group elements using the Pallas curve.","Type alias for G2 group elements using the Vesta curve.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for scalar field elements on the Pallas curve.","Type alias for scalar field elements on the Vesta curve.","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","Evaluates and proves the computation given the public …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Evaluates and generates the frames of the computation …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","","","","An Index is the ordinary ptr into the IndexSet …","A Null ptr is used when the hash is F::zero(), such as …","An Opaque ptr is created from a ScalarPtr or ScalarContPtr …","","","A struct representing a scalar pointer with a tag and a …","","","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","The underlying pointer, which can be null, opaque, or an …","","","","","","","","","","","An expression tageturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ScalarStore</code> allows realization of a graph of <code>ScalarPtr</code>s …","","","","","","","","","Add all ScalarPtrs representing and reachable from expr.","Add the <code>ScalarPtr</code> representing <code>expr</code>, and queue it for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Method which finalizes the <code>ScalarStore</code>, ensuring that all …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ScalarStore</code> and add all <code>ScalarPtr</code>s reachable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutable version of car_cdr to handle Str. <code>(cdr str)</code> may …","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of ScalarPtr -&gt; ContPtr for reverse lookups","Holds a mapping of ScalarPtr -&gt; Ptr for reverse lookups","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enumeration type for symbol names, which can either be a …","","Type for hieararchical symbol names","","","","","","","Creates a new Symbol with a child path segment added to …","Creates a new Sym with a child path segment added to the …","","","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","Creates a new Sym with the path extended by the given …","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the full name of the Symbol.","Returns the full name of the Symbol or Keyword symbol.","The full name corresponding to the symbol or keyword’s …","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the Sym is a keyword.","Returns true if the Symbol is marked as opaque.","Returns true if the Symbol is the root Symbol, i.e. if it …","Returns true if the Sym is the root symbol.","Returns true if the Symbol is a top-level Symbol, i.e. if …","Returns true if the Sym is toplevel","Returns the root Keyword Symbol.","The full name corresponding to a Sym, if it is a keyword.","Returns the name of the Symbol.","","Creates a new Symbol with the given name and a path …","Creates a new Sym with the given name.","Creates a new Symbol with an absolute path derived from …","Creates a new absolute Sym with the given name.","Creates a new Sym from a path vector and a boolean flag …","Creates a new Keyword Sym with a name derived from the …","Creates a new opaque Symbol with an empty path.","Creates a new opaque Sym.","Creates a new Sym with a name derived from the given …","","Returns the parent Symbol of the Symbol, if there is one.","Returns the parent of the Sym or Keyword, if there is one.","","","Returns a reference to the path vector of the Symbol.","Returns a reference to the path vector of the Sym.","","","","","","","","Creates a new Symbol with the root path <code>[&quot;&quot;]</code>.","Returns the root Symbol.","","","The simple name corresponding to a Sym, if it is a keyword …","Returns true if the Sym is a symbol.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,2,0,0,0,2,0,2,2,2,2,0,2,2,0,0,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,0,0,2,0,0,0,2,2,2,0,0,2,0,2,0,0,2,2,2,2,2,0,2,2,0,0,0,0,196,196,0,0,36,38,36,38,36,38,36,38,36,38,36,36,38,36,38,36,38,36,38,36,38,36,38,36,36,38,36,38,36,38,36,36,36,38,36,38,36,36,36,36,38,36,38,36,36,36,36,38,36,38,36,38,36,38,36,36,38,36,38,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,46,47,46,47,47,46,47,46,47,46,46,46,46,46,47,46,65,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,46,46,46,46,47,47,46,46,46,47,46,47,46,47,46,47,47,46,46,47,46,47,46,47,47,47,47,46,47,46,46,47,46,47,46,46,46,46,46,46,46,46,46,46,46,47,46,46,46,47,46,46,47,46,47,46,47,46,47,46,47,46,47,67,67,67,67,67,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,197,198,199,200,201,202,203,204,205,206,207,197,198,208,206,201,204,205,206,199,200,201,202,203,205,197,198,200,205,207,197,198,0,0,209,35,35,35,35,209,71,72,0,71,73,0,73,0,71,73,73,71,72,73,71,72,71,72,71,72,73,71,72,73,71,72,73,71,72,73,73,71,71,72,72,73,73,73,73,73,71,71,72,73,71,72,73,71,72,73,71,72,73,71,72,73,71,71,72,73,71,72,73,71,72,73,71,72,73,71,72,73,71,72,78,0,0,0,0,0,78,0,78,0,41,79,33,41,78,82,34,79,33,41,78,82,34,78,33,41,78,34,33,41,78,34,33,78,79,33,41,78,82,34,79,33,41,78,82,34,78,79,33,41,78,82,34,0,33,33,41,78,34,33,33,41,41,78,78,79,0,33,33,33,33,41,78,82,34,79,33,41,78,78,82,34,79,79,78,41,78,79,33,41,78,82,34,79,41,33,79,33,41,78,82,34,82,210,33,41,78,210,33,78,78,210,33,78,79,0,210,33,41,33,79,82,41,82,41,78,78,210,33,79,33,41,78,82,34,78,41,210,33,78,33,33,41,78,34,33,33,79,33,41,78,82,34,79,33,41,78,82,34,79,33,41,78,82,34,79,33,41,78,82,34,41,78,0,0,89,0,0,39,39,89,86,90,89,39,86,90,89,39,90,89,90,89,39,90,89,39,39,39,86,90,89,39,86,90,89,39,90,89,86,90,89,39,90,89,89,90,89,39,86,86,90,89,89,39,89,39,90,89,90,89,86,90,89,39,86,90,89,39,39,39,39,39,86,39,39,90,89,90,89,86,90,89,39,90,89,90,89,89,90,89,39,86,90,89,39,86,90,89,39,86,90,89,39,86,90,89,39,90,89,96,96,96,0,96,96,96,96,96,96,0,96,96,95,95,95,96,96,96,96,96,95,96,95,96,95,96,95,95,96,95,96,95,96,95,96,95,96,96,95,95,96,96,95,96,95,95,95,95,96,95,96,95,96,96,96,96,96,96,96,96,96,96,96,95,96,95,96,95,96,95,96,95,95,96,95,107,1,0,0,0,107,107,97,107,97,107,97,97,97,97,97,97,107,97,107,97,97,107,97,97,97,97,97,107,97,1,1,1,1,1,1,1,1,1,1,97,97,97,1,97,107,97,107,97,1,1,1,97,97,97,107,97,97,97,1,1,1,1,1,1,97,1,1,1,1,1,1,107,97,107,97,107,97,107,97,97,114,115,114,115,114,115,114,115,0,0,0,0,0,114,115,108,116,114,115,108,116,108,108,108,108,108,116,108,116,114,115,108,116,114,115,108,116,114,115,108,116,108,116,114,114,115,108,116,116,116,116,116,114,115,108,116,114,115,108,116,59,114,115,108,116,114,115,108,116,114,115,108,116,114,115,108,116,114,115,108,116,64,62,62,122,62,0,0,0,0,0,0,0,0,122,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,62,62,62,64,64,0,0,64,62,64,62,62,64,64,0,62,62,62,62,122,119,119,122,121,123,62,64,119,122,121,123,62,64,119,121,120,122,120,122,63,119,63,119,121,122,121,123,62,64,119,122,121,123,62,64,119,120,122,121,63,119,123,123,62,64,122,121,123,62,64,119,122,121,123,62,64,119,122,121,123,62,64,119,122,121,123,62,64,119,122,122,121,121,123,123,62,62,64,64,63,119,124,122,66,119,122,121,123,62,64,119,122,121,123,62,64,119,119,62,64,62,64,117,62,64,122,121,123,62,64,119,124,122,66,119,122,121,123,62,64,119,119,119,119,119,122,121,123,62,64,119,119,120,122,63,119,119,119,122,121,123,62,64,119,119,122,121,123,62,64,119,122,121,123,62,64,119,122,121,123,62,64,119,122,121,123,62,64,119,125,125,125,125,0,0,125,125,0,125,125,125,125,125,125,125,0,128,126,125,127,128,126,125,127,125,126,125,127,126,125,127,128,125,128,126,125,127,128,126,125,127,128,126,125,127,126,125,126,126,128,128,126,125,127,126,126,126,128,126,125,127,125,128,126,125,127,126,128,128,126,125,127,128,126,125,127,128,126,125,127,128,126,125,127,128,126,125,127,128,126,125,127,98,98,131,131,0,0,0,0,131,131,131,132,131,98,132,131,98,132,131,98,98,131,98,131,98,211,132,131,98,132,131,98,132,131,98,132,131,98,132,131,98,131,131,98,98,132,131,131,98,98,132,131,98,132,131,98,132,131,98,98,132,131,98,132,211,132,131,98,98,98,98,131,98,131,98,98,132,131,98,132,131,98,132,131,98,132,131,98,0,0,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,0,0,134,0,0,134,134,134,134,134,134,134,134,134,134,134,134,134,0,134,0,134,134,134,134,134,134,134,0,0,0,212,212,212,0,212,212,212,212,212,0,212,213,213,213,212,0,0,0,0,0,0,140,139,138,140,139,138,138,138,138,140,140,139,138,140,139,138,138,140,139,138,140,139,138,138,138,140,139,138,140,139,138,140,140,140,138,138,140,138,138,140,138,140,139,138,138,138,140,139,138,140,139,138,140,139,138,140,140,140,139,138,138,0,0,148,0,0,0,0,0,0,0,0,148,0,0,0,0,150,149,148,150,149,148,149,148,148,150,149,148,150,149,148,149,148,150,149,148,150,150,149,148,150,149,148,149,148,150,149,148,150,149,148,150,150,150,148,0,149,148,149,148,150,150,149,148,149,148,150,149,148,150,149,148,150,149,148,148,150,149,148,149,148,0,152,152,152,0,0,0,0,0,57,56,57,154,57,57,152,57,56,154,152,57,56,154,154,152,57,56,154,152,57,56,154,152,154,154,152,57,56,154,152,57,56,154,154,152,57,56,154,152,57,56,154,152,152,57,57,56,56,154,154,152,57,57,56,56,154,154,152,57,57,56,154,154,152,57,56,154,154,152,57,56,154,154,152,57,56,152,57,56,154,152,57,56,154,154,57,57,56,57,57,57,152,152,57,57,57,152,56,57,56,57,56,152,152,154,57,56,154,154,152,57,56,154,154,154,154,57,56,154,152,57,56,154,154,152,57,56,154,152,57,56,154,152,57,56,154,154,152,57,56,154,154,0,0,0,0,0,0,172,0,158,0,0,162,0,171,0,0,0,0,0,162,162,0,158,0,172,0,0,158,0,0,171,171,162,172,0,0,168,168,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,166,214,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,0,159,173,162,163,164,165,166,167,168,169,170,171,172,157,158,173,162,163,164,165,166,167,168,169,170,171,172,157,158,173,165,166,168,157,0,163,164,163,164,172,162,163,164,171,172,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,163,164,163,164,162,163,164,165,166,167,168,169,170,171,172,157,158,173,162,162,163,163,164,164,165,165,168,168,169,169,171,171,172,172,158,158,0,163,167,159,0,158,159,163,164,167,157,163,164,157,163,164,165,166,167,168,169,170,171,172,157,176,158,173,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,165,172,165,171,165,165,162,214,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,162,214,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,166,168,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,159,158,158,163,164,168,0,159,168,168,158,159,168,159,173,159,165,171,158,159,0,215,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,215,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,159,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,157,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,173,163,164,168,0,162,163,164,165,166,167,168,169,170,171,172,157,158,173,165,162,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,176,173,173,159,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,215,162,163,164,165,166,167,168,169,170,171,172,157,176,159,158,173,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,184,181,184,181,181,181,183,181,181,184,181,184,181,184,181,181,181,184,181,183,183,183,183,181,183,181,184,181,184,181,181,181,183,181,183,184,181,181,183,181,183,181,184,181,0,0,0,184,181,184,181,184,181,184,181,184,181,188,188,188,188,186,186,186,188,188,188,186,188,188,188,188,186,186,188,0,0,0,0,186,186,188,188,186,186,188,185,185,186,187,188,185,186,187,188,185,186,187,188,185,186,187,188,185,186,187,188,185,186,187,188,185,186,185,186,187,188,185,186,187,188,185,186,187,188,185,186,187,188,185,186,187,188,185,185,186,186,187,187,188,188,185,185,186,186,187,188,185,186,187,188,185,185,188,185,186,187,188,188,185,186,187,188,185,186,187,188,185,186,187,188,185,185,186,187,188,185,186,187,188,185,186,187,188,185,186,187,188,185,186,187,188,185,185,186,185,185,186,187,188,185,186,187,188,185,186,187,188,185,186,187,188,185,186,187,188,216,217,218,219,220,221,222,223,224,225,216,217,226,224,219,222,223,224,218,219,220,221,223,216,217,218,223,225,216,217,227,227,227,0,190,0,190,0,0,0,0,0,189,192,192,31,31,190,189,31,75,191,192,190,189,31,75,191,192,31,31,31,31,192,31,31,31,192,192,190,75,191,192,190,75,191,192,192,31,192,31,192,31,31,31,192,189,31,31,31,190,189,31,75,191,192,190,189,31,75,191,192,192,190,189,31,75,191,192,192,192,31,192,192,31,31,31,31,31,31,31,31,31,31,31,31,31,31,190,189,31,75,75,191,192,190,189,31,75,191,192,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,192,192,31,31,31,31,31,31,31,31,192,31,192,31,190,189,31,75,191,192,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,190,189,31,75,191,192,228,228,228,31,192,192,192,192,31,192,31,31,31,31,31,31,192,31,192,31,31,192,31,192,192,31,31,31,31,192,31,31,31,192,75,191,31,192,192,31,31,31,31,31,190,189,31,75,191,192,31,31,31,191,31,31,31,192,31,31,31,31,192,192,31,31,31,192,31,31,190,75,191,192,75,190,189,31,75,191,192,190,189,31,75,191,192,190,189,31,75,191,192,192,31,31,191,190,189,31,75,191,192,88,0,88,0,193,88,193,88,193,88,193,88,193,88,193,88,193,88,193,88,193,88,193,88,193,88,193,88,193,193,88,88,193,88,193,88,193,88,88,88,193,88,88,193,88,193,88,193,88,193,88,193,88,193,88,193,88,193,193,88,193,88,88,88,193,88,193,88,193,88,88,88,193,88,88,193,193,88,193,88,193,88,193,193,88,193,88,193,88,193,88,193,88,88,88,193,88,193,88,193,88,193,88,193,88,193,88,103,104,68,68,68,68,68,103,103,102,103,102,103,103,102,104,0,104,68,68,103,104,68,103,104,0,102,104,104,104,68,102,104,104,68,68,68,104,102,102,103,104,0,0,0,103,68,104,104,103,102,104,104,102,0,68,68,102,102,103,68,229,103,104,229,102,68,103,104,102,68,103,104,102,68,103,104,102,68,103,104,102,103,104,102,68,103,104,102,68,103,104,102,68,103,104,102,68,103,104,102,103,104,102,68,103,104,102,68,103,104,102,102,68,68,103,103,104,104,102,102,68,68,103,103,104,104,102,68,103,104,153,102,68,103,104,102,68,103,104,102,103,104,102,68,103,104,102,103,104,102,68,103,104,102,68,103,104,102,104,102,102,103,104,102,103,104,102,103,104,102,68,103,104,102,103,104,229,103,104,229,103,104,153,102,68,103,104,153,102,68,103,104,102,68,103,104,102,68,103,104,102,102,68,68,103,103,104,104,102,68,103,104,102,68,103,104,102,68,103,104,102,103,104,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,230,230],"f":[0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],[[]],[[],3],0,[[[2,[[0,[4,1]]]]],[[2,[[0,[4,1]]]]]],[[]],0,0,[5],[5],[6,[[7,[[2,[1]]]]]],[[[2,[1]],[2,[1]]]],[5],[[[2,[[0,[8,1]]]],[2,[[0,[8,1]]]]],9],[[],9],[[],9],0,0,0,0,[[[2,[[0,[10,1]]]],11],12],[[[2,[1]],11],12],[13,[[2,[1]]]],[[]],[14,[[2,[1]]]],[1,[[2,[1]]]],[[[0,[15,16]],17],13],[18,9],0,[[[2,[1]],19]],0,[[],18],[[],5],[[]],[[[2,[1]]],1],[[[2,[1]]],9],[[[2,[1]]],9],0,0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,[[[2,[1]],[2,[1]]],[[21,[20]]]],0,0,0,[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,0,[[[2,[1]],29],7],0,[[[2,[1]],[2,[1]]]],0,0,[[]],[[],18],[[],7],[[],7],[[],30],0,[[]],[[[23,[22]]]],0,0,0,0,[[],5],[31,32],0,0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]]],5],[[],[[38,[1,[0,[4,37]],37,[35,[1]]]]]],[[5,[40,[[39,[1,[35,[1]]]]]]],[[36,[1,[0,[4,37,8]],37,[35,[1]]]]]],[[]],[[]],[[]],[[]],[[[38,[[0,[4,1]],4,4,[0,[4,[35,[[0,[4,1]]]]]]]]],[[38,[[0,[4,1]],4,4,[0,[4,[35,[[0,[4,1]]]]]]]]]],[[[36,[[0,[4,1]],[0,[4,37]],4,[0,[4,[35,[[0,[4,1]]]]]]]]],[[36,[[0,[4,1]],[0,[4,37]],4,[0,[4,[35,[[0,[4,1]]]]]]]]]],[[]],[[]],0,[5],[5],[5],[5],[5],[5],[[[38,[[0,[10,1]],10,10,[0,[10,[35,[[0,[10,1]]]]]]]],11],12],0,[[]],[[]],[[[41,[[0,[4,37]],37,[35,[1]]]],[31,[1]]],[[38,[1,[0,[4,37]],37,[35,[1]]]]]],[[5,[42,[[41,[[0,[4,37,8]],37,[35,[1]]]]]],[31,[1]],[40,[[39,[1,[35,[1]]]]]]],[[32,[[36,[1,[0,[4,37,8]],37,[35,[1]]]]]]]],[[[36,[1,[0,[4,37,8]],37,[35,[1]]]]],[[31,[1]]]],[[],5],[[],5],0,0,[[]],[[]],0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[42,[1]]],[[32,[1]]]],0,0,[[[38,[1,[0,[8,10]],[35,[1]]]],[38,[1,[0,[8,10]],[35,[1]]]]],9],[[[36,[1,[0,[8,10,37]],[35,[1]]]],[36,[1,[0,[8,10,37]],[35,[1]]]]],9],[[],5],[[[36,[1,[33,[1]],37,[35,[1]]]]],[[32,[1]]]],[[[36,[1,[33,[1]],37,[35,[1]]]]],5],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[43,[1]]],[[7,[44]]]],[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[43,[1]],[42,[[45,[1]]]]],[[7,[[32,[[45,[1]]]],44]]]],[[[36,[1,[0,[4,37,8]],37,[35,[1]]]],[43,[1]],[31,[1]],[46,[1]],[46,[1]],[47,[1]],[42,[[38,[1,[33,[1]],[34,[1]],[35,[1]]]]]],[48,[1]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[[36,[33,34,[35,[49]]]],[51,[50]],[52,[50]]],[[7,[9,44]]]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],0,0,0,0,[[[48,[[0,[4,1]]]]],[[48,[[0,[4,1]]]]]],[[]],0,0,0,[5],[5],[5],0,0,0,0,0,0,0,[[]],0,0,[[],5],[[]],0,0,0,0,[[[43,[1]],[31,[1]]],[[7,[[48,[1]],44]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[25,26,[27,[3]]],[[7,[28]]]],0,0,0,0,0,[[]],0,[[],7],[[],7],[[],30],0,0,[[]],0,0,0,[[[43,[1]],53],[[7,[[46,[1]],44]]]],[[[43,[1]],53],[[7,[[47,[1]],44]]]],[[[43,[1]],[54,[1]]],[[7,[[46,[1]],44]]]],[[[43,[1]],[55,[1]]],[[7,[[47,[1]],44]]]],[[[43,[1]],[31,[1]],[56,[1]]],[[7,[[47,[1]],44]]]],[[[43,[1]],[31,[1]],[57,[1]]],[[7,[[46,[1]],44]]]],[[[43,[1]],[31,[1]],53],[[7,[[47,[1]],44]]]],[[[46,[1]],[43,[1]],[46,[1]]],[[7,[58,44]]]],[[[47,[1]],[43,[1]],[47,[1]]],[[7,[58,44]]]],[[[43,[1]],[59,[1]]],[[7,[[46,[1]],44]]]],[[[46,[1]],[43,[1]],1],[[7,[58,44]]]],[[[43,[1]],[31,[1]],53],[[7,[[46,[1]],44]]]],[[[43,[1]],1,[45,[1]]],[[7,[[46,[1]],44]]]],[[[46,[1]],[43,[1]],1],[[7,[58,44]]]],[[[47,[1]],[43,[1]],1],[[7,[58,44]]]],[[[46,[1]],[43,[1]],[31,[1]]],[[7,[44]]]],[[],[[60,[45]]]],[[[46,[1]]],[[60,[[45,[1]]]]]],[[[47,[1]]],[[60,[[45,[1]]]]]],[[[43,[1]],[21,[[57,[1]]]],[31,[1]]],[[7,[[46,[1]],44]]]],[[[43,[1]],[21,[[56,[1]]]],[31,[1]]],[[7,[[47,[1]],44]]]],[[]],[[]],[[]],[[]],[[5,[42,[[45,[1]]]]],[[46,[1]]]],[[5,[42,[[45,[1]]]]],[[47,[1]]]],[[[46,[[0,[4,61]]]]],[[46,[[0,[4,61]]]]]],[[[47,[[0,[4,1]]]]],[[47,[[0,[4,1]]]]]],[[]],[[]],[[[43,[1]],[48,[1]],[31,[1]],[45,[1]],[46,[1]]],[[7,[[46,[1]],44]]]],[[[43,[1]],[48,[1]],[31,[1]],[46,[1]],[46,[1]]],[[7,[[46,[1]],44]]]],[[[43,[1]],[48,[1]],[46,[1]],[46,[1]],62,[0,[[63,[1]],62,[0,[1,[46,[1]]]]]],58],[[7,[[46,[1]],44]]]],[[[43,[1]],[48,[1]],[31,[1]],[46,[1]],[46,[1]],[46,[1]]],[[7,[[46,[1]],44]]]],[[[43,[1]],[48,[1]],[31,[1]],[42,[[46,[1]]]]],[[7,[[46,[1]],44]]]],[[[43,[1]],64,[45,[1]],[60,[65]],[0,[[66,[1]],64,[0,[1,[45,[1]]]]]],58],[[7,[[47,[1]],44]]]],[[[43,[1]],64,[45,[1]],[60,[65]],[0,[[66,[1]],64,[0,[1,[45,[1]]]]]]],[[7,[44]]]],[[[43,[1]],[48,[1]],[31,[1]],[46,[1]],[46,[1]]],[[7,[[46,[1]],44]]]],[[[43,[1]],[48,[1]],[31,[1]],[46,[1]],[47,[1]]],[[7,[[46,[1]],44]]]],[5],[5],[5],[5],[5],[5],[[[46,[1]],[43,[1]],[46,[1]]]],[[[47,[1]],[43,[1]],[47,[1]]]],[[[47,[1]],[31,[1]]],18],[[[46,[1]],[31,[1]]],18],[[[46,[1]],11],12],[[[47,[1]],11],12],[[]],[[]],[[[45,[1]],[45,[1]]],[[46,[1]]]],[[[45,[1]],[45,[1]]],[[47,[1]]]],[[[47,[1]],[31,[1]]],[[21,[[67,[1]]]]]],[[[47,[1]],[31,[1]]],[[21,[[56,[1]]]]]],[[[47,[1]],[31,[1]]],[[21,[[55,[1]]]]]],[[[46,[1]]],[[45,[1]]]],[[[47,[1]]],[[45,[1]]]],[[[46,[1]],[43,[1]],58,[46,[1]]],[[7,[44]]]],[[],5],[[],5],[[]],[[]],[[[46,[1]],[43,[1]]],[[7,[58,44]]]],[[[46,[1]],[43,[1]]],[[7,[58,44]]]],[[[46,[1]],[43,[1]]],[[7,[58,44]]]],[[[46,[1]],[43,[1]]],[[7,[58,44]]]],[[[46,[1]],[43,[1]],[48,[1]]],[[7,[58,44]]]],[[[46,[1]],[43,[1]]],[[7,[58,44]]]],[[[46,[1]],[43,[1]]],[[7,[58,44]]]],[[[46,[1]],[43,[1]]],[[7,[58,44]]]],[[[46,[1]],[43,[1]]],[[7,[58,44]]]],[[[46,[1]],[43,[1]]],[[7,[58,44]]]],[[[43,[1]],58,[46,[1]],[46,[1]]],[[7,[[46,[1]],44]]]],[[[43,[1]],58,[47,[1]],[47,[1]]],[[7,[[47,[1]],44]]]],[[[43,[1]],58,[54,[1]],[54,[1]]],[[7,[[46,[1]],44]]]],[[[46,[1]],[31,[1]]],[[21,[[57,[1]]]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[46,[1]],[31,[1]]],[[21,[[54,[1]]]]]],[[[46,[1]]],[[45,[1]]]],[[[47,[1]]],[[45,[1]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[67,[[0,[4,1]]]]],[[67,[[0,[4,1]]]]]],[[]],[[[67,[1]]],68],[5],[5],[5],[[[67,[[0,[8,1]]]],[67,[[0,[8,1]]]]],9],[[],9],[[],9],[[[67,[[0,[10,1]]]],11],12],[[[67,[1]],[31,[1]],69],70],[[]],[[[0,[15,16]],17],13],[[[67,[1]]],[[56,[1]]]],[[[67,[[0,[15,1]]]],19]],[[],5],[[[67,[1]],[31,[1]]]],[[]],[[25,26,[27,[3]]],[[7,[28]]]],[[]],[[],7],[[],7],[[],30],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],5],[[],5],[[31,57,57,56],33],[[],9],[[31,[42,[57]]],57],[[43,48,31,[42,[46]],46,47],[[7,[44]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[71,71],[[[72,[[0,[4,1]]]]],[[72,[[0,[4,1]]]]]],[[]],[[]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[73,11],12],[[73,11],12],[[71,11],12],[[71,11],12],[[[72,[1]],11],12],[[[72,[[0,[10,1]]]],11],12],[71,73],[44,73],[[]],[74,73],[75,73],[[]],[75,71],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[76],[76],[76],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[73,[[21,[77]]]],[71,[[21,[77]]]],[[]],[[]],[[],18],[[],18],[[],18],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[[33,[[0,[4,1]]]]],[[33,[[0,[4,1]]]]]],[[[41,[[0,[4,37]],[0,[4,37]],4]]],[[41,[[0,[4,37]],[0,[4,37]],4]]]],[78,78],[[[34,[[0,[4,1]]]]],[[34,[[0,[4,1]]]]]],[[]],[[]],[[]],[[]],0,[[],78],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[78]]]],[5],[5],[5],[5],[5],[5],[[[31,[1]]],[[57,[1]]]],0,[[[33,[[0,[8,1]]]],[33,[[0,[8,1]]]]],9],[[[41,[[0,[8,37]],[0,[8,37]],8]],[41,[[0,[8,37]],[0,[8,37]],8]]],9],[[78,78],9],[[[34,[[0,[8,1]]]],[34,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[79,[1,[35,[1]]]]],[[7,[71]]]],[[[31,[1]],80],[[7,[[57,[1]],71]]]],0,[[[33,[1]],11],[[7,[81]]]],[[[33,[1]],[31,[1]],69],70],[[[33,[[0,[10,1]]]],11],12],[[[41,[[0,[10,37]],[0,[10,37]],10]],11],12],[[78,11],12],[[[82,[[0,[10,37]],[0,[10,1]],[0,[10,[35,[[0,[10,1]]]]]]]],11],12],[[[34,[[0,[10,1]]]],11],12],[[]],[[]],[[]],[[[56,[1]]],78],[[]],[[]],[[]],[[[57,[1]],[57,[1]],[31,[1]],5,83,[39,[1,[35,[1]]]]],[[7,[[32,[[41,[[33,[1]],[34,[1]],[35,[1]]]]]],71]]]],[[[79,[1,[35,[1]]]]],[[7,[[32,[[41,[[33,[1]],[34,[1]],[35,[1]]]]]],71]]]],[18,9],0,[[],18],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[79,[1,[35,[1]]]]],[[33,[1]]]],0,[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[[33,[1]]],9],[[[41,[[33,[1]],37,[35,[1]]]]],9],[78,9],[[],9],[[[33,[1]]],9],[78,9],[78,9],[[],9],[[[33,[1]]],9],[78,9],[[[79,[1,[35,[1]]]]],[[7,[[84,[[82,[[34,[1]],1,[35,[1]]]]]],71]]]],0,[[31,5]],[[[33,[1]],[31,[1]],5]],[[[41,[[33,[1]],37,[35,[1]]]],[31,[1]]]],[[[33,[1]],[31,[1]]],[[21,[[57,[1]]]]]],[[[57,[1]],[57,[1]],[31,[1]],5,[39,[1,[35,[1]]]]],[[79,[1,[35,[1]]]]]],[[[82,[[34,[1]],1,[35,[1]]]]],21],0,[[],85],[[[41,[[33,[1]],37,[35,[1]]]],[41,[[33,[1]],37,[35,[1]]]]],9],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[16,31,39],[[7,[71]]]],[[[33,[1]],[31,[1]],[39,[1,[35,[1]]]]],[[7,[71]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[78,29],7],[[[42,[[41,[[33,[1]],37,[35,[1]]]]]]],5],[[],78],[[[33,[1]]],78],[[78,[31,[1]]],[[21,[[56,[1]]]]]],[[[33,[1]],[31,[1]]],[[32,[1]]]],[[]],[[]],[[]],[[]],[[],18],[[[33,[1]],[31,[1]]],[[7,[[32,[1]],75]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[23,[22]]]],0,0,0,0,0,[[[39,[1,[35,[1]]]],[87,[[86,[1,[35,[1]]]]]],[31,[1]]]],[[[39,[1,[35,[1]]]],[87,[88]],[87,[[35,[1]]]],[31,[1]]]],[[[89,[1]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[[90,[[0,[4,1]]]]],[[90,[[0,[4,1]]]]]],[[[89,[[0,[4,1]]]]],[[89,[[0,[4,1]]]]]],[[[39,[[0,[4,1]],[0,[4,[35,[[0,[4,1]]]]]]]]],[[39,[[0,[4,1]],[0,[4,[35,[[0,[4,1]]]]]]]]]],[[]],[[]],[[]],[[[39,[1,[35,[1]]]]],[[91,[88]]]],[[],[[39,[[0,[92,1]],[0,[92,[35,[[0,[92,1]]]]]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[[90,[1]]]]]],[6,[[7,[[89,[[0,[93,1]]]]]]]],[5],[5],[5],[5],[[[90,[1]]],5],[[[89,[1]]],5],[[[89,[1]],[31,[1]],[57,[1]],[57,[1]],[56,[1]]],[[33,[1]]]],[[[90,[[0,[10,1]]]],11],12],[[[89,[[0,[10,1]]]],11],12],[[[39,[[0,[10,1]],[0,[10,[35,[[0,[10,1]]]]]]]],11],12],[[]],[[],[[86,[1,[35,[1]]]]]],[[]],[[]],[[[90,[1]]],[[89,[1]]]],[[]],[[[89,[1]]],9],[[[39,[1,[35,[1]]]]],9],[18,9],[18,9],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[[39,[1,[35,[1]]]]],9],[[[39,[1,[35,[1]]]]],18],[[[39,[1,[35,[1]]]],[31,[1]],[57,[1]]],21],[[[39,[1,[35,[1]]]]],5],[[[87,[88]],[87,[[35,[1]]]]],[[86,[1,[35,[1]]]]]],[[],[[39,[1,[35,[1]]]]]],[[[31,[1]],[32,[[87,[[86,[1,[35,[1]]]]]]]]],[[39,[1,[35,[1]]]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[90,[1]],29],7],[[[89,[[0,[94,1]]]],29],7],[[[90,[1]],[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],[[[89,[1]],[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],[[[89,[1]],[43,[1]],[48,[1]],[31,[1]],[42,[[46,[1]]]],[46,[1]],[47,[1]]],[[7,[44]]]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[95,[1]],[43,[1]],[31,[1]]],[[7,[44]]]],[[[43,[1]],[31,[1]]],[[7,[44]]]],[[[43,[1]],[21,[[95,[1]]]],[31,[1]]],[[7,[44]]]],[[[96,[1]]],[[21,[18]]]],[[[96,[1]]],[[21,[80]]]],[[[96,[1]]],[[21,[88]]]],[[[96,[1]]],[[21,[18]]]],[[]],[[]],[[]],[[]],[[[96,[[0,[4,1]]]]],[[96,[[0,[4,1]]]]]],[[[95,[[0,[4,1]]]]],[[95,[[0,[4,1]]]]]],[[]],[[]],0,[5],[5],[5],[5],[5],[5],[[[96,[[0,[8,1]]]],[96,[[0,[8,1]]]]],9],[[[95,[[0,[8,1]]]],[95,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[[96,[1]],[31,[1]],69],70],[[[96,[[0,[10,1]]]],11],12],[[[95,[[0,[10,1]]]],11],12],[[]],[[]],[[[0,[15,16]],17],13],[[[95,[1]],19]],[[[43,[1]],[31,[1]],[46,[1]],[47,[1]]],[[7,[[45,[1]],44]]]],[[],5],[[],5],[[]],[[]],[[[96,[1]]],9],[[[96,[1]]],9],[[[96,[1]]],9],[[[96,[1]]],9],[[[96,[1]]],9],[[[96,[1]]],9],[[[96,[1]]],9],[[[96,[1]]],9],[[[96,[1]]],9],[[[96,[1]]],9],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],3],[[[97,[[0,[4,1]]]]],[[97,[[0,[4,1]]]]]],[[]],[[[97,[1]],[97,[1]]],20],[98,[[99,[[97,[1]]]]]],[5],[5],[5],[5],[6,[[7,[[97,[1]]]]]],[5],[5],[[[97,[[0,[8,1]]]],[97,[[0,[8,1]]]]],9],[[],9],[[],9],[[[97,[[0,[10,1]]]],11],12],[[]],[[]],[[[42,[100]]],21],[101],[68],[102],[103],[104],[105],[106],[13],[[],107],[[[0,[15,16]],17],13],[18,9],[[[97,[1]],19]],[[],18],[[],18],[[],5],[[],5],[[]],[[]],[[],9],[[]],[[]],[[[97,[1]],[97,[1]]],[[21,[20]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[97,[1]]],98],[[[97,[1]],29],7],[[],[[32,[100]]]],[[],[[21,[101]]]],[[],[[21,[68]]]],[[],[[21,[102]]]],[[],[[21,[103]]]],[[],[[21,[104]]]],[[]],[[],[[21,[105]]]],[[],[[21,[106]]]],[[],106],[[],[[21,[13]]]],[[],13],[[],18],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[108,[1]]],[[110,[1,109]]]],[[[108,[1]]],[[110,[1,111]]]],[[[108,[1]]],[[110,[1,112]]]],[[[108,[1]]],[[110,[1,113]]]],[[[108,[1]],114],[[115,[1]]]],0,[[],[[108,[1]]]],[[],[[116,[[0,[92,1]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[[108,[[0,[10,1]]]],11],12],[[[116,[[0,[10,1]]]],11],12],[[]],[5,114],[[]],[[]],[[]],[[[116,[1]],[60,[1]]],1],[[[116,[1]],[60,[1]]],1],[[[116,[1]],[60,[1]]],1],[[[116,[1]],[60,[1]]],1],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[],60],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[119,[[0,[117,92,37,118,10]],37,1]]],[[32,[[0,[117,92,37,118,10]]]]]],[[[119,[[0,[117,92,37,118,10]],37,1]],[31,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[120,[1]],[31,[1]],[57,[1]]],[[7,[75]]]],[[[122,[[121,[1]]]],[31,[1]],[57,[1]]],[[7,[75]]]],[[[120,[1]],[31,[1]],[57,[1]]],[[7,[75]]]],[[[122,[[121,[1]]]],[31,[1]],[57,[1]]],[[7,[75]]]],[[[63,[1]],62,[31,[1]],[57,[1]]],[[7,[75]]]],[[[119,[62,[121,[1]],1]],62,[31,[1]],[57,[1]]],[[7,[75]]]],[[[63,[1]],62,[31,[1]],[57,[1]]],[[7,[71]]]],[[[119,[62,[121,[1]],1]],62,[31,[1]],[57,[1]]],[[7,[71]]]],0,[[[122,[4]]],[[122,[4]]]],[[[121,[[0,[4,1]]]]],[[121,[[0,[4,1]]]]]],[[[123,[[0,[4,1]]]]],[[123,[[0,[4,1]]]]]],[62,62],[64,64],[[[119,[[0,[4,117]],4,[0,[4,1]]]]],[[119,[[0,[4,117]],4,[0,[4,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[120,[1]],[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[122,[[121,[1]]]],[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,[[[63,[1]],62,[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[119,[62,[121,[1]],1]],62,[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,0,[[],62],[[],64],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[[122,[8]],[122,[8]]],9],[[[121,[[0,[8,1]]]],[121,[[0,[8,1]]]]],9],[[[123,[[0,[8,1]]]],[123,[[0,[8,1]]]]],9],[[62,62],9],[[64,64],9],[[[119,[[0,[8,117]],8,[0,[8,1]]]],[119,[[0,[8,117]],8,[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[63,[1]],62,[57,[1]],[57,[1]],[57,[1]],[31,[1]]],[[57,[1]]]],[[[119,[62,[121,[1]],1]],62,[57,[1]],[57,[1]],[57,[1]],[31,[1]]],[[57,[1]]]],[[[124,[1]],[31,[1]],[56,[1]]],[[21,[[67,[1]]]]]],[[[122,[[123,[1]]]],[31,[1]],[56,[1]]],[[21,[[67,[1]]]]]],[[[66,[1]],64,[31,[1]],[56,[1]]],[[21,[[67,[1]]]]]],[[[119,[64,[123,[1]],1]],64,[31,[1]],[56,[1]]],[[21,[[67,[1]]]]]],[[[122,[10]],11],12],[[[121,[[0,[10,1]]]],11],12],[[[123,[[0,[10,1]]]],11],12],[[62,11],12],[[64,11],12],[[[119,[[0,[10,117]],10,[0,[10,1]]]],11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[[119,[[0,[117,92,37,118,10]],37,1]],[0,[117,92,37,118,10]]],[[122,[37]]]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[62,19]],[[64,19]],[[],5],[62,5],[64,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[124,[1]],[31,[1]],[67,[1]]],[[56,[1]]]],[[[122,[[123,[1]]]],[31,[1]],[67,[1]]],[[56,[1]]]],[[[66,[1]],64,[31,[1]],[67,[1]]],[[56,[1]]]],[[[119,[64,[123,[1]],1]],64,[31,[1]],[67,[1]]],[[56,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],[[119,[[0,[117,92,37,118,10]],37,1]]]],[[],[[119,[[0,[117,92,37,118,10]],37,1]]]],[[[122,[37]]],[[119,[[0,[117,92,37,118,10]],37,1]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,[[[120,[1]],[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[122,[[121,[1]]]],[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[63,[1]],62,[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[119,[62,[121,[1]],1]],62,[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[119,[[0,[117,92,37,118,10]],37,1]]],[[32,[[122,[37]]]]]],[[[119,[[0,[117,92,37,118,10]],37,1]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[[119,[[0,[117,92,37,118,10]],37,1]]],5],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[125,99],[126,126],[125,125],[[[127,[[0,[4,1]]]]],[[127,[[0,[4,1]]]]]],[[]],[[]],[[]],[[128,[43,[1]],[0,[1]],[127,[1]]],99],[[125,18,[130,[18,18,129]]],[[99,[125]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[126,126],9],[[125,125],9],[[],9],[[],9],[[128,[0,[1]],[0,[1]]],[[99,[[32,[[127,[1]]]]]]]],[[]],[[]],[[]],[[]],[[[0,[15,16]],17],13],[[126,[91,[18,[0,[1]]]]],[[99,[[0,[1]]]]]],[[126,19]],[[],5],[[],5],[[],5],[[],5],[[125,[0,[1]]]],[[]],[[]],[[]],[[]],[126,18],[[[60,[80]],125],[[99,[128]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[128,[60,[[0,[1]]]],[0,[1]]],[[99,[[127,[1]]]]]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,100],[[[131,[[0,[4,1]]]]],[[131,[[0,[4,1]]]]]],[98,98],[[]],[[]],[98,[[99,[16]]]],[98,[[99,[[132,[1]]]]]],[98,[[99,[[131,[1]]]]]],[[[42,[100]]],[[99,[98]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[[132,[[0,[8,1]]]],[132,[[0,[8,1]]]]],9],[[[131,[[0,[8,1]]]],[131,[[0,[8,1]]]]],9],[[98,98],9],[[],9],[[],9],[[],9],[[],9],[[[132,[[0,[10,1]]]],11],12],[[[131,[[0,[10,1]]]],11],12],[[[131,[1]],11],12],[[98,11],12],[[98,11],12],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[42,[100]]],[[21,[5]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,[[],98],[[[132,[1]]],98],[[[131,[1]]],98],[98,[[32,[100]]]],[98,100],[100,9],[100,9],[[]],[[]],[[],18],[[],18],[5,[[32,[100]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[]],[[]],[[]],0,0,[[133,[23,[80]]]],[[133,[42,[80]]]],[[]],[[]],[133,133],[[]],[[],133],[5],[5],[5],0,[[133,11],12],[[]],[[],5],[[]],[[133,88],[[21,[88]]]],[[],133],[133,88],0,[88,133],[[25,26,[27,[3]]],[[7,[28]]]],[[133,88],88],[[133,88]],[[133,[42,[88]]]],[[],133],[[]],[[],7],[[],7],[[],30],[[]],0,0,0,0,0,0,[[]],[[]],[134,134],[[]],[5],[5],[5],[[134,11],12],[[134,11],12],[[]],[[],5],[[]],[80],[76],[[[85,[135]]],[[7,[134]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[]],[[],18],[[],7],[[],7],[[],30],[[]],0,0,0,0,[5,5],[5,5],0,[[],39],[5,5],[5,9],[5,9],[[5,39]],0,[[[42,[[36,[33,34]]]]],[[7,[32,44]]]],[[],5],[[],32],[[],5],[[],5],[32,[[7,[9,44]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[[138,[[0,[4,136,137]]]]],[[138,[[0,[4,136,137]]]]]],[[]],[[5,[40,[[39,[49,[35,[49]]]]]]],[[7,[[139,[50]],44]]]],[5],[5],[5],[5],[5],[5],[6,[[7,[[138,[[0,[136,137]]]]]]]],[5],[5],[5],[[]],[[]],[[]],[18,9],[[],18],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[140,[50,[35,[49]],49]]],[[39,[49,[35,[49]]]]]],[[5,[39,[49,[35,[49]]]]],[[140,[50,[35,[49]],49]]]],[[[140,[50,[35,[49]],49]],[141,[50]],[142,[50]],[57,[49]],[57,[49]],[31,[49]],5,[0,[143,4]],[40,[[39,[49,[35,[49]]]]]]],[[7,[73]]]],0,0,[[[140,[50,[35,[49]],49]],[36,[49,[33,[49]],[34,[49]],[35,[49]]]],[141,[50]],143],[[7,[[52,[50]],44]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[[140,[50,[35,[49]],49]]],5],0,[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[138,[[0,[136,137]]]],29],7],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[[51,[50]],[144,[50]],[42,[49]],[42,[49]],[145,[50]],[0,[143,146]]],[[7,[9,44]]]],[[[36,[49,[33,[49]],[34,[49]],[35,[49]]]],[51,[50]],[52,[50]]],[[7,[9,44]]]],[[]],[[]],[[]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[[148,[[35,[147]]]],[149,[[35,[147]]]]],[[7,[[148,[[35,[147]]]],73]]]],[5],[5],[5],[5],[5],[5],[6,[[7,[[149,[[0,[93,[35,[147]]]]]]]]]],[6,[[7,[[148,[[0,[93,[35,[147]]]]]]]]]],[5],[5],[5],[[[150,[147,[35,[147]]]],[149,[[35,[147]]]],[57,[147]],[57,[147]],[31,[147]],5,[40,[[39,[147,[35,[147]]]]]]],[[7,[73]]]],[[]],[[]],[[]],[[[150,[147,[35,[147]]]],[57,[147]],[57,[147]],[31,[147]],5,[39,[147,[35,[147]]]]],[[7,[[32,[[41,[[33,[147]],[34,[147]],[35,[147]]]]]],73]]]],[18,9],[18,9],[[],18],[[],18],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[150,[147,[35,[147]]]]],[[39,[147,[35,[147]]]]]],[[5,[39,[147,[35,[147]]]]],[[150,[147,[35,[147]]]]]],[[[150,[147,[35,[147]]]],[149,[[35,[147]]]],[32,[[41,[[33,[147]],[34,[147]],[35,[147]]]]]],[31,[147]],[40,[[39,[147,[35,[147]]]]]]],[[7,[73]]]],[[[149,[[35,[147]]]],[31,[147]],[42,[[151,[[35,[147]]]]]],5,[32,[147]],[40,[[39,[147,[35,[147]]]]]]],[[7,[[148,[[35,[147]]]],73]]]],[[5,[40,[[39,[147,[35,[147]]]]]]],[[149,[[35,[147]]]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[[150,[147,[35,[147]]]]],5],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[149,[[0,[94,[35,[147]]]]]],29],7],[[[148,[[0,[94,[35,[147]]]]]],29],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[[148,[[35,[147]]]],[149,[[35,[147]]]],5,[32,[147]],[42,[147]]],[[7,[9,74]]]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,[[[43,[1]],[31,[1]],[21,[[57,[1]]]]],[[7,[44]]]],[[]],[[[57,[1]]],[[21,[[57,[1]]]]]],[[[57,[1]]],[[21,[[57,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[152,152],[[[57,[[0,[4,1]]]]],[[57,[[0,[4,1]]]]]],[[[56,[[0,[4,1]]]]],[[56,[[0,[4,1]]]]]],[[[154,[[0,[4,153]],[0,[4,1]]]]],[[154,[[0,[4,153]],[0,[4,1]]]]]],[[]],[[]],[[]],[[]],[[152,152],20],[[[154,[153,1]],[154,[153,1]]],20],[98,[[99,[[154,[153,1]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[[154,[153,1]]]]]],[5],[5],[5],[5],[[152,152],9],[[[57,[[0,[8,1]]]],[57,[[0,[8,1]]]]],9],[[[56,[[0,[8,1]]]],[56,[[0,[8,1]]]]],9],[[[154,[[0,[8,153]],[0,[8,1]]]],[154,[[0,[8,153]],[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[152,11],12],[[[57,[1]],[31,[1]],69],70],[[[57,[[0,[10,1]]]],11],12],[[[56,[1]],[31,[1]],69],70],[[[56,[[0,[10,1]]]],11],12],[[[154,[[0,[153,155]],1]],11],12],[[[154,[[0,[10,153]],[0,[10,1]]]],11],12],[[]],[101,[[57,[1]]]],[[]],[[]],[[]],[[153,1],[[154,[153,1]]]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[18,9],[[152,19]],[[[57,[1]],19]],[[[56,[1]],19]],[[[154,[153,1]],19]],[[],18],[152,[[21,[5]]]],[[102,5],[[57,[1]]]],[[68,5],[[56,[1]]]],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[[154,[153,1]]],[[60,[1]]]],[[[57,[1]]],9],[[[57,[1]]],9],[[[56,[1]]],9],[[[57,[1]]],9],[[[57,[1]]],9],[[[57,[1]]],9],[152,9],[152,9],[[[57,[1]]],9],[[[57,[1]],102],9],[[[57,[1]]],9],[5,152],[[68,152],[[56,[1]]]],[102,[[57,[1]]]],[68,[[56,[1]]]],[[102,5],[[57,[1]]]],[[68,5],[[56,[1]]]],[152,[[21,[5]]]],[[152,152],[[21,[20]]]],[[[154,[153,1]],[154,[153,1]]],[[21,[20]]]],0,0,[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[154,[153,1]]],98],[[[154,[153,1]],29],7],[[[154,[153,1]]],153],0,0,[[[154,[153,1]]],1],[[]],[[]],[[]],[[]],[[],18],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[[154,[153,1]]],1],[[]],[[]],[[]],[[]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[31,[156]],[57,[156]],[157,[156]],5,9,[39,[156,[89,[156]]]]],[[7,[[158,[156]],24]]]],[[[31,[156]],[57,[156]],[157,[156]],5,9,9,[150,[156,[89,[156]]]],[149,[[89,[156]]]],[40,[[39,[156,[89,[156]]]]]]],[[7,[[159,[156]],24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],160],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[80,[[7,[160,161]]]],0,0,[162,162],[163,163],[164,164],[[[165,[[0,[4,1]]]]],[[165,[[0,[4,1]]]]]],[[[166,[[0,[4,1]]]]],[[166,[[0,[4,1]]]]]],[167,167],[[[168,[[0,[4,1]]]]],[[168,[[0,[4,1]]]]]],[169,169],[170,170],[171,171],[172,172],[[[157,[[0,[4,1,94]]]]],[[157,[[0,[4,1,94]]]]]],[[[158,[[0,[4,1]]]]],[[158,[[0,[4,1]]]]]],[173,173],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],174],0,0,0,0,[[172,[31,[[0,[1,94,175]]]]],[[56,[[0,[1,94,175]]]]]],[162,5],[[],163],[[],164],[[],171],[[],172],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[162]]]],[6,[[7,[163]]]],[6,[[7,[164]]]],[6,[[7,[[165,[1]]]]]],[6,[[7,[[166,[[0,[93,1]]]]]]]],[6,[[7,[167]]]],[6,[[7,[[168,[[0,[93,1]]]]]]]],[6,[[7,[169]]]],[6,[[7,[170]]]],[6,[[7,[171]]]],[6,[[7,[172]]]],[6,[[7,[[157,[[0,[93,1,94]]]]]]]],[6,[[7,[176]]]],[6,[[7,[[159,[[0,[93,1]]]]]]]],[6,[[7,[[158,[[0,[93,1]]]]]]]],[6,[[7,[173]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,0,0,[[162,162],9],[[163,163],9],[[164,164],9],[[[165,[[0,[8,1]]]],[165,[[0,[8,1]]]]],9],[[[166,[[0,[8,1]]]],[166,[[0,[8,1]]]]],9],[[167,167],9],[[[168,[[0,[8,1]]]],[168,[[0,[8,1]]]]],9],[[169,169],9],[[170,170],9],[[171,171],9],[[172,172],9],[[[157,[[0,[8,1,94]]]],[157,[[0,[8,1,94]]]]],9],[[[158,[[0,[8,1]]]],[158,[[0,[8,1]]]]],9],[[173,173],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[[31,[[0,[1,94]]]],[57,[[0,[1,94]]]],5],[[7,[163,24]]]],[[167,[31,[[0,[1,94,175]]]],5,[39,[[0,[1,94,175]],[89,[[0,[1,94,175]]]]]]],[[7,[[57,[[0,[1,94,175]]]],24]]]],[[[31,[156]],[57,[156]],[21,[[57,[156]]]],5,9,[150,[156,[89,[156]]]],[149,[[89,[156]]]],[40,[[39,[156,[89,[156]]]]]]],[[7,[[159,[156]],24]]]],[[[31,[1]],[57,[1]],[21,[[57,[1]]]],5,[39,[1,[89,[1]]]]],[[7,[24]]]],[[[158,[1]]],[[21,[163]]]],[[[159,[156]],[31,[156]]],[[7,[24]]]],0,0,0,0,0,0,[[[157,[[0,[1,94,175]]]],[31,[[0,[1,94,175]]]],5,[39,[[0,[1,94,175]],[89,[[0,[1,94,175]]]]]]],[[7,[[57,[[0,[1,94,175]]]],24]]]],[[163,11],12],[[164,11],12],[[[165,[[0,[10,1]]]],11],12],[[[166,[[0,[10,1]]]],11],12],[[167,11],12],[[[168,[[0,[10,1]]]],11],12],[[169,11],12],[[170,11],12],[[171,11],12],[[172,11],12],[[[157,[[0,[10,1,94]]]],11],12],[[176,11],12],[[[158,[[0,[10,1]]]],11],12],[[173,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[31,[[0,[1,94,175]]]],[57,[[0,[1,94,175]]]]],[[165,[[0,[1,94,175]]]]]],[[[31,[[0,[1,94]]]],[56,[[0,[1,94]]]]],172],[[[23,[[42,[100]]]]],[[7,[[165,[1]]]]]],[[[31,[[0,[1,94]]]],[57,[[0,[1,94]]]]],171],[[[31,[[0,[1,94,175]]]],[57,[[0,[1,94,175]]]],[0,[1,94,175]]],[[165,[[0,[1,94,175]]]]]],[[[31,[[0,[1,94,175]]]],[57,[[0,[1,94,175]]]]]],[[[0,[15,16]],17],13],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[[162,19]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[159,[156]],[31,[156]],[39,[156,[89,[156]]]]],[[7,[24]]]],[[[158,[1]]],9],[[[158,[1]]],9],0,0,0,[5,177],0,[[[31,[156]],[166,[156]],5,9,[39,[156,[89,[156]]]]],[[7,[[158,[156]],24]]]],[[[31,[156]],[166,[156]],5,9,[150,[156,[89,[156]]]],[149,[[89,[156]]]],[40,[[39,[156,[89,[156]]]]]]],[[7,[[159,[156]],24]]]],[[[158,[1]]],[[21,[[168,[1]]]]]],[[[159,[156]],[31,[156]]],[[7,[24]]]],0,0,0,[[[31,[156]],[158,[156]],5,9,[150,[156,[89,[156]]]],[149,[[89,[156]]]],[40,[[39,[156,[89,[156]]]]]]],[[7,[[159,[156]],24]]]],[[[165,[[0,[1,94,175]]]],[31,[[0,[1,94,175]]]]],[[57,[[0,[1,94,175]]]]]],[[171,[31,[[0,[1,94,175]]]],5,[39,[[0,[1,94,175]],[89,[[0,[1,94,175]]]]]]],[[57,[[0,[1,94,175]]]]]],[[[158,[1]]],[[21,[164]]]],[[[159,[156]],[31,[156]],[39,[156,[89,[156]]]]],[[7,[24]]]],[[5,[40,[[39,[156,[0,[[35,[156]],94,175]]]]]]],[[7,[[40,[[149,[[0,[[35,[156]],94,175]]]]]],24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],0,[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,[[162,29],7],[[163,29],7],[[164,29],7],[[[165,[1]],29],7],[[[166,[[0,[94,1]]]],29],7],[[167,29],7],[[[168,[[0,[94,1]]]],29],7],[[169,29],7],[[170,29],7],[[171,29],7],[[172,29],7],[[[157,[[0,[94,1,94]]]],29],7],[[176,29],7],[[[159,[[0,[94,1]]]],29],7],[[[158,[[0,[94,1]]]],29],7],[[173,29],7],0,0,0,0,[6,[[7,[160]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[165,[1]]],18],[5,[[7,[162]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,0,0,[[[159,[156]],[149,[[89,[156]]]],[39,[156,[89,[156]]]]],[[7,[176,24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[5],[[24,11],12],[[24,11],12],[178,24],[75,24],[179,24],[[]],[180,24],[44,24],[[],5],[[]],[76],[[25,26,[27,[3]]],[[7,[28]]]],[24,[[21,[77]]]],[[],18],[[],7],[[],7],[[],30],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[181,[[0,[4,1]],[0,[4,[35,[[0,[4,1]]]]]]]]],[[181,[[0,[4,1]],[0,[4,[35,[[0,[4,1]]]]]]]]]],[[]],[[],182],[[],182],0,[5],[5],[5],[5],[5],[5],0,[[[181,[1,[35,[1]]]],[57,[1]],[31,[1]]],99],[[]],[[]],[[31,[0,[[23,[22]],37]],133],99],[[31,[85,[135]],133,[0,[[23,[22]],37]]],99],[[31,[23,[22]],133],99],[[31,57,133,[0,[[23,[22]],37]]],99],[[[181,[1,[35,[1]]]],[31,[1]],[57,[1]],133,[0,[[23,[22]],37]]],99],[[31,57],99],[[[181,[1,[35,[1]]]],[31,[1]],[57,[1]]],99],[[],5],[[],5],[[]],[[]],0,0,[[],18],[[],18],[[31,5,[21,[182]],39]],[[[31,[1]],5,[21,[182]],[39,[1,[35,[1]]]]],[[99,[[184,[1,[183,[1,[35,[1]]]],[35,[1]]]]]]]],[[[31,[1]],5,[21,[182]],[39,[1,[35,[1]]]]],[[181,[1,[35,[1]]]]]],[[[31,[1]],5,[21,[182]],[39,[1,[35,[1]]]]],[[181,[1,[35,[1]]]]]],[18,18],[[[181,[1,[35,[1]]]],18],18],[[],18],[[[181,[1,[35,[1]]]]],18],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[21,[[23,[22]]]],[39,[1,[35,[1]]]]],99],[[[39,[1,[35,[1]]]]],99],[[[31,[1]],[184,[1,[183,[1,[35,[1]]]],[35,[1]]]],[21,[[23,[22]]]]],99],[[[184,[1,[183,[1,[35,[1]]]],[35,[1]]]]],99],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[185,[1]],[31,[1]],[57,[1]]],[[21,[[54,[1]]]]]],[[[185,[1]],[31,[1]],[57,[1]]],[[21,[[54,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[[185,[[0,[4,1]]]]],[[185,[[0,[4,1]]]]]],[[[186,[[0,[4,1]]]]],[[186,[[0,[4,1]]]]]],[[[187,[[0,[4,1]]]]],[[187,[[0,[4,1]]]]]],[[[188,[[0,[4,1]]]]],[[188,[[0,[4,1]]]]]],[[]],[[]],[[]],[[]],[[],[[185,[[0,[92,1]]]]]],[[],[[186,[1]]]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[[185,[[0,[93,92,1]]]]]]]],[6,[[7,[[186,[[0,[93,1]]]]]]]],[6,[[7,[[187,[[0,[93,1]]]]]]]],[6,[[7,[[188,[[0,[93,1]]]]]]]],[5],[5],[5],[5],[[[185,[[0,[8,1]]]],[185,[[0,[8,1]]]]],9],[[[186,[[0,[8,1]]]],[186,[[0,[8,1]]]]],9],[[[187,[[0,[8,1]]]],[187,[[0,[8,1]]]]],9],[[[188,[[0,[8,1]]]],[188,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[185,[1]],[31,[1]]]],[[[185,[[0,[10,1]]]],11],12],[[[186,[[0,[10,1]]]],11],12],[[[186,[1]],11],12],[[[187,[[0,[10,1]]]],11],12],[[[188,[[0,[10,1]]]],11],12],[[]],[[]],[[]],[[]],[[[185,[1]],[55,[1]]],[[21,[[188,[1]]]]]],[[[185,[1]],[54,[1]]],[[21,[[186,[1]]]]]],[[[0,[15,16]],17],13],[18,9],[18,9],[18,9],[18,9],[[[188,[[0,[15,1]]]],19]],[[],18],[[],18],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[[31,[1]],[57,[1]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[185,[[0,[94,1]]]],29],7],[[[186,[[0,[94,1]]]],29],7],[[[187,[[0,[94,1]]]],29],7],[[[188,[[0,[94,1]]]],29],7],[[]],[[]],[[]],[[]],[[[185,[1]]],[[21,[[31,[1]]]]]],[[[185,[1]],[54,[1]]],21],[[],18],[[],7],[[[132,[1]]],[[7,[[185,[1]]]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[189,[[32,[80]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[31,[1]],[57,[1]]],[[7,[[57,[1]],75]]]],0,[[[31,[1]],[57,[1]]],[[7,[75]]]],[[[31,[1]],[57,[1]]],[[7,[75]]]],[[[31,[1]],[57,[1]]],[[7,[[57,[1]],75]]]],0,0,[190,190],[75,75],[[[191,[[0,[4,1]]]]],[[191,[[0,[4,1]]]]]],[[[192,[[0,[4,1]]]]],[[192,[[0,[4,1]]]]]],[[]],[[]],[[]],[[]],0,0,0,[[[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,[[[31,[1]],[57,[1]],[57,[1]]],9],0,0,0,[[],189],[[],[[31,[1]]]],0,0,[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,[5],[5],[5],[5],[5],[5],0,0,0,0,0,[[[31,[1]],[57,[1]]],[[21,[[96,[1]]]]]],[[[31,[1]],[57,[1]]],[[21,[101]]]],[[[31,[1]],[57,[1]]],21],[[[31,[1]],[57,[1]]],21],[[[31,[1]],[56,[1]]],[[21,[[67,[1]]]]]],[[[31,[1]],[57,[1]]],21],[[[31,[1]],[57,[1]]],[[21,[[32,[[57,[1]]]]]]]],[[[31,[1]],[57,[1]]],[[21,[88]]]],[[[31,[1]],[57,[1]]],[[21,[[2,[1]]]]]],[[[31,[1]],[54,[1]]],[[21,[[57,[1]]]]]],[[[31,[1]],[55,[1]]],[[21,[[56,[1]]]]]],[[[31,[1]],[57,[1]]],[[21,[80]]]],[[[31,[1]],[57,[1]]],[[21,[88]]]],[[[31,[1]],[57,[1]]],[[21,[14]]]],[[190,11],12],[[189,11],12],[[[31,[[0,[10,1]]]],11],12],[[75,11],12],[[75,11],12],[[[191,[[0,[10,1]]]],11],12],[[[192,[[0,[10,1]]]],11],12],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[31,[1]]],[[57,[1]]]],[[[31,[1]],101],[[57,[1]]]],[[[31,[1]],106],[[57,[1]]]],[[[31,[1]]],[[192,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]],[57,[1]]],[[21,[[54,[1]]]]]],[[[31,[1]],[56,[1]]],[[21,[[60,[1]]]]]],[[[31,[1]],[95,[1]]],[[21,[[60,[1]]]]]],[[[31,[1]],[23,[80]],9],[[21,[[57,[1]]]]]],[[[31,[1]],102,1],[[21,[[57,[1]]]]]],[[[31,[1]]],[[57,[1]]]],[[[31,[1]],[87,[[2,[1]]]]],[[21,[[57,[1]]]]]],[[[31,[1]],[57,[1]]],[[21,[[54,[1]]]]]],[[[31,[1]]],[[57,[1]]]],[[[31,[1]],[23,[80]]],[[21,[[57,[1]]]]]],[[[31,[1]],88],[[21,[[57,[1]]]]]],[[[31,[1]]],[[57,[1]]]],[[[31,[1]],13],[[57,[1]]]],0,0,[[[31,[1]],[56,[1]]],[[21,[[55,[1]]]]]],[[[31,[1]],[57,[1]]],[[21,[[54,[1]]]]]],[[[31,[1]],[57,[1]],190],[[21,[[54,[1]]]]]],[[[31,[1]],190],[[21,[[54,[1]]]]]],[[[31,[1]],[23,[80]]],1],[[[31,[1]],[57,[1]],190],[[21,[[54,[1]]]]]],[[[31,[1]],1,[57,[1]]],[[21,[[57,[1]]]]]],[[[31,[1]],1,[57,[1]]],[[57,[1]]]],0,[[[31,[1]]]],0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[31,[1]],1,[57,[1]]],[[57,[1]]]],[[[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]],[57,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[31,[1]],88],[[57,[1]]]],[[[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]]],[[57,[1]]]],[[[31,[1]],[87,[[2,[1]]]]],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],[55,[1]],[185,[1]]],[[21,[[56,[1]]]]]],[[[31,[1]],[54,[1]],[185,[1]]],[[21,[[57,[1]]]]]],[[[31,[1]],[23,[80]]],[[57,[1]]]],[[[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[31,[1]],88],[[57,[1]]]],[[[31,[1]],88],[[21,[[57,[1]]]]]],[[[31,[1]],[23,[80]],133],[[57,[1]]]],[[[31,[1]],[95,[1]]],[[57,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[102,9],[[],9],[[[31,[1]],[23,[80]]],[[57,[1]]]],0,0,0,0,0,0,0,[[[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],0,0,[[[31,[1]],[23,[80]]],[[57,[1]]]],[[[31,[1]],[56,[1]]],[[56,[1]]]],0,[[],[[31,[1]]]],[[[31,[1]]],[[192,[1]]]],[[[31,[1]]],[[57,[1]]]],[[[31,[1]]],[[57,[1]]]],0,[[[31,[1]],[87,[[2,[1]]]]],[[57,[1]]]],0,0,0,0,0,[[[31,[1]],[57,[1]]],21],0,[[[31,[1]],[57,[1]]],[[7,[75]]]],0,0,0,[76],[[[191,[1]]],[[57,[1]]]],[[[31,[1]],[57,[1]],[57,[1]]],[[7,[9,75]]]],0,0,[[[31,[1]],80],[[7,[[57,[1]],134]]]],[[[31,[1]],80,133],[[7,[[57,[1]],134]]]],[[[31,[1]],[85,[135]],133],[[7,[134]]]],[[[31,[1]],[85,[135]],133],[[7,[[57,[1]],134]]]],[[[31,[1]],[85,[135]]],[[7,[[57,[1]],134]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[31,[1]],[23,[80]],9],[[57,[1]]]],[[[31,[1]],1,1],[[21,[[54,[1]]]]]],[[[31,[1]],1,1],[[21,[[55,[1]]]]]],[[[191,[1]]],[[54,[1]]]],0,0,[[[31,[1]],[57,[1]]],[[21,[[57,[1]]]]]],0,[[[31,[1]],[57,[1]]],[[7,[[57,[1]],75]]]],[[[31,[1]],[23,[80]]],[[57,[1]]]],0,[[[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,0,[[[31,[1]],[23,[80]]],[[57,[1]]]],0,[[[31,[1]]],[[57,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[],18],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,[[[31,[1]],13],[[57,[1]]]],0,[[[191,[1]]],1],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[193,18],193],[[88,18],88],[[],3],[[],3],[193,193],[88,88],[[]],[[]],[5],[5],[5],[5],[6,[[7,[193]]]],[6,[[7,[88]]]],[5],[5],[[193,193],9],[[88,88],9],[[],9],[[],9],[[],9],[[],9],[[193,[42,[18]]],193],[[88,[42,[18]]],88],[[193,11],12],[[88,11],12],[[]],[18,88],[[]],[80,88],[193,18],[88,18],[88,18],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[18,9],[18,9],[[193,19]],[[88,19]],[[],18],[[],18],[[],5],[[],5],[[]],[[]],[193,9],[88,9],[193,9],[193,9],[88,9],[193,9],[88,9],[[],88],[88,[[21,[18]]]],[193,18],[88,18],[18,193],[18,88],[18,193],[18,88],[[9,[32,[18]]],88],[18,88],[[],193],[9,88],[18,88],0,[193,[[21,[193]]]],[88,[[21,[88]]]],[[193,193],[[21,[20]]]],[[88,88],[[21,[20]]]],[193,[[32,[18]]]],[88,[[32,[18]]]],0,[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[],193],[[],88],[[193,29],7],[[88,29],7],[88,[[21,[18]]]],[88,193],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],32],[[],[[32,[103]]]],[[],[[32,[104]]]],[[],[[32,[80]]]],[[102,[43,[1]]],[[7,[[45,[1]],44]]]],[[68,[43,[1]]],[[7,[[45,[1]],44]]]],[[103,[43,[1]]],[[7,[[45,[1]],44]]]],[[104,[43,[1]]],[[7,[[45,[1]],44]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[102,102],[68,68],[103,103],[104,104],[[]],[[]],[[]],[[]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[102]]]],[6,[[7,[103]]]],[6,[[7,[104]]]],[5],[5],[5],[5],[[102,102],9],[[68,68],9],[[103,103],9],[[104,104],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[102,11],12],[[102,11],12],[[68,11],12],[[68,11],12],[[103,11],12],[[103,11],12],[[104,11],12],[[104,11],12],[[]],[[]],[[]],[[]],[1,21],[1,[[21,[102]]]],[1,[[21,[68]]]],[1,[[21,[103]]]],[1,[[21,[104]]]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[18,9],[18,9],[18,9],[[102,19]],[[68,19]],[[103,19]],[[104,19]],[[],18],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[102,9],[104,9],[[102,102],9],[102,9],[[103,103],[[21,[20]]]],[[104,104],[[21,[20]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[102,29],7],[[103,29],7],[[104,29],7],[5,9],[[103,5],9],[[104,5],9],[[],80],[103,80],[104,80],[[],1],[102,1],[68,1],[103,1],[104,[[0,[[194,[13]],195]]]],[[]],[102],[68],[103],[104],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],7],[105,[[7,[102]]]],[105,[[7,[68]]]],[[],7],[105,[[7,[103]]]],[[],7],[[],7],[105,[[7,[104]]]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],0,0,[[14,14],14],[[]],[[]],[[]],[[],3],[14,14],[[]],[5],[5],[6,[[7,[14]]]],[[14,14],14],[5],[[14,14],9],[[],9],[[],9],[[14,11],12],[[14,11],12],[[]],[13,14],[18,9],[[],18],[[],5],[[]],[14,9],[[14,14],14],[[14,14],[[21,[20]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[14,14],14],[[14,29],7],[[14,14],14],[[]],[[],18],[[],7],[[],7],[[],30],[[]],[[[23,[22]]]],0,[[31,69],70],[31,18]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[3,"Cid"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"u64"],[4,"UInt"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[3,"String"],[8,"Hasher"],[4,"Ordering"],[4,"Option"],[3,"Path"],[8,"AsRef"],[4,"Error"],[3,"RawCodec"],[8,"Read"],[8,"Extend"],[3,"Error"],[8,"Serializer"],[3,"TypeId"],[3,"Store"],[3,"Vec"],[3,"IO"],[3,"Witness"],[8,"Coprocessor"],[3,"MultiFrame"],[8,"Copy"],[3,"CircuitFrame"],[3,"Lang"],[3,"Arc"],[3,"Frame"],[15,"slice"],[8,"ConstraintSystem"],[4,"SynthesisError"],[3,"AllocatedNum"],[3,"AllocatedPtr"],[3,"AllocatedContPtr"],[3,"GlobalAllocations"],[3,"Scalar"],[3,"Bls12"],[3,"PreparedVerifyingKey"],[3,"Proof"],[8,"FnOnce"],[6,"ScalarPtr"],[6,"ScalarContPtr"],[3,"ContPtr"],[3,"Ptr"],[4,"Boolean"],[8,"IntoHashComponents"],[15,"array"],[8,"PrimeField"],[4,"ConsName"],[6,"ConsWitness"],[4,"ContName"],[8,"AsAllocatedHashComponents"],[6,"ContWitness"],[4,"Continuation"],[4,"ContTag"],[8,"Write"],[6,"Result"],[4,"ReductionError"],[4,"LurkError"],[4,"ProofError"],[4,"NovaError"],[3,"Error"],[3,"Demand"],[8,"Error"],[4,"Status"],[3,"Evaluator"],[15,"str"],[3,"Error"],[3,"FrameIt"],[8,"Fn"],[3,"Take"],[3,"PeekMoreIterator"],[3,"Binding"],[8,"Into"],[4,"Sym"],[4,"Coproc"],[3,"DummyCoprocessor"],[3,"HashMap"],[8,"Default"],[8,"Deserialize"],[8,"Serialize"],[3,"Thunk"],[4,"Expression"],[3,"FWrap"],[4,"LightData"],[6,"Result"],[15,"u8"],[15,"char"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[4,"LanguageField"],[3,"HashConstants"],[6,"U3"],[3,"PoseidonConstants"],[6,"U4"],[6,"U6"],[6,"U8"],[4,"HashArity"],[4,"HashConst"],[3,"PoseidonCache"],[8,"HashName"],[8,"Eq"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[3,"Cont"],[6,"ContStub"],[4,"LEMOP"],[3,"MetaPtr"],[3,"Witness"],[3,"LEM"],[3,"RandomState"],[3,"DashMap"],[4,"LightExpr"],[3,"LightStore"],[3,"Package"],[4,"Error"],[8,"Iterator"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"PublicParams"],[3,"Groth16Prover"],[3,"Parameters"],[3,"GenericSRS"],[8,"RngCore"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[8,"Send"],[6,"S1"],[4,"Proof"],[3,"PublicParams"],[3,"NovaProver"],[6,"C1"],[4,"RawPtr"],[8,"Tag"],[3,"SPtr"],[8,"Display"],[6,"S1"],[3,"CommittedExpression"],[4,"Claim"],[3,"Proof"],[6,"Cid"],[4,"Error"],[4,"ReductionCount"],[3,"Evaluation"],[3,"PtrEvaluation"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"LurkScalarBytes"],[3,"LurkScalarIpld"],[4,"LurkPtr"],[4,"LurkCont"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"DeserializeOwned"],[3,"VerificationResult"],[6,"NovaProofCache"],[3,"Error"],[4,"FromHexError"],[3,"Error"],[3,"ReplState"],[3,"Command"],[8,"ReplTrait"],[3,"Repl"],[3,"ScalarStore"],[4,"ScalarExpression"],[3,"ScalarThunk"],[4,"ScalarContinuation"],[3,"StringSet"],[4,"HashScalar"],[3,"ConstantPtrs"],[3,"NamedConstants"],[3,"Symbol"],[8,"From"],[8,"Field"],[8,"ToInputs"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"CoCircuit"],[8,"Evaluable"],[8,"Encodable"],[8,"Prover"],[8,"Provable"],[8,"Id"],[8,"FileStore"],[13,"Let"],[13,"LetRec"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"],[8,"TypePredicates"],[8,"Op"],[8,"Write"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YOO","n":["Coproc","let_store","lurk"],"q":[[0,"lurk_macros"]],"d":["","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …",""],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[]},\
"lurkrs":{"doc":"","t":"F","n":["main"],"q":[[0,"lurkrs"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
