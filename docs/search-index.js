var searchIndex = JSON.parse('{\
"lurk":{"doc":"Lurk","t":"ENCNCLLOLLOAALLAAAOLLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCIAAKKDDLLLLLLMLLLLLMLLLLLLFLLLLMMLLLLLLLMMLLLLMMMMLLLLMMLLLLLLLLLLLLLLLLLLLMAAAAIKKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFAAENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHDMLLMFMLLLLLLMLLLLLLMLMMLLLLLLLFDLLLLLLLLLLLLLLLLLLLLLEHHNDNDNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLFFLMMLLLLLMMFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLLLALAKLLLLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNIDDDDNNEENDMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLKLLLLKLLKLLLALLLLLLLKLLLMLLMLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNNNNNNENNNNNNNNNDNNNNNNENNNNNNNENNNNNNNNENDNLLMLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLALMLLLLMLLLLLLLALMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNDNNDDMLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFFFFFFFFNDDNEMLLMLLLLLLMLLLLLLMMLLLLLLLLLLLLLLMLLLLLMMMMLLLLMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNENNNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFQIQQQQQIQIQIIIIQQQQQKKKKKKLKLKKKKLKKKKKKLLLKALKKKKKKKKKKAKGGNIGQGQGQGQGDGEDNGGLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLGNENNEDNGDGLLLLLLLLFFLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAAAFFFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDEDNNNMMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLMMLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLLNNELLLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","blank","blank","borrow","borrow","borrow_mut","borrow_mut","cached_witness","circuit_index","clone","clone","clone_into","clone_into","count","deref","deref","deref_mut","deref_mut","deserialize","deserialize","destructure_list","drop","drop","fmt","fmt","folding_config","frames","from","from","from_frame","from_frames","get_store","init","init","input","input","into","into","layout_raw","layout_raw","meta","next_pc","output","output","pointer_metadata","pointer_metadata","precedes","precedes","store","store","synthesize_frames","synthesize_frames_parallel","synthesize_frames_sequential","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","witness","circom","constraints","data","pointer","CircomGadget","evaluate_simple","into_circom_input","name","simple_evaluate_alpha","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","quote_ptr","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from","from","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","config","parse_and_run","paths","repl","Backend","Nova","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_possible_value","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value_variants","vzip","CLI_CONFIG","CliSettings","backend","borrow","borrow_mut","circom_dir","cli_config","commits_dir","default","deref","deref_mut","deserialize","deserialize","drop","field","fmt","from","from_config","init","into","layout_raw","limit","pointer_metadata","proofs_dir","rc","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","lurk_default_dir","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","handle_non_meta","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Flow","LURK_CONFIG","LURK_CONFIG_FILE","Parallel","ParallelConfig","ParallelN","PerfConfig","Sequential","Settings","WitnessGeneration","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_config","home_dir","init","init","init","init","init","into","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lurk_config","lurk_config_file","num_threads","parallelism","perf","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","public_params_default_dir","public_params_dir","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","evaluate_alpha","evaluate_internal","evaluate_simple","gadgets","has_circuit","sha256","simple_evaluate_alpha","synthesize","synthesize_alpha","synthesize_internal","synthesize_simple","synthesize_step_circuit","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","evaluate_simple","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","simple_evaluate_alpha","synthesize_alpha","synthesize_simple","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","construct_cons","construct_list","construct_tuple2","construct_tuple3","construct_tuple4","SC","Sha256Coproc","Sha256Coprocessor","arity","arity","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eval_arity","eval_arity","evaluate","evaluate_alpha","evaluate_internal","evaluate_simple","evaluate_simple","fmt","fmt","from","from","from","has_circuit","has_circuit","init","init","into","into","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","serialize","serialize","simple_evaluate_alpha","simple_evaluate_alpha","synthesize","synthesize_alpha","synthesize_alpha","synthesize_internal","synthesize_simple","synthesize_simple","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","StandardTrie","Trie","TrieCoproc","arity","arity","arity","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","evaluate_alpha","evaluate_internal","evaluate_simple","evaluate_simple","evaluate_simple","evaluate_simple","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","has_circuit","has_circuit","has_circuit","init","init","init","init","init","init","init","init","insert","install","install_lem","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate_alpha","simple_evaluate_alpha","simple_evaluate_alpha","simple_evaluate_alpha","synthesize","synthesize_alpha","synthesize_alpha","synthesize_alpha","synthesize_alpha","synthesize_insert","synthesize_internal","synthesize_simple","synthesize_simple","synthesize_simple","synthesize_simple","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Coprocessor","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Lurk","Meta","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_frames","get_frames","header","i","init","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_coprocessor","is_error","is_error","is_error","is_terminal","is_terminal","is_terminal","iter","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","log","log","log","maybe_emitted_expression","meta","new","next","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_binding_alpha","add_coprocessor","add_coprocessor_alpha","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","evaluate_alpha","evaluate_internal","evaluate_simple","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_index","get_index_by_symbol","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup","lookup_by_sym","max_coprocessor_arity","new","new","new_with_bindings","new_with_bindings_alpha","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","simple_evaluate_alpha","simple_evaluate_alpha","synthesize","synthesize_alpha","synthesize_internal","synthesize_simple","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compare","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_possible_value","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_variants","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","names_and_ptrs","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_blank","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Copy","Cproc","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hash3Zeros","Hash4Zeros","Hash6Zeros","Hash8Zeros","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Num","Op","Op1","Op2","Open","Or","Return","String","Sub","Symbol","Tag","Trunc","Var","Zero","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_field","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","input_params","interpreter","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","multiframe","name","name","new","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slots_count","store","synthesize_frame","synthesize_frame_aux","to_field","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AllocatedVal","Bits","Boolean","GlobalAllocator","Number","Pointer","SlotWitness","SlotsAllocations","allocations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_slots_allocations","clone","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","get_allocated_ptr","get_allocated_ptr_from_ptr","get_const","get_tag","get_tag_cloned","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","new_const","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness","eval_step","evaluate","evaluate_simple","evaluate_simple_with_env","evaluate_with_env","evaluate_with_env_and_cont","make_cprocs_funcs_from_lang","make_eval_step_from_lang","Boolean","Frame","Hints","Pointer","Val","bit_decomp","blank","blank","blank","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone","clone_into","clone_into","clone_into","commitment","cproc_outputs","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","emitted","fmt","fmt","from","from","from","hash4","hash6","hash8","hints","init","init","init","input","input","into","into","into","layout_raw","layout_raw","layout_raw","new_from_func","output","output","pc","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","MultiFrame","arity","arity","blank","borrow","borrow_mut","cached_witness","circuit_index","clone","clone_into","compute_witness","deref","deref_mut","deserialize","drop","emitted","fmt","frames","from","from_frames","get_evaluation_frames","init","into","io_to_scalar_vector","layout_raw","make_dummy","num_circuits","output","pointer_metadata","precedes","primary_circuit","public_input_size","public_inputs","reduction_count","secondary_circuit","significant_frame_count","synthesize","synthesize","synthesize","synthesize_frames","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Ptr","Tuple2","Tuple3","Tuple4","ZPtr","borrow","borrow_mut","cast","char","clone","clone_into","comm","dbg_display","deref","deref_mut","deserialize","deserialize","drop","dummy","dummy","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt_to_string","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","into","is_nil","is_tuple","is_zero","layout_raw","num","num_u64","pointer_metadata","serialize","tag","to_owned","try_from","try_into","type_id","u64","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","zero","Store","add_comm","borrow","borrow_mut","car_cdr","commit","cons","cont_error","cont_outermost","cont_terminal","default","deref","deref_mut","deserialize","drop","expect_2_ptrs","expect_3_ptrs","expect_4_ptrs","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_list","fetch_string","fetch_sym","fetch_symbol","fetch_symbol_path","fmt","from","get_cont_terminal","hash3zeros","hash4zeros","hash6zeros","hash8zeros","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","hydrate_z_cache","improper_list","init","initial_empty_env","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_fun","intern_lurk_symbol","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","intern_user_symbol","into","inverse_poseidon_cache","key","layout_raw","list","open","pointer_metadata","poseidon_cache","ptr_eq","ptr_eq","read","read","read_maybe_meta","read_with_default_state","to_scalar_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from_upto","get_from_offset","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","AllocatedIO","CEKState","CircuitFrame","ContPtr","ContPtr","Error","EvalFrame","EvaluationStore","FrameIO","FrameLike","GlobalAllocation","MultiFrameTrait","NIVCProver","Provable","Prover","Ptr","Ptr","PublicParams","Store","StoreError","blank","cached_witness","compute_witness","cont","emitted","env","expected_total_iterations","expr","frame_padding_count","frames","from_frames","get_cont_terminal","get_evaluation_frames","get_evaluation_frames","hydrate_z_cache","initial_empty_env","input","io_to_scalar_vector","lang","make_dummy","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","output","output","precedes","ptr_eq","public_input_size","public_inputs","read","reduction_count","reduction_count","significant_frame_count","supernova","synthesize_frames","C1LEM","C2","Compressed","CurveCycleEquipped","EE1","EE1","EE2","EE2","G1","G1","G2","G2","NovaCircuitShape","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuits","clone","clone_into","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","reduction_count","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","C2","Compressed","FoldingConfig","IVC","NIVC","Proof","PublicParams","Recursive","SuperNovaAuxParams","SuperNovaProver","SuperNovaPublicParams","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuit_cache_keys","circuit_index","circuit_shapes","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","evaluate_and_prove","fmt","fmt","from","from","from","from","index","init","init","init","init","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pp","prove","prove_recursively","public_params","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","allocate_maybe_fun_unconstrained","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","compare","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","disk_cache","error","instance","public_params","supernova_aux_params","supernova_circuit_params","supernova_public_params","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Instance","Kind","Metadata","NovaPublicParams","SuperNovaAuxParams","SuperNovaCircuitParams","_p","abomonated","abomonated","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_key","cache_key","circuit_param_instances","clone","clone","clone_into","clone_into","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","key","kind","kind","lang","lang","lang","layout_raw","layout_raw","layout_raw","new","open","pointer_metadata","pointer_metadata","pointer_metadata","rc","rc","reindex","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","quote","quotient","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","get_pos","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Cproc","Cproc","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","simple_fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","compare","deref","deref_mut","deserialize","deserialize","drop","dummy","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[99,"lurk::circuit"],[104,"lurk::circuit::circuit_frame"],[175,"lurk::circuit::gadgets"],[179,"lurk::circuit::gadgets::circom"],[184,"lurk::circuit::gadgets::constraints"],[185,"lurk::circuit::gadgets::data"],[272,"lurk::circuit::gadgets::pointer"],[383,"lurk::cli"],[388,"lurk::cli::backend"],[424,"lurk::cli::config"],[456,"lurk::cli::paths"],[457,"lurk::cli::repl"],[479,"lurk::config"],[633,"lurk::cont"],[683,"lurk::cont::Continuation"],[715,"lurk::coprocessor"],[734,"lurk::coprocessor::circom"],[735,"lurk::coprocessor::circom::non_wasm"],[768,"lurk::coprocessor::gadgets"],[773,"lurk::coprocessor::sha256"],[845,"lurk::coprocessor::trie"],[1087,"lurk::error"],[1182,"lurk::eval"],[1423,"lurk::eval::lang"],[1554,"lurk::expr"],[1641,"lurk::field"],[1749,"lurk::hash"],[1887,"lurk::hash_witness"],[2266,"lurk::lem"],[2549,"lurk::lem::circuit"],[2642,"lurk::lem::eval"],[2650,"lurk::lem::interpreter"],[2740,"lurk::lem::multiframe"],[2788,"lurk::lem::pointers"],[2844,"lurk::lem::store"],[2922,"lurk::package"],[2950,"lurk::parser"],[2991,"lurk::parser::base"],[3039,"lurk::parser::error"],[3123,"lurk::parser::position"],[3157,"lurk::parser::position::Pos"],[3163,"lurk::parser::string"],[3202,"lurk::parser::syntax"],[3223,"lurk::proof"],[3281,"lurk::proof::nova"],[3377,"lurk::proof::supernova"],[3487,"lurk::ptr"],[3596,"lurk::public_parameters"],[3604,"lurk::public_parameters::error"],[3635,"lurk::public_parameters::instance"],[3736,"lurk::state"],[3774,"lurk::store"],[4037,"lurk::symbol"],[4106,"lurk::syntax"],[4147,"lurk::tag"],[4389,"lurk::uint"],[4432,"lurk::writer"],[4436,"lurk::z_data"],[4485,"lurk::z_data::serde"],[4518,"lurk::z_data::serde::de"],[4570,"lurk::z_data::serde::ser"],[4715,"lurk::z_data::z_cont"],[4764,"lurk::z_data::z_cont::ZCont"],[4796,"lurk::z_data::z_expr"],[4846,"lurk::z_data::z_expr::ZExpr"],[4849,"lurk::z_data::z_ptr"],[4901,"lurk::z_data::z_store"],[4946,"core::clone"],[4947,"rkyv::with"],[4948,"core::result"],[4949,"serde::de"],[4950,"core::cmp"],[4951,"core::fmt"],[4952,"core::fmt"],[4953,"core::marker"],[4954,"core::hash"],[4955,"core::fmt"],[4956,"core::alloc::layout"],[4957,"serde::ser"],[4958,"alloc::string"],[4959,"core::any"],[4960,"alloc::boxed"],[4961,"core::any"],[4962,"alloc::sync"],[4963,"bellpepper_core::gadgets::num"],[4964,"bellpepper_core::constraint_system"],[4965,"bellpepper_core::constraint_system"],[4966,"ff"],[4967,"core::ops::function"],[4968,"anyhow"],[4969,"clap_builder::builder::possible_value"],[4970,"camino"],[4971,"std::collections::hash::map"],[4972,"config::error"],[4973,"pasta_curves::pallas"],[4974,"camino"],[4975,"std::io"],[4976,"serde::de"],[4977,"core::cell"],[4978,"alloc::rc"],[4979,"core::error"],[4980,"nova_snark::errors"],[4981,"core::marker"],[4982,"core::convert"],[4983,"indexmap::map"],[4984,"typenum::generated::consts"],[4985,"neptune::poseidon"],[4986,"typenum::generated::consts"],[4987,"core::convert"],[4988,"nom::traits"],[4989,"nom::internal"],[4990,"bellpepper_core::util_cs::test_cs"],[4991,"nova_snark::traits::circuit"],[4992,"nova_snark::supernova"],[4993,"nova_snark::traits::circuit_supernova"],[4994,"nova_snark::supernova::error"],[4995,"std::io::error"],[4996,"std::fs"],[4997,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","a small scalar field element in U64 representation for …","","","","","","","","","","","","Global config for Lurk Includes settings for cache …","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","Returns the argument unchanged.","","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","","","","","","","","","","","","","","Return the circuit index assigned to this <code>MultiFrame</code>’s …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","Global config for the CLI Includes settings for cache …","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Global config varable for <code>CliSettings</code>","Contains the CLI configuration settings","Proof generation and verification system","","","Cache directory for Circom files","Gets the <code>CLI_CONFIG</code> settings. If uninitialized, sets the …","Cache directory for commitments","","","","","","","Finite field used for evaluation and proving","","Returns the argument unchanged.","Loads config settings from a file or env var, or CLI arg …","","Calls <code>U::from(self)</code>.","","Iteration limit for the program, which is arbitrary to …","","Cache directory for proofs","Reduction count, which is the number of circuit reductions …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The level of parallelism used when synthesizing the Lurk …","Global config variable for <code>Settings</code>","Global path variable for configuration file","Try to be smart about thread management based on # of cpus","Parallel configuration settings","How many threads to use? (Advisory, might be ignored.)","Performance-related configuration settings","Runs without parallelism (default)","Contains the Lurk config settings The <code>public_params_dir</code> …","Should we use optimized witness-generation when possible?","","","","","","","","","","","Returns the number of parallel steps to run per thread …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads config settings from a file or env vars The public …","Returns the home directory used by <code>cargo`` and </code>rustup`","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> on <code>Flow::Parallel</code> or <code>Flow::ParallelN</code>","Returns <code>true</code> on <code>Flow::Sequential</code>","","","","","","Gets the <code>LURK_CONFIG</code> settings. If uninitialized, sets the …","Gets the <code>LURK_CONFIG_FILE</code> path. If uninitialized, sets the …","Returns the number of parallel threads to run","Parallelism settings","Parallelism &amp; witness gen configs","","","","","","The poseidon witness part of synthesis.","NOTE: Neptune itself <em>will</em> do this transparently at the …","","Public parameter disk cache location","Multiple <code>StepCircuit</code>s.","Synthesis (within one <code>StepCircuit</code>)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Witness generation settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","","","","Helper gadgets for synthesis","Returns true if this Coprocessor actually implements a …","","As with all evaluation, the value returned from …","","","","","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","","","Constructs a cons-list with the provided <code>elts</code>. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","Returns a value corresponding to the commitment associated …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Precompute the witness blocks for all the named hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","<code>Copy(x, y)</code> binds <code>x</code> to a copy of what <code>y</code> is bound to","<code>Cproc(ys, c, xs)</code> binds <code>ys</code> to the results of coprocessor <code>c</code> …","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hash3Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash4Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash6Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash8Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","The LEM <code>Tag</code> is a wrapper around other types that are used …","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","LEM variables","<code>Zero(x, t)</code> binds <code>x</code> to a <code>Ptr::zero(t)</code>","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Checks if the allocation for a numeric variable has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cached version of Lurk’s default step function (IVC, no …","","","","","","Creates the <code>Func</code>s used to call coprocessors in the NIVC …","Creates a LEM <code>Func</code> corresponding to Lurk’s step function …","","A <code>Frame</code> carries the data that results from interpreting a …","<code>Hints</code> hold the non-deterministic hints for hashes and <code>Func</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Make a dummy instance, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","","","","Fetches a cons list that was interned. If the list is …","","","","","","Returns the argument unchanged.","","","","","","Safe version of <code>hash_ptr_unsafe</code> that doesn’t hit a stack …","","","","Hashes enqueued <code>Ptr</code> trees from the bottom to the top, …","Interns a sequence of pointers as an improper cons-list …","","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","","","Calls <code>U::from(self)</code>.","","","","Interns a sequence of pointers as a proper (<code>nil</code>…","","","","Equality of the content-addressed versions of two pointers","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","Retrieves the <code>from_offset</code> attribute, if present","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","The associated type of allocated input and output to the …","The State of a CEK machine.","The associated <code>CircuitFrame</code> type","the type for the Store’s continuation poitners","The associated <code>ContPtr</code> type","the type for the Store’s errors","The associated <code>Frame</code> type","A trait for a store of expressions","the type for the Frame’s IO","A Frame of evaluation in a CEK machine.","The associated type which manages global allocations","Trait to support multiple <code>MultiFrame</code> implementations.","Supertrait for <code>Prover</code> that also supports NIVC.","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","the type for the Store’s pointers","The associated <code>Ptr</code> type","The associated public parameters type for the prover.","The associated <code>Store</code> type","The error type for the Store type","Synthesize a blank circuit.","Returns a reference to the cached witness values","Populates a WitnessCS with the witness values for the …","the continuation (K)","the emitted frames","the environment (E)","Returns the expected total number of iterations for the …","the expression, or control word (C)","Returns the number of padding frames needed for a given …","Iterates through the Self::CircuitFrame instances","Create an instance from some <code>Self::Frame</code>s.","getting the terminal continuation pointer","Evaluates and generates the frames of the computation …","Evaluates and generates the <code>Frame</code>s of the computation …","cache hashes for pointers enqueued for hydration","getting a pointer to the initial, empty environment","the input of the frame","Returns a public IO vector when equipped with the local …","Returns a reference to the Prover’s Lang.","Make a dummy instance, duplicating <code>self</code>’s final …","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","the output of the frame","The output of the last frame","Returns true if the supplied instance directly precedes …","hash-equality of the expressions represented by Ptrs","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","interpreting a string representation of an expression","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Counting the number of non-trivial frames in the evaluation","An adapter to a SuperNova proving system implementation.","Synthesize some frames.","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Why the next 2 types?","Type alias for the Evaluation Engine using G2 group …","a concrete implementation of an …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","Type alias for Nova Circuit Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","Computes a cache key of the primary circuit. The point is …","Generates the circuits for the Nova proving system.","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Folding configuration specifies <code>Lang</code> and can be either <code>IVC</code> …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the SuperNova …","A proof for the intermediate steps of a recursive …","Type alias for SuperNova Aux Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","Computes a cache key of a supernova primary circuit. The …","Collects all the cache keys of supernova instance. We need …","Return the circuit index assigned in this <code>FoldingConfig</code> to …","The internal circuit shapes","","","","","","","","","","","","","","","","return the digest","","","","","Evaluates and proves the computation given the public …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","","","","Public params for SuperNova.","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the running claim params for the SuperNova …","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the claim, which (for now), …","","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","Instances","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Instances compute a cache-key for the objects they …","From ::nova, there are 3 “kinds” of public param …","What we put into the cache","Tag for nova::NovaPublicParams instances","Tag for supernova::SuperNovaAuxParams instances","Tag for [supernova::SuperNovaCircuitParams] instances","","","","","","","","","","","","If this Instance is of Kind::SuperNovaAuxParams, then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key (or cache_key) of this Instance used to retrieve …","","","The key (or cache_key) of this Instance used to retrieve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","A character literal: ‘A’, ‘λ’","An improper cons-list of expressions: (1 2 . 3)","A nil-terminated cons-list of expressions: (1 2 3)","An element of the finite field <code>F</code>","A quoted expression: ’a, ’(1 2)","A string literal: “foobar”, “foo\\\\nbar”","A hierarchical symbol: foo, foo.bar.baz or keyword :foo","Lurk’s syntax for parsing","A u64 integer: 1u64, 0xffu64","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Retrieves the <code>Pos</code> attribute","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","","","","","","",""],"if":[0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[1,[-1]]],[[1,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[1,[-2]]]]],8,3],[[[1,[-1]],[1,[-1]]],2,3],[5,2],[[[1,[-1]],[1,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,0,0,[[[1,[-1]],11],12,3],[[[1,[-1]],11],12,[13,3]],[-1,-1,[]],[14,[[1,[-1]]],3],[15,[[1,[-1]]],3],[-1,[[1,[-1]]],3],0,[[-1,-2],15,[16,17],18],0,[[[1,[-1]],-2],2,3,19],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],9,3],[[[1,[-1]]],9,3],0,[[],[[7,[24,25]]]],0,0,0,0,[[],[[1,[-1]]],3],[[],[[1,[-1]]],3],[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,[[[1,[-1]],[1,[-1]]],[[27,[26]]],3],[[]],0,0,0,[[[1,[-1]],-2],7,3,28],0,0,0,[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],0,0,[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[],5],[[-1,[33,[-2]]],[[34,[-2]]],[],[]],0,0,[[],[[35,[-1,-2]]],3,[[36,[-1]]]],[[[38,[[37,[-1,-2]]]],[39,[-1]]],[[40,[-1,-2]]],3,[[36,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[40,[-1,-2]]],5,3,[[36,[-1]]]],[[[35,[-1,-2]]],[[35,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[[40,[-1,-2]]],[[40,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-2,[33,[-1]],[41,[-1]],5,[42,[-1]]],[[7,[[2,[[34,[[42,[-1]]]],[43,[-1]]]],44]]],3,[[45,[-1]]]],[5,2],[5,2],[[[35,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[[[40,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],0,0,[-1,-1,[]],[-1,-1,[]],[[[48,[[46,[-1]],[47,[-1]],-1,-2]],[33,[-1]]],[[35,[-1,-2]]],3,[[36,[-1]]]],[[5,[49,[[48,[[46,[-1]],[47,[-1]],-1,-2]]]],[33,[-1]],[38,[[37,[-1,-2]]]]],[[34,[[40,[-1,-2]]]]],3,[[36,[-1]]]],[[[40,[-1,-2]]],[[33,[-1]]],3,[[36,[-1]]]],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,0,0,0,[[]],[[]],[[[35,[-1,-2]],[35,[-1,-2]]],9,3,[[36,[-1]]]],[[[40,[-1,-2]],[40,[-1,-2]]],9,3,[[36,[-1]]]],0,0,[[[40,[-1,-2]],-3,[33,[-1]],[42,[-1]],[42,[-1]],[50,[-1]],[49,[[35,[-1,-2]]]],[41,[-1]]],[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]]],3,[[36,[-1]]],[[45,[-1]]]],[[[40,[-1,-2]],-3,[33,[-1]],[42,[-1]],[42,[-1]],[50,[-1]],[49,[[35,[-1,-2]]]],[41,[-1]]],[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]]],3,[[36,[-1]]],[[45,[-1]]]],[[[40,[-1,-2]],-3,[33,[-1]],[42,[-1]],[42,[-1]],[50,[-1]],[49,[[35,[-1,-2]]]],[27,[[34,[[2,[[51,[-1]],[52,[-1]]]]]]]],[41,[-1]]],[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]]],3,[[36,[-1]]],[[45,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,[53,[-2]],[49,[[54,[-2]]]]],[[54,[-2]]],[],[]],[[-1,[49,[[42,[-2]]]]],[[34,[[2,[29,[34,[-2]]]]]]],[],[]],[-1,55,[]],[[-1,[33,[-2]],[49,[[56,[-2]]]]],[[56,[-2]]],[],[]],[[-2,[43,[-1]],[43,[-1]]],[[7,[57,44]]],58,[[45,[-1]]]],0,[[-2,-1],[[43,[-1]]],3,[[45,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[41,[-1]]],[[41,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,0,0,0,0,0,[[[41,[-1]],11],12,[13,3]],[-1,-1,[]],0,0,[[],5],[-1,-2,[],[]],0,[[],[[7,[24,25]]]],0,0,0,[[-2,[33,[-1]]],[[7,[[41,[-1]],44]]],3,[[45,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],0,0,[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,[[-2,-3],[[7,[[42,[-1]],44]]],3,[[45,[-1]]],59],[[-2,-3],[[7,[[50,[-1]],44]]],3,[[45,[-1]]],59],[[-2,[60,[-3,-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]],61],[[-2,[62,[-1]]],[[7,[[50,[-1]],44]]],3,[[45,[-1]]]],[[-2,[33,[-1]],[63,[-1]]],[[7,[[50,[-1]],44]]],3,[[45,[-1]]]],[[-2,[33,[-1]],[56,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,[33,[-1]],-3],[[7,[[50,[-1]],44]]],3,[[45,[-1]]],59],[[[42,[-1]],-2,[42,[-1]]],[[7,[57,44]]],3,[[45,[-1]]]],[[[50,[-1]],-2,[50,[-1]]],[[7,[57,44]]],3,[[45,[-1]]]],[[-2,-3],[[7,[[42,[-1]],44]]],3,[[45,[-1]]],[[64,[-1]]]],[[[42,[-1]],-2,-1],[[7,[57,44]]],3,[[45,[-1]]]],[[-2,[33,[-1]],-3],[[7,[[42,[-1]],44]]],3,[[45,[-1]]],59],[[-2,-1,[43,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[[42,[-1]],-2,-1],[[7,[57,44]]],3,[[45,[-1]]]],[[[50,[-1]],-2,-1],[[7,[57,44]]],3,[[45,[-1]]]],[[[42,[-1]],-2,[33,[-1]]],[[7,[[2,[[43,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[-1,[[65,[[43,[-2]]]]],[],[]],[[[42,[-1]]],[[65,[[43,[-1]]]]],3],[[[50,[-1]]],[[65,[[43,[-1]]]]],3],[[-2,[33,[-1]],57],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,[27,[[56,[-1]]]],[33,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,[27,[[63,[-1]]]],[33,[-1]]],[[7,[[50,[-1]],44]]],3,[[45,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[49,[[43,[-1]]]]],[[42,[-1]]],3],[[5,[49,[[43,[-1]]]]],[[50,[-1]]],3],[[[42,[-1]]],[[42,[-1]]],[4,58]],[[[50,[-1]]],[[50,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-2,[33,[-1]],[43,[-1]],[65,[66]]],[[7,[[50,[-1]],44]]],3,[[45,[-1]]]],[[-2,[41,[-1]],[33,[-1]],[43,[-1]],[42,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,[41,[-1]],[33,[-1]],[42,[-1]],[42,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,[41,[-1]],[42,[-1]],[42,[-1]],67,[0,[67,[0,[-1,[42,[-1]]]]]],57],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,[41,[-1]],[33,[-1]],[42,[-1]],[42,[-1]],[42,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,[41,[-1]],[33,[-1]],[49,[[42,[-1]]]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,68,[43,[-1]],[65,[66]],[0,[68,[0,[-1,[43,[-1]]]]]],57],[[7,[[50,[-1]],44]]],3,[[45,[-1]]]],[[-2,68,[43,[-1]],[65,[66]],[0,[68,[0,[-1,[43,[-1]]]]]]],[[7,[[2,[[50,[-1]],[43,[-1]]]],44]]],3,[[45,[-1]]]],[[-2,[41,[-1]],[33,[-1]],[42,[-1]],[42,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,[41,[-1]],[33,[-1]],[42,[-1]],[50,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[42,[-1]],-2,[42,[-1]]],2,3,[[45,[-1]]]],[[[50,[-1]],-2,[50,[-1]]],2,3,[[45,[-1]]]],[[[50,[-1]],[33,[-1]]],29,3],[[[42,[-1]],[33,[-1]]],29,3],[[[42,[-1]],11],12,3],[[[50,[-1]],11],12,3],[[[50,[-1]]],[[42,[-1]]],3],[-1,-1,[]],[[[42,[-1]]],[[50,[-1]]],3],[-1,-1,[]],[[[43,[-1]],[43,[-1]]],[[42,[-1]]],3],[[[50,[-1]],[33,[-1]]],[[27,[[69,[-1]]]]],3],[[[50,[-1]],[33,[-1]]],[[27,[[63,[-1]]]]],3],[[[50,[-1]],[33,[-1]]],[[27,[[62,[-1]]]]],3],[[[42,[-1]]],[[43,[-1]]],3],[[[50,[-1]]],[[43,[-1]]],3],[[[42,[-1]],-2,57,[42,[-1]]],2,3,[[45,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[-1]],-2],[[7,[57,44]]],3,[[45,[-1]]]],[[[42,[-1]],-2],[[7,[57,44]]],3,[[45,[-1]]]],[[[42,[-1]],-2],[[7,[57,44]]],3,[[45,[-1]]]],[[[42,[-1]],-2],[[7,[57,44]]],3,[[45,[-1]]]],[[[42,[-1]],-2,[41,[-1]]],[[7,[57,44]]],3,[[45,[-1]]]],[[[42,[-1]],-2],[[7,[57,44]]],3,[[45,[-1]]]],[[[42,[-1]],-2],[[7,[57,44]]],3,[[45,[-1]]]],[[[42,[-1]],-2],[[7,[57,44]]],3,[[45,[-1]]]],[[[42,[-1]],-2],[[7,[57,44]]],3,[[45,[-1]]]],[[[42,[-1]],-2],[[7,[57,44]]],3,[[45,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[-2,57,[42,[-1]],[42,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,57,[50,[-1]],[50,[-1]]],[[7,[[50,[-1]],44]]],3,[[45,[-1]]]],[[-2,57,[70,[-1]],[70,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[]],[[]],[[[42,[-1]],[33,[-1]]],[[27,[[56,[-1]]]]],3],[[[42,[-1]]],[[43,[-1]]],3],[[[50,[-1]]],[[43,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[-1]],[33,[-1]]],[[27,[[70,[-1]]]]],3],0,0,[[],[[71,[2]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[72,72],[[-1,-2],2,[],[]],[[],72],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[72]]],8],[5,2],[[72,72],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[72,11],12],[[72,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[72,[[27,[73]]]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[],[[49,[72]]]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[27,[74]],[27,[[75,[55,29]]]]],76],0,[[],76],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[76]]],8],[5,2],0,[[76,11],12],[-1,-1,[]],[[74,[27,[[75,[55,29]]]]],[[7,[76,77]]]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],0,[[]],0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[],74],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[[79,[78]],[54,[78]]],[[71,[2]]]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[79,[78]],80,9],[[71,[2]]]],[[[53,[78]],5,5,72],[[79,[78]]]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[81,5,5],5],[[],82],[[],83],[[],84],[[],85],[[],81],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[82]]],8],[-1,[[7,[83]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[82,82],9],[[83,83],9],[[84,84],9],[[85,85],9],[[81,81],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[82,11],12],[[83,11],12],[[84,11],12],[[85,11],12],[[81,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[74,[27,[[75,[55,29]]]]],[[7,[82,77]]]],[[],74],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[81,9],[81,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[27,[74]],[27,[[75,[55,29]]]]],82],[[[27,[74]]],74],[81,5],0,0,[[]],[[]],[[]],[[]],[[]],0,0,[[],74],0,0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[69,[-1]]],[[69,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[[69,[-1]]],86,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[69,[-1]],[69,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[69,[-1]],[33,[-1]],87,-2],[[88,[2]]],3,89],[[[69,[-1]],11],12,[13,3]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[[69,[-1]]],[[63,[-1]]],3],[[[69,[-1]],-2],2,[16,3],19],[[],5],[[[69,[-1]],[33,[-1]]],[[2,[5,9]]],3],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],0,[-1,5,[]],[[-1,[53,[-2]],[49,[[54,[-2]]]],[54,[-2]],[54,[-2]]],[[34,[[54,[-2]]]]],[],[]],[[-1,[33,[-2]],[56,[-2]],[56,[-2]],[63,[-2]]],[[46,[-2]]],[],[]],[[-1,[53,[-2]],[49,[[54,[-2]]]]],[[34,[[54,[-2]]]]],[],[]],[[-1,[53,[-2]],[49,[[54,[-2]]]]],[[54,[-2]]],[],[]],0,[-1,9,[]],0,[[-1,[33,[-2]],[49,[[56,[-2]]]]],[[56,[-2]]],[],[]],[[-1,-3,[90,[-2]],[53,[-2]],57,[49,[[42,[-2]]]],[42,[-2]],[42,[-2]]],[[7,[[34,[[42,[-2]]]],44]]],[],[],[[45,[-2]]]],[[-1,-3,[41,[-2]],[33,[-2]],[49,[[42,[-2]]]],[42,[-2]],[50,[-2]],57],[[7,[[2,[[42,[-2]],[42,[-2]],[50,[-2]]]],44]]],[],[],[[45,[-2]]]],[[-1,-3,[90,[-2]],[53,[-2]],57,[49,[[42,[-2]]]]],[[7,[[34,[[42,[-2]]]],44]]],[],[],[[45,[-2]]]],[[-1,-3,[90,[-2]],[53,[-2]],57,[49,[[42,[-2]]]]],[[7,[[42,[-2]],44]]],[],[],[[45,[-2]]]],[[-1,-3,[33,[-2]],[41,[-2]],[70,[-2]],[42,[-2]],[42,[-2]],[50,[-2]],57],[[7,[[2,[[42,[-2]],[42,[-2]],[50,[-2]]]],44]]],[],[],[[45,[-2]]]],0,0,0,[[[91,[-1,-2]]],5,3,[[92,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[91,[-1,-2]]],[[91,[-1,-2]]],3,[[92,[-1]]]],[[-1,-2],2,[],[]],[-2,[[71,[[91,[-1,-2]]]]],3,[[92,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[91,[-1,-2]]],5,3,[[92,[-1]],13]],[[[91,[-1,-2]],[53,[-1]],[49,[[54,[-1]]]]],[[54,[-1]]],3,[[92,[-1]],13]],[[[91,[-1,-2]],11],12,[13,3],[13,[92,[-1]]]],[-1,-1,[]],[[[91,[-1,-2]]],9,3,[[92,[-1]],13]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[91,[-1,-2]]],55,3,[[92,[-1]]]],[-2,[[91,[-1,-2]]],3,[[92,[-1]]]],[[]],[[[91,[-1,-2]],[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3,[[92,[-1]],13]],[[[91,[-1,-2]],-3,[41,[-1]],[33,[-1]],[49,[[42,[-1]]]],[42,[-1]],[50,[-1]],57],[[71,[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[92,[-1]]],[[45,[-1]]]],[[[91,[-1,-2]],-3,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[42,[-1]],44]]],3,[[92,[-1]]],[[45,[-1]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[-2,[90,[-1]],[53,[-1]],[42,[-1]],[42,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,[90,[-1]],[53,[-1]],[49,[[42,[-1]]]],[27,[[42,[-1]]]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[-2,[90,[-1]],[53,[-1]],-3,[42,[-1]],[42,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]],61],[[-2,[90,[-1]],[53,[-1]],-3,[42,[-1]],[42,[-1]],[42,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]],61],[[-2,[90,[-1]],[53,[-1]],-3,[42,[-1]],[42,[-1]],[42,[-1]],[42,[-1]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]],61],0,0,0,[[[93,[-1]]],5,3],[[[94,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[93,[-1]]],[[93,[-1]]],[4,3]],[[[94,[-1]]],[[94,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[93,[-2]]]]],8,3],[-1,[[7,[[94,[-2]]]]],8,[95,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[93,[-1]]],5,3],[[[94,[-1]]],5,3],[[[94,[-1]],[53,[-1]],[49,[[54,[-1]]]],[54,[-1]],[54,[-1]]],[[34,[[54,[-1]]]]],3],[[[94,[-1]],[33,[-1]],[56,[-1]],[56,[-1]],[63,[-1]]],[[46,[-1]]],3],[[[94,[-1]],[53,[-1]],[49,[[54,[-1]]]]],[[34,[[54,[-1]]]]],3],[[[93,[-1]],[53,[-1]],[49,[[54,[-1]]]]],[[54,[-1]]],3],[[[94,[-1]],[53,[-1]],[49,[[54,[-1]]]]],[[54,[-1]]],3],[[[93,[-1]],11],12,[13,3]],[[[94,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[93,[-1]]],[[94,[-1]]],3],[[[93,[-1]]],9,3],[[[94,[-1]]],9,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[5,[[93,[-1]]],3],[[]],[[]],[[[93,[-1]],-2],7,3,28],[[[94,[-1]],-2],7,[96,3],28],[[[93,[-1]],[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3],[[[94,[-1]],[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3],[[[94,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]],[42,[-1]],[42,[-1]]],[[7,[[34,[[42,[-1]]]],44]]],3,[[45,[-1]]]],[[[93,[-1]],-2,[41,[-1]],[33,[-1]],[49,[[42,[-1]]]],[42,[-1]],[50,[-1]],57],[[7,[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[[[94,[-1]],-2,[41,[-1]],[33,[-1]],[49,[[42,[-1]]]],[42,[-1]],[50,[-1]],57],[[7,[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[[[94,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[34,[[42,[-1]]]],44]]],3,[[45,[-1]]]],[[[93,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[[94,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[97,[-1]]],5,3],[[[98,[-1]]],5,3],[[[99,[-1]]],5,3],[[[100,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[97,[-1]]],[[97,[-1]]],[4,3]],[[[98,[-1]]],[[98,[-1]]],[4,3]],[[[99,[-1]]],[[99,[-1]]],[4,3]],[[[100,[-1]]],[[100,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[98,[-1]]],[101,3]],[[],[[99,[-1]]],[101,3]],[[],[[100,[-1]]],[101,3]],[[],[[102,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[98,[-2]]]]],8,3],[-1,[[7,[[99,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[100,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[102,[-1]]],-1,3],[[[97,[-1]]],5,3],[[[98,[-1]]],5,3],[[[99,[-1]]],5,3],[[[100,[-1]]],5,3],[[[97,[-1]],[53,[-1]],[49,[[54,[-1]]]],[54,[-1]],[54,[-1]]],[[34,[[54,[-1]]]]],3],[[[97,[-1]],[33,[-1]],[56,[-1]],[56,[-1]],[63,[-1]]],[[46,[-1]]],3],[[[97,[-1]],[53,[-1]],[49,[[54,[-1]]]]],[[34,[[54,[-1]]]]],3],[[[97,[-1]],[53,[-1]],[49,[[54,[-1]]]]],[[54,[-1]]],3],[[[98,[-1]],[53,[-1]],[49,[[54,[-1]]]]],[[54,[-1]]],3],[[[99,[-1]],[53,[-1]],[49,[[54,[-1]]]]],[[54,[-1]]],3],[[[100,[-1]],[53,[-1]],[49,[[54,[-1]]]]],[[54,[-1]]],3],[[[103,[-1]],11],12,13],[[[97,[-1]],11],12,[13,3]],[[[98,[-1]],11],12,[13,3]],[[[99,[-1]],11],12,[13,3]],[[[100,[-1]],11],12,[13,3]],[[[102,[-1]],11],12,[13,3]],[[[104,[-1]],11],12,[13,3]],[[[105,[-1]],11],12,[13,3]],[-1,-1,[]],[[[100,[-1]]],[[97,[-1]]],3],[[[98,[-1]]],[[97,[-1]]],3],[[[99,[-1]]],[[97,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[97,[-1]]],9,3],[[[98,[-1]]],9,3],[[[99,[-1]]],9,3],[[[100,[-1]]],9,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[102,[-1]],-1,-1],[[7,[9,[103,[-1]]]]],3],[[[33,[-1]],[107,[[106,[87]]]],[108,[-1,[97,[-1]]]]],2,3],[[[53,[-1]],[107,[[106,[87]]]],[108,[-1,[97,[-1]]]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[102,[-1]]],5,3],[[[102,[-1]],-1],[[7,[[27,[-1]],[103,[-1]]]]],3],[[[109,[-1]],[110,[-1]]],[[102,[-1]]],3],[[[109,[-1]],[110,[-1]],5],[[102,[-1]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[102,[-1]],-1,-1],[[7,[[2,[[105,[-1]],9]],[103,[-1]]]]],3],[[[102,[-1]],-1],[[7,[[104,[-1]],[103,[-1]]]]],3],[[[102,[-1]]],-1,3],[[[102,[-1]],5],5,3],[[[98,[-1]],-2],7,3,28],[[[99,[-1]],-2],7,3,28],[[[100,[-1]],-2],7,3,28],[[[97,[-1]],[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3],[[[98,[-1]],[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3],[[[99,[-1]],[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3],[[[100,[-1]],[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3],[[[97,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]],[42,[-1]],[42,[-1]]],[[7,[[34,[[42,[-1]]]],44]]],3,[[45,[-1]]]],[[[97,[-1]],-2,[41,[-1]],[33,[-1]],[49,[[42,[-1]]]],[42,[-1]],[50,[-1]],57],[[7,[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[[[98,[-1]],-2,[41,[-1]],[33,[-1]],[49,[[42,[-1]]]],[42,[-1]],[50,[-1]],57],[[7,[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[[[99,[-1]],-2,[41,[-1]],[33,[-1]],[49,[[42,[-1]]]],[42,[-1]],[50,[-1]],57],[[7,[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[[[100,[-1]],-2,[41,[-1]],[33,[-1]],[49,[[42,[-1]]]],[42,[-1]],[50,[-1]],57],[[7,[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[[[102,[-1]],-2,[111,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]],[[7,[[43,[-1]],44]]],3,[[45,[-1]]]],[[[97,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[34,[[42,[-1]]]],44]]],3,[[45,[-1]]]],[[[97,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[[98,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[[99,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[[[100,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[104,[-1]],-1,-1,-1,[109,[-1]]],9,3],[[[105,[-1]],-1,-1,-1,[27,[-1]],-1,[109,[-1]]],9,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,112,[]],[-1,112,[]],[-1,112,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[113,113],[[[114,[-1]]],[[114,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[115,11],12],[[115,11],12],[[113,11],12],[[113,11],12],[[[114,[-1]],11],12,[13,3]],[[[114,[-1]],11],12,3],[44,115],[116,115],[117,115],[113,115],[-1,-1,[]],[-1,-1,[]],[116,113],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[115,[[27,[112]]]],[113,[[27,[112]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[46,[-1]]],[[46,[-1]]],[4,3]],[[[39,[-1]]],[[39,[-1]]],[4,3]],[[[48,[-1,-2,-3,-4]]],[[48,[-1,-2,-3,-4]]],[4,118],[4,118],[4,3],4],[119,119],[[[47,[-1]]],[[47,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[39,[-1]]],3],[[],119],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[119]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[33,[-1]]],[[56,[-1]]],3],0,[[[46,[-1]],[46,[-1]]],9,[10,3]],[[[39,[-1]],[39,[-1]]],9,[10,3]],[[[48,[-1,-2,-3,-4]],[48,[-1,-2,-3,-4]]],9,[10,118],[10,118],[10,3],10],[[119,119],9],[[[47,[-1]],[47,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[120,[-1,-2]]],[[7,[[2,[[46,[-1]],5,[34,[[56,[-1]]]]]],113]]],3,[[36,[-1]]]],[[[33,[-1]],55],[[7,[[56,[-1]],113]]],3],0,[[[46,[-1]],11],12,[13,3]],[[[46,[-1]],11],[[7,[2,121]]],3],[[[46,[-1]],[33,[-1]],87,-2],[[88,[2]]],3,89],[[[39,[-1]],11],12,[13,3]],[[[48,[-1,-2,-3,-4]],11],12,[13,118],[13,118],[13,3],13],[[119,11],12],[[[122,[-1,-2,-3]],11],12,[13,118],[13,3],[13,[36,[-2]]]],[[[47,[-1]],11],12,[13,3]],[[[120,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[63,[-1]]],119,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[56,[-1]],[56,[-1]],[33,[-1]],5,-2,[108,[-1,-3]]],[[7,[[34,[[48,[[46,[-1]],[47,[-1]],-1,-3]]]],113]]],3,123,[[36,[-1]]]],[[[120,[-1,-2]]],[[7,[[34,[[48,[[46,[-1]],[47,[-1]],-1,-2]]]],113]]],3,[[36,[-1]]]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[120,[-1,-2]]],[[46,[-1]]],3,[[36,[-1]]]],0,[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[[46,[-1]]],9,3],[[[48,[[46,[-1]],-2,-1,-3]]],9,3,118,[[36,[-1]]]],[119,9],[[[39,[-1]]],9,3],[-1,9,[]],[[[46,[-1]]],9,3],[119,9],[-1,9,[]],[[[46,[-1]]],9,3],[119,9],[[[120,[-1,-2]]],[[7,[[124,[[122,[[47,[-1]],-1,-2]]]],113]]],3,[[36,[-1]]]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[-1,[33,[-2]],5],2,[],[]],[[[46,[-1]],[33,[-1]],5],2,3],[[[48,[[46,[-1]],-2,-1,-3]],[33,[-1]]],2,3,118,[[36,[-1]]]],[[[46,[-1]],[33,[-1]]],[[27,[[56,[-1]]]]],3],0,[[[56,[-1]],[56,[-1]],[33,[-1]],5,[108,[-1,-2]]],[[120,[-1,-2]]],3,[[36,[-1]]]],[[[122,[[47,[-1]],-1,-2]]],27,3,[[36,[-1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[48,[[46,[-1]],-2,-1,-3]],[48,[[46,[-1]],-2,-1,-3]]],9,3,118,[[36,[-1]]]],[[-1,[33,[-2]],[108,[-2,-3]]],[[7,[[2,[-1,-4,[39,[-2]]]],113]]],17,[],[],[]],[[[46,[-1]],[33,[-1]],[108,[-1,-2]]],[[7,[[2,[[46,[-1]],[47,[-1]],[39,[-1]]]],113]]],3,[[36,[-1]]]],[[119,-1],7,28],[[[49,[[48,[[46,[-1]],-2,-1,-3]]]]],5,3,118,[[36,[-1]]]],[-1,119,[]],[[[46,[-1]]],119,3],[[119,[33,[-1]]],[[27,[[63,[-1]]]]],3],[[[46,[-1]],[33,[-1]]],[[34,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[46,[-1]],[33,[-1]]],[[7,[[34,[-1]],116]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[108,[-1,-2]],-3,[53,[-1]]],2,3,[[36,[-1]]],[[126,[[125,[-1,-2]]]]]],[[[108,[-1,-2]],-3,[33,[-1]]],2,3,[[36,[-1]]],[[126,[[125,[-1,-2]]]]]],[[[108,[-1,-2]],-3,-4,[53,[-1]]],2,3,[[36,[-1]]],[[126,[127]]],[[126,[-2]]]],[[[108,[-1,-2]],-3,-4,[33,[-1]]],2,3,[[36,[-1]]],[[126,[127]]],[[126,[-2]]]],[[[128,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-1]]],[[129,[-1]]],[4,3]],[[[128,[-1]]],[[128,[-1]]],[4,3]],[[[108,[-1,-2]]],[[108,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[108,[-1,-2]]],5,3,[[36,[-1]]]],[[[108,[-1,-2]]],[[130,[127,[2,[-2,[70,[-1]]]]]]],3,[[36,[-1]]]],[[],[[108,[-1,-2]]],[101,3],[101,[36,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[129,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[128,[-2]]]]],8,[95,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[108,[-2,-3]]]]],8,[95,3],[95,[36,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[129,[-1]]],5,3],[[[128,[-1]]],5,3],[[[128,[-1]],[53,[-1]],[49,[[54,[-1]]]],[54,[-1]],[54,[-1]]],[[34,[[54,[-1]]]]],3],[[[128,[-1]],[33,[-1]],[56,[-1]],[56,[-1]],[63,[-1]]],[[46,[-1]]],3],[[[128,[-1]],[53,[-1]],[49,[[54,[-1]]]]],[[34,[[54,[-1]]]]],3],[[[128,[-1]],[53,[-1]],[49,[[54,[-1]]]]],[[54,[-1]]],3],[[[129,[-1]],11],12,[13,3]],[[[128,[-1]],11],12,[13,3]],[[[108,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[[[125,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[-1,-1,[]],[[[129,[-1]]],[[128,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-3]]],[[125,[-2,-3]]],[[126,[127]]],3,[[36,[-2]]]],[-1,-1,[]],[[[108,[-1,-2]],[70,[-1]]],[[27,[5]]],3,[[36,[-1]]]],[[[108,[-1,-2]],127],[[27,[5]]],3,[[36,[-1]]]],[[[128,[-1]]],9,3],[[[108,[-1,-2]]],9,3,[[36,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[108,[-1,-2]]],9,3,[[36,[-1]]]],[[[108,[-1,-2]]],29,3,[[36,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[108,[-1,-2]],[33,[-1]],[56,[-1]]],[[27,[[2,[-2,[70,[-1]]]]]]],3,[[36,[-1]]]],[[[108,[-1,-2]],127],[[27,[-2]]],3,[[36,[-1]]]],[[[108,[-1,-2]]],5,3,[[36,[-1]]]],[[],[[108,[-1,-2]]],3,[[36,[-1]]]],[[-1,-4],[[125,[-2,-3]]],[[126,[127]]],3,[[36,[-2]]],[[126,[-3]]]],[[[53,[-1]],[34,[-3]]],[[108,[-1,-2]]],3,[[36,[-1]]],[[126,[[125,[-1,-2]]]]]],[[[33,[-1]],[34,[-3]]],[[108,[-1,-2]]],3,[[36,[-1]]],[[126,[[125,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[129,[-1]],-2],7,3,28],[[[128,[-1]],-2],7,[96,3],28],[[[108,[-1,-2]],-3],7,[96,3],[96,[36,[-1]]],28],[[[129,[-1]],[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3],[[[128,[-1]],[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3],[[[128,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]],[42,[-1]],[42,[-1]]],[[7,[[34,[[42,[-1]]]],44]]],3,[[45,[-1]]]],[[[128,[-1]],-2,[41,[-1]],[33,[-1]],[49,[[42,[-1]]]],[42,[-1]],[50,[-1]],57],[[7,[[2,[[42,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[[[128,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[34,[[42,[-1]]]],44]]],3,[[45,[-1]]]],[[[128,[-1]],-2,[90,[-1]],[53,[-1]],57,[49,[[42,[-1]]]]],[[7,[[42,[-1]],44]]],3,[[45,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[131,[-1]],-2,[33,[-1]]],[[7,[[2,[[43,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[[-2,[33,[-1]]],[[7,[[2,[[43,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[[-2,[27,[[131,[-1]]]],[33,[-1]]],[[7,[[2,[[43,[-1]],[42,[-1]],[50,[-1]]]],44]]],3,[[45,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[132,[-1]]],[[132,[-1]]],[4,3]],[[[131,[-1]]],[[131,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[132,[-1]],[132,[-1]]],9,[10,3]],[[[131,[-1]],[131,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[132,[-1]],[33,[-1]],87,-2],[[88,[2]]],3,89],[[[132,[-1]],11],12,[13,3]],[[[131,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[[131,[-1]],-2],2,3,19],[[-2,[33,[-1]],[42,[-1]],[50,[-1]]],[[7,[[43,[-1]],44]]],3,[[45,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[133,133],[[[134,[-1]]],[[134,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[134,[-1]],[134,[-1]]],26,3],[[-1,-2],26,[],[]],[[],133],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[133]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[134,[-2]]]]],8,3],[5,2],[5,2],[[133,133],9],[[[134,[-1]],[134,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[133,11],12],[[133,11],12],[[[134,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[49,[135]]],[[27,[-1]]],[]],[136,-1,[]],[86,-1,[]],[137,-1,[]],[138,-1,[]],[139,-1,[]],[140,-1,[]],[141,-1,[]],[15,-1,[]],[-1,133,[]],[[-1,-2],15,[16,17],18],[[[134,[-1]],-2],2,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,29,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],-1,[]],[[],-1,[]],[[[134,[-1]],[134,[-1]]],[[27,[26]]],3],[[]],[[]],[[133,-1],7,28],[[[134,[-1]],-2],7,3,28],[-1,[[34,[135]]],[]],[-1,[[27,[136]]],[]],[-1,[[27,[86]]],[]],[-1,[[27,[137]]],[]],[-1,[[27,[138]]],[]],[-1,[[27,[139]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[133,[[27,[73]]]],[-1,29,[]],[-1,[[27,[142]]],[]],[-1,142,[]],[-1,[[27,[140]]],[]],[-1,[[27,[141]]],[]],[-1,141,[]],[-1,[[27,[15]]],[]],[-1,15,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[],[[49,[133]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[111,[-1]]],[[144,[-1,143]]],3],[[[111,[-1]]],[[144,[-1,145]]],3],[[[111,[-1]]],[[144,[-1,146]]],3],[[[111,[-1]]],[[144,[-1,147]]],3],[[[148,[-1]],[49,[-1]]],[[2,[[34,[-1]],-1]]],3],[149,149],[[[111,[-1]]],[[111,[-1]]],[4,3]],[[[109,[-1]]],[[109,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[109,[-1]],[65,[-1]]],-1,3],[[[111,[-1]],149],[[148,[-1]]],3],0,0,[[],[[111,[-1]]],3],[[],[[109,[-1]]],[101,3]],[[],[[110,[-1]]],[101,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[149,11],12],[[[148,[-1]],11],12,[13,3]],[[[111,[-1]],11],12,[13,3]],[[[109,[-1]],11],12,[13,3]],[[[110,[-1]],11],12,[13,3]],[-1,-1,[]],[5,149],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[110,[-1]],[134,[-1]]],[[27,[[65,[-1]]]]],3],[[[109,[-1]],[65,[-1]]],-1,3],[[[109,[-1]],[65,[-1]]],-1,3],[[[109,[-1]],[65,[-1]]],-1,3],[[[109,[-1]],[65,[-1]]],-1,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[[110,[-1]],[134,[-1]],[65,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[65,[-2]]],[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[150,[-1,-2,-3]],[33,[-3]]],2,[151,101,118,152,13],118,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[153,[-1]],[33,[-1]],[56,[-1]]],[[71,[[2,[[56,[-1]],[56,[-1]]]],116]]],3],[[[155,[[154,[-1]]]],[33,[-1]],[56,[-1]]],[[71,[[2,[[56,[-1]],[56,[-1]]]],116]]],3],[[[156,[-1]],67,[33,[-1]],[56,[-1]]],[[71,[[2,[[56,[-1]],[56,[-1]]]],116]]],3],[[[150,[67,[154,[-1]],-1]],67,[33,[-1]],[56,[-1]]],[[71,[[2,[[56,[-1]],[56,[-1]]]],116]]],3],[[[156,[-1]],67,[33,[-1]],[56,[-1]]],[[71,[[2,[[56,[-1]],[56,[-1]]]],113]]],3],[[[150,[67,[154,[-1]],-1]],67,[33,[-1]],[56,[-1]]],[[71,[[2,[[56,[-1]],[56,[-1]]]],113]]],3],0,0,[[[157,[-1,-3,-2]],[33,[-2]],[148,[-2]]],[[158,[-2]]],151,3,[[159,[-2]]]],0,0,0,[[[155,[-1]]],[[155,[-1]]],4],[[[154,[-1]]],[[154,[-1]]],[4,3]],[[[160,[-1]]],[[160,[-1]]],[4,3]],[[[161,[-1]]],[[161,[-1]]],[4,3]],[[[162,[-1]]],[[162,[-1]]],[4,3]],[67,67],[68,68],[[[150,[-1,-2,-3]]],[[150,[-1,-2,-3]]],[4,151],4,[4,3]],[[[157,[-1,-3,-2]]],[[157,[-1,-3,-2]]],[4,151],[4,3],[4,[159,[-2]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[153,[-1]],[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[155,[[154,[-1]]]],[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],0,0,[[[156,[-1]],67,[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[150,[67,[154,[-1]],-1]],67,[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],0,0,0,[[],67],[[],68],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[155,[-1]],[155,[-1]]],9,10],[[[154,[-1]],[154,[-1]]],9,[10,3]],[[[162,[-1]],[162,[-1]]],9,[10,3]],[[67,67],9],[[68,68],9],[[[150,[-1,-2,-3]],[150,[-1,-2,-3]]],9,[10,151],10,[10,3]],[[[157,[-1,-3,-2]],[157,[-1,-3,-2]]],9,[10,151],[10,3],[10,[159,[-2]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[156,[-1]],67,[56,[-1]],[56,[-1]],[56,[-1]],[33,[-1]]],[[56,[-1]]],3],[[[150,[67,[154,[-1]],-1]],67,[56,[-1]],[56,[-1]],[56,[-1]],[33,[-1]]],[[56,[-1]]],3],[[[163,[-1]],[33,[-1]],[63,[-1]]],[[27,[[69,[-1]]]]],3],[[[155,[[162,[-1]]]],[33,[-1]],[63,[-1]]],[[27,[[69,[-1]]]]],3],[[[164,[-1]],68,[33,[-1]],[63,[-1]]],[[27,[[69,[-1]]]]],3],[[[150,[68,[162,[-1]],-1]],68,[33,[-1]],[63,[-1]]],[[27,[[69,[-1]]]]],3],[[[155,[-1]],11],12,13],[[[154,[-1]],11],12,[13,3]],[[[160,[-1]],11],12,[13,3]],[[[161,[-1]],11],12,[13,3]],[[[162,[-1]],11],12,[13,3]],[[67,11],12],[[68,11],12],[[[150,[-1,-2,-3]],11],12,[13,151],13,[13,3]],[[[157,[-1,-3,-2]],11],12,[13,151],[13,3],[13,[159,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[150,[-1,-3,-2]]],[[157,[-1,-3,-2]]],151,3,[[159,[-2]]]],[-1,-1,[]],[[[150,[-1,-2,-3]],-1],[[155,[-2]]],[151,101,118,152,13],118,3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[67,-1],2,19],[[68,-1],2,19],0,0,0,[-1,5,[]],[67,5],[68,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[163,[-1]],[33,[-1]],[69,[-1]]],[[63,[-1]]],3],[[[155,[[162,[-1]]]],[33,[-1]],[69,[-1]]],[[63,[-1]]],3],[[[164,[-1]],68,[33,[-1]],[69,[-1]]],[[63,[-1]]],3],[[[150,[68,[162,[-1]],-1]],68,[33,[-1]],[69,[-1]]],[[63,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[157,[-1,-3,-2]],[33,[-2]]],[[34,[[2,[-1,27]]]]],151,3,[[159,[-2]]]],0,0,0,[[],[[150,[-1,-2,-3]]],[151,101,118,152,13],118,3],[[],[[150,[-1,-2,-3]]],[151,101,118,152,13],118,3],[[[155,[-1]]],[[150,[-2,-1,-3]]],118,[151,101,118,152,13],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[165,[-2]]],[],[]],[[-1,[33,[-2]]],[[71,[[165,[-2]]]]],[],[]],[[[154,[-1]],[33,[-1]]],[[71,[[165,[-1]]]]],3],[[[160,[-1]]],[[165,[-1]]],3],[[[161,[-1]]],[[165,[-1]]],3],[[[162,[-1]],[33,[-1]]],[[71,[[165,[-1]]]]],3],0,0,0,[[[153,[-1]],[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[155,[[154,[-1]]]],[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[156,[-1]],67,[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[150,[67,[154,[-1]],-1]],67,[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[150,[-1,-2,-3]]],5,[151,101,118,152,13],118,3],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[33,[-2]]],27,[],[]],[[[155,[-2]],[33,[-1]]],27,3,[[159,[-1]]]],[[[154,[-1]],[33,[-1]]],27,3],[[[162,[-1]],[33,[-1]]],27,3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[166,-2,[53,[-1]]],[[71,[[90,[-1]],44]]],3,[[45,[-1]]]],[[166,[49,[0]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[166,[49,[[54,[-1]]]],[53,[-1]],[167,[-1]],[34,[[54,[-1]]]],[108,[-1,-2]],5],[[71,[[2,[[168,[-1]],0]]]]],3,[[36,[-1]]]],[[166,[49,[[54,[-1]]]],[53,[-1]],[108,[-1,-2]],5],[[71,[[168,[-1]]]]],3,[[36,[-1]]]],[166,[[71,[2]]]],0,[166,166],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[170]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[166,166],9],[[169,169],9],[[170,170],9],[[171,171],9],[[172,172],9],[[173,173],9],[[174,174],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[166,11],12],[[169,11],12],[[169,11],12],[[170,11],12],[[170,11],12],[[171,11],12],[[172,11],12],[[173,11],12],[[174,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[170]]],3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[169,-1],2,19],[[170,-1],2,19],[[171,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[169,175],0,[[29,[34,[169]],5,172],[[71,[166]]]],[55,169],[[166,[53,[-1]]],5,3],[166,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[170,-1],7,28],0,0,[[166,-2,[53,[-1]],[168,[-1]],[90,[-1]],[0,[[176,[-1]]]],[108,[-1,-3]],[27,[[49,[[38,[[177,[-1]]]]]]]]],[[71,[[34,[[42,[-1]]]]]]],3,[[45,[-1]]],[[36,[-1]]]],[[166,-2,[53,[-1]],[168,[-1]],[108,[-1,-3]]],[[71,[2]]],3,[[45,[-1]]],[[36,[-1]]]],[170,-1,3],[170,-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[171,[53,[-1]]],[[54,[-1]]],3],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[140,[[71,[170]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[166,5],[[71,[166]]]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[176,[-1]]],[[176,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[],[[90,[-1]]],[101,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[90,[-1]],-2,-1],[[71,[[42,[-1]]]]],3,61],[[[90,[-1]],[54,[-1]],[53,[-1]]],[[71,[[42,[-1]]]]],3],[[[90,[-1]],-1],[[71,[[43,[-1]]]]],3],[[[90,[-1]],-2],[[71,[[43,[-1]]]]],3,61],[[[90,[-1]],-2],[[71,[[43,[-1]]]]],3,61],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[90,[-1]],-2,-1],2,3,[[45,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],166],[[[27,[[2,[166,[108,[-1,-2]]]]]],[54,[-1]],[53,[-1]],5],[[71,[[2,[[34,[[168,[-1]]]],5]]]]],3,[[36,[-1]]]],[[[27,[[2,[166,[108,[-1,-2]]]]]],[54,[-1]],[53,[-1]],5],[[71,[[2,[[34,[[54,[-1]]]],5,[34,[[54,[-1]]]]]]]]],3,[[36,[-1]]]],[[[27,[[2,[166,[108,[-1,-2]]]]]],[54,[-1]],[54,[-1]],[53,[-1]],5],[[71,[[2,[[34,[[54,[-1]]]],5,[34,[[54,[-1]]]]]]]]],3,[[36,[-1]]]],[[[27,[[2,[166,[108,[-1,-2]]]]]],[54,[-1]],[54,[-1]],[53,[-1]],5],[[71,[[2,[[34,[[168,[-1]]]],5]]]]],3,[[36,[-1]]]],[[[27,[[2,[166,[108,[-1,-2]]]]]],[54,[-1]],[54,[-1]],[54,[-1]],[53,[-1]],5],[[71,[[2,[[34,[[168,[-1]]]],5]]]]],3,[[36,[-1]]]],[[[108,[-1,-2]]],[[38,[[49,[166]]]]],3,[[36,[-1]]]],[[[108,[-1,-2]],9],166,3,[[36,[-1]]]],0,0,0,0,0,0,[166,[[167,[-1]]],3],[[166,5],[[168,[-1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[179,[-1]]],[[179,[-1]]],[4,3]],[[[167,[-1]]],[[167,[-1]]],[4,3]],[[[168,[-1]]],[[168,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[],[[167,[-1]]],[101,3]],[[],[[168,[-1]]],[101,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],0,[[[167,[-1]],11],12,[13,3]],[[[168,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[[],5],[[],5],[[[168,[-1]]],[],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[166,[[167,[-1]]],3],[[[168,[-1]]],[],3],0,0,[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[180,[-1,-2]]],5,3,[[36,[-1]]]],[[[180,[-1,-2]]],5,3,[[36,[-1]]]],[[[38,[[37,[-1,-2]]]],[39,[-1]],5],[[180,[-1,-2]]],3,[[36,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[180,[-1,-2]]],[[27,[[181,[-1]]]]],3,[[36,[-1]]]],[[[180,[-1,-2]]],5,3,[[36,[-1]]]],[[[180,[-1,-2]]],[[180,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[[[180,[-1,-2]],[53,[-1]]],[[181,[-1]]],3,[[36,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[53,[-1]]],[[34,[[54,[-1]]]]],3],[[[180,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[[[180,[-1,-2]]],[[27,[34]]],3,[[36,[-1]]]],[-1,-1,[]],[[5,[49,[[168,[-1]]]],[38,[[37,[-1,-2]]]]],[[34,[[180,[-1,-2]]]]],3,[[36,[-1]]]],[[-1,5,[108,[-2,-3]]],[[71,[34,115]]],123,3,[[36,[-2]]]],[[],5],[-1,-2,[],[]],[[],[[34,[-1]]],3],[[],[[7,[24,25]]]],[[5,27,[38,[[37,[-1,-2]]]],[39,[-1]]],[[180,[-1,-2]]],3,[[36,[-1]]]],[[[180,[-1,-2]]],5,[182,3],[[36,[-1]]]],[[[180,[-1,-2]]],27,3,[[36,[-1]]]],[[]],[[[180,[-1,-2]],[180,[-1,-2]]],9,3,[[36,[-1]]]],[[[180,[-1,-2]],5],[[180,[-1,-2]]],[182,3],[[36,[-1]]]],[[[180,[-1,-2]]],5,3,[[36,[-1]]]],[[[180,[-1,-2]]],[[34,[-1]]],3,[[36,[-1]]]],[[[180,[-1,-2]]],5,3,[[36,[-1]]]],[[[180,[-1,-2]]],[[183,[-1]]],[182,3],[[36,[-1]]]],[49,5],[[[180,[-1,-2]],-3],[[71,[2,44]]],3,[[36,[-1]]],[[45,[-1]]]],[[[180,[-1,-2]],-3,[49,[[43,[-1]]]]],[[71,[[34,[[43,[-1]]]],44]]],3,[[36,[-1]]],[[45,[-1]]]],[[[180,[-1,-2]],-3,[27,[[43,[-1]]]],[49,[[43,[-1]]]]],[[71,[[2,[[27,[[43,[-1]]]],[34,[[43,[-1]]]]]],44]]],3,[[36,[-1]]],[[45,[-1]]]],[[[180,[-1,-2]],-3,49],[[71,[44]]],3,[[36,[-1]]],[[45,[-1]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[54,[-1]],170],[[54,[-1]]],3],[136,[[54,[-1]]],3],[[[54,[-1]]],[[54,[-1]]],[4,3]],[[-1,-2],2,[],[]],[-1,[[54,[-1]]],3],[[[54,[-1]],[53,[-1]]],29,3],[5,-1,[]],[5,-1,[]],[-1,[[7,[[54,[-2]]]]],8,[95,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[],[[184,[-1]]],3],[[],[[54,[-1]]],3],[[[54,[-1]],[54,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[54,[-1]],11],12,[13,3]],[[[54,[-1]],[53,[-1]],87],29,3],[-1,-1,[]],[[[54,[-1]]],[[27,[-1]]],3],[[-1,-2],15,[16,17],18],[[[54,[-1]]],[[27,[5]]],3],[[[54,[-1]]],[[27,[5]]],3],[[[54,[-1]]],[[27,[5]]],3],[[[54,[-1]],-2],2,3,19],[[],5],[-1,-2,[],[]],[[[54,[-1]]],9,3],[[[54,[-1]]],9,3],[[[54,[-1]]],9,3],[[],[[7,[24,25]]]],[-1,[[54,[-1]]],3],[15,[[54,[-1]]],3],[[]],[[[54,[-1]],-2],7,[96,3],28],[[[54,[-1]]],170,3],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[15,[[54,[-1]]],3],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[170,[[54,[-1]]],3],0,[[[53,[-1]],-1,-1,[54,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1]],[54,[-1]]],[[71,[[2,[[54,[-1]],[54,[-1]]]]]]],3],[[[53,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[53,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[53,[-1]]],[[54,[-1]]],3],[[[53,[-1]]],[[54,[-1]]],3],[[[53,[-1]]],[[54,[-1]]],3],[[],[[53,[-1]]],3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[53,[-1]],5],[[2,[[54,[-1]],[54,[-1]]]]],3],[[[53,[-1]],5],[[2,[[54,[-1]],[54,[-1]],[54,[-1]]]]],3],[[[53,[-1]],5],[[2,[[54,[-1]],[54,[-1]],[54,[-1]],[54,[-1]]]]],3],[[[53,[-1]],5],[[27,[[2,[[54,[-1]],[54,[-1]]]]]]],3],[[[53,[-1]],5],[[27,[[2,[[54,[-1]],[54,[-1]],[54,[-1]]]]]]],3],[[[53,[-1]],5],[[27,[[2,[[54,[-1]],[54,[-1]],[54,[-1]],[54,[-1]]]]]]],3],[[[53,[-1]],[54,[-1]]],[[27,[127]]],3],[[[53,[-1]],[54,[-1]]],[[27,[[2,[[34,[[54,[-1]]]],[27,[[54,[-1]]]]]]]]],3],[[[53,[-1]],[54,[-1]]],[[27,[29]]],3],[[[53,[-1]],[54,[-1]]],[[27,[127]]],3],[[[53,[-1]],[54,[-1]]],[[27,[127]]],3],[[[53,[-1]],5],[[27,[[34,[29]]]]],3],[[[53,[-1]],11],12,[13,3]],[-1,-1,[]],[[[53,[-1]]],[],3],0,0,0,0,[[[53,[-1]],[54,[-1]]],[[184,[-1]]],3],[[[53,[-1]],-1,[54,[-1]]],[[54,[-1]]],3],[[[53,[-1]],-1,[54,[-1]]],[[2,[-1,[184,[-1]]]]],3],[[[53,[-1]]],2,3],[[[53,[-1]]],2,3],[[[53,[-1]],[34,[[54,[-1]]]],[54,[-1]]],[[54,[-1]]],3],[[],5],[[[53,[-1]]],[],3],[[[53,[-1]],170,[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[53,[-1]],170,[54,[-1]],[54,[-1]],[184,[-1]]],[[54,[-1]]],3],[[[53,[-1]],170,[54,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[53,[-1]],170,[54,[-1]],[54,[-1]],[54,[-1]],[184,[-1]]],[[54,[-1]]],3],[[[53,[-1]],170,[54,[-1]],[54,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[53,[-1]],170,[54,[-1]],[54,[-1]],[54,[-1]],[54,[-1]],[184,[-1]]],[[54,[-1]]],3],[[[53,[-1]],[54,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[53,[-1]],55],[[54,[-1]]],3],[[[53,[-1]]],[[54,[-1]]],3],[[[53,[-1]],55],[[54,[-1]]],3],[[[53,[-1]],127],[[54,[-1]]],3],[[[53,[-1]],[49,[29]]],[[54,[-1]]],3],[[[53,[-1]],[185,[-1]]],[[54,[-1]]],3],[[[53,[-1]],55],[[54,[-1]]],3],[-1,-2,[],[]],0,[[[53,[-1]],55],[[54,[-1]]],3],[[],[[7,[24,25]]]],[[[53,[-1]],[34,[[54,[-1]]]]],[[54,[-1]]],3],[[[53,[-1]],-1],[[27,[[2,[-1,[54,[-1]]]]]]],3],[[]],0,[[[53,[-1]],[54,[-1]],[54,[-1]]],9,3],[[[53,[-1]]],9,3],[[[53,[-1]],[107,[[106,[87]]]],55],[[71,[[54,[-1]]]]],3],[[[53,[-1]],55],71,3],[[[53,[-1]],[107,[[106,[87]]]],55],[[71,[[2,[5,186,[54,[-1]],9]],187]]],3],[[[53,[-1]],55],[[71,[[54,[-1]]]]],3],[[[53,[-1]],[49,[[54,[-1]]]]],[[34,[-1]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[188,11],12],[[188,189],29],[-1,-1,[]],[[188,[49,[189]]],[[71,[2]]]],[[],5],[[188,-1],189,[[126,[29]]]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[188,189],[189,188],[[]],[[188,55],[[27,[189]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[188,188],[[71,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,112,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[187,187],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,[[187,11],12],[[187,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,[190,55],[-1,-2,[],[]],[-1,-2,[],[]],[190,190],[[-1,-2],2,[],[]],[190,136],[[190,186],[[191,[-1,[34,[135]]]]],3],[[],190],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[190,-1],29,[[192,[[49,[135]]]]]],[[190,190],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[190,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[190,136],9],[[],[[7,[24,25]]]],[[],[[0,[123]]]],[186,[[191,[-1,190]]],3],[[],[[0,[123]]]],[[],[[0,[123]]]],[190,[[0,[123]]]],[[],[[0,[123]]]],[190,[[31,[123]]]],[190,[[0,[123]]]],[[],[[0,[123]]]],[[]],[190,141],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,55,[193,[-1,-2]]],[[193,[-1,-2]]],[194,4,195],3],[[-1,196,[193,[-1,-2]]],[[193,[-1,-2]]],[194,4,195],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[197,[-1]]],[[197,[-1]]],[4,3]],[[[193,[-1,-2]]],[[193,[-1,-2]]],[4,195],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[197,[-1]],[197,[-1]]],9,[10,3]],[[[193,[-1,-2]],[193,[-1,-2]]],9,[10,195],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[[197,[-1]],11],12,3],[[[197,[-1]],11],12,[13,3]],[[[193,[186,-1]],11],12,3],[[[193,[-1,-2]],11],12,[13,195],[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,196],[[193,[-1,-2]]],[194,4,195],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[197,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[198,[-1,-2,[193,[-1,-3]]]],-4],[[198,[-1,-2,[193,[-1,-3]]]]],195,[],3,123],[[-1,[197,[-2]]],[[193,[-1,-2]]],195,3],[[[27,[-1]],-2,[197,[-3]]],[[198,[-2,-1,[193,[-2,-3]]]]],[],195,3],[[[193,[-1,-2]],[193,[-1,-2]]],[[193,[-1,-2]]],[194,4,195],3],[[]],[[]],[[[7,[-1,-2]],-3,-4],[[198,[-3,-1,[193,[-3,-5]]]]],[],[],195,123,3],[[-1,[197,[-2]]],[[198,[-1,-3,[193,[-1,-2]]]]],195,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[199,199],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[199,199],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[199,11],12],[-1,-1,[]],[[186,186],199],[199,[[27,[5]]]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[55,5,5,5,5],29],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[200,200],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[200,200],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[200,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[136,55],[[0,[123]]]],[[],[[0,[123]]]],[[136,9,55],[[0,[123]]]],[[136,9,55],[[0,[123]]]],[136,[[0,[123]]]],[[136,9,55],[[0,[123]]]],[[136,9,55],[[0,[123]]]],[[],[[0,[123]]]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[107,[[106,[87]]]],9],[[0,[123]]]],[[],[[0,[123]]]],[[],[[0,[123]]]],[186,[[191,[-1,186]]],3],[[[107,[[106,[87]]]],9,9],[[0,[123]]]],[[[107,[[106,[87]]]],9],[[0,[123]]]],[[],[[0,[123]]]],[190,[[0,[123]]]],[[[107,[[106,[87]]]],9],[[0,[123]]]],[[[107,[[106,[87]]]],9],[[0,[123]]]],[[[107,[[106,[87]]]],9],[[0,[123]]]],[[[107,[[106,[87]]]],9],[[0,[123]]]],[186,[[191,[-1,[34,[186]]]]],3],[186,[[191,[-1,[34,[186]]]]],3],[[],[[0,[123]]]],[[[107,[[106,[87]]]],9],[[0,[123]]]],[55,[[0,[123]]]],[55,[[0,[123]]]],[[],[[0,[123]]]],[[[107,[[106,[87]]]],9,9],[[0,[123]]]],[[],[[0,[123]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[38,[[37,[-1,-2]]]],[39,[-1]],5],-3,[],[],[]],[-1,[[27,[[181,[-2]]]]],[],[]],[-1,[[181,[-2]]],[],[]],[-1,-2,[],[]],[[],34],[-1,-2,[],[]],[[-1,5],5,[]],[-1,-2,[],[]],[[-1,5],5,[]],[-1,[[27,[34]]],[]],[[5,49,[38,[[37,[-1,-2]]]]],[[34,[-3]]],[],[],[]],[-1,[],[]],[[-1,5,[108,[-2,-3]]],[[7,[34,115]]],123,[],[]],[[-1,[56,[-2]],[56,[-2]],[33,[-2]],5,[38,[[108,[-2,-3]]]]],[[7,[[34,[[48,[[46,[-2]],[47,[-2]],-2,-3]]]],115]]],[],[],[]],[-1,2,[]],[-1,[],[]],[-1,[],[]],[[],[[34,[-1]]],[]],[-1,[[108,[-2,-3]]],[],[],[]],[[5,27,[38,[[37,[-1,-2]]]],[39,[-1]]],-3,[],[],[]],[[-1,5],5,[]],[[-1,5],9,[]],[[-1,5],9,[]],[[5,[108,[-1,-2]]],-3,[],[],[]],0,[[-1,[49,[-2]]],[[7,[[34,[[2,[-2,[201,[-3]]]]]],44]]],[],[],[]],[-1,[],[]],[-1,27,[]],[[-1,-1],9,[]],[-1,9,[]],[-1,5,[]],[-1,[[34,[-2]]],[],[]],[[-1,55],7,[]],[-1,5,[]],[-1,5,[]],[49,5],0,[[-1,-3,49],[[7,[44]]],[],[],[[45,[-2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[38,[[108,[-1,-2]]]]],-1,182,[[36,[-1]]]],[[5,[38,[[108,[-1,-2]]]]],[[2,[-3,[202,[-1]]]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[[[204,[-1,-2]]],[[204,[-1,-2]]],[182,4],[4,[205,[-1]]]],[[-1,-2],2,[],[]],[[[206,[-1,-2,-3]],[204,[-1,-3]]],[[7,[[206,[-1,-2,-3]],115]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[204,[-2,-3]]]]],8,182,[[205,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[206,[-2,-3,-4]]]]],8,182,[[36,[-2]]],[[203,[-2,-3]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[204,[-1,-2]],-3],[[88,[2]]],182,[[205,[-1]]],89],[[[207,[-1,-2,-3]],[204,[-1,-3]],5,[38,[[108,[-1,-2]]]]],[[7,[[2,[[206,[-1,-2,-3]],[34,[-1]],[34,[-1]],5]],115]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[[[204,[-1,-2]],[49,[135]]],[[27,[[49,[135]]]]],182,[[205,[-1]]]],[[[204,[-1,-2]]],5,182,[[205,[-1]]]],[[[207,[-1,-2,-3]],11],12,[13,182],[13,[36,[-1]]],[13,[203,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[207,[-1,-2,-3]]],[[108,[-1,-2]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[108,[-1,-2]]],[[207,[-1,-2,-3]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[[]],[[]],[[]],[[[207,[-1,-2,-3]],[204,[-1,-3]],49,[38,[[108,[-1,-2]]]]],[[7,[[2,[[206,[-1,-2,-3]],[34,[-1]],[34,[-1]],5]],115]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[[[204,[-1,-3]],[49,[-3]],5,[34,[-1]],[38,[[108,[-1,-2]]]]],[[7,[[206,[-1,-2,-3]],115]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[[5,[38,[[108,[-1,-2]]]]],[[204,[-1,-3]]],182,[[36,[-1]]],[[205,[-1]],[203,[-1,-2]]]],[[[207,[-1,-2,-3]]],5,182,[[36,[-1]]],[[203,[-1,-2]]]],[[[204,[-1,-2]],-3],7,182,[[205,[-1]]],28],[[[206,[-1,-2,-3]],-4],7,182,[[36,[-1]]],[[203,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[206,[-1,-2,-3]],[204,[-1,-3]],5,[49,[-1]],[49,[-1]]],[[7,[9,117]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[38,[[108,[-1,-2]]]],5],-1,182,[[36,[-1]]]],[[5,[38,[[108,[-1,-2]]]]],[[209,[[208,[-1]]]]],182,[[36,[-1]]]],[[[37,[-1,-2]],[39,[-1]]],5,3,[[36,[-1]]]],0,[[[37,[-1,-2]]],[[37,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[210,[-2,-3,-4]]]]],8,[95,182],[[36,[-2]]],[[203,[-2,-3]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[[211,[-1,-2]]],-1,182,[[212,[-1]]]],[5,2],[5,2],[5,2],[5,2],[[[213,[-1,-2,-3]],[211,[-1,-3]],5,[38,[[108,[-1,-2]]]]],[[7,[[2,[[210,[-1,-2,-3]],[34,[-1]],[34,[-1]],5,5]],115]]],182,[[36,[-1]]],[]],[[[213,[-1,-2,-3]],11],12,[13,182],[13,[36,[-1]]],[13,[203,[-1,-2]]]],[[[37,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[211,[-1,-2]],5],[],182,[[212,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[213,[-1,-2,-3]]],[[108,[-1,-2]]],182,[[36,[-1]]],[[203,[-1,-2]],[212,[-1]]]],[[[37,[-1,-2]]],[[38,[[108,[-1,-2]]]]],3,[[36,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[108,[-1,-2]]],[[213,[-1,-2,-3]]],182,[[36,[-1]]],[[203,[-1,-2]],[212,[-1]]]],[[[38,[[108,[-1,-2]]]],5],[[37,[-1,-2]]],3,[[36,[-1]]]],[[[38,[[108,[-1,-2]]]],5],[[37,[-1,-2]]],3,[[36,[-1]]]],[[[37,[-1,-2]]],5,3,[[36,[-1]]]],[[]],[[]],[[]],[[]],0,[[[213,[-1,-2,-3]],[211,[-1,-3]],49,[38,[[108,[-1,-2]]]]],[[7,[[2,[[210,[-1,-2,-3]],[34,[-1]],[34,[-1]],5,5]],115]]],182,[[36,[-1]]],[]],[[[211,[-1,-3]],[49,[-3]],[34,[-1]]],[[7,[[2,[[210,[-1,-2,-3]],5]],115]]],182,[[36,[-1]]],[]],[[5,[38,[[108,[-1,-2]]]]],[[211,[-1,-3]]],182,[[36,[-1]]],[]],[[[213,[-1,-2,-3]]],5,182,[[36,[-1]]],[[203,[-1,-2]],[212,[-1]]]],[[[37,[-1,-2]]],5,3,[[36,[-1]]]],[[[210,[-1,-2,-3]],-4],7,[96,182],[[36,[-1]]],[[203,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[210,[-1,-2,-3]],[211,[-1,-3]],5,5,[49,[-1]],[49,[-1]]],[[7,[9,214]]],182,[[36,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-2,[33,[-1]],[27,[[56,[-1]]]]],[[7,[[2,[[43,[-1]],[42,[-1]],[42,[-1]],[42,[-1]]]],44]]],3,[[45,[-1]]]],[[-2,[33,[-1]],[27,[[56,[-1]]]]],[[7,[[2,[[43,[-1]],[42,[-1]],[42,[-1]],[42,[-1]]]],44]]],3,[[45,[-1]]]],[[[215,[-1,137]]],[[27,[[215,[-1,137]]]]],3],[[[215,[-1,137]]],[[27,[[215,[-1,137]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[215,[-1,137]],137],[[215,[-1,137]]],3],[216,216],[[[215,[-1,-2]]],[[215,[-1,-2]]],[4,3],[4,61]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[216,216],26],[[-1,-2],26,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[216,216],9],[[[215,[-1,-2]],[215,[-1,-2]]],9,[10,3],[10,61]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[56,[-1]],[33,[-1]],87,-2],[[88,[2]]],3,89],[[[63,[-1]],[33,[-1]],87,-2],[[88,[2]]],3,89],[[216,11],12],[[[215,[-1,-2]],11],12,[13,3],[13,61]],[136,[[56,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[216,-1],2,19],[[[215,[-1,-2]],-3],2,3,61,19],[216,[[27,[5]]]],[[-1,5],[[215,[-2,-1]]],61,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[215,[-1,137]]],9,3],[[[215,[-1,137]]],9,3],[[[63,[-1]]],9,3],[[[215,[-1,86]]],9,3],[-1,9,[]],[[[56,[-1]]],9,3],[[[215,[-1,137]]],9,3],[[[215,[-1,137]]],9,3],[216,9],[216,9],[[[215,[-1,-2]]],9,3,61],[[-1,137],9,[]],[[[56,[-1]],137],9,3],[-1,9,[]],[[[56,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[86,216],[[63,[-1]]],3],[5,216],[[86,216],[[215,[-1,86]]],3],[-1,[[215,[-2,-1]]],61,3],[[-1,5],[[215,[-2,-1]]],61,3],[216,[[27,[5]]]],[[216,216],[[27,[26]]]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[217,[-1,-2,-3]]],[[7,[[38,[[204,[-1,-3]]]],218]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[[[217,[-1,-2,-3]]],[[7,[[219,[-1]],218]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[[[217,[-1,-2,-3]]],[[7,[[220,[-1]],218]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[[[217,[-1,-2,-3]]],[[7,[[211,[-1,-3]],218]]],182,[[36,[-1]]],[]],[[[217,[-1,-2,-3]],-4],[[7,[-5,218]]],182,[[36,[-1]]],[[203,[-1,-2]]],59,[]],0,0,0,0,[-1,112,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[218,11],12],[[218,11],12],[221,218],[222,218],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[218,[[27,[112]]]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[217,[-1,-2,-3]]],[[34,[[217,[-1,-2,-3]]]]],182,[[36,[-1]]],[]],[223,223],[224,224],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[217,[-1,-2,-3]],80],[[88,[225]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[223]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[224]]],8],[5,2],[5,2],[5,2],[[223,223],9],[[224,224],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[217,[-1,-2,-3]],11],12,[13,182],[13,[36,[-1]]],[13,[203,[-1,-2]]]],[[223,11],12],[[224,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[217,[-1,-2,-3]]],29,182,[[36,[-1]]],[[203,[-1,-2]]]],0,0,[[[217,[-1,-2,-3]]],[[38,[[108,[-1,-2]]]]],182,[[36,[-1]]],[[203,[-1,-2]]]],0,0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[38,[[108,[-1,-2]]]],9,223],[[217,[-1,-2,-3]]],182,[[36,[-1]]],[]],[[[217,[-1,-2,-3]],80],[[88,[225]]],182,[[36,[-1]]],[[203,[-1,-2]]]],[[]],[[]],[[]],0,0,[[[217,[-1,-2,-3]],5],[[217,[-1,-2,-3]]],182,[[36,[-1]]],[]],[[223,-1],7,28],[[224,-1],7,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[87,188],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],87],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[87,11],12],[[87,189],29],[-1,-1,[]],[87,189],[[87,[49,[189]]],[[71,[2]]]],[[],5],[[],87],[[],87],[[87,-1],189,[[192,[55]]]],[[87,[49,[-1]],9,9],[[71,[189]]],[[192,[55]]]],[[87,[49,[-1]],9],[[71,[189]]],[[192,[55]]]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[55,127],[[],127],[188,87],[[]],[87,[[107,[[106,[87]]]]]],[[87,55],[[27,[189]]]],[[87,189],[[71,[2]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[87,188],[[71,[2]]]],[55,127],[-1,-2,[],[]],0,0,0,0,[-1,112,[]],[[[33,[-1]],9],[[56,[-1]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[33,[-1]],[56,[-1]]],[[7,[[56,[-1]],116]]],3],0,[[[33,[-1]],[56,[-1]]],[[7,[[2,[[56,[-1]],[56,[-1]]]],116]]],3],[[[33,[-1]],[56,[-1]]],[[7,[[56,[-1]],116]]],3],0,0,[116,116],[[[226,[-1]]],[[226,[-1]]],[4,3]],[[[227,[-1]]],[[227,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[33,[-1]],[56,[-1]]],[[56,[-1]]],3],0,[[[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],0,0,0,0,[[],[[33,[-1]]],3],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],0,[5,2],[5,2],[5,2],[5,2],0,0,0,0,0,[[[33,[-1]]],[[227,[-1]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[132,[-1]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[136]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[2,[[134,[-1]],[56,[-1]]]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[2,[[56,[-1]],[56,[-1]]]]]]],3],[[[33,[-1]],[63,[-1]]],[[27,[[69,[-1]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[2,[[56,[-1]],[56,[-1]],[56,[-1]]]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[127]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[34,[[56,[-1]]]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[127]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[1,[-1]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[2,[[56,[-1]],[56,[-1]]]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[29]]],3],[[[33,[-1]],[56,[-1]]],[[27,[127]]],3],[[[33,[-1]],[56,[-1]]],[[27,[127]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[2,[[56,[-1]],[56,[-1]]]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[131,[-1]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[14]]],3],[[[33,[-1]],[62,[-1]]],[[27,[[63,[-1]]]]],3],[[[33,[-1]],[70,[-1]]],[[27,[[56,[-1]]]]],3],[[[33,[-1]],11],12,[13,3]],[[116,11],12],[[116,11],12],[[[226,[-1]],11],12,[13,3]],[[[227,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[33,[-1]]],[[63,[-1]]],3],[[[33,[-1]]],[[63,[-1]]],3],[[[33,[-1]]],[[63,[-1]]],3],[[[33,[-1]]],[[63,[-1]]],3],[[[33,[-1]],[63,[-1]]],[[27,[[65,[-1]]]]],3],[[[33,[-1]],[131,[-1]]],[[27,[[65,[-1]]]]],3],[[[33,[-1]],137,-1],[[27,[[56,[-1]]]]],3],[[[33,[-1]],-2],[[27,[[56,[-1]]]]],3,[[126,[[1,[-1]]]]]],[[[33,[-1]],[56,[-1]]],[[27,[[70,[-1]]]]],3],[[[33,[-1]],[63,[-1]],[27,[[228,[-1]]]]],[[7,[[2,[[62,[-1]],[27,[[229,[-1]]]]]],116]]],3],[[[33,[-1]],[56,[-1]],[27,[[228,[-1]]]]],[[7,[[2,[[70,[-1]],[27,[[230,[-1]]]]]],116]]],3],0,0,[[[33,[-1]],[63,[-1]]],[[27,[[62,[-1]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[70,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[[33,[-1]],-1,[56,[-1]]],[[27,[[56,[-1]]]]],3],[[[33,[-1]],-1,[56,[-1]]],[[56,[-1]]],3],0,[[[33,[-1]]],2,3],0,0,[-1,[],[]],[[],5],[[],5],[[],5],[[],5],[[[33,[-1]],136],[[56,[-1]]],3],[[[33,[-1]],-1,[56,[-1]]],[[56,[-1]]],3],[[[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[33,[-1]]],[[63,[-1]]],3],[[[33,[-1]]],[[63,[-1]]],3],[[[33,[-1]]],[[63,[-1]]],3],[[[33,[-1]]],[[63,[-1]]],3],[[[33,[-1]],[56,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3],[[[33,[-1]],137,-1],[[56,[-1]]],3],[[[33,[-1]],-1],[[56,[-1]]],3],[[[33,[-1]],-1],[[56,[-1]]],3],[[[33,[-1]],-1],[[56,[-1]]],3],[[[33,[-1]],-1],[[56,[-1]]],3],[[[33,[-1]],-2],[[56,[-1]]],3,[[126,[[1,[-1]]]]]],[[[33,[-1]],-1],[[56,[-1]]],3],[[[33,[-1]],-1],[[56,[-1]]],3],[[[33,[-1]],-1],[[56,[-1]]],3],[[[33,[-1]],-1],[[56,[-1]]],3],[[[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[33,[-1]],55],[[56,[-1]]],3],[[[33,[-1]],127],[[56,[-1]]],3],[[[33,[-1]],[49,[29]]],[[56,[-1]]],3],[[[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],[[[33,[-1]],9],[[56,[-1]]],3],[[[33,[-1]],[185,[-1]]],[[56,[-1]]],3],[[[33,[-1]],[131,[-1]]],[[56,[-1]]],3],[[[33,[-1]],15],[[56,[-1]]],3],[[[33,[-1]],14],[[56,[-1]]],3],[[[33,[-1]],[62,[-1]],[228,[-1]]],[[27,[[63,[-1]]]]],3],[[[33,[-1]],[70,[-1]],[228,[-1]]],[[27,[[56,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[33,[-1]],-2],[[56,[-1]]],3,[[192,[55]]]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,0,0,0,0,0,[[[33,[-1]],[49,[[56,[-1]]]]],[[56,[-1]]],3],0,[[[33,[-1]],[63,[-1]]],[[63,[-1]]],3],0,[[],[[33,[-1]]],3],[[[33,[-1]]],[[227,[-1]]],3],[[[33,[-1]]],[[56,[-1]]],3],0,[[[33,[-1]],-2],[[56,[-1]]],3,[[126,[[1,[-1]]]]]],0,0,0,0,0,[[[33,[-1]],[56,[-1]]],[[27,[[2,[-1,[56,[-1]]]]]]],3],0,[[[33,[-1]],[56,[-1]]],[[7,[[2,[-1,[56,[-1]]]],116]]],3],[[]],[[]],[[]],[[]],0,0,[[[226,[-1]]],[[56,[-1]]],3],[[[33,[-1]],[56,[-1]],[56,[-1]]],[[7,[9,116]]],3],0,0,[[[33,[-1]],55],[[7,[[56,[-1]],187]]],3],[[[33,[-1]],[107,[[106,[87]]]],186],[[7,[[2,[186,[56,[-1]],9]],187]]],3],[[[33,[-1]],[107,[[106,[87]]]],55],[[7,[[56,[-1]],187]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[56,[-1]]]]],3],0,[[[33,[-1]],[56,[-1]]],[[7,[[56,[-1]],116]]],3],[[[33,[-1]],55],[[56,[-1]]],3],0,[[[33,[-1]],[56,[-1]],[56,[-1]]],[[56,[-1]]],3],0,[[[33,[-1]]],[[56,[-1]]],3],0,[[[33,[-1]],-2],[[56,[-1]]],3,[[192,[55]]]],0,[[[33,[-1]]],[[56,[-1]]],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[33,[-1]],[63,[-1]]],[[27,[[229,[-1]]]]],3],[[[33,[-1]],[56,[-1]]],[[27,[[230,[-1]]]]],3],[[[33,[-1]],[56,[-1]]],[[7,[[2,[[228,[-1]],[70,[-1]]]],116]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[[[33,[-1]],15],[[56,[-1]]],3],0,[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[33,[-1]],55],[[56,[-1]]],3],[[[226,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1]],-1,-1],[[7,[[62,[-1]],116]]],3],0,[[[33,[-1]],-1,-1],[[7,[[70,[-1]],116]]],3],0,[[[226,[-1]]],[[70,[-1]]],3],0,0,0,0,0,[[]],[[127,127],[[27,[127]]]],[-1,-2,[],[]],[-1,-2,[],[]],[127,127],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[127]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[127,55],127],[127,[[27,[127]]]],[5,2],[[127,127],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[127,[49,[-1]]],127,[[192,[55]]]],[[127,11],12],[[127,11],12],[55,29],[127,29],[127,29],[-1,-1,[]],[55,127],[55,[[27,[127]]]],[[-1,-2],15,[16,17],18],[[127,127],9],[[127,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[127,9],[127,9],[127,9],[127,9],[136,9],[[[49,[-1]]],127,[[192,[55]]]],[[[34,[29]]],127],[[],[[7,[24,25]]]],[127,[[71,[55]]]],[[[49,[-1]],9],127,[[192,[55]]]],[[[34,[29]],9],127],[[127,127],[[27,[26]]]],[127,[[49,[29]]]],[[]],[127,9],[9,127],[[],127],[[],127],[[127,-1],7,28],[127,2],[[[49,[-1]]],127,[[192,[55]]]],[[[34,[29]]],127],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[185,[-1]]],[[185,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[185,[-1]],[185,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[185,[-1]],11],12,[13,3]],[[[185,[-1]],11],12,3],[-1,-1,[]],[[[185,[-1]]],199,3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[34,[-1]]],[]],[[],[[34,[138]]]],[[],[[34,[139]]]],[[],[[34,[55]]]],[[137,-2],[[43,[-1]]],3,[[45,[-1]]]],[[86,-2],[[43,[-1]]],3,[[45,[-1]]]],[[138,-2],[[43,[-1]]],3,[[45,[-1]]]],[[139,-2],[[43,[-1]]],3,[[45,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[137,137],[86,86],[138,138],[139,139],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[137]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[86]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[138]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[139]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[137,137],9],[[86,86],9],[[138,138],9],[[139,139],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[137,11],12],[[137,11],12],[[86,11],12],[[86,11],12],[[138,11],12],[[138,11],12],[[139,11],12],[[139,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[-2]]],3,[]],[-1,[[27,[137]]],3],[-1,[[27,[86]]],3],[-1,[[27,[138]]],3],[-1,[[27,[139]]],3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[137,-1],2,19],[[86,-1],2,19],[[138,-1],2,19],[[139,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[137,9],[139,9],[[137,137],9],[137,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[138,138],[[27,[26]]]],[[139,139],[[27,[26]]]],[[]],[[]],[[]],[[]],[[137,-1],7,28],[[86,-1],7,28],[[138,-1],7,28],[[139,-1],7,28],[[-1,5],9,[]],[[138,5],9],[[139,5],9],[-1,55,[]],[138,55],[139,55],[-1,-2,[],3],[137,-1,3],[86,-1,3],[138,-1,3],[139,-1,[[231,[15]],232]],[-1,[],[]],[137],[86],[138],[139],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[140,[[7,[137]]]],[-1,[[7,[-2]]],[],[]],[140,[[7,[86]]]],[140,[[7,[138]]]],[-1,[[7,[-2]]],[],[]],[140,[[7,[139]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[14,14],14],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[14]]],8],[[14,14],14],[5,2],[[14,14],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[14,11],12],[[14,11],12],[-1,-1,[]],[15,14],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[14,9],[[],[[7,[24,25]]]],[[14,14],14],[[14,14],[[27,[26]]]],[[]],[[14,14],14],[[14,-1],7,28],[[14,14],14],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,[[-1,[33,[-2]],87,-3],[[88,[2]]],[],[],89],[[-1,[33,[-2]],87],29,[],[]],[[-1,[33,[-2]]],29,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,135],[233,233],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[233,233],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[233,11],12],[[233,11],12],[-1,-1,[]],[[[49,[135]]],[[71,[233]]]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[49,[135]]],[[27,[5]]]],0,[233,135],[135,9],[135,9],[233,[[34,[135]]]],[-1,-2,[],[]],[-1,29,[]],[5,[[34,[135]]]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,112,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,234,21],[-1,234,21],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[234,11],12],[[234,11],12],[-1,-1,[]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],0,[-1,29,[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,55,[49,[55]],-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,55,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,55,[49,[55]],-1],7,236],[[235,5,-1],7,236],[[235,55,5,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,-1],7,236],[[235,55,-1],7,236],[5,2],[[235,11],12],[-1,-1,[]],[233,[[7,[-1,234]]],95],[233,235],[[],5],[-1,-2,[],[]],[235,9],[[],[[7,[24,25]]]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[237,7],[237,7],[237,7],[238,7],[239,7],[240,7],[240,7],[[241,11],12],[[237,11],12],[[238,11],12],[[239,11],12],[[240,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[241,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[[241,9],7],[[241,[49,[135]]],7],[[241,136],7],[[237,-1],[[7,[2]]],[96,17]],[[237,-1],[[7,[2]]],[96,17]],[[241,242],7],[[241,243],7],[[237,-1],[[7,[2]]],[96,17]],[[239,-1],[[7,[2]]],[96,17]],[[240,55,-1],[[7,[2]]],[96,17]],[[240,55,-1],[[7,[2]]],[96,17]],[[241,244],7],[[241,245],7],[[241,246],7],[[241,247],7],[[238,-1],[[7,[2]]],[96,17]],[[241,[27,[5]]],7],[[241,55,-1],7,[96,17]],[[241,55,141,55,-1],7,[96,17]],[241,7],[[241,[27,[5]]],7],[[241,-1],7,[96,17]],[[241,55],7],[[241,55,5],7],[[241,55,141,55,5],7],[[241,5],7],[[241,55,5],7],[[241,55,141,55,5],7],[[241,140],7],[[241,141],7],[[241,15],7],[[241,135],7],[241,7],[[241,55],7],[[241,55,141,55],7],[[238,-1],[[7,[2]]],[96,17]],[-1,[[7,[233,234]]],96],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[229,[-1]]],[[229,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[229,[-2]]]]],8,[95,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[229,[-1]],[229,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[229,[-1]],11],12,[13,3]],[-1,-1,[]],[[[229,[-1]]],[[65,[-1]]],3],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[229,[-1]],-2],7,[96,3],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[229,[-1]],[109,[-1]]],[[62,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[230,[-1]]],[[230,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[230,[-2]]]]],8,[95,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[230,[-1]],[230,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[230,[-1]],11],12,[13,3]],[[[230,[-1]],11],12,3],[-1,-1,[]],[[[33,[-1]],[56,[-1]]],[[27,[[230,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[230,[-1]],-2],7,[96,3],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[230,[-1]],[109,[-1]]],[[70,[-1]]],3],0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[60,[-1,-2]]],[[60,[-1,-2]]],[4,61],[4,3]],[[-1,-2],2,[],[]],[[[60,[-1,-2]],[60,[-1,-2]]],26,61,3],[[-1,-2],26,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[60,[-2,-3]]]]],8,[95,61],[95,3]],[5,2],[[],[[60,[170,-1]]],3],[[[60,[-1,-2]],[60,[-1,-2]]],9,[10,61],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[60,[-1,-2]],11],12,[13,61],[13,3]],[[[60,[-1,-2]],11],12,[61,21],3],[-1,-1,[]],[55,[[7,[[60,[-1,-2]],248]]],61,3],[55,[[7,[[70,[-1]],116]]],3],[55,[[7,[[60,[137,-1]],116]]],3],[[-1,-2],[[60,[-1,-2]]],61,3],[[-1,-2],15,[16,17],18],[[[60,[-1,-2]],-3],2,61,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[60,[-1,-2]]],[[65,[-2]]],61,3],[[],[[7,[24,25]]]],[[[60,[-1,-2]],[60,[-1,-2]]],[[27,[26]]],61,3],[[[60,[-1,-2]]],[[2,[-2,-2]]],61,3],[[]],[[[60,[-1,-2]],-3],7,[96,61],[96,3],28],[[[60,[-1,-2]]],-1,61,3],[[[60,[-1,-2]]],-2,61,3],[[[60,[-1,-2]]],29,61,3],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[[60,[-1,-2]]],-2,61,3],[-1,-2,[],[]],0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[228,[-1]]],[[228,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,[[],[[228,[-1]]],[101,3]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[228,[-2]]]]],8,[95,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[228,[-1]],[228,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[228,[-1]],11],12,[13,3]],[-1,-1,[]],[[[228,[-1]],[62,[-1]]],[[27,[[229,[-1]]]]],3],[[[228,[-1]],[70,[-1]]],[[27,[[230,[-1]]]]],3],[[[70,[-1]]],[[27,[[230,[-1]]]]],3],[[],5],[[[228,[-1]],[70,[-1]],[27,[[230,[-1]]]]],[[27,[[27,[[230,[-1]]]]]]],3],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[228,[-1]]],3],[[[33,[-1]],[56,[-1]]],[[2,[[228,[-1]],[27,[[70,[-1]]]]]]],3],[[[228,[-1]],[109,[-1]]],[[70,[-1]]],3],[[]],[[[228,[-1]],55,[109,[-1]]],[[2,[[70,[-1]],[230,[-1]]]]],3],[[[228,[-1]],127,[109,[-1]]],[[2,[[70,[-1]],[230,[-1]]]]],3],[[[228,[-1]],-2],7,[96,3],28],[-1,-2,[],[]],[[[228,[-1]]],[[33,[-1]]],3],[[[228,[-1]],[70,[-1]]],[[7,[[2,[[33,[-1]],[56,[-1]]]],116]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Num",0],[15,"tuple"],[8,"LurkField",1641],[8,"Clone",4946],[15,"usize"],[3,"With",4947],[4,"Result",4948],[8,"Deserializer",4949],[15,"bool"],[8,"PartialEq",4950],[3,"Formatter",4951],[6,"Result",4951],[8,"Debug",4951],[4,"UInt",4389],[15,"u64"],[8,"Hash",4952],[8,"Sized",4953],[8,"BuildHasher",4952],[8,"Hasher",4952],[3,"IndentedSection",4954],[8,"Display",4951],[8,"Send",4953],[8,"Sync",4953],[3,"Layout",4955],[3,"LayoutError",4955],[4,"Ordering",4950],[4,"Option",4956],[8,"Serializer",4957],[3,"String",4958],[3,"TypeId",4959],[3,"Box",4960],[8,"Any",4959],[3,"Store",3774],[3,"Vec",4961],[3,"CircuitFrame",104],[8,"Coprocessor",715],[4,"FoldingConfig",3377],[3,"Arc",4962],[4,"Meta",1182],[3,"MultiFrame",104],[3,"GlobalAllocations",185],[3,"AllocatedPtr",272],[3,"AllocatedNum",4963],[4,"SynthesisError",4964],[8,"ConstraintSystem",4964],[3,"IO",1182],[3,"Witness",1182],[3,"Frame",1182],[15,"slice"],[3,"AllocatedContPtr",272],[6,"ConsCircuitWitness",1887],[6,"ContCircuitWitness",1887],[3,"Store",2844],[4,"Ptr",2788],[15,"str"],[6,"Ptr",3487],[4,"Boolean",4965],[8,"PrimeField",4966],[8,"FnOnce",4967],[3,"ZPtr",4849],[8,"Tag",4147],[6,"ZContPtr",4849],[6,"ContPtr",3487],[8,"IntoHashComponents",1749],[15,"array"],[8,"AsAllocatedHashComponents",272],[4,"ConsName",1887],[4,"ContName",1887],[4,"Continuation",633],[6,"ZExprPtr",4849],[6,"Result",4968],[4,"Backend",388],[3,"PossibleValue",4969],[3,"Utf8PathBuf",4970],[3,"HashMap",4971],[3,"CliSettings",424],[4,"ConfigError",4972],[6,"Scalar",4973],[3,"Repl",457],[3,"Utf8Path",4970],[4,"Flow",479],[3,"Settings",479],[3,"PerfConfig",479],[3,"ParallelConfig",479],[3,"WitnessGeneration",479],[4,"ContTag",4147],[3,"State",3736],[6,"Result",4974],[8,"Write",4975],[3,"GlobalAllocator",2549],[3,"CircomCoprocessor",735],[8,"CircomGadget",179],[3,"Sha256Coprocessor",773],[4,"Sha256Coproc",773],[8,"Deserialize",4949],[8,"Serialize",4957],[4,"TrieCoproc",845],[3,"NewCoprocessor",845],[3,"LookupCoprocessor",845],[3,"InsertCoprocessor",845],[8,"Default",4976],[3,"Trie",845],[4,"Error",845],[3,"LookupProof",845],[3,"InsertProof",845],[3,"RefCell",4977],[3,"Rc",4978],[3,"Lang",1423],[3,"PoseidonCache",1749],[3,"InversePoseidonCache",1749],[3,"HashConstants",1749],[8,"Error",4979],[4,"ReductionError",1087],[4,"LurkError",1087],[4,"ProofError",1087],[3,"Error",3774],[4,"NovaError",4980],[8,"Copy",4953],[4,"Status",1182],[3,"Evaluator",1182],[3,"Error",4951],[3,"FrameIt",1182],[8,"Fn",4967],[3,"Take",4981],[3,"Binding",1423],[8,"Into",4982],[3,"Symbol",4037],[4,"Coproc",1423],[3,"DummyCoprocessor",1423],[3,"IndexMap",4983],[3,"Thunk",1554],[4,"Expression",1554],[4,"LanguageField",1641],[3,"FWrap",1641],[15,"u8"],[15,"char"],[4,"ExprTag",4147],[4,"Op1",4147],[4,"Op2",4147],[15,"u16"],[15,"u32"],[15,"u128"],[6,"U3",4984],[3,"PoseidonConstants",4985],[6,"U4",4984],[6,"U6",4984],[6,"U8",4984],[4,"HashConst",1749],[4,"HashArity",1749],[3,"HashWitness",1887],[8,"HashName",1887],[8,"Eq",4950],[6,"ConsStub",1887],[3,"Cons",1887],[4,"Stub",1887],[6,"ConsWitness",1887],[3,"CircuitHashWitness",1887],[6,"HashCircuitWitnessBlocks",1887],[8,"ContentAddressed",1887],[3,"ScalarCons",1887],[3,"ScalarCont",1887],[3,"Cont",1887],[6,"ContStub",1887],[6,"ContWitness",1887],[6,"Preimage",1887],[3,"Func",2266],[3,"Hints",2650],[3,"Frame",2650],[3,"Var",2266],[4,"Tag",2266],[4,"Lit",2266],[3,"Block",2266],[4,"Ctrl",2266],[4,"Op",2266],[6,"AString",2266],[4,"AllocatedVal",2549],[3,"SlotWitness",2549],[3,"SlotsAllocations",2549],[4,"Val",2650],[3,"MultiFrame",2740],[3,"WitnessCS",4986],[8,"CurveCycleEquipped",3281],[6,"C2",3377],[6,"ZPtr",2788],[4,"Syntax",4106],[6,"Span",2950],[4,"Error",2950],[3,"Package",2922],[6,"SymbolRef",2922],[4,"LitBase",2991],[6,"ParseResult",2950],[8,"AsRef",4982],[3,"ParseError",3039],[8,"InputLength",4987],[8,"AsBytes",4987],[4,"ErrorKind",4988],[4,"ParseErrorKind",3039],[6,"IResult",4989],[4,"Pos",3123],[4,"StringFragment",3163],[3,"TestConstraintSystem",4990],[6,"C2",3281],[8,"MultiFrameTrait",3223],[3,"PublicParams",3281],[8,"StepCircuit",4991],[4,"Proof",3281],[3,"NovaProver",3281],[6,"G1",3281],[3,"CircuitDigests",4992],[4,"Proof",3377],[3,"PublicParams",3377],[8,"StepCircuit",4993],[3,"SuperNovaProver",3377],[4,"SuperNovaError",4994],[3,"GPtr",3487],[4,"RawPtr",3487],[3,"Instance",3635],[4,"Error",3604],[6,"SuperNovaAuxParams",3377],[6,"NovaCircuitShape",3281],[3,"Error",4974],[3,"Error",4995],[4,"Kind",3635],[3,"Metadata",3635],[3,"File",4996],[3,"ConstantPtrs",3774],[3,"NamedConstants",3774],[3,"ZStore",4901],[4,"ZCont",4715],[4,"ZExpr",4796],[8,"From",4982],[8,"Field",4966],[4,"ZData",4436],[4,"SerdeError",4485],[3,"Deserializer",4518],[8,"Visitor",4949],[3,"SerializeCell",4570],[3,"SerializeMap",4570],[3,"SerializeTupleVariant",4570],[3,"StructSerializer",4570],[3,"Serializer",4570],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"Error",4968],[8,"ToInputs",99],[13,"Let",683],[13,"LetRec",683],[13,"Call0",683],[13,"Call",683],[13,"Call2",683],[13,"Tail",683],[13,"Lookup",683],[13,"Unop",683],[13,"Binop",683],[13,"Binop2",683],[13,"If",683],[13,"Emit",683],[8,"CoCircuit",715],[6,"ChildMap",845],[8,"Evaluable",1182],[8,"CAddr",1887],[13,"Pos",3157],[8,"EvaluationStore",3223],[8,"FrameLike",3223],[8,"Prover",3223],[8,"CEKState",3223],[8,"Provable",3223],[6,"SuperNovaPublicParams",3377],[8,"TypePredicates",3487],[8,"Op",4147],[8,"Write",4432],[13,"Let",4764],[13,"LetRec",4764],[13,"Call0",4764],[13,"Call",4764],[13,"Call2",4764],[13,"Tail",4764],[13,"Lookup",4764],[13,"Unop",4764],[13,"Binop",4764],[13,"Binop2",4764],[13,"If",4764],[13,"Emit",4764],[13,"Fun",4846]],"b":[[34,"impl-Display-for-Num%3CF%3E"],[35,"impl-Debug-for-Num%3CF%3E"],[37,"impl-From%3CUInt%3E-for-Num%3CF%3E"],[38,"impl-From%3Cu64%3E-for-Num%3CF%3E"],[405,"impl-Display-for-Backend"],[406,"impl-Debug-for-Backend"],[664,"impl-Write%3CF%3E-for-Continuation%3CF%3E"],[665,"impl-Debug-for-Continuation%3CF%3E"],[950,"impl-From%3CInsertCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[951,"impl-From%3CNewCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[952,"impl-From%3CLookupCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[1122,"impl-Display-for-ProofError"],[1123,"impl-Debug-for-ProofError"],[1124,"impl-Debug-for-ReductionError"],[1125,"impl-Display-for-ReductionError"],[1126,"impl-Debug-for-LurkError%3CF%3E"],[1127,"impl-Display-for-LurkError%3CF%3E"],[1128,"impl-From%3CSynthesisError%3E-for-ProofError"],[1129,"impl-From%3CError%3E-for-ProofError"],[1130,"impl-From%3CNovaError%3E-for-ProofError"],[1131,"impl-From%3CReductionError%3E-for-ProofError"],[1283,"impl-Debug-for-IO%3CF%3E"],[1284,"impl-Display-for-IO%3CF%3E"],[1285,"impl-Write%3CF%3E-for-IO%3CF%3E"],[1600,"impl-Write%3CF%3E-for-Expression%3CF%3E"],[1601,"impl-Debug-for-Expression%3CF%3E"],[1683,"impl-Debug-for-LanguageField"],[1684,"impl-Display-for-LanguageField"],[2418,"impl-Debug-for-Var"],[2419,"impl-Display-for-Var"],[2420,"impl-Debug-for-Tag"],[2421,"impl-Display-for-Tag"],[2486,"impl-Tag"],[2487,"impl-Tag-for-Tag"],[2741,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2742,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2776,"impl-Circuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2777,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2778,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2881,"impl-EvaluationStore-for-Store%3CF%3E"],[2882,"impl-Store%3CF%3E"],[2908,"impl-Store%3CF%3E"],[2909,"impl-EvaluationStore-for-Store%3CF%3E"],[2910,"impl-Store%3CF%3E"],[2911,"impl-EvaluationStore-for-Store%3CF%3E"],[2970,"impl-Display-for-Error"],[2971,"impl-Debug-for-Error"],[3080,"impl-Display-for-ParseErrorKind%3CF%3E"],[3081,"impl-Debug-for-ParseErrorKind%3CF%3E"],[3082,"impl-Display-for-ParseError%3CLocatedSpan%3C%26str%3E,+F%3E"],[3083,"impl-Debug-for-ParseError%3CI,+F%3E"],[3615,"impl-Display-for-Error"],[3616,"impl-Debug-for-Error"],[3617,"impl-From%3CError%3E-for-Error"],[3618,"impl-From%3CError%3E-for-Error"],[3862,"impl-Debug-for-Error"],[3863,"impl-Display-for-Error"],[4061,"impl-Display-for-Symbol"],[4062,"impl-Debug-for-Symbol"],[4129,"impl-Debug-for-Syntax%3CF%3E"],[4130,"impl-Display-for-Syntax%3CF%3E"],[4278,"impl-Debug-for-ExprTag"],[4279,"impl-Display-for-ExprTag"],[4280,"impl-Display-for-ContTag"],[4281,"impl-Debug-for-ContTag"],[4282,"impl-Debug-for-Op1"],[4283,"impl-Display-for-Op1"],[4284,"impl-Debug-for-Op2"],[4285,"impl-Display-for-Op2"],[4408,"impl-Debug-for-UInt"],[4409,"impl-Display-for-UInt"],[4454,"impl-Display-for-ZData"],[4455,"impl-Debug-for-ZData"],[4491,"impl-Error-for-SerdeError"],[4492,"impl-Error-for-SerdeError"],[4498,"impl-Debug-for-SerdeError"],[4499,"impl-Display-for-SerdeError"],[4605,"impl-SerializeTupleStruct-for-SerializeCell"],[4606,"impl-SerializeTuple-for-SerializeCell"],[4607,"impl-SerializeSeq-for-SerializeCell"],[4610,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4611,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4646,"impl-SerializeSeq-for-SerializeCell"],[4647,"impl-SerializeTuple-for-SerializeCell"],[4652,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4653,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4826,"impl-Debug-for-ZExpr%3CF%3E"],[4827,"impl-Display-for-ZExpr%3CF%3E"],[4870,"impl-Debug-for-ZPtr%3CE,+F%3E"],[4871,"impl-Display-for-ZPtr%3CE,+F%3E"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"MetricsSinkHandle",0],[15,"tuple"],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
