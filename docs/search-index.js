var searchIndex = JSON.parse('{\
"lurk":{"doc":"Lurk","t":"GPFPPGNNNNNNQNNNNNNQCCNNNNNNCCQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCNCNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNNQNNNCQQQNNNNNNNQQCNNNNNNNNCCNNNNNNNNCCQNNNQNQQNNNNNNNNNNNNNNNQNNNNNNNNNQQNNNECEEECCCCKMMMHFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHCHGJJPFPFPFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNHHOONNNNNOOHOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOKKNCMNNMCNCNNNCCFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHPGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIGIPFFPFFPPFIIFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGPGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFONNNNNNNNHNNNNNNNONONCNONNNNNNNNNOFGPFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPTFPGKTPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIPPFPPPPPPPPGPPPPPPPPPFPPPPPPGPPPPPPPGPPPPPPPPGPPFPNNONNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNCNONNNNONNNNNNNCNOCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGPPFPPFFONNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOFNNNNNNHHHHHHNNNNHHNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPGPPPINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNONNONNONNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNONNNNNNNNNNNNNNNNNPGJPPIIPNCNNNNNNNNCONNNNNNNNNCCCNNNNNNNNNPPPGPNNNNNNNNNNNNNNNNNNNNNNNNHNHHHHHHHNNNNNNNNNNPPPPPPPFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNONNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNPGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOPPPGNNNNNNNNNNNNNNNNNNHHHHHHHHNNNNNNNNNHHHHHHHHHHHHHHHHHHHHHRKRRRRRRKRGRKRPKPKRRKRRRRKRRRMNNMMMMNNNNMMNNMNMMNMMMNMMNMMNCMNMMNMNMMMMMMMCMNNNNNNMNNIIPKIRIRIRIRIFIGFPIINNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNIPGPPGFPIFINNNNNNNNHHONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCHHHHHFGFPPPOOONNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONOONNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNHNNNNNHHNNNNNNNNNNNNHNFFFFNOOOONNNNNNNNOOONONNOONNNNNNOONONOOOONOONNNNNNNNNNNNONNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNOONNNNNONOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONONNNNOOOOOONONONNNONOOOOONONNNNNOONNOONNNNONNONONONONOOONNNNNNNNNNNNNNNNNNNONONNNNNNNNNNNNNNNNNNNONONPPGNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNHNNNNNNNCCCCPPPPPPPPPPPPPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOIIFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNONNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Num","Scalar","Symbol","U64","U64","UInt","add","add_assign","arbitrary_with","arbitrary_with","arbitrary_with","as_child","block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","char","circuit","cli","clone","clone","clone","clone_into","clone_into","clone_into","config","coprocessor","ctrl","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","direct_child","direct_parent","div","div_assign","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","extend","field","fmt","fmt","fmt","fmt","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","from","from","from","from","from","from","from","from_scalar","from_str_impl","func","get_hash","get_hash","has_parent","hash","hash","header","header","header","init","init","init","into","into","into","into_scalar","is_keyword","is_negative","is_root","is_root_key","is_root_sym","is_whitespace","is_zero","is_zero","key","key_from_vec","keyword","layout_raw","layout_raw","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul","mul_assign","name","new","new_from_vec","num","op","parser","partial_cmp","partial_cmp","partial_cmp","path","pointer_metadata","pointer_metadata","pointer_metadata","prints_as_absolute","proof","public_parameters","rem","root","root_key","root_sym","serialize","serialize","serialize","set_as_keyword","state","store","str","sub","sub_assign","sym","sym","sym_from_vec","symbol","tag","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","uint","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","var","vars","vzip","vzip","vzip","z_cont","z_data","z_expr","z_ptr","z_store","gadgets","circom","constraints","pointer","CircomGadget","evaluate_simple","into_circom_input","name","alloc_equal","AllocatedContPtr","AllocatedPtr","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_equal","alloc_equal","alloc_infallible","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","construct_cons","construct_list","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fmt","fmt","from","from","from","from","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","parse_and_run","paths","lurk_default_dir","Flow","LURK_CONFIG","LURK_CONFIG_FILE","Parallel","ParallelConfig","ParallelN","PerfConfig","Sequential","Settings","WitnessGeneration","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_config","home_dir","init","init","init","init","init","into","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lurk_config","lurk_config_file","parallelism","perf","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","public_params_default_dir","public_params_dir","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","witness_generation","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","evaluate_internal","evaluate_simple","gadgets","has_circuit","sha256","synthesize","synthesize_internal","synthesize_simple","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","evaluate_simple","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","synthesize_simple","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","a_ptr_as_z_ptr","chain_car_cdr","SC","Sha256Coproc","Sha256Coprocessor","arity","arity","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","fmt","fmt","from","from","from","has_circuit","has_circuit","init","init","into","into","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","serialize","serialize","synthesize","synthesize_internal","synthesize_simple","synthesize_simple","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","StandardTrie","Trie","TrieCoproc","arity","arity","arity","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","evaluate_simple","evaluate_simple","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","has_circuit","has_circuit","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","synthesize","synthesize_insert","synthesize_internal","synthesize_simple","synthesize_simple","synthesize_simple","synthesize_simple","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","header","header","in_current_span","in_current_span","init","init","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","source","source","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Frame","_p","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","empty_sym_env","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","i","init","input","into","lang","layout_raw","output","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_index_by_symbol","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup_by_sym","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","synthesize","synthesize_internal","synthesize_simple","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compare","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_possible_value","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_variants","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Copy","Cproc","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hash3Zeros","Hash4Zeros","Hash6Zeros","Hash8Zeros","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Num","Op","Op1","Op2","Open","Or","Return","String","Sub","Symbol","Tag","Trunc","Unit","Var","Zero","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","input_params","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","multiframe","name","name","new","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slots_count","store","synthesize_frame","synthesize_frame_aux","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AllocatedVal","Bits","Boolean","GlobalAllocator","Number","Pointer","SlotWitness","SlotsAllocations","allocations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_slots_allocations","clone","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","get_allocated_ptr","get_allocated_ptr_from_ptr","get_const","get_const_cloned","get_tag","get_tag_cloned","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","new_const","new_const_from_tag","new_consts_from_z_ptr","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness","EvalConfig","borrow","borrow_mut","deref","deref_mut","deserialize","drop","eval_step","evaluate","evaluate_simple","evaluate_simple_with_env","evaluate_with_env","evaluate_with_env_and_cont","from","init","into","layout_raw","make_cprocs_funcs_from_lang","make_eval_step_from_config","new_ivc","new_nivc","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","MultiFrame","arity","arity","blank","borrow","borrow_mut","build_frames","cache_witness","circuit_index","clone","clone_into","deref","deref_mut","deserialize","drop","emitted","fmt","frames","from","from_frames","init","into","io_to_scalar_vector","layout_raw","num_circuits","num_frames","output","pointer_metadata","precedes","primary_circuit","public_input_size","public_inputs","secondary_circuit","significant_frame_count","synthesize","synthesize","synthesize","synthesize_frames","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Ptr","Tuple2","Tuple3","Tuple4","ZPtr","borrow","borrow_mut","cast","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","dummy","dummy","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt_to_string","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","into","is_nil","is_tuple","layout_raw","pointer_metadata","serialize","tag","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Store","add_comm","borrow","borrow_mut","car_cdr","char","comm","commit","cons","cont_error","cont_outermost","cont_terminal","default","deref","deref_mut","deserialize","drop","dummy","expect_2_ptrs","expect_3_ptrs","expect_4_ptrs","expect_f","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_f","fetch_key","fetch_list","fetch_string","fetch_sym","fetch_symbol","fmt","from","get_cont_terminal","hash3_cost","hash3zeros","hash3zeros_idx","hash4_cost","hash4zeros","hash4zeros_idx","hash6_cost","hash6zeros","hash6zeros_idx","hash8_cost","hash8zeros","hash8zeros_idx","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","hydrate_z_cache","improper_list","init","initial_empty_env","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_atom","intern_atom_hydrated","intern_f","intern_fun","intern_lurk_symbol","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","intern_user_symbol","into","inverse_poseidon_cache","is_zero","key","layout_raw","list","num","num_u64","opaque","open","pointer_metadata","poseidon_cache","ptr_eq","ptr_eq","read","read","read_maybe_meta","read_with_default_state","to_ptr","to_scalar_vector","try_from","try_into","type_id","u64","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","zero","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from_upto","get_from_offset","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","AllocatedIO","CEKState","CircuitFrame","ContPtr","ContPtr","Error","ErrorType","EvalFrame","EvaluationStore","ExtraVerifyInput","FoldingMode","FrameIO","FrameLike","GlobalAllocation","IVC","MultiFrameTrait","NIVC","Provable","ProveOutput","ProveOutput","Prover","Ptr","Ptr","PublicParams","PublicParams","RecursiveSNARKTrait","RecursiveSnark","Store","StoreError","blank","borrow","borrow_mut","build_frames","cache_witness","compress","cont","deref","deref_mut","deserialize","drop","emitted","env","evaluate_and_prove","expected_num_steps","expr","fmt","folding_mode","frames","from","from_frames","get_cont_terminal","hydrate_z_cache","init","initial_empty_env","input","into","io_to_scalar_vector","lang","layout_raw","nova","num_frames","outer_synthesize","output","output","pointer_metadata","precedes","prove","prove_recursively","ptr_eq","public_input_size","public_inputs","read","reduction_count","significant_frame_count","supernova","synthesize_frames","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verify","vzip","z0_secondary","C1LEM","C2","Compressed","CurveCycleEquipped","E1","E1","E2","E2","EE1","EE1","EE2","EE2","NovaCircuitShape","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuits","clone","clone_into","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","exhume","extent","fmt","folding_mode","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","pointer_metadata","prove_recursively","public_params","reduction_count","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","C2","Compressed","FoldingConfig","IVC","NIVC","Proof","PublicParams","Recursive","SuperNovaAuxParams","SuperNovaProver","SuperNovaPublicParams","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuit_cache_keys","circuit_shapes","clone","clone_into","compress","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","fmt","fmt","folding_mode","from","from","from","from","index","init","init","init","init","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pp","prove_recursively","public_params","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","disk_cache","instance","public_params","supernova_aux_params","supernova_circuit_params","supernova_public_params","with_public_params","Instance","Kind","Metadata","NovaPublicParams","SuperNovaAuxParams","SuperNovaCircuitParams","_p","abomonated","abomonated","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_key","cache_key","circuit_param_instances","clone","clone","clone_into","clone_into","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","key","kind","kind","lang","lang","lang","layout_raw","layout_raw","layout_raw","new","open","pointer_metadata","pointer_metadata","pointer_metadata","rc","rc","reindex","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","quote","quotient","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","compare","deref","deref_mut","deserialize","deserialize","drop","dummy","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[194,"lurk::circuit"],[195,"lurk::circuit::gadgets"],[198,"lurk::circuit::gadgets::circom"],[202,"lurk::circuit::gadgets::constraints"],[203,"lurk::circuit::gadgets::pointer"],[294,"lurk::cli"],[296,"lurk::cli::paths"],[297,"lurk::config"],[449,"lurk::coprocessor"],[464,"lurk::coprocessor::circom"],[465,"lurk::coprocessor::circom::non_wasm"],[496,"lurk::coprocessor::gadgets"],[498,"lurk::coprocessor::sha256"],[565,"lurk::coprocessor::trie"],[797,"lurk::error"],[862,"lurk::eval"],[897,"lurk::eval::lang"],[1019,"lurk::field"],[1127,"lurk::lem"],[1408,"lurk::lem::circuit"],[1504,"lurk::lem::eval"],[1533,"lurk::lem::multiframe"],[1579,"lurk::lem::pointers"],[1627,"lurk::lem::store"],[1727,"lurk::parser"],[1768,"lurk::parser::base"],[1816,"lurk::parser::error"],[1900,"lurk::parser::position"],[1934,"lurk::parser::position::Pos"],[1940,"lurk::parser::string"],[1979,"lurk::parser::syntax"],[2000,"lurk::proof"],[2085,"lurk::proof::nova"],[2180,"lurk::proof::supernova"],[2289,"lurk::public_parameters"],[2296,"lurk::public_parameters::instance"],[2397,"lurk::state"],[2435,"lurk::store"],[2697,"lurk::z_data"],[2745,"lurk::z_data::z_cont"],[2794,"lurk::z_data::z_cont::ZCont"],[2826,"lurk::z_data::z_expr"],[2876,"lurk::z_data::z_expr::ZExpr"],[2879,"lurk::z_data::z_ptr"],[2930,"lurk::z_data::z_store"],[2975,"core::option"],[2976,"core::clone"],[2977,"rkyv::with"],[2978,"core::result"],[2979,"serde::de"],[2980,"core::cmp"],[2981,"core::convert"],[2982,"core::fmt"],[2983,"core::fmt"],[2984,"core::hash"],[2985,"core::marker"],[2986,"core::hash"],[2987,"core::fmt"],[2988,"core::alloc::layout"],[2989,"core::alloc::layout"],[2990,"core::cmp"],[2991,"core::any"],[2992,"alloc::boxed"],[2993,"core::any"],[2994,"bellpepper_core::gadgets::boolean"],[2995,"bellpepper_core::constraint_system"],[2996,"ff"],[2997,"bellpepper_core::constraint_system"],[2998,"camino"],[2999,"std::collections::hash::map"],[3000,"config::error"],[3001,"serde::de"],[3002,"core::cell"],[3003,"alloc::rc"],[3004,"core::error"],[3005,"nova_snark::errors"],[3006,"core::marker"],[3007,"clap_builder::builder::possible_value"],[3008,"alloc::sync"],[3009,"core::ops::function"],[3010,"nom::traits"],[3011,"nom::internal"],[3012,"core::cmp"],[3013,"nova_snark::traits::circuit"],[3014,"std::io::error"],[3015,"std::io"],[3016,"nova_snark::supernova"],[3017,"nova_snark::traits::circuit_supernova"],[3018,"camino"],[3019,"anyhow"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","Type for hierarchical symbol names.","a small scalar field element in U64 representation for …","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","","","","","Global config for Lurk Includes settings for cache …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","The finite field used in the language.","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","","Returns true if <code>self</code> is negative.","","","Returns true if the <code>Symbol</code> is the root symbol","","Determines if <code>self</code> is zero.","","","","","","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","","","","","","","","","","This module offers a connection the the backend proving …","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","Usage of circom coprocessors.","","","An interface to declare a new type of Circom gadget. It …","","","","This could now use alloc_is_zero to avoid duplication.","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","Parses CLI arguments and continues the program flow …","","","The level of parallelism used when synthesizing the Lurk …","Global config variable for <code>Settings</code>","Global path variable for configuration file","Try to be smart about thread management based on # of cpus …","Parallel configuration settings","How many threads to use? (Advisory, might be ignored.)","Performance-related configuration settings","Runs without parallelism","Contains the Lurk config settings The <code>public_params_dir</code> …","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads config settings from a file or env vars The public …","Returns the home directory used by <code>cargo`` and </code>rustup`","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> on <code>Flow::Parallel</code> or <code>Flow::ParallelN</code>","Returns <code>true</code> on <code>Flow::Sequential</code>","","","","","","Gets the <code>LURK_CONFIG</code> settings. If uninitialized, sets the …","Gets the <code>LURK_CONFIG_FILE</code> path. If uninitialized, sets the …","Parallelism settings","Parallelism &amp; witness gen configs","","","","","","The poseidon witness part of synthesis.","NOTE: Neptune itself <em>will</em> do this transparently at the …","","Public parameter disk cache location","Multiple <code>StepCircuit</code>s.","Synthesis (within one <code>StepCircuit</code>)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Witness generation settings","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","Function for internal plumbing. Reimplementing is not …","","Helper gadgets for synthesis","Returns true if this Coprocessor actually implements a …","","","Function for internal plumbing. Reimplementing is not …","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","Chains <code>car_cdr</code> calls <code>n</code> times, returning the accumulated <code>car</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","Returns a value corresponding to the commitment associated …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","And does nothing but return nil. It should probably never …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","<code>Copy(x, y)</code> binds <code>x</code> to a copy of what <code>y</code> is bound to","<code>Cproc(ys, c, xs)</code> binds <code>ys</code> to the results of coprocessor <code>c</code> …","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hash3Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash4Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash6Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash8Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","The LEM <code>Tag</code> is a wrapper around other types that are used …","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","","LEM variables","<code>Zero(x, t)</code> binds <code>x</code> to a <code>Ptr::zero(t)</code>","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Checks if the allocation for a numeric variable has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cached version of Lurk’s default step function (IVC, no …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates the <code>Func</code>s used to call coprocessors in the NIVC …","Creates a LEM <code>Func</code> corresponding to Lurk’s step function …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","","","","","","","","","Fetches a cons list that was interned. If the list is …","","","","","Returns the argument unchanged.","","Cost of poseidon hash with arity 3, including the input","Retrieves the hash of 3 padded zeros","","Cost of poseidon hash with arity 4, including the input","Retrieves the hash of 4 padded zeros","","Cost of poseidon hash with arity 6, including the input","Retrieves the hash of 6 padded zeros","","Cost of poseidon hash with arity 8, including the input","Retrieves the hash of 8 padded zeros","","Safe version of <code>hash_ptr_unsafe</code> that doesn’t hit a stack …","","","Hashes enqueued <code>Ptr</code> trees from the bottom to the top, …","","Interns a sequence of pointers as an improper cons-list …","","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","Creates an atom <code>Ptr</code> which points to a cached element of …","Similar to <code>intern_atom</code> but doesn’t add the resulting …","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","Interns a sequence of pointers as a proper (<code>nil</code>…","","","Creates an atom pointer from a <code>ZPtr</code>, with its tag and …","","","","","Equality of the content-addressed versions of two pointers","","","","","Attempts to recover the <code>Ptr</code> that corresponds to <code>z_ptr</code> from …","Constructs a vector of scalars that correspond to tags and …","","","","","","","","","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","Retrieves the <code>from_offset</code> attribute, if present","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","The associated type of allocated input and output to the …","The State of a CEK machine.","The associated <code>CircuitFrame</code> type","the type for the Store’s continuation poitners","The associated <code>ContPtr</code> type","the type for the Store’s errors","Type for error potentially thrown during verification","The associated <code>Frame</code> type","A trait for a store of expressions","Extra input for <code>verify</code> to be defined as needed","Folding mode used for proving","the type for the Frame’s IO","A Frame of evaluation in a CEK machine.","The associated type which manages global allocations","Variant for IVC folding","Trait to support multiple <code>MultiFrame</code> implementations.","Variant for NIVC folding","A trait for provable structures over a field <code>F</code>.","Main output of <code>prove_recursively</code>, encoding the actual proof","Main output of <code>prove</code>, encoding the actual proof","A trait for a prover that works with a field <code>F</code>.","the type for the Store’s pointers","The associated <code>Ptr</code> type","Associated type for public parameters","Associated type for public parameters","Trait to abstract Nova and SuperNova proofs","Assiciated proof type, which must implement …","The associated <code>Store</code> type","The error type for the Store type","Synthesize a blank circuit.","","","Evaluates and generates the frames of the computation …","Cache the witness internally, which can be used later …","Compress a proof","the continuation (K)","","","","","the emitted frames","the environment (E)","Evaluate an expression with an environment and then …","Returns the expected total number of steps for the prover …","the expression, or control word (C)","","Returns a reference to the prover’s FoldingMode","Iterates through the Self::CircuitFrame instances","Returns the argument unchanged.","Create an instance from some <code>Self::Frame</code>s.","getting the terminal continuation pointer","cache hashes for pointers enqueued for hydration","","getting a pointer to the initial, empty environment","the input of the frame","Calls <code>U::from(self)</code>.","Returns a public IO vector when equipped with the local …","Returns a reference to the Prover’s Lang.","","An adapter to a Nova proving system implementation.","Returns the number of reduction frames in the provable …","Synthesizes the outer circuit for the prover given a slice …","the output of the frame","The output of the last frame","","Returns true if the supplied instance directly precedes …","Generate a proof from a sequence of frames","Generate the recursive SNARK, encoded in <code>ProveOutput</code>","hash-equality of the expressions represented by Ptrs","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","interpreting a string representation of an expression","Returns the number of reductions for the prover.","Counting the number of non-trivial frames in the evaluation","An adapter to a SuperNova proving system implementation.","Synthesize some frames.","","","","","","","Verify the proof given the public parameters, the input …","","Return the <code>z0_secondary</code>","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","Type alias for the Evaluation Engine using G1 group …","Why the next 2 types?","Type alias for the Evaluation Engine using G2 group …","a concrete implementation of an …","Type alias for Nova Circuit Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","Computes a cache key of the primary circuit. The point is …","Generates the circuits for the Nova proving system.","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Create a new NovaProver with a reduction count and a <code>Lang</code>","","","","","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","","","","","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Folding configuration specifies the <code>Lang</code>, the reduction …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the SuperNova …","A proof for the intermediate steps of a recursive …","Type alias for SuperNova Aux Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","Computes a cache key of a supernova primary circuit. The …","Collects all the cache keys of supernova instance. We need …","The internal circuit shapes","","","","","","","","","","","","","","","","","return the digest","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","Create a new SuperNovaProver with a reduction count and a …","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","","","","Public params for SuperNova.","","Generates the running claim params for the SuperNova …","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Instances","","","","","Attempts to extract abomonated public parameters. To avoid …","Instances compute a cache-key for the objects they …","From ::nova, there are 3 “kinds” of public param …","What we put into the cache","Tag for nova::NovaPublicParams instances","Tag for supernova::SuperNovaAuxParams instances","Tag for [supernova::SuperNovaCircuitParams] instances","","","","","","","","","","","","If this Instance is of Kind::SuperNovaAuxParams, then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key (or cache_key) of this Instance used to retrieve …","","","The key (or cache_key) of this Instance used to retrieve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","","","","","","",""],"i":[0,2,0,2,1,0,1,2,2,5,1,5,0,2,5,1,2,5,1,0,0,0,2,5,1,2,5,1,0,0,0,2,5,1,2,5,1,2,2,5,5,1,1,5,5,1,2,2,5,1,2,5,1,2,2,2,2,5,5,5,5,1,1,1,1,0,0,5,0,2,2,5,5,1,1,5,5,5,2,2,2,5,5,1,1,2,5,0,2,5,5,2,5,2,5,1,2,5,1,2,5,1,2,5,2,5,5,5,5,2,1,5,5,0,2,5,1,0,0,0,0,2,2,1,2,5,5,5,0,0,0,2,5,1,5,2,5,1,5,0,0,1,5,5,5,2,5,1,5,0,0,0,1,2,5,0,5,0,0,2,5,1,2,5,1,2,5,1,2,5,1,2,5,1,0,2,5,1,2,5,1,2,5,1,0,0,2,5,1,0,0,0,0,0,0,0,0,0,0,40,40,40,0,0,0,43,52,43,52,52,43,43,52,43,43,43,43,52,43,52,43,52,43,52,43,52,43,52,43,43,43,52,43,52,43,52,43,52,43,52,43,52,43,43,52,52,43,52,52,52,43,52,43,43,52,43,52,43,43,43,43,43,43,43,43,43,43,43,52,43,52,43,43,52,43,43,52,43,52,43,52,43,52,43,52,43,52,43,52,43,52,43,52,43,0,0,0,0,0,0,61,0,61,0,61,0,0,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,57,57,58,58,59,60,61,57,58,59,60,61,57,58,59,60,61,57,57,57,57,58,58,58,58,59,59,59,59,60,60,60,60,61,61,61,61,57,58,59,60,61,57,58,59,60,61,57,0,57,58,59,60,61,57,58,59,60,61,61,61,57,58,59,60,61,0,0,58,57,57,58,59,60,61,59,60,0,57,59,59,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,57,58,59,60,61,58,0,0,64,0,65,65,65,65,0,65,0,64,64,64,0,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,69,0,0,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,68,69,69,68,69,68,69,69,69,68,69,68,69,68,69,69,68,69,68,69,68,69,68,69,68,68,69,68,69,69,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,68,69,0,0,0,72,0,0,72,0,0,78,72,0,0,0,0,0,72,73,74,75,78,72,73,74,75,77,79,80,78,72,73,74,75,77,79,80,72,73,74,75,72,73,74,75,188,73,74,75,77,78,72,73,74,75,77,79,80,78,72,73,74,75,77,79,80,78,72,73,73,74,74,75,75,77,79,80,78,72,73,74,75,77,79,80,77,72,73,74,75,72,72,72,73,74,75,78,72,73,74,75,77,79,80,78,72,72,72,72,73,74,75,77,79,80,72,73,74,75,78,72,73,74,75,77,79,80,77,0,78,72,73,74,75,77,79,80,78,72,73,74,75,77,79,80,77,77,77,77,78,72,73,74,75,77,79,80,77,77,77,77,73,74,75,72,77,72,72,73,74,75,72,73,74,75,78,72,73,74,75,77,79,80,78,72,73,74,75,77,79,80,78,72,73,74,75,77,79,80,78,72,73,74,75,77,79,80,78,72,73,74,75,77,79,80,78,72,73,74,75,77,79,80,79,80,78,72,73,74,75,77,79,80,86,87,0,87,0,86,87,87,86,87,86,87,86,86,86,87,86,87,86,87,86,87,86,87,87,86,86,87,87,87,87,87,86,86,87,86,87,86,87,86,87,86,87,86,87,86,87,86,86,87,86,87,86,87,86,87,86,87,86,87,86,87,86,87,86,0,90,90,90,90,90,90,90,90,90,0,90,90,90,90,90,90,90,90,90,90,90,0,90,90,90,90,90,90,90,90,90,90,90,90,0,0,94,0,0,84,84,94,95,94,84,92,95,94,84,92,95,94,84,95,94,84,84,84,84,95,94,84,92,95,94,84,92,95,95,94,94,84,84,92,95,94,84,92,95,94,94,94,95,94,95,94,84,92,95,94,94,84,92,92,84,94,84,95,94,84,92,95,94,84,92,84,84,95,94,84,92,84,84,92,84,95,94,84,92,95,94,84,94,94,94,95,94,84,95,94,84,92,95,94,84,92,95,94,84,92,95,94,84,92,95,94,84,92,95,94,84,92,95,94,84,92,97,4,0,97,0,0,4,97,97,97,98,97,98,97,98,97,98,97,98,98,98,97,97,98,97,98,97,97,98,98,97,98,97,98,97,97,97,97,98,98,98,98,97,97,98,97,98,4,4,4,4,4,4,4,4,4,4,98,98,97,4,97,98,97,98,4,97,98,4,4,98,97,98,97,98,4,4,4,4,4,4,97,98,97,97,4,4,4,4,4,4,4,4,97,98,97,98,97,98,97,98,97,98,97,98,97,97,98,0,110,110,0,110,110,110,110,110,106,110,110,0,110,110,110,110,110,110,110,110,106,0,110,110,110,110,110,109,0,110,110,109,109,110,110,107,0,106,106,110,110,109,107,110,107,0,110,110,0,110,104,104,104,104,105,106,107,108,109,110,104,105,106,107,108,109,110,104,104,104,0,104,105,106,107,108,109,110,104,105,106,107,108,109,110,108,104,105,106,107,108,109,110,104,105,106,107,108,109,110,104,105,106,106,107,108,109,110,104,105,106,107,108,109,110,104,105,106,107,108,109,110,104,104,104,104,105,105,105,105,106,106,106,106,107,107,107,107,108,108,108,108,109,109,109,109,110,110,110,110,0,104,105,105,106,106,107,108,109,110,104,105,106,107,108,109,110,105,106,107,105,106,107,105,106,104,105,106,107,108,109,110,104,104,105,106,107,108,109,110,104,105,106,107,108,109,110,0,105,104,104,105,104,104,104,104,105,106,107,108,109,110,0,106,104,0,104,104,106,104,105,106,107,108,109,110,107,105,106,104,105,106,106,107,108,109,110,104,105,106,107,108,109,110,104,105,106,107,108,109,110,104,104,105,106,107,108,109,110,104,105,106,107,108,109,110,104,105,106,107,108,109,110,104,105,106,107,108,109,110,0,112,112,0,112,112,0,0,113,115,113,112,66,115,113,112,66,0,112,112,66,115,113,112,66,115,113,112,66,115,113,112,66,115,113,112,66,115,113,112,66,66,66,66,66,66,66,115,113,112,66,115,113,112,66,115,113,112,66,66,66,66,115,113,112,66,112,115,113,112,66,115,113,112,66,115,113,112,66,115,113,112,66,115,113,112,66,115,113,112,66,115,113,112,66,113,0,117,117,117,117,117,117,0,0,0,0,0,0,117,117,117,117,0,0,117,117,117,117,117,117,117,117,117,117,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,42,0,42,42,42,0,42,42,42,42,42,42,42,42,42,42,116,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,125,0,0,123,125,0,0,123,123,0,123,123,123,123,123,123,123,123,0,122,123,123,123,123,123,123,123,123,123,0,0,0,123,123,123,123,123,123,123,123,123,124,124,124,0,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,0,124,0,0,0,0,0,0,0,124,124,124,124,124,124,124,124,124,124,131,131,131,131,131,131,131,0,0,131,131,127,127,131,127,131,127,131,127,131,127,131,127,131,127,131,127,131,127,131,127,131,131,131,131,127,127,127,127,127,127,131,131,127,127,131,127,127,131,127,131,127,127,131,127,131,131,127,0,127,127,127,131,127,127,127,131,127,131,127,131,127,131,127,131,127,131,127,131,127,131,127,131,127,133,0,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,189,189,189,189,189,189,134,134,134,0,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,0,0,0,0,0,0,0,0,134,134,134,134,134,134,134,134,134,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,143,145,143,145,152,143,0,152,0,146,0,143,156,0,156,0,152,155,0,145,143,152,155,0,155,143,143,143,156,156,143,143,152,153,156,156,156,156,143,153,155,155,153,156,155,143,156,143,145,145,156,145,146,156,143,155,156,0,158,155,146,143,156,143,155,152,145,158,158,145,155,143,0,143,156,156,156,156,156,156,152,156,152,0,0,163,0,0,120,0,120,0,120,0,120,0,0,0,0,0,163,0,0,161,163,166,161,163,166,0,0,161,161,163,161,163,166,161,163,166,161,161,163,163,166,161,163,166,161,161,161,166,166,161,163,166,161,163,166,161,163,166,166,161,163,166,166,161,163,166,163,0,166,161,163,161,161,163,166,161,163,166,161,163,166,161,163,166,161,163,166,161,163,166,163,161,163,166,0,169,0,119,119,0,0,169,0,0,0,170,169,172,119,170,169,172,119,0,0,190,119,119,169,170,169,172,119,170,169,172,119,170,169,169,172,119,170,170,169,172,119,172,119,172,170,169,172,119,170,170,169,172,119,170,169,172,119,172,119,170,169,172,119,172,119,119,119,170,169,172,119,170,169,0,172,119,169,119,170,169,172,119,170,169,172,119,170,169,172,119,170,169,172,119,170,169,172,119,170,169,172,119,169,170,169,172,119,0,0,0,0,0,0,0,0,0,0,176,176,176,173,173,177,173,176,177,173,176,177,173,177,173,176,177,176,177,173,173,176,177,173,176,177,173,176,176,177,177,173,176,177,176,177,176,176,176,176,177,177,177,177,173,176,177,173,176,177,173,176,177,173,176,177,173,173,177,173,173,177,173,176,177,173,173,173,176,177,173,177,173,176,177,176,177,173,176,177,173,176,177,173,176,177,173,176,177,173,176,177,173,176,177,173,176,177,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,81,81,81,81,81,0,0,81,81,81,81,81,81,81,81,81,81,81,81,0,81,0,0,0,0,88,181,181,54,54,54,88,180,181,54,88,180,181,54,54,54,54,181,54,54,181,181,88,180,181,88,180,181,181,54,54,181,54,181,54,54,181,54,54,54,54,88,180,181,54,88,180,181,54,88,180,181,181,54,88,180,181,181,181,54,181,181,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,88,88,180,181,54,88,180,181,54,54,54,54,54,54,54,54,54,54,54,54,181,181,54,54,88,54,54,181,54,181,54,88,54,88,180,181,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,88,180,181,54,54,181,54,88,180,181,181,181,181,54,181,54,54,54,54,181,54,181,54,181,54,181,181,54,54,54,54,181,54,54,88,180,181,54,181,180,54,181,181,54,54,54,54,181,54,54,54,54,181,54,181,54,54,54,181,54,54,88,180,181,88,54,54,54,54,88,180,181,54,88,180,181,54,88,180,181,181,54,54,54,88,180,181,54,88,180,181,54,88,180,181,54,180,54,88,180,181,54,54,54,54,180,186,186,0,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,0,186,186,186,186,186,186,186,186,186,186,186,186,186,0,186,186,186,186,186,186,186,0,0,0,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,191,192,193,194,195,196,197,198,199,200,201,191,192,202,200,195,198,199,200,193,194,195,196,197,199,191,192,194,199,201,191,192,185,185,185,185,185,185,185,185,185,185,185,185,185,185,0,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,203,203,203,0,0,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,55,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183],"f":[0,0,0,0,0,0,[[1,1],1],[[[2,[-1]],[2,[-1]]],3,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,5],[[6,[5]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[2,[-1]]],[[2,[-1]]],[7,4]],[5,5],[1,1],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,0,[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[2,[-2]]]]],11,4],[-1,[[10,[5]]],11],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[1]]],11],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[5,12],5],[5,[[6,[5]]]],[[1,1],1],[[[2,[-1]],[2,[-1]]],3,4],[8,3],[8,3],[8,3],[[[2,[-1]],[2,[-1]]],13,[14,4]],[[5,5],13],[[1,1],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],0,0,[[5,[15,[-1]]],5,[[16,[12]]]],0,[[[2,[-1]],17],18,[19,4]],[[[2,[-1]],17],18,4],[[5,17],18],[[5,17],18],[[1,17],18],[[1,17],18],[12,20],[5,20],[5,20],[1,[[2,[-1]]],4],[-1,-1,[]],[21,[[2,[-1]]],4],[-1,-1,[]],[12,5],[21,1],[-1,-1,[]],[-1,[[2,[-1]]],4],[12,[[6,[5]]]],0,[[-1,-2],21,[22,23],24],[[-1,-2],21,[22,23],24],[[5,5],13],[[[2,[-1]],-2],3,4,25],[[5,-1],3,25],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],-1,4],[5,13],[[[2,[-1]]],13,4],[5,13],[5,13],[5,13],[30,13],[[[2,[-1]]],13,4],[1,13],[[[15,[-1]]],5,[[16,[12]]]],[[[31,[20]]],5],0,[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],0,0,0,0,[[],[[2,[-1]]],4],[[],[[2,[-1]]],4],[[1,1],1],[[[2,[-1]],[2,[-1]]],3,4],[5,[[34,[12]]]],[[[15,[-1]],13],5,[[16,[12]]]],[[[31,[20]],13],5],0,0,0,[[[2,[-1]],[2,[-1]]],[[6,[35]]],4],[[5,5],[[6,[35]]]],[[1,1],[[6,[35]]]],[5,[[15,[20]]]],[[]],[[]],[[]],[5,13],0,0,[[1,1],1],[13,5],[[],5],[[],5],[[[2,[-1]],-2],10,4,36],[[5,-1],10,36],[[1,-1],10,36],[5,3],0,0,0,[[1,1],1],[[[2,[-1]],[2,[-1]]],3,4],[[[15,[-1]]],5,[[16,[12]]]],0,[[[31,[20]]],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,20,[]],[-1,20,[]],[-1,20,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],0,[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[40,[41,[-1]],[15,[42]]],42,4],[[40,[15,[[43,[-1]]]]],[[31,[[3,[20,[31,[-1]]]]]]],4],[40,12],[[-2,[44,[-1]],[44,[-1]]],[[10,[45,46]]],47,[[48,[-1]]]],0,0,[[-2,-4],[[10,[[43,[-1]],46]]],4,[[48,[-1]]],0,[[51,[],[[49,[[10,[[50,[-3,-1]],46]]]]]]]],[[-2,-3],[[10,[[52,[-1]],46]]],4,[[48,[-1]]],[[51,[],[[49,[[10,[[53,[-1]],46]]]]]]]],[[-2,[50,[-3,-1]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]],0],[[-2,[53,[-1]]],[[10,[[52,[-1]],46]]],4,[[48,[-1]]]],[[-2,[54,[-1]],[0,[-1,0]]],[[10,[[52,[-1]],46]]],4,[[48,[-1]]]],[[-2,[54,[-1]],[0,[-1,0]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[[[43,[-1]],-2,[43,[-1]]],[[10,[45,46]]],4,[[48,[-1]]]],[[[52,[-1]],-2,[52,[-1]]],[[10,[45,46]]],4,[[48,[-1]]]],[[-2,-4],[[43,[-1]]],4,[[48,[-1]]],0,[[51,[],[[49,[[50,[-3,-1]]]]]]]],[[-2,[54,[-1]],-3],[[10,[[43,[-1]],46]]],4,[[48,[-1]]],[[51,[],[[49,[[10,[[0,[-1,0]],46]]]]]]]],[[-2,-1,[44,[-1]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[[[43,[-1]],-2,-1],[[10,[45,46]]],4,[[48,[-1]]]],[[[52,[-1]],-2,-1],[[10,[45,46]]],4,[[48,[-1]]]],[[-2,[6,[[0,[-1,0]]]],[54,[-1]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[[-2,[6,[[0,[-1,0]]]],[54,[-1]]],[[10,[[52,[-1]],46]]],4,[[48,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]]],[[43,[-1]]],[7,47]],[[[52,[-1]]],[[52,[-1]]],[7,4]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-2,[0,[-1]],[54,[-1]],[43,[-1]],[43,[-1]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[[-2,[0,[-1]],[54,[-1]],[15,[[43,[-1]]]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[8,3],[[[43,[-1]],-2,[43,[-1]]],3,4,[[48,[-1]]]],[[[52,[-1]],-2,[52,[-1]]],3,4,[[48,[-1]]]],[[[43,[-1]],17],18,4],[[[52,[-1]],17],18,4],[-1,-1,[]],[[[52,[-1]]],[[43,[-1]]],4],[[[43,[-1]]],[[52,[-1]]],4],[-1,-1,[]],[[[44,[-1]],[44,[-1]]],[[43,[-1]]],4],[[[52,[-1]],[54,[-1]]],[[6,[[0,[-1]]]]],4],[[[52,[-1]],[54,[-1]]],[[6,[[0,[-1,0]]]]],4],[[[52,[-1]],[54,[-1]]],[[6,[[53,[-1]]]]],4],[[[43,[-1]]],[[44,[-1]]],4],[[[52,[-1]]],[[44,[-1]]],4],[[[43,[-1]],-2,45,[43,[-1]]],3,4,[[48,[-1]]]],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]],-2],[[10,[45,46]]],4,[[48,[-1]]]],[[[43,[-1]],-2],[[10,[45,46]]],4,[[48,[-1]]]],[[[43,[-1]],-2],[[10,[45,46]]],4,[[48,[-1]]]],[[[43,[-1]],-2],[[10,[45,46]]],4,[[48,[-1]]]],[[[43,[-1]],-2,[0,[-1]]],[[10,[45,46]]],4,[[48,[-1]]]],[[[43,[-1]],-2],[[10,[45,46]]],4,[[48,[-1]]]],[[[43,[-1]],-2],[[10,[45,46]]],4,[[48,[-1]]]],[[[43,[-1]],-2],[[10,[45,46]]],4,[[48,[-1]]]],[[[43,[-1]],-2],[[10,[45,46]]],4,[[48,[-1]]]],[[[43,[-1]],-2],[[10,[45,46]]],4,[[48,[-1]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[-2,45,[43,[-1]],[43,[-1]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[[-2,45,[52,[-1]],[52,[-1]]],[[10,[[52,[-1]],46]]],4,[[48,[-1]]]],[[-2,45,[55,[-1]],[55,[-1]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[[]],[[]],[[[43,[-1]],[54,[-1]]],[[6,[[0,[-1,0]]]]],4],[[[43,[-1]]],[[44,[-1]]],4],[[[52,[-1]]],[[44,[-1]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]],[54,[-1]]],[[6,[[55,[-1]]]]],4],[[],[[34,[3]]]],0,[[],56],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],57],[[],58],[[],59],[[],60],[[],61],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,[[10,[57]]],11],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[58]]],11],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[8,3],[8,3],[8,3],[8,3],[[57,57],13],[[58,58],13],[[59,59],13],[[60,60],13],[[61,61],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[57,17],18],[[58,17],18],[[59,17],18],[[60,17],18],[[61,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[56,[6,[[62,[12,20]]]]],[[10,[57,63]]]],[[],56],[[],8],[[],8],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[61,13],[61,13],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[[6,[56]],[6,[[62,[12,20]]]]],57],[[[6,[56]]],56],0,0,[[]],[[]],[[]],[[]],[[]],0,0,[[],56],0,0,0,[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[64,8],0,[65,8],[[65,[41,[-1]],[15,[42]],42,42],[[31,[42]]],4],[[65,[41,[-1]],[15,[42]]],[[31,[42]]],4],[[65,[41,[-1]],[15,[42]]],42,4],0,[65,13],0,[[64,-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]],[43,[-1]],[43,[-1]]],[[10,[[31,[[43,[-1]]]],46]]],4,[[48,[-1]]]],[[64,-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[31,[[43,[-1]]]],46]]],4,[[48,[-1]]]],[[64,-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],0,0,0,[[[67,[-1,-2]]],8,4,[[40,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[-1,-2]]],[[67,[-1,-2]]],4,[[40,[-1]]]],[[-1,-2],3,[],[]],[-2,[[34,[[67,[-1,-2]]]]],4,[[40,[-1]]]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[[67,[-1,-2]]],8,4,[[40,[-1]],19]],[[[67,[-1,-2]],[41,[-1]],[15,[42]]],42,4,[[40,[-1]],19]],[[[67,[-1,-2]],17],18,[19,4],[19,[40,[-1]]]],[-1,-1,[]],[[[67,[-1,-2]]],13,4,[[40,[-1]],19]],[[],8],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[[67,[-1,-2]]],12,4,[[40,[-1]]]],[-2,[[67,[-1,-2]]],4,[[40,[-1]]]],[[]],[[[67,[-1,-2]],-3,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[43,[-1]],46]]],4,[[40,[-1]]],[[48,[-1]]]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[[[43,[-1]]],[[6,[[50,[-2,-1]]]]],4,0],[[-2,[66,[-1]],[41,[-1]],45,[43,[-1]],8],[[10,[[3,[[31,[[43,[-1]]]],[43,[-1]],[44,[-1]]]],46]]],4,[[48,[-1]]]],0,0,0,[[[68,[-1]]],8,4],[[[69,[-1]]],8,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[68,[-1]]],[[68,[-1]]],[7,4]],[[[69,[-1]]],[[69,[-1]]],[7,4]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,[[10,[[68,[-2]]]]],11,4],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[69,[-2]]]]],11,[70,4]],[8,3],[8,3],[[[68,[-1]]],8,4],[[[69,[-1]]],8,4],[[[69,[-1]],[41,[-1]],[15,[42]],42,42],[[31,[42]]],4],[[[69,[-1]],[41,[-1]],[15,[42]]],[[31,[42]]],4],[[[68,[-1]],[41,[-1]],[15,[42]]],42,4],[[[69,[-1]],[41,[-1]],[15,[42]]],42,4],[[[68,[-1]],17],18,[19,4]],[[[69,[-1]],17],18,[19,4]],[-1,-1,[]],[-1,-1,[]],[[[68,[-1]]],[[69,[-1]]],4],[[[68,[-1]]],13,4],[[[69,[-1]]],13,4],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[8,[[68,[-1]]],4],[[]],[[]],[[[68,[-1]],-2],10,4,36],[[[69,[-1]],-2],10,[71,4],36],[[[69,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]],[43,[-1]],[43,[-1]]],[[10,[[31,[[43,[-1]]]],46]]],4,[[48,[-1]]]],[[[69,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[31,[[43,[-1]]]],46]]],4,[[48,[-1]]]],[[[68,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[[[69,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[72,[-1]]],8,4],[[[73,[-1]]],8,4],[[[74,[-1]]],8,4],[[[75,[-1]]],8,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[72,[-1]]],[[72,[-1]]],[7,4]],[[[73,[-1]]],[[73,[-1]]],[7,4]],[[[74,[-1]]],[[74,[-1]]],[7,4]],[[[75,[-1]]],[[75,[-1]]],[7,4]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[],[[73,[-1]]],[76,4]],[[],[[74,[-1]]],[76,4]],[[],[[75,[-1]]],[76,4]],[[],[[77,[-1]]],4],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[73,[-2]]]]],11,4],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[74,[-2]]]]],11,4],[-1,[[10,[[75,[-2]]]]],11,4],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[[[77,[-1]]],-1,4],[[[72,[-1]]],8,4],[[[73,[-1]]],8,4],[[[74,[-1]]],8,4],[[[75,[-1]]],8,4],[[[72,[-1]],[41,[-1]],[15,[42]],42,42],[[31,[42]]],4],[[[72,[-1]],[41,[-1]],[15,[42]]],[[31,[42]]],4],[[[72,[-1]],[41,[-1]],[15,[42]]],42,4],[[[73,[-1]],[41,[-1]],[15,[42]]],42,4],[[[74,[-1]],[41,[-1]],[15,[42]]],42,4],[[[75,[-1]],[41,[-1]],[15,[42]]],42,4],[[[78,[-1]],17],18,19],[[[72,[-1]],17],18,[19,4]],[[[73,[-1]],17],18,[19,4]],[[[74,[-1]],17],18,[19,4]],[[[75,[-1]],17],18,[19,4]],[[[77,[-1]],17],18,[19,4]],[[[79,[-1]],17],18,[19,4]],[[[80,[-1]],17],18,[19,4]],[-1,-1,[]],[[[74,[-1]]],[[72,[-1]]],4],[[[73,[-1]]],[[72,[-1]]],4],[-1,-1,[]],[[[75,[-1]]],[[72,[-1]]],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[72,[-1]]],13,4],[[[73,[-1]]],13,4],[[[74,[-1]]],13,4],[[[75,[-1]]],13,4],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[77,[-1]],-1,-1],[[10,[13,[78,[-1]]]]],4],[[[83,[[82,[81]]]],[84,[-1,[72,[-1]]]]],3,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[[77,[-1]]],8,4],[[[77,[-1]],-1],[[10,[[6,[-1]],[78,[-1]]]]],4],[[[0,[-1]],[0,[-1]]],[[77,[-1]]],4],[[[0,[-1]],[0,[-1]],8],[[77,[-1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[77,[-1]],-1,-1],[[10,[[3,[[80,[-1]],13]],[78,[-1]]]]],4],[[[77,[-1]],-1],[[10,[[79,[-1]],[78,[-1]]]]],4],[[[77,[-1]]],-1,4],[[[77,[-1]],8],8,4],[[[73,[-1]],-2],10,4,36],[[[74,[-1]],-2],10,4,36],[[[75,[-1]],-2],10,4,36],[[[72,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]],[43,[-1]],[43,[-1]]],[[10,[[31,[[43,[-1]]]],46]]],4,[[48,[-1]]]],[[[77,[-1]],-2,[0,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]],[[10,[[44,[-1]],46]]],4,[[48,[-1]]]],[[[72,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[31,[[43,[-1]]]],46]]],4,[[48,[-1]]]],[[[72,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[[[73,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[[[74,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[[[75,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[79,[-1]],-1,-1,-1,[0,[-1]]],13,4],[[[80,[-1]],-1,-1,-1,[6,[-1]],-1,[0,[-1]]],13,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,85,[]],[-1,85,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[86,86],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[8,3],[[87,17],18],[[87,17],18],[[86,17],18],[[86,17],18],[-1,-1,[]],[46,87],[88,87],[89,87],[86,87],[-1,-1,[]],[88,86],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[-1,[],[]],[-1,[],[]],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[]],[[]],[87,[[6,[85]]]],[86,[[6,[85]]]],[-1,-2,[],[]],[-1,20,[]],[-1,20,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[90,[-1,-2,-3,-4]]],[[90,[-1,-2,-3,-4]]],[7,91],[7,91],[7,4],7],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[[54,[-1]]],[[0,[-1,0]]],4],[[[90,[-1,-2,-3,-4]],[90,[-1,-2,-3,-4]]],13,[14,91],[14,91],[14,4],14],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[90,[-1,-2,-3,-4]],17],18,[19,91],[19,91],[19,4],19],[-1,-1,[]],0,[[],8],0,[-1,-2,[],[]],0,[[],[[10,[32,33]]]],0,[[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[84,[-1,-2]],-3],3,4,[[65,[-1]]],[[93,[[92,[-1,-2]]]]]],[[[84,[-1,-2]],-3,-4],3,4,[[65,[-1]]],[[93,[5]]],[[93,[-2]]]],[[[94,[-1]]],8,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[95,[-1]]],[[95,[-1]]],[7,4]],[[[94,[-1]]],[[94,[-1]]],[7,4]],[[[84,[-1,-2]]],[[84,[-1,-2]]],[7,4],[7,[65,[-1]]]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[84,[-1,-2]]],8,4,[[65,[-1]]]],[[[84,[-1,-2]]],[[96,[5,-2]]],4,[[65,[-1]]]],[[],[[84,[-1,-2]]],[76,4],[76,[65,[-1]]]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,[[10,[[95,[-2]]]]],11,4],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[94,[-2]]]]],11,[70,4]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[84,[-2,-3]]]]],11,4,[70,[65,[-2]]]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[8,3],[8,3],[8,3],[[[95,[-1]]],8,4],[[[94,[-1]]],8,4],[[[94,[-1]],[41,[-1]],[15,[42]],42,42],[[31,[42]]],4],[[[94,[-1]],[41,[-1]],[15,[42]]],[[31,[42]]],4],[[[95,[-1]],[41,[-1]],[15,[42]]],42,4],[[[94,[-1]],[41,[-1]],[15,[42]]],42,4],[[[95,[-1]],17],18,[19,4]],[[[94,[-1]],17],18,[19,4]],[[[84,[-1,-2]],17],18,[19,4],[19,[65,[-1]]]],[[[92,[-1,-2]],17],18,[19,4],[19,[65,[-1]]]],[-1,-1,[]],[[[95,[-1]]],[[94,[-1]]],4],[-1,-1,[]],[-1,-1,[]],[[[3,[-1,-3]]],[[92,[-2,-3]]],[[93,[5]]],4,[[65,[-2]]]],[-1,-1,[]],[[[84,[-1,-2]],5],[[6,[8]]],4,[[65,[-1]]]],[[[94,[-1]]],13,4],[[[84,[-1,-2]]],13,4,[[65,[-1]]]],[[],8],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[84,[-1,-2]]],13,4,[[65,[-1]]]],[[[84,[-1,-2]]],20,4,[[65,[-1]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[[84,[-1,-2]],5],[[6,[-2]]],4,[[65,[-1]]]],[[],[[84,[-1,-2]]],4,[[65,[-1]]]],[[-1,-4],[[92,[-2,-3]]],[[93,[5]]],4,[[65,[-2]]],[[93,[-3]]]],[[[31,[-3]]],[[84,[-1,-2]]],4,[[65,[-1]]],[[93,[[92,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[95,[-1]],-2],10,4,36],[[[94,[-1]],-2],10,[71,4],36],[[[84,[-1,-2]],-3],10,4,[71,[65,[-1]]],36],[[[94,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]],[43,[-1]],[43,[-1]]],[[10,[[31,[[43,[-1]]]],46]]],4,[[48,[-1]]]],[[[94,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[31,[[43,[-1]]]],46]]],4,[[48,[-1]]]],[[[94,[-1]],-2,[66,[-1]],[41,[-1]],45,[15,[[43,[-1]]]]],[[10,[[43,[-1]],46]]],4,[[48,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[97,97],[[[98,[-1]]],[[98,[-1]]],[7,4]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[98,[-1]],[98,[-1]]],35,4],[[-1,-2],35,[],[]],[[],97],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,[[10,[97]]],11],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[98,[-2]]]]],11,4],[8,3],[8,3],[[97,97],13],[[[98,[-1]],[98,[-1]]],13,[14,4]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[97,17],18],[[97,17],18],[[[98,[-1]],17],18,[19,4]],[-1,-1,[]],[-1,-1,[]],[[[15,[99]]],[[6,[4]]]],[30,4],0,0,0,0,[100,4],[101,4],[21,4],[4,97],[[-1,-2],21,[22,23],24],[[[98,[-1]],-2],3,4,25],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[4,20],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[4,13],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],4],[[],4],[[[98,[-1]],[98,[-1]]],[[6,[35]]],4],[[]],[[]],[[97,-1],10,36],[[[98,[-1]],-2],10,4,36],[4,[[31,[99]]]],[4,[[6,[30]]]],[4,[[6,[0]]]],[4,[[6,[0]]]],[4,[[6,[0]]]],[4,[[6,[0]]]],[-1,-2,[],[]],[-1,-2,[],[]],[97,[[6,[102]]]],[-1,20,[]],[4,[[6,[103]]]],[4,103],[4,[[6,[100]]]],[4,[[6,[101]]]],[4,101],[4,[[6,[21]]]],[4,21],[4,20],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[],[[15,[97]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[104,-2,[41,[-1]]],[[34,[[66,[-1]],46]]],4,[[48,[-1]]]],[[104,[15,[0]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[104,[15,[42]],[41,[-1]],[84,[-1,-2]],8],[[34,[0]]],4,[[65,[-1]]]],[104,[[34,[3]]]],0,[104,104],[105,105],[106,106],[107,107],[108,108],[109,109],[110,110],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[106]]],11],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[[104,104],13],[[105,105],13],[[106,106],13],[[107,107],13],[[108,108],13],[[109,109],13],[[110,110],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],0,[[104,17],18],[[105,17],18],[[105,17],18],[[106,17],18],[[106,17],18],[[107,17],18],[[108,17],18],[[109,17],18],[[110,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],21,[22,23],24],[[-1,-2],21,[22,23],24],[[-1,-2],21,[22,23],24],[[105,-1],3,25],[[106,-1],3,25],[[107,-1],3,25],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],0,[105,111],0,[[20,[31,[105]],8,108],[[34,[104]]]],[12,105],[[104,[41,[-1]]],8,4],[104,8],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[106,-1],10,36],0,0,0,0,[106,-1,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[107,[41,[-1]]],42,4],[-1,20,[]],[-1,20,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[100,[[34,[106,-1]]],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[104,8],[[34,[104]]]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[112,[-1]]],[[112,[-1]]],[7,4]],[[-1,-2],3,[],[]],[[],[[66,[-1]]],[76,4]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[8,3],[8,3],[8,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[66,[-1]],-2,-1],[[34,[[43,[-1]],46]]],4,0],[[[66,[-1]],42,[41,[-1]]],[[34,[[43,[-1]],46]]],4],[[[66,[-1]],-1],[[34,[[44,[-1]],46]]],4],[[[66,[-1]],-1],[[34,[[44,[-1]],46]]],4],[[[66,[-1]],-2],[[34,[[44,[-1]],46]]],4,0],[[[66,[-1]],-2],[[34,[[44,[-1]],46]]],4,0],[[],8],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[[66,[-1]],-2,-1],3,4,[[48,[-1]]]],[[[66,[-1]],-2,-3],3,4,[[48,[-1]]],0],[[[66,[-1]],-2,[116,[-1]]],3,4,[[48,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[],104],[[[6,[[3,[104,[84,[-1,-2]]]]]],42,[41,[-1]],8],[[34,[[3,[[31,[0]],8]]]]],4,[[65,[-1]]]],[[[6,[[3,[104,[84,[-1,-2]]]]]],42,[41,[-1]],8],[[34,[[3,[[31,[42]],8,[31,[42]]]]]]],4,[[65,[-1]]]],[[[6,[[3,[104,[84,[-1,-2]]]]]],42,42,[41,[-1]],8],[[34,[[3,[[31,[42]],8,[31,[42]]]]]]],4,[[65,[-1]]]],[[[6,[[3,[104,[84,[-1,-2]]]]]],42,42,[41,[-1]],8],[[34,[[3,[[31,[0]],8]]]]],4,[[65,[-1]]]],[[[6,[[3,[104,[84,[-1,-2]]]]]],42,42,42,[41,[-1]],8],[[34,[[3,[[31,[0]],8]]]]],4,[[65,[-1]]]],[-1,-1,[]],[[],8],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[[84,[-1,-2]]],[[114,[[15,[104]]]]],4,[[65,[-1]]]],[[[117,[-1,-2]]],104,4,[[65,[-1]]]],[[[84,[-1,-2]]],[[117,[-1,-2]]],4,[[65,[-1]]]],[[[84,[-1,-2]]],[[117,[-1,-2]]],4,[[65,[-1]]]],[[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],0,[[[118,[-1,-2]]],8,4,[[65,[-1]]]],[[[118,[-1,-2]]],8,4,[[65,[-1]]]],[[[114,[[119,[-1,-2]]]],8],[[118,[-1,-2]]],4,[[65,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1,-2,8,[117,[-3,-4]]],[[34,[[31,[-5]],87]]],[],[],4,[[65,[-3]]],[]],[[[118,[-1,-2]],[41,[-1]]],[[34,[3,46]]],4,[[65,[-1]]]],[[[118,[-1,-2]]],8,4,[[65,[-1]]]],[[[118,[-1,-2]]],[[118,[-1,-2]]],[7,4],[7,[65,[-1]]]],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[[41,[-1]],-2],[[31,[42]]],4,[]],[[[118,[-1,-2]],17],18,[19,4],[19,[65,[-1]]]],[[[118,[-1,-2]]],[[6,[[31,[-3]]]]],4,[[65,[-1]]],[]],[-1,-1,[]],[[[15,[0]],-1,[114,[[119,[-2,-3]]]]],[[31,[[118,[-2,-3]]]]],[],4,[[65,[-2]]]],[[],8],[-1,-2,[],[]],[-1,[[31,[-2]]],[],4],[[],[[10,[32,33]]]],[[[118,[-1,-2]]],8,[120,4],[[65,[-1]]]],[[[118,[-1,-2]]],8,4,[[65,[-1]]]],[[[118,[-1,-2]]],6,4,[[65,[-1]]]],[[]],[[[118,[-1,-2]],[118,[-1,-2]]],13,4,[[65,[-1]]]],[[[118,[-1,-2]],8],[[118,[-1,-2]]],[120,4],[[65,[-1]]]],[[[118,[-1,-2]]],8,4,[[65,[-1]]]],[[[118,[-1,-2]]],[[31,[-1]]],4,[[65,[-1]]]],[[[118,[-1,-2]]],[[121,[-1]]],[120,4],[[65,[-1]]]],[[[15,[-1]]],8,[]],[[[118,[-1,-2]],-3,[15,[[44,[-1]]]]],[[34,[[31,[[44,[-1]]]],46]]],4,[[65,[-1]]],[[48,[-1]]]],[[[118,[-1,-2]],-3],[[34,[3,46]]],4,[[65,[-1]]],[[48,[-1]]]],[[[118,[-1,-2]],-3,[6,[[44,[-1]]]],[15,[[44,[-1]]]]],[[34,[[3,[[6,[[44,[-1]]]],[31,[[44,[-1]]]]]],46]]],4,[[65,[-1]]],[[48,[-1]]]],[[[118,[-1,-2]],-3,-4,-5,[15,[-6]],-7],[[34,[-5,46]]],4,[[65,[-1]]],[[48,[-1]]],[],[],[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[42,106],42],[42,42],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[42]]],11],[8,3],[[],[[116,[-1]]],4],[[],42],[[42,42],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[42,17],18],[[42,[41,[-1]],81],20,4],[-1,-1,[]],[42,[[6,[8]]]],[[-1,-2],21,[22,23],24],[42,[[6,[8]]]],[42,[[6,[8]]]],[42,[[6,[8]]]],[[42,-1],3,25],[[],8],[-1,-2,[],[]],[42,13],[42,13],[[],[[10,[32,33]]]],[[]],[[42,-1],10,36],[42,106],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],0,[[[41,[-1]],-1,-1,42],3,4],[-1,-2,[],[]],[-1,-2,[],[]],[[[41,[-1]],42],[[34,[[3,[42,42]]]]],4],[[[41,[-1]],30],42,4],[[[41,[-1]],-1],42,4],[[[41,[-1]],42],42,4],[[[41,[-1]],42,42],42,4],[[[41,[-1]]],42,4],[[[41,[-1]]],42,4],[[[41,[-1]]],42,4],[[],[[41,[-1]]],4],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[[41,[-1]]],42,4],[[[41,[-1]],8],[[3,[42,42]]],4],[[[41,[-1]],8],[[3,[42,42,42]]],4],[[[41,[-1]],8],[[3,[42,42,42,42]]],4],[[[41,[-1]],8],-1,4],[[[41,[-1]],8],[[6,[[3,[42,42]]]]],4],[[[41,[-1]],8],[[6,[[3,[42,42,42]]]]],4],[[[41,[-1]],8],[[6,[[3,[42,42,42,42]]]]],4],[[[41,[-1]],8],[[6,[-1]]],4],[[[41,[-1]],42],[[6,[5]]],4],[[[41,[-1]],42],[[6,[[3,[[31,[42]],[6,[42]]]]]]],4],[[[41,[-1]],42],[[6,[20]]],4],[[[41,[-1]],42],[[6,[5]]],4],[[[41,[-1]],42],[[6,[5]]],4],[[[41,[-1]],17],18,[19,4]],[-1,-1,[]],[[[41,[-1]]],-2,4,[]],[[[41,[-1]]],8,4],[[[41,[-1]]],-1,4],0,[[[41,[-1]]],8,4],[[[41,[-1]]],-1,4],0,[[[41,[-1]]],8,4],[[[41,[-1]]],-1,4],0,[[[41,[-1]]],8,4],[[[41,[-1]]],-1,4],0,[[[41,[-1]],42],[[116,[-1]]],4],[[[41,[-1]],-1,42],42,4],[[[41,[-1]],-1,42],[[3,[-1,[116,[-1]]]]],4],[[[41,[-1]]],3,4],[[[41,[-1]]],3,4],[[[41,[-1]],[31,[42]],42],42,4],[[],8],[[[41,[-1]]],-2,4,[]],[[[41,[-1]],106,42,42],42,4],[[[41,[-1]],106,42,42,[116,[-1]]],42,4],[[[41,[-1]],106,42,42,42],42,4],[[[41,[-1]],106,42,42,42,[116,[-1]]],42,4],[[[41,[-1]],106,42,42,42,42],42,4],[[[41,[-1]],106,42,42,42,42,[116,[-1]]],42,4],[[[41,[-1]],106,-1],42,4],[[[41,[-1]],106,-1,[116,[-1]]],42,4],[[[41,[-1]],-1],[[3,[8,13]]],4],[[[41,[-1]],42,42,42],42,4],[[[41,[-1]],12],42,4],[[[41,[-1]]],42,4],[[[41,[-1]],12],42,4],[[[41,[-1]],5],42,4],[[[41,[-1]],[15,[20]]],42,4],[[[41,[-1]],[0,[-1]]],42,4],[[[41,[-1]],12],42,4],[-1,-2,[],[]],0,[[[41,[-1]],42],13,4],[[[41,[-1]],12],42,4],[[],[[10,[32,33]]]],[[[41,[-1]],[31,[42]]],42,4],[[[41,[-1]],-1],42,4],[[[41,[-1]],21],42,4],[[[41,[-1]],[116,[-1]]],42,4],[[[41,[-1]],-1],[[6,[[3,[-1,42]]]]],4],[[]],0,[[[41,[-1]],-2,-2],13,4,[]],[[[41,[-1]],42,42],13,4],[[[41,[-1]],12],[[34,[-2,-3]]],4,[],[]],[[[41,[-1]],[83,[[82,[81]]]],12],[[34,[42]]],4],[[[41,[-1]],[83,[[82,[81]]]],12],[[34,[[3,[8,122,42,13]],123]]],4],[[[41,[-1]],12],[[34,[42]]],4],[[[41,[-1]],[116,[-1]]],42,4],[[[41,[-1]],[15,[42]]],[[31,[-1]]],4],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[41,[-1]],21],42,4],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[[[41,[-1]],106],42,4],0,0,0,0,0,0,0,0,[-1,85,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[123,123],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],0,0,[[123,17],18],[[123,17],18],[-1,-1,[]],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[-1,[],[]],[[],8],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,20,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],0,0,0,0,0,[124,12],[-1,-2,[],[]],[-1,-2,[],[]],[124,124],[[-1,-2],3,[],[]],[124,30],[[124,122],[[125,[-1,[31,[99]]]]],4],[[],124],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[124,-1],20,[[16,[[15,[99]]]]]],[[124,124],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[124,17],18],[-1,-1,[]],[[],8],[-1,-2,[],[]],[[124,30],13],[[],[[10,[32,33]]]],[[],[[0,[[126,[122],[[49,[[125,[-1,20]]]]]]]]],4],[122,[[125,[-1,124]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,20]]]]]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,20]]]]]]]]],4],[124,[[0,[[126,[122],[[49,[[125,[-1,[31,[99]]]]]]]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,124]]]]]]]]],4],[124,[[38,[126]]]],[124,[[0,[[126,[122],[[49,[[125,[-1,[31,[99]]]]]]]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,20]]]]]]]]],4],[[]],[124,101],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,12,[127,[-1,-2]]],[[127,[-1,-2]]],[128,7,129],4],[[-1,130,[127,[-1,-2]]],[[127,[-1,-2]]],[128,7,129],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[131,[-1]]],[[131,[-1]]],[7,4]],[[[127,[-1,-2]]],[[127,[-1,-2]]],[7,129],[7,4]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[8,3],[[[131,[-1]],[131,[-1]]],13,[14,4]],[[[127,[-1,-2]],[127,[-1,-2]]],13,[14,129],[14,4]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],0,0,[[[131,[-1]],17],18,[19,4]],[[[131,[-1]],17],18,4],[[[127,[-1,-2]],17],18,[19,129],[19,4]],[[[127,[122,-1]],17],18,4],[-1,-1,[]],[-1,-1,[]],[[-1,130],[[127,[-1,-2]]],[128,7,129],4],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[],8],[[],8],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[131,[-1]]],13,4],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[[132,[-1,-2,[127,[-1,-3]]]],-4],[[132,[-1,-2,[127,[-1,-3]]]]],129,[],4,[[126,[[127,[-1,-3]]],[[49,[[127,[-1,-3]]]]]]]],[[-1,[131,[-2]]],[[127,[-1,-2]]],129,4],[[[6,[-1]],-2,[131,[-3]]],[[132,[-2,-1,[127,[-2,-3]]]]],[],129,4],[[[127,[-1,-2]],[127,[-1,-2]]],[[127,[-1,-2]]],[128,7,129],4],[[]],[[]],[[[10,[-1,-2]],-3,-5],[[132,[-3,-1,[127,[-3,-4]]]]],[],[],129,4,[[126,[-2],[[49,[[131,[-4]]]]]]]],[[-1,[131,[-2]]],[[132,[-1,-3,[127,[-1,-2]]]]],129,4,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,20,[]],[-1,20,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[133,133],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[133,133],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[133,17],18],[-1,-1,[]],[[122,122],133],[133,[[6,[8]]]],[[],8],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[]],[[12,8,8,8,8],20],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[134,134],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[134,134],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[134,17],18],[-1,-1,[]],[[],8],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[30,12],[[0,[[126,[122],[[49,[[125,[-1,30]]]]]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,122]]]]]]]]],4],[[30,13,12],[[0,[[126,[122],[[49,[[125,[-1,134]]]]]]]]],4],[[30,13,12],[[0,[[126,[122],[[49,[[125,[-1,122]]]]]]]]],4],[30,[[0,[[126,[122],[[49,[[125,[-1,20]]]]]]]]],4],[[30,13,12],[[0,[[126,[122],[[49,[[125,[-1,20]]]]]]]]],4],[[30,13,12],[[0,[[126,[122],[[49,[[125,[-1,20]]]]]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,30]]]]]]]]],4],[[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[[[83,[[82,[81]]]],13],[[0,[[126,[122],[[49,[[125,[-1,[114,[5]]]]]]]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,[0,[-1]]]]]]]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,[0,[-1]]]]]]]]]]],4],[122,[[125,[-1,122]]],4],[[[83,[[82,[81]]]],13,13],[[0,[[126,[122],[[49,[[125,[-1,[0,[-1]]]]]]]]]]],4],[[[83,[[82,[81]]]],13],[[0,[[126,[122],[[49,[[125,[-1,[6,[[3,[13,[0,[-1]]]]]]]]]]]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,[0,[-1]]]]]]]]]]],4],[124,[[0,[[126,[122],[[49,[[125,[-1,[2,[-1]]]]]]]]]]],4],[[[83,[[82,[81]]]],13],[[0,[[126,[122],[[49,[[125,[-1,[0,[-1]]]]]]]]]]],4],[[[83,[[82,[81]]]],13],[[0,[[126,[122],[[49,[[125,[-1,[114,[5]]]]]]]]]]],4],[[[83,[[82,[81]]]],13],[[0,[[126,[122],[[49,[[125,[-1,[114,[5]]]]]]]]]]],4],[[[83,[[82,[81]]]],13],[[0,[[126,[122],[[49,[[125,[-1,[114,[5]]]]]]]]]]],4],[122,[[125,[-1,[31,[122]]]]],4],[122,[[125,[-1,[31,[122]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,[0,[-1]]]]]]]]]]],4],[[[83,[[82,[81]]]],13],[[0,[[126,[122],[[49,[[125,[-1,[0,[-1]]]]]]]]]]],4],[12,[[0,[[126,[122],[[49,[[125,[-1,20]]]]]]]]],4],[12,[[0,[[126,[122],[[49,[[125,[-1,20]]]]]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,[31,[20]]]]]]]]]]],4],[[[83,[[82,[81]]]],13,13],[[0,[[126,[122],[[49,[[125,[-1,[0,[-1]]]]]]]]]]],4],[[],[[0,[[126,[122],[[49,[[125,[-1,[0,[-1]]]]]]]]]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[114,[[119,[-1,-2]]]],8],[[143,[],[[135,[-3]],[136,[-4]],[137,[-5]],[138,[-6]],[139,[-7]],[140,[-8]],[141,[-9]],[142,[-10]]]]],4,[[65,[-1]]],[19,144,91],[19,144,91],[28,29,[145,[],[[135,[-3]],[136,[-4]]]]],[[93,[87]]],[[146,[-3,-4]]],[[146,[-3,-4],[[147,[]]]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-1,-2,8,[117,[-3,-4]]],[[10,[[31,[-5]],87]]],[],[],4,[[65,[-3]]],[]],[[[143,[],[[135,[-1]],[136,[-2]],[137,[-3]],[138,[-4]],[139,[-5]],[140,[-6]],[141,[-7]],[142,[-8]]]],-3],[[10,[3,46]]],[19,144,91],[19,144,91],[28,29,[145,[],[[135,[-1]],[136,[-2]]]]],[[93,[87]]],[[146,[-1,-2]]],[[146,[-1,-2],[[147,[]]]]],[],[]],[[[152,[],[[148,[-1]],[149,[-2]],[150,[-3]],[151,[-4]]]],-1],[[10,[[152,[],[[148,[-1]],[149,[-2]],[150,[-3]],[151,[-4]]]],87]]],[],[],[],[]],[153,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[-1,-2],[[31,[-3]]],[],[],[]],[153,-1,[]],[[[155,[],[[148,[-1]],[149,[-2]],[154,[-3]]]],-1,8],[[10,[[3,[-2,[31,[-4]],[31,[-4]],8]],87]]],[],[],[[152,[-4,-5,-6],[[148,[-1]],[149,[-2]]]]],120,[[65,[-4]]],[[143,[-4,-5]]]],[[[155,[],[[148,[-1]],[149,[-2]],[154,[-3]]]],8],8,[],[],[[152,[-4,-5,-6],[[148,[-1]],[149,[-2]]]]],120,[[65,[-4]]],[[143,[-4,-5]]]],[153,-1,[]],[[156,17],18],[[[155,[],[[148,[-1]],[149,[-2]],[154,[-3]]]]],156,[],[],[[152,[-4,-5,-6],[[148,[-1]],[149,[-2]]]]],120,[[65,[-4]]],[[143,[-4,-5]]]],[[[143,[],[[135,[-1]],[136,[-2]],[137,[-3]],[138,[-4]],[139,[-5]],[140,[-6]],[141,[-7]],[142,[-8]]]]],[[6,[[31,[-6]]]]],[19,144,91],[19,144,91],[28,29,[145,[],[[135,[-1]],[136,[-2]]]]],[[93,[87]]],[[146,[-1,-2]]],[[146,[-1,-2],[[147,[]]]]],[],[]],[-1,-1,[]],[[[15,[-1]],-2,[114,[[119,[-3,-4]]]]],[[31,[[143,[],[[135,[-5]],[136,[-6]],[137,[-2]],[138,[-7]],[139,[-1]],[140,[-8]],[141,[-9]],[142,[-10]]]]]]],[[146,[-5,-6]]],[28,29,[145,[],[[135,[-5]],[136,[-6]]]]],4,[[65,[-3]]],[19,144,91],[19,144,91],[[93,[87]]],[[146,[-5,-6],[[147,[]]]]],[],[]],[[[145,[],[[135,[-1]],[136,[-2]],[157,[-3]]]]],-2,[],[],19],[[[145,[],[[135,[-1]],[136,[-2]],[157,[-3]]]]],3,[],[],19],[[],8],[[[145,[],[[135,[-1]],[136,[-2]],[157,[-3]]]]],-1,[],[],19],[[[146,[],[[147,[-1]]]]],-1,[[153,[-2,-3]]],[],[]],[-1,-2,[],[]],[-1,[[31,[-2]]],[],4],[[[155,[],[[148,[-1]],[149,[-2]],[154,[-3]]]]],[[114,[[84,[-4,-5]]]]],[],[],[[152,[-4,-5,-6],[[148,[-1]],[149,[-2]]]]],120,[[65,[-4]]],[[143,[-4,-5]]]],[[],[[10,[32,33]]]],0,[158,8],[[[155,[],[[148,[-1]],[149,[-2]],[154,[-3]]]],[15,[-6]]],[[10,[[31,[[3,[-6,[159,[-4]]]]]],46]]],[],[],[[152,[-4,-5,-6],[[148,[-1]],[149,[-2]]]]],120,[[65,[-4]]],[[143,[-4,-5]]]],[[[146,[],[[147,[-1]]]]],-1,[[153,[-2,-3]]],[],[]],[[[143,[],[[135,[-1]],[136,[-2]],[137,[-3]],[138,[-4]],[139,[-5]],[140,[-6]],[141,[-7]],[142,[-8]]]]],6,[19,144,91],[19,144,91],[28,29,[145,[],[[135,[-1]],[136,[-2]]]]],[[93,[87]]],[[146,[-1,-2]]],[[146,[-1,-2],[[147,[]]]]],[],[]],[[]],[[[143,[],[[135,[-1]],[136,[-2]],[137,[-3]],[138,[-4]],[139,[-5]],[140,[-6]],[141,[-7]],[142,[-8]]]],[143,[],[[135,[-1]],[136,[-2]],[137,[-3]],[138,[-4]],[139,[-5]],[140,[-6]],[141,[-7]],[142,[-8]]]]],13,[19,144,91],[19,144,91],[28,29,[145,[],[[135,[-1]],[136,[-2]]]]],[[93,[87]]],[[146,[-1,-2]]],[[146,[-1,-2],[[147,[]]]]],[],[]],[[[155,[],[[148,[-1]],[149,[-2]],[154,[-3]]]],-1,15],[[10,[[3,[-2,[31,[-4]],[31,[-4]],8]],87]]],[],[],[[152,[-4,-5,-6],[[148,[-1]],[149,[-2]]]]],120,[[65,[-4]]],[[143,[-4,-5]]]],[[-1,[15,[-2]],[31,[-4]],8,[114,[[84,[-2,-3]]]]],[[10,[-5,87]]],[],120,[[65,[-2]]],[[143,[-2,-3]]],[]],[[[145,[],[[135,[-1]],[136,[-2]],[157,[-3]]]],-1,-1],13,[],[],19],[158,8],[158,[[31,[-1]]],4],[[[145,[],[[135,[-1]],[136,[-2]],[157,[-3]]]],12],[[10,[-1,-3]]],[],[],19],[[[155,[],[[148,[-1]],[149,[-2]],[154,[-3]]]]],8,[],[],[[152,[-4,-5,-6],[[148,[-1]],[149,[-2]]]]],120,[[65,[-4]]],[[143,[-4,-5]]]],[[[15,[-1]]],8,[]],0,[[[143,[],[[135,[-1]],[136,[-2]],[137,[-3]],[138,[-4]],[139,[-5]],[140,[-6]],[141,[-7]],[142,[-8]]]],-10,-3,-8,[15,[-6]],-7],[[10,[-8,46]]],[19,144,91],[19,144,91],[28,29,[145,[],[[135,[-1]],[136,[-2]]]]],[[93,[87]]],[[146,[-1,-2]]],[[146,[-1,-2],[[147,[]]]]],[],[],4,[[48,[-9]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[[[152,[],[[148,[-1]],[149,[-2]],[150,[-3]],[151,[-4]]]],-1,[15,[-5]],[15,[-5]],-3],[[10,[13,-4]]],[],[],[],[],120],[-1,-2,[],[]],[[],31],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,[114,[[84,[-1,-2]]]]],-1,120,[[65,[-1]]]],[[8,[114,[[84,[-1,-2]]]]],[[3,[-3,[160,[-1]]]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[[[161,[-1,-2]]],[[161,[-1,-2]]],[120,7],[7,[162,[-1]]]],[[-1,-2],3,[],[]],[[[163,[-1,-2,-3]],[161,[-1,-3]]],[[10,[[163,[-1,-2,-3]],87]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[-1,[[10,[[161,[-2,-3]]]]],11,120,[[162,[-2]]]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[163,[-2,-3,-4]]]]],11,120,[[65,[-2]]],[[143,[-2,-3]]]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[8,3],[8,3],[[[161,[-1,-2]],-3],[[164,[3]]],120,[[162,[-1]]],165],[[[161,[-1,-2]],[15,[99]]],[[6,[[15,[99]]]]],120,[[162,[-1]]]],[[[161,[-1,-2]]],8,120,[[162,[-1]]]],[[[166,[-1,-2,-3]],17],18,[19,120],[19,[65,[-1]]],[19,[143,[-1,-2]]]],[[[166,[-1,-2,-3]]],156,120,[[65,[-1]]],[[143,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[166,[-1,-2,-3]]],[[114,[[84,[-1,-2]]]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[8,[114,[[84,[-1,-2]]]]],[[166,[-1,-2,-3]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[[]],[[]],[[]],[[[161,[-1,-3]],[15,[-1]],[31,[-3]],8,[114,[[84,[-1,-2]]]]],[[10,[[163,[-1,-2,-3]],87]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[[8,[114,[[84,[-1,-2]]]]],[[161,[-1,-3]]],120,[[65,[-1]]],[[162,[-1]],[143,[-1,-2]]]],[[[166,[-1,-2,-3]]],8,120,[[65,[-1]]],[[143,[-1,-2]]]],[[[161,[-1,-2]],-3],10,120,[[162,[-1]]],36],[[[163,[-1,-2,-3]],-4],10,120,[[65,[-1]]],[[143,[-1,-2]]],36],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[163,[-1,-2,-3]],-4,[15,[-1]],[15,[-1]],8],[[10,[13,-5]]],120,[[65,[-1]]],[[143,[-1,-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[8,[114,[[84,[-1,-2]]]],8],-1,120,[[65,[-1]]]],[[8,[114,[[84,[-1,-2]]]]],[[168,[[167,[-1]]]]],120,[[65,[-1]]]],0,[[[119,[-1,-2]]],[[119,[-1,-2]]],[7,4],[7,[65,[-1]]]],[[-1,-2],3,[],[]],[[[169,[-1,-2,-3]],[170,[-1,-3]]],[[10,[[169,[-1,-2,-3]],87]]],120,[[65,[-1]]],[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[169,[-2,-3,-4]]]]],11,[70,120],[[65,[-2]]],[[143,[-2,-3]]]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[[170,[-1,-2]]],-1,120,[[171,[-1]]]],[8,3],[8,3],[8,3],[8,3],[[[172,[-1,-2,-3]],17],18,[19,120],[19,[65,[-1]]],[19,[143,[-1,-2]]]],[[[119,[-1,-2]],17],18,[19,4],[19,[65,[-1]]]],[[[172,[-1,-2,-3]]],156,120,[[65,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[170,[-1,-2]],8],-3,120,[[171,[-1]]],[]],[[],8],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[172,[-1,-2,-3]]],[[114,[[84,[-1,-2]]]]],120,[[65,[-1]]],[]],[[[119,[-1,-2]]],[[114,[[84,[-1,-2]]]]],4,[[65,[-1]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[8,[114,[[84,[-1,-2]]]]],[[172,[-1,-2,-3]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[[[114,[[84,[-1,-2]]]],8],[[119,[-1,-2]]],4,[[65,[-1]]]],[[[114,[[84,[-1,-2]]]],8],[[119,[-1,-2]]],4,[[65,[-1]]]],[[[119,[-1,-2]]],8,4,[[65,[-1]]]],[[]],[[]],[[]],[[]],0,[[[170,[-1,-3]],[15,[-1]],[31,[-3]],8,[114,[[84,[-1,-2]]]]],[[10,[[3,[[169,[-1,-2,-3]],8]],87]]],120,[[65,[-1]]],[]],[[8,[114,[[84,[-1,-2]]]]],[[170,[-1,-3]]],120,[[65,[-1]]],[]],[[[172,[-1,-2,-3]]],8,120,[[65,[-1]]],[]],[[[119,[-1,-2]]],8,4,[[65,[-1]]]],[[[169,[-1,-2,-3]],-4],10,[71,120],[[65,[-1]]],[[143,[-1,-2]]],36],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[169,[-1,-2,-3]],-4,[15,[-1]],[15,[-1]],8],[[10,[13,-5]]],120,[[65,[-1]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[173,[-1,-2,-3]]],[[10,[[114,[[161,[-1,-3]]]],0]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[[[173,[-1,-2,-3]]],[[10,[[174,[-1]],0]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[[[173,[-1,-2,-3]]],[[10,[[175,[-1]],0]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[[[173,[-1,-2,-3]]],[[10,[[170,[-1,-3]],0]]],120,[[65,[-1]]],[]],[[[173,[-1,-2,-3]],-5],[[10,[-4,0]]],120,[[65,[-1]]],[[143,[-1,-2]]],[],[[51,[[161,[-1,-3]]],[[49,[-4]]]]]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[173,[-1,-2,-3]]],[[31,[[173,[-1,-2,-3]]]]],120,[[65,[-1]]],[]],[176,176],[177,177],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[173,[-1,-2,-3]],178],[[164,[179]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[176]]],11],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[177]]],11],[8,3],[8,3],[8,3],[[176,176],13],[[177,177],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[173,[-1,-2,-3]],17],18,[19,120],[19,[65,[-1]]],[19,[143,[-1,-2]]]],[[176,17],18],[[177,17],18],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],8],[[],8],[[],8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[173,[-1,-2,-3]]],20,120,[[65,[-1]]],[[143,[-1,-2]]]],0,0,[[[173,[-1,-2,-3]]],[[114,[[84,[-1,-2]]]]],120,[[65,[-1]]],[[143,[-1,-2]]]],0,0,[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[8,[114,[[84,[-1,-2]]]],13,176],[[173,[-1,-2,-3]]],120,[[65,[-1]]],[]],[[[173,[-1,-2,-3]],178],[[164,[179]]],120,[[65,[-1]]],[[143,[-1,-2]]]],[[]],[[]],[[]],0,0,[[[173,[-1,-2,-3]],8],[[173,[-1,-2,-3]]],120,[[65,[-1]]],[]],[[176,-1],10,36],[[177,-1],10,36],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],81],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[81,17],18],[[81,[114,[5]]],20],[-1,-1,[]],[81,[[114,[5]]]],[[81,[15,[[114,[5]]]]],[[34,[3]]]],[[],8],[[],81],[[],81],[[81,-1],[[114,[5]]],[[16,[12]]]],[[81,[15,[-1]],13,13],[[34,[[114,[5]]]]],[[16,[12]]]],[[81,[15,[-1]],13],[[34,[[114,[5]]]]],[[16,[12]]]],[-1,-2,[],[]],[[],[[10,[32,33]]]],[12,5],[[],5],0,[[]],[81,[[83,[[82,[81]]]]]],[[81,12],[[6,[[114,[5]]]]]],[[81,[114,[5]]],[[34,[3]]]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],0,[12,5],[-1,-2,[],[]],0,0,0,0,[-1,85,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[54,[-1]],[0,[-1,0]]],[[10,[[0,[-1,0]],88]]],4],0,[[[54,[-1]],[0,[-1,0]]],[[10,[[3,[[0,[-1,0]],[0,[-1,0]]]],88]]],4],[[[54,[-1]],[0,[-1,0]]],[[10,[[0,[-1,0]],88]]],4],0,0,[88,88],[[[180,[-1]]],[[180,[-1]]],[7,4]],[[[181,[-1]]],[[181,[-1]]],[7,4]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[[[54,[-1]],[0,[-1,0]]],[[0,[-1,0]]],4],0,[[[54,[-1]],[0,[-1,0]],[0,[-1,0]]],[[0,[-1,0]]],4],0,0,0,0,[[],[[54,[-1]]],4],0,0,[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],0,[8,3],[8,3],[8,3],[8,3],0,0,0,0,0,[[[54,[-1]]],[[181,[-1]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[0,[-1]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[30]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[3,[[98,[-1]],[0,[-1,0]]]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[3,[[0,[-1,0]],[0,[-1,0]]]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[0,[-1]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[3,[[0,[-1,0]],[0,[-1,0]],[0,[-1,0]]]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[5]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[31,[[0,[-1,0]]]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[5]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[2,[-1]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[3,[[0,[-1,0]],[0,[-1,0]]]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[20]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[5]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[5]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[3,[[0,[-1,0]],[0,[-1,0]]]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[0,[-1]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[1]]],4],[[[54,[-1]],[53,[-1]]],[[6,[[0,[-1,0]]]]],4],[[[54,[-1]],[55,[-1]]],[[6,[[0,[-1,0]]]]],4],[[[54,[-1]],17],18,[19,4]],[[88,17],18],[[88,17],18],[[[180,[-1]],17],18,[19,4]],[[[181,[-1]],17],18,[19,4]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[54,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[182,[-1]]]]],4],[[[54,[-1]],[0,[-1]]],[[6,[[182,[-1]]]]],4],0,[[[54,[-1]],-2],[[6,[[0,[-1,0]]]]],4,[[93,[[2,[-1]]]]]],[[[54,[-1]],[0,[-1,0]]],[[6,[[55,[-1]]]]],4],[[[54,[-1]],[0,[-1,0]],[6,[[183,[-1]]]]],[[10,[[3,[[53,[-1]],[6,[[184,[-1]]]]]],88]]],4],[[[54,[-1]],[0,[-1,0]],[6,[[183,[-1]]]]],[[10,[[3,[[55,[-1]],[6,[[185,[-1]]]]]],88]]],4],0,0,[[[54,[-1]],[0,[-1,0]]],[[6,[[53,[-1]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[55,[-1]]]]],4],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[[54,[-1]],-1,[0,[-1,0]]],[[6,[[0,[-1,0]]]]],4],[[[54,[-1]],-1,[0,[-1,0]]],[[0,[-1,0]]],4],0,[[[54,[-1]]],3,4],0,0,[-1,[],[]],[[],8],[[],8],[[],8],[[],8],[[[54,[-1]],30],[[0,[-1,0]]],4],[[[54,[-1]],-1,[0,[-1,0]]],[[0,[-1,0]]],4],[[[54,[-1]],[0,[-1,0]],[0,[-1,0]]],[[0,[-1,0]]],4],[[[54,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]],[0,[-1,0]],[0,[-1,0]],[0,[-1,0]]],[[0,[-1,0]]],4],[[[54,[-1]],[0,[-1,0]],[0,[-1,0]]],[[0,[-1,0]]],4],[[[54,[-1]],[15,[[0,[-1,0]]]]],[[0,[-1,0]]],4],0,[[[54,[-1]],-1],[[0,[-1,0]]],4],[[[54,[-1]],-1],[[0,[-1,0]]],4],[[[54,[-1]],-1],[[0,[-1,0]]],4],[[[54,[-1]],-1],[[0,[-1,0]]],4],[[[54,[-1]],-2],[[0,[-1,0]]],4,[[93,[[2,[-1]]]]]],[[[54,[-1]],-1],[[0,[-1,0]]],4],[[[54,[-1]],-1],[[0,[-1,0]]],4],[[[54,[-1]],-1],[[0,[-1,0]]],4],[[[54,[-1]],-1],[[0,[-1,0]]],4],[[[54,[-1]],[0,[-1,0]],[0,[-1,0]]],[[0,[-1,0]]],4],[[[54,[-1]],12],[[0,[-1,0]]],4],[[[54,[-1]],5],[[0,[-1,0]]],4],[[[54,[-1]],[15,[20]]],[[0,[-1,0]]],4],[[[54,[-1]],[0,[-1,0]],[0,[-1,0]]],[[0,[-1,0]]],4],[[[54,[-1]],13],[[0,[-1,0]]],4],[[[54,[-1]],[0,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]],[0,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]],21],[[0,[-1,0]]],4],[[[54,[-1]],1],[[0,[-1,0]]],4],[[[54,[-1]],[53,[-1]],[183,[-1]]],[[6,[[0,[-1,0]]]]],4],[[[54,[-1]],[55,[-1]],[183,[-1]]],[[6,[[0,[-1,0]]]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[54,[-1]],-2],[[0,[-1,0]]],4,[[16,[12]]]],0,[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],[[],[[10,[32,33]]]],0,0,0,0,0,0,[[[54,[-1]],[15,[[0,[-1,0]]]]],[[0,[-1,0]]],4],0,[[[54,[-1]],[0,[-1,0]]],[[0,[-1,0]]],4],0,[[],[[54,[-1]]],4],[[[54,[-1]]],[[181,[-1]]],4],[[[54,[-1]]],[[0,[-1,0]]],4],0,[[[54,[-1]],-2],[[0,[-1,0]]],4,[[93,[[2,[-1]]]]]],0,0,0,0,0,[[[54,[-1]],[0,[-1,0]]],[[6,[[3,[-1,[0,[-1,0]]]]]]],4],0,[[[54,[-1]],[0,[-1,0]]],[[10,[[3,[-1,[0,[-1,0]]]],88]]],4],[[]],[[]],[[]],[[]],0,0,[[[180,[-1]]],[[0,[-1,0]]],4],[[[54,[-1]],[0,[-1,0]],[0,[-1,0]]],[[10,[13,88]]],4],0,0,[[[54,[-1]],12],[[10,[[0,[-1,0]],123]]],4],[[[54,[-1]],[83,[[82,[81]]]],122],[[10,[[3,[122,[0,[-1,0]],13]],123]]],4],[[[54,[-1]],[83,[[82,[81]]]],12],[[10,[[0,[-1,0]],123]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[0,[-1,0]]]]],4],0,[[[54,[-1]],[0,[-1,0]]],[[10,[[0,[-1,0]],88]]],4],[[[54,[-1]],12],[[0,[-1,0]]],4],0,[[[54,[-1]],[0,[-1,0]],[0,[-1,0]]],[[0,[-1,0]]],4],0,[[[54,[-1]]],[[0,[-1,0]]],4],0,[[[54,[-1]],-2],[[0,[-1,0]]],4,[[16,[12]]]],0,[[[54,[-1]]],[[0,[-1,0]]],4],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,20,[]],[[[54,[-1]],[0,[-1,0]]],[[6,[[184,[-1]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[6,[[185,[-1]]]]],4],[[[54,[-1]],[0,[-1,0]]],[[10,[[3,[[183,[-1]],[55,[-1]]]],88]]],4],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],[-1,37,[]],0,[[[54,[-1]],21],[[0,[-1,0]]],4],0,[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[-1,39,[]],[[[54,[-1]],12],[[0,[-1,0]]],4],[[[180,[-1]]],-1,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[54,[-1]],-1,-1],[[10,[[53,[-1]],88]]],4],0,[[[54,[-1]],-1,-1],[[10,[[55,[-1]],88]]],4],0,[[[180,[-1]]],[[55,[-1]]],4],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[8,99],[186,186],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[186,186],13],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[186,17],18],[[186,17],18],[-1,-1,[]],[[[15,[99]]],[[34,[186]]]],[186,[[10,[-1,0]]],70],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[],8],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[]],[[[15,[99]]],[[6,[8]]]],[186,99],[99,13],[99,13],[186,[[31,[99]]]],[-1,-2,[],[]],[-1,20,[]],[8,[[31,[99]]]],[-1,[[10,[186,0]]],71],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[184,[-1]]],[[184,[-1]]],[7,4]],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[184,[-2]]]]],11,[70,4]],[8,3],[[[184,[-1]],[184,[-1]]],13,[14,4]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[184,[-1]],17],18,[19,4]],[-1,-1,[]],[[[184,[-1]]],[[182,[-1]]],4],[[],8],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[]],[[[184,[-1]],-2],10,[71,4],36],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[[[184,[-1]],[0,[-1]]],[[53,[-1]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[185,[-1]]],[[185,[-1]]],[7,4]],[[-1,-2],3,[],[]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[185,[-2]]]]],11,[70,4]],[8,3],[[[185,[-1]],[185,[-1]]],13,[14,4]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[185,[-1]],17],18,4],[[[185,[-1]],17],18,[19,4]],[-1,-1,[]],[[[54,[-1]],[0,[-1,0]]],[[6,[[185,[-1]]]]],4],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[],8],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[]],[[[185,[-1]],-2],10,[71,4],36],[-1,-2,[],[]],[-1,20,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]],[[[185,[-1]],[0,[-1]]],[[55,[-1]]],4],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[50,[-1,-2]]],[[50,[-1,-2]]],[7,0],[7,4]],[[-1,-2],3,[],[]],[[[50,[-1,-2]],[50,[-1,-2]]],35,0,4],[[-1,-2],35,[],[]],[8,-1,[]],[8,-1,[]],[-1,[[10,[[50,[-2,-3]]]]],11,[70,0],[70,4]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[8,3],[[],[[50,[106,-1]]],4],[[[50,[-1,-2]],[50,[-1,-2]]],13,[14,0],[14,4]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[[50,[-1,-2]],17],18,[0,27],4],[[[50,[-1,-2]],17],18,[19,0],[19,4]],[-1,-1,[]],[12,[[10,[[50,[-1,-2]],187]]],0,4],[12,[[10,[[55,[-1]],88]]],4],[12,[[10,[[50,[0,-1]],88]]],4],[[-1,-2],[[50,[-1,-2]]],0,4],[[-1,-2],21,[22,23],24],[[[50,[-1,-2]],-3],3,0,4,25],[[-1,-2],[[26,[-2,-3]]],[],[27,28,29],[]],[[],8],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[[50,[-1,-2]],[50,[-1,-2]]],[[6,[35]]],0,4],[[[50,[-1,-2]]],[[3,[-2,-2]]],0,4],[[]],[[[50,[-1,-2]],-3],10,[71,0],[71,4],36],[[[50,[-1,-2]]],-1,0,4],[[[50,[-1,-2]]],-2,0,4],[[[50,[-1,-2]]],20,0,4],[-1,-2,[],[]],[-1,20,[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[[[50,[-1,-2]]],-2,0,4],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[183,[-1]]],[[183,[-1]]],[7,4]],[[-1,-2],3,[],[]],0,[[],[[183,[-1]]],[76,4]],[8,-1,[]],[8,-1,[]],[[-1,-2],[[10,[[9,[-3,-4]]]]],[],[],[],[]],[-1,[[10,[[183,[-2]]]]],11,[70,4]],[8,3],[[[183,[-1]],[183,[-1]]],13,[14,4]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],[[-1,-2],13,[],[]],0,[[[183,[-1]],17],18,[19,4]],[-1,-1,[]],[[[183,[-1]],[53,[-1]]],[[6,[[184,[-1]]]]],4],[[[183,[-1]],[55,[-1]]],[[6,[[185,[-1]]]]],4],[[[55,[-1]]],[[6,[[185,[-1]]]]],4],[[],8],[[[183,[-1]],[55,[-1]],[6,[[185,[-1]]]]],[[6,[[6,[[185,[-1]]]]]]],4],[-1,-2,[],[]],[[],[[10,[32,33]]]],[[],[[183,[-1]]],4],[[[54,[-1]],[0,[-1,0]]],[[3,[[183,[-1]],[6,[[55,[-1]]]]]]],4],[[[183,[-1]],[0,[-1]]],[[55,[-1]]],4],[[]],[[[183,[-1]],12,[0,[-1]]],[[3,[[55,[-1]],[185,[-1]]]]],4],[[[183,[-1]],5,[0,[-1]]],[[3,[[55,[-1]],[185,[-1]]]]],4],[[[183,[-1]],-2],10,[71,4],36],[-1,-2,[],[]],[[[183,[-1]]],[[54,[-1]]],4],[[[183,[-1]],[55,[-1]]],[[10,[[3,[[54,[-1]],[0,[-1,0]]]],88]]],4],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,37,[]],[[[38,[-1]]],[[38,[39]]],[]],[-1,39,[]],[-1,39,[]],[-1,-2,[],[]]],"c":[],"p":[[6,"UInt",0],[6,"Num",0],[1,"tuple"],[10,"LurkField",1019],[5,"Symbol",0],[6,"Option",2975],[10,"Clone",2976],[1,"usize"],[5,"With",2977],[6,"Result",2978],[10,"Deserializer",2979],[1,"str"],[1,"bool"],[10,"PartialEq",2980],[1,"slice"],[10,"AsRef",2981],[5,"Formatter",2982],[8,"Result",2982],[10,"Debug",2982],[5,"String",2983],[1,"u64"],[10,"Hash",2984],[10,"Sized",2985],[10,"BuildHasher",2984],[10,"Hasher",2984],[5,"IndentedSection",2986],[10,"Display",2982],[10,"Send",2985],[10,"Sync",2985],[1,"char"],[5,"Vec",2987],[5,"Layout",2988],[5,"LayoutError",2988],[8,"Result",2989],[6,"Ordering",2980],[10,"Serializer",2990],[5,"TypeId",2991],[5,"Box",2992],[10,"Any",2991],[10,"CircomGadget",198],[5,"Store",1627],[6,"Ptr",1579],[5,"AllocatedPtr",203],[5,"AllocatedNum",2993],[6,"Boolean",2994],[6,"SynthesisError",2995],[10,"PrimeField",2996],[10,"ConstraintSystem",2995],[17,"Output"],[5,"ZPtr",2879],[10,"FnOnce",2997],[5,"AllocatedContPtr",203],[8,"ZContPtr",2879],[5,"Store",2435],[8,"ZExprPtr",2879],[5,"Utf8PathBuf",2998],[5,"Settings",297],[5,"PerfConfig",297],[5,"ParallelConfig",297],[5,"WitnessGeneration",297],[6,"Flow",297],[5,"HashMap",2999],[6,"ConfigError",3000],[10,"CoCircuit",449],[10,"Coprocessor",449],[5,"GlobalAllocator",1408],[5,"CircomCoprocessor",465],[5,"Sha256Coprocessor",498],[6,"Sha256Coproc",498],[10,"Deserialize",2979],[10,"Serialize",2990],[6,"TrieCoproc",565],[5,"NewCoprocessor",565],[5,"LookupCoprocessor",565],[5,"InsertCoprocessor",565],[10,"Default",3001],[5,"Trie",565],[6,"Error",565],[5,"LookupProof",565],[5,"InsertProof",565],[5,"State",2397],[5,"RefCell",3002],[5,"Rc",3003],[5,"Lang",897],[10,"Error",3004],[6,"ReductionError",797],[6,"ProofError",797],[5,"Error",2435],[6,"NovaError",3005],[5,"Frame",862],[10,"Copy",2985],[5,"Binding",897],[10,"Into",2981],[6,"Coproc",897],[5,"DummyCoprocessor",897],[5,"IndexMap",3006],[6,"LanguageField",1019],[5,"FWrap",1019],[1,"u8"],[1,"u16"],[1,"u32"],[5,"PossibleValue",3007],[1,"u128"],[5,"Func",1127],[5,"Var",1127],[6,"Tag",1127],[6,"Lit",1127],[5,"Block",1127],[6,"Ctrl",1127],[6,"Op",1127],[8,"AString",1127],[6,"AllocatedVal",1408],[5,"SlotWitness",1408],[5,"Arc",3008],[5,"SlotsAllocations",1408],[8,"ZPtr",1579],[5,"EvalConfig",1504],[5,"MultiFrame",1533],[6,"FoldingConfig",2180],[10,"CurveCycleEquipped",2085],[8,"C2",2180],[8,"Span",1727],[6,"Error",1727],[6,"LitBase",1768],[8,"ParseResult",1727],[10,"Fn",2997],[5,"ParseError",1816],[10,"InputLength",3009],[10,"AsBytes",3009],[6,"ErrorKind",3010],[6,"ParseErrorKind",1816],[8,"IResult",3011],[6,"Pos",1900],[6,"StringFragment",1940],[17,"Ptr"],[17,"ContPtr"],[17,"Store"],[17,"StoreError"],[17,"EvalFrame"],[17,"CircuitFrame"],[17,"GlobalAllocation"],[17,"AllocatedIO"],[10,"MultiFrameTrait",2000],[10,"Eq",2980],[10,"EvaluationStore",2000],[10,"FrameLike",2000],[17,"FrameIO"],[17,"PublicParams"],[17,"ProveOutput"],[17,"ExtraVerifyInput"],[17,"ErrorType"],[10,"RecursiveSNARKTrait",2000],[10,"CEKState",2000],[17,"RecursiveSnark"],[10,"Prover",2000],[6,"FoldingMode",2000],[17,"Error"],[10,"Provable",2000],[5,"TestConstraintSystem",3012],[8,"C2",2085],[5,"PublicParams",2085],[10,"StepCircuit",3013],[6,"Proof",2085],[8,"Result",3014],[10,"Write",3015],[5,"NovaProver",2085],[8,"E1",2085],[5,"CircuitDigests",3016],[6,"Proof",2180],[5,"PublicParams",2180],[10,"StepCircuit",3017],[5,"SuperNovaProver",2180],[5,"Instance",2296],[8,"SuperNovaAuxParams",2180],[8,"NovaCircuitShape",2085],[6,"Kind",2296],[5,"Metadata",2296],[5,"Utf8Path",2998],[5,"File",3018],[5,"ConstantPtrs",2435],[5,"NamedConstants",2435],[1,"array"],[5,"ZStore",2930],[6,"ZCont",2745],[6,"ZExpr",2826],[6,"ZData",2697],[5,"Error",2989],[8,"ChildMap",565],[15,"Pos",1934],[8,"SuperNovaPublicParams",2180],[15,"Let",2794],[15,"LetRec",2794],[15,"Call0",2794],[15,"Call",2794],[15,"Call2",2794],[15,"Tail",2794],[15,"Lookup",2794],[15,"Unop",2794],[15,"Binop",2794],[15,"Binop2",2794],[15,"If",2794],[15,"Emit",2794],[15,"Fun",2876]],"b":[[69,"impl-Debug-for-Num%3CF%3E"],[70,"impl-Display-for-Num%3CF%3E"],[71,"impl-Display-for-Symbol"],[72,"impl-Debug-for-Symbol"],[73,"impl-Debug-for-UInt"],[74,"impl-Display-for-UInt"],[78,"impl-From%3CUInt%3E-for-Num%3CF%3E"],[80,"impl-From%3Cu64%3E-for-Num%3CF%3E"],[669,"impl-From%3CLookupCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[670,"impl-From%3CNewCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[672,"impl-From%3CInsertCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[820,"impl-Debug-for-ProofError"],[821,"impl-Display-for-ProofError"],[822,"impl-Debug-for-ReductionError"],[823,"impl-Display-for-ReductionError"],[825,"impl-From%3CSynthesisError%3E-for-ProofError"],[826,"impl-From%3CError%3E-for-ProofError"],[827,"impl-From%3CNovaError%3E-for-ProofError"],[828,"impl-From%3CReductionError%3E-for-ProofError"],[1061,"impl-Display-for-LanguageField"],[1062,"impl-Debug-for-LanguageField"],[1280,"impl-Display-for-Var"],[1281,"impl-Debug-for-Var"],[1282,"impl-Debug-for-Tag"],[1283,"impl-Display-for-Tag"],[1534,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[1535,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[1567,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[1568,"impl-Circuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[1569,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[1676,"impl-Store%3CF%3E"],[1677,"impl-EvaluationStore-for-Store%3CF%3E"],[1710,"impl-EvaluationStore-for-Store%3CF%3E"],[1711,"impl-Store%3CF%3E"],[1712,"impl-EvaluationStore-for-Store%3CF%3E"],[1713,"impl-Store%3CF%3E"],[1747,"impl-Display-for-Error"],[1748,"impl-Debug-for-Error"],[1857,"impl-Debug-for-ParseErrorKind%3CF%3E"],[1858,"impl-Display-for-ParseErrorKind%3CF%3E"],[1859,"impl-Debug-for-ParseError%3CI,+F%3E"],[1860,"impl-Display-for-ParseError%3CLocatedSpan%3C%26str%3E,+F%3E"],[2522,"impl-Display-for-Error"],[2523,"impl-Debug-for-Error"],[2715,"impl-Display-for-ZData"],[2716,"impl-Debug-for-ZData"],[2856,"impl-Display-for-ZExpr%3CF%3E"],[2857,"impl-Debug-for-ZExpr%3CF%3E"],[2900,"impl-Display-for-ZPtr%3CE,+F%3E"],[2901,"impl-Debug-for-ZPtr%3CE,+F%3E"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYQQX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"SFFNNNNNNNNNNNNNNNNNNN","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[5,"MetricsSinkHandle",0],[1,"tuple"],[5,"MetricsSink",0],[5,"Formatter",22],[8,"Result",22],[6,"Result",23],[5,"TypeId",24]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
