var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLFLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","drop","from","handle_meta","handle_non_meta","init","into","name","new","process_line","prompt","public_param_dir","try_from","try_into","type_id","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5,5],"f":[0,[[]],[[]],[[],1],[2],[2],[2],[[]],[[[5,[3,[4,[3]]]],[6,[3]],[9,[[8,[7]]]],[10,[3]],[0,[[12,[11]],13]]],14],[[[5,[3,[4,[3]]]],[6,[3]],7,[10,[3]]],14],[[],2],[[]],[[],15],[[[6,[3]],2,[16,[1]],[17,[3,[4,[3]]]]],[[5,[3,[4,[3]]]]]],[[[5,[3,[4,[3]]]],15],15],[[[5,[3,[4,[3]]]]],15],[[],18],[[],19],[[],19],[[],20],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[6,"Scalar"],[4,"Coproc"],[3,"ClutchState"],[3,"Store"],[3,"State"],[3,"RefCell"],[3,"Rc"],[3,"Ptr"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[3,"String"],[4,"Option"],[3,"Lang"],[3,"Utf8PathBuf"],[4,"Result"],[3,"TypeId"]]},\
"fcomm":{"doc":"","t":"DEDDGRNDNDNEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMMFMLLLLMMMLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLDILLFLLLLLLLLKKKLLLLLKK","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","file_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_param_dir","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip","FileMap","FileStore","borrow","borrow_mut","data_dir","deref","deref_mut","drop","from","get","init","into","new","read_from_json_path","read_from_path","read_from_stdin","set","try_from","try_into","type_id","vzip","write_to_json_path","write_to_path"],"q":[[0,"fcomm"],[542,"fcomm::error"],[578,"fcomm::file_map"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","",""],"i":[0,0,0,0,0,0,28,0,9,0,16,0,0,0,16,16,0,9,0,28,0,0,9,0,0,27,16,28,0,0,0,0,27,24,24,17,20,21,24,25,26,27,28,4,9,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,22,15,30,16,17,20,21,22,23,24,25,26,27,28,4,9,30,16,17,20,21,22,23,24,25,26,27,28,4,9,30,21,22,24,4,0,17,20,17,20,28,16,17,20,27,28,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,17,20,17,20,16,17,20,21,22,23,24,25,26,27,28,4,9,30,16,16,16,17,17,17,20,20,20,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,4,4,4,9,9,9,30,30,30,0,17,23,15,0,9,15,17,20,23,4,17,20,4,0,17,20,21,22,23,24,25,26,27,28,4,37,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,21,28,21,27,21,21,16,16,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,22,24,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,15,9,9,17,20,24,0,15,24,24,9,15,24,15,30,9,15,21,27,9,15,0,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,15,4,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,30,17,20,24,16,17,20,21,22,23,24,25,26,27,28,4,9,30,21,16,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,37,30,30,15,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,16,17,20,21,22,23,24,25,26,27,28,4,37,15,9,30,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,69,69,0,69,69,69,69,69,69,69,69,68,68,68,69,69,69,69,69,68,68],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[16,16],[17,17],[[[20,[[0,[18,19]]]]],[[20,[[0,[18,19]]]]]],[[[21,[[0,[18,19]]]]],[[21,[[0,[18,19]]]]]],[[[22,[[0,[18,19]]]]],[[22,[[0,[18,19]]]]]],[[[23,[[0,[18,19]]]]],[[23,[[0,[18,19]]]]]],[[[24,[[0,[18,19]]]]],[[24,[[0,[18,19]]]]]],[25,25],[[[26,[[0,[18,19]]]]],[[26,[[0,[18,19]]]]]],[[[27,[[0,[18,19]]]]],[[27,[[0,[18,19]]]]]],[28,28],[[[4,[[0,[18,19,29]]]]],[[4,[[0,[18,19,29]]]]]],[[[9,[[0,[18,19]]]]],[[9,[[0,[18,19]]]]]],[[[30,[[0,[18,19]]]]],[[30,[[0,[18,19]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],31],0,0,0,0,[[28,[2,[[0,[19,29,32]]]]],[[33,[[0,[19,29,32]]]]]],[16,5],[[],17],[[],[[20,[[0,[34,19]]]]]],[[],[[27,[19]]]],[[],28],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[35,[[11,[16]]]],[35,[[11,[17]]]],[35,[[11,[[20,[[0,[36,19]]]]]]]],[35,[[11,[[21,[19]]]]]],[35,[[11,[[22,[[0,[36,19]]]]]]]],[35,[[11,[[23,[[0,[36,19]]]]]]]],[35,[[11,[[24,[[0,[36,19]]]]]]]],[35,[[11,[25]]]],[35,[[11,[[26,[[0,[36,19]]]]]]]],[35,[[11,[[27,[[0,[36,19]]]]]]]],[35,[[11,[28]]]],[35,[[11,[[4,[[0,[36,19,29]]]]]]]],[35,[[11,[37]]]],[35,[[11,[[15,[[0,[36,38]]]]]]]],[35,[[11,[[9,[[0,[36,19]]]]]]]],[35,[[11,[[30,[[0,[36,19]]]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,0,0,[[16,16],6],[[17,17],6],[[[20,[[0,[39,19]]]],[20,[[0,[39,19]]]]],6],[[[21,[[0,[39,19]]]],[21,[[0,[39,19]]]]],6],[[[22,[[0,[39,19]]]],[22,[[0,[39,19]]]]],6],[[[23,[[0,[39,19]]]],[23,[[0,[39,19]]]]],6],[[[24,[[0,[39,19]]]],[24,[[0,[39,19]]]]],6],[[25,25],6],[[[26,[[0,[39,19]]]],[26,[[0,[39,19]]]]],6],[[[27,[[0,[39,19]]]],[27,[[0,[39,19]]]]],6],[[28,28],6],[[[4,[[0,[39,19,29]]]],[4,[[0,[39,19,29]]]]],6],[[[9,[[0,[39,19]]]],[9,[[0,[39,19]]]]],6],[[[30,[[0,[39,19]]]],[30,[[0,[39,19]]]]],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[2,[[0,[19,29]]]],[3,[[0,[19,29]]]],5],[[11,[17,10]]]],[[[23,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[11,[[3,[[0,[19,29,32]]]],10]]]],[[[2,[1]],[3,[1]],[40,[[3,[1]]]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[2,[19]],[3,[19]],[40,[[3,[19]]]],5,[8,[19,[7,[19]]]]],[[11,[10]]]],[[[9,[19]]],[[40,[17]]]],[[[15,[1]],[2,[1]]],[[11,[10]]]],0,0,0,0,0,0,[[[4,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[11,[[3,[[0,[19,29,32]]]],10]]]],0,[[17,41],42],[[[20,[[0,[43,19]]]],41],42],[[[21,[[0,[43,19]]]],41],42],[[[22,[[0,[43,19]]]],41],42],[[[23,[[0,[43,19]]]],41],42],[[[24,[[0,[43,19]]]],41],42],[[25,41],42],[[[26,[[0,[43,19]]]],41],42],[[[27,[[0,[43,19]]]],41],42],[[28,41],42],[[[4,[[0,[43,19,29]]]],41],42],[[37,41],42],[[[9,[[0,[43,19]]]],41],42],[[[30,[[0,[43,19]]]],41],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[11,[[21,[[0,[19,29,32]]]],10]]]],[[[2,[[0,[19,29]]]],[33,[[0,[19,29]]]]],28],[[[46,[[45,[44]]]]],[[11,[[21,[19]]]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[27,[[0,[19,29,32]]]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]],[0,[19,29,32]]],[[11,[[21,[[0,[19,29,32]]]],10]]]],[[[2,[[0,[19,29,32]]]],[3,[[0,[19,29,32]]]]],[[11,[10]]]],[[[0,[47,48]],49],50],[[16,51]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[[[9,[19]]],6],[[[9,[19]]],6],0,0,0,[5,52],0,[[[2,[1]],[22,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[22,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[9,[19]]],[[40,[[24,[19]]]]]],[[[15,[1]],[2,[1]]],[[11,[10]]]],0,0,0,[[[9,[[0,[19,29,36]]]]],[[11,[[53,[[0,[19,29,36]]]],10]]]],[[[2,[1]],[9,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[21,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]]],[[3,[[0,[19,29,32]]]]]],[[[27,[[0,[19,29,32]]]],[2,[[0,[19,29,32]]]],5,[8,[[0,[19,29,32]],[7,[[0,[19,29,32]]]]]]],[[3,[[0,[19,29,32]]]]]],[[[9,[19]]],[[40,[[20,[19]]]]]],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[[],54],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],[[],[[11,[56]]]],0,0,[[16,57],11],[[17,57],11],[[[20,[[0,[29,19]]]],57],11],[[[21,[19]],57],11],[[[22,[[0,[29,19]]]],57],11],[[[23,[[0,[29,19]]]],57],11],[[[24,[[0,[29,19]]]],57],11],[[25,57],11],[[[26,[[0,[29,19]]]],57],11],[[[27,[[0,[29,19]]]],57],11],[[28,57],11],[[[4,[[0,[29,19,29]]]],57],11],[[37,57],11],[[[15,[[0,[29,38]]]],57],11],[[[9,[[0,[29,19]]]],57],11],[[[30,[[0,[29,19]]]],57],11],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[19]]],58],[5,[[11,[16]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],[[],59],0,0,0,[[[15,[1]],[13,[1,[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[37,10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],[[[46,[55]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[5],[[10,41],42],[[10,41],42],[60,10],[61,10],[56,10],[[]],[62,10],[63,10],[64,10],[65,10],[[],5],[[]],[10,[[40,[66]]]],[[],58],[[],11],[[],11],[[],59],[[]],0,0,[[]],[[]],[[],54],[5],[5],[5],[[]],[[[69,[67,68]],67],[[40,[68]]]],[[],5],[[]],[[[46,[55]]],[[11,[[69,[67,68]],56]]]],[[[46,[55]]],[[11,[56]]]],[[[46,[55]]],[[11,[56]]]],[[],[[11,[56]]]],[[[69,[67,68]],67,68],[[11,[56]]]],[[],11],[[],11],[[],59],[[]],[[[46,[55]]]],[[[46,[55]]]]],"c":[],"p":[[6,"S1"],[3,"Store"],[3,"Ptr"],[3,"CommittedExpression"],[15,"usize"],[15,"bool"],[4,"Coproc"],[3,"Lang"],[4,"Claim"],[4,"Error"],[4,"Result"],[3,"NovaProver"],[3,"PublicParams"],[3,"Arc"],[3,"Proof"],[4,"ReductionCount"],[3,"Evaluation"],[8,"Clone"],[8,"LurkField"],[3,"PtrEvaluation"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"ZBytes"],[3,"ZStorePtr"],[4,"LurkPtr"],[4,"LurkCont"],[8,"Serialize"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"DeserializeOwned"],[3,"ContPtr"],[8,"Default"],[8,"Deserializer"],[8,"Deserialize"],[3,"VerificationResult"],[8,"CurveCycleEquipped"],[8,"PartialEq"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u8"],[15,"slice"],[8,"AsRef"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[8,"Hasher"],[6,"NovaProofCache"],[6,"ZExprPtr"],[3,"Utf8PathBuf"],[3,"Path"],[4,"Error"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[3,"Error"],[4,"FromHexError"],[4,"SerdeError"],[3,"Error"],[3,"Error"],[4,"SynthesisError"],[8,"Error"],[8,"ToString"],[8,"FileStore"],[3,"FileMap"]]},\
"lurk":{"doc":"","t":"ENCRNCLLOLLAOAALLAAAOLLLLLLLLLAAAALLLLLLOLALALLLLLOAOOOLLLOOAALAAAALAAOLOAOAAOLLLLLAOOOLACACCCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLIAAKKDDLLLLLLLMLLLLMLLLLLLLMLLLLLLLMMLLMMMLLLLLMMLLLLLLLLLLLLLLLLMAAAFDFMMLLMMMMLLMMMLLLMMMMMMMLMMLLMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMLLLMMLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFHDENDNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILKLLKLAGEGNDDNDDNNDGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIDDDDNENDMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLKLLLKLLLKLLLAKLLLLLMLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNGLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMMLMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLKLLLLLMLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNENENNNNDNNNNNENNNNNNNENNNNNNENNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGLLLLLLLLLLLLLLLLLLLEHNGGNALLLLLLLALLLLLAAALLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMLLLFLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLFFFFFFFFLLLLLFFFFFFFFFFFFFFFFFFFFFIIIQLLAKLLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLGGQQQQNIGGGQGQDGEDNGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLDNNNDEIMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLMMMMLLLLLLLLLLLLLLLAFFFNENNLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLMLLLLLLKLKLLLLLMMKLKLLLKLKLFFFLLLLLLLLLLDLLLLLLLLLLLLLFLLLLFFLLLLLLLLFLDDDDLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMLMMMLMMLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMMMMMLMLMLLLMLMMMMMLMLMMLLMMLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLNNELLLLLLLLLLLLLLLLLCLLLALLLLLLLCLLLLAAAANENLLLLALLLLLLCLLALCLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","cache_map","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","init","into","into_scalar","is_negative","is_zero","keyword","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","proof","ptr","public_parameters","repl","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","CacheMap","as_mut","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","from","get","get_copy","get_copy_or_insert","get_copy_or_insert_with","get_copy_or_insert_with_key","init","insert","insert_with","insert_with_key","into","is_empty","keys_cloned","len","map_get","new","try_from","try_into","type_id","vzip","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","blank","blank","borrow","borrow","borrow_mut","borrow_mut","cached_witness","clone","clone","clone_into","clone_into","count","deref","deref","deref_mut","deref_mut","drop","drop","fmt","frames","from","from","from_frame","from_frames","get_store","init","init","input","input","into","into","lang","output","output","precedes","precedes","public_input_size","public_inputs","reduction_count","store","store","synthesize","synthesize","synthesize_frames","synthesize_frames_parallel","synthesize_frames_sequential","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_groth16_proof","vzip","vzip","witness","constraints","data","pointer","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","from","fun_tag","if_cont_tag","init","into","lambda_sym","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","power2_32_num","power2_64_num","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","pick","pick","pick_const","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","z_ptr","get_config","parse_and_run","CONFIG","Config","Flow","Parallel","ParallelConfig","ParallelN","Sequential","WitnessGeneration","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","is_parallel","is_sequential","num_threads","parallelism","poseidon_witnesses","precompute_neptune","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","to_owned","try_from","try_into","type_id","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","eval_arity","evaluate","has_circuit","simple_evaluate","synthesize","trie","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","Trie","TrieCoproc","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","leaves","lookup","new","new_with_capacity","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","into","into","into","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_frames","get_frames","i","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_terminal","is_terminal","is_terminal","iter","lang","log","log","log","maybe_emitted_expression","new","next","output","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","from","from","from","from","from","from","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","lookup","max_coprocessor_arity","new","new","new_with_bindings","serialize","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","BLS12_381","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","hex_digits","init","init","into","into","is_negative","most_negative","most_positive","partial_cmp","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_string","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","WitnessBlock","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","length","names_and_ptrs","names_and_ptrs","new_blank","new_dummy","new_from_stub","preimage","preimage","preimage","preimage","preimage","preimage","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","ApplyContinuation","Block","Call","Cast","Cont","Ctrl","Ctrl","CtrlTag","Div","Emit","Error","Expr","Func","Hash2","Hash3","Hash4","Hide","IfEq","Lit","Lit","MakeThunk","MatchTag","MatchVal","Mul","Null","Num","Op","Open","Return","Return","String","Sub","Symbol","Tag","Unhash2","Unhash3","Unhash4","Var","assert_all_paths_taken","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_until","check","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_ptr","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","name","new","num_constraints","num_paths","synthesize","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","drop","fmt_to_string","from","import","init","intern","into","name","new","resolve","try_from","try_into","type_id","use_package","vzip","Error","LURK_WHITESPACE","NoInput","ParseResult","Span","Syntax","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","error","fmt","fmt","from","init","into","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","drop","encode","eq","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","radix","to_owned","try_from","try_into","type_id","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","init","init","input","into","into","is_nom_err","map_parse_err","new","opt","or","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","from","from_upto","init","into","range","to_owned","try_from","try_into","type_id","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","to_owned","try_from","try_into","type_id","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","lang","new","outer_prove","proof","proof_count","prove","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","CE1","CE2","CK1","CK2","Compressed","CurveCycleEquipped","EE1","EE2","G1","G1","G2","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","from","from","from","get_evaluation_frames","init","init","init","into","into","into","lang","new","prove","prove_recursively","public_params","reduction_count","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","ContPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","clone","clone","clone","clone_into","clone_into","clone_into","cmp","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","idx","index","index","init","init","init","into","into","into","is_atom","is_cons","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","new","new","null","null","opaque","opaque","opaque_idx","partial_cmp","raw","raw","tag","tag","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","error","public_params","public_params_default_dir","with_public_params","CacheError","Error","IOError","JsonError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","init","into","source","to_string","try_from","try_into","type_id","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","drop","drop","env","eval_expr","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","limit","name","name","new","new","new","new","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","drop","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","lurk_sym","meta_package_symbol","new_with_package","rccell","resolve","set_current_package","try_from","try_into","type_id","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","poseidon_cache","product","ptr","ptr_eq","quote","quotient","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","fmt_to_string_raw","from","from","from_str_impl","get_hash","has_parent","hash","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","name","new","new_from_vec","partial_cmp","path","prints_as_absolute","root","root_key","root_sym","serialize","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","init","into","to_owned","to_string","try_from","try_into","type_id","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","partial_cmp","partial_cmp","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","init","into","is_zero","mul","partial_cmp","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","vzip","Write","fmt","fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","init","into","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","borrow","borrow_mut","custom","custom","de","deref","deref_mut","drop","fmt","fmt","from","from_z_data","init","into","ser","to_string","to_z_data","try_from","try_into","type_id","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","try_from","try_into","type_id","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","serialize","to_owned","try_from","try_into","type_id","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","init","into","serialize","to_owned","to_string","try_from","try_into","type_id","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","init","into","into_hash_components","partial_cmp","parts","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","new","new_with_expr","nil_z_ptr","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","vzip"],"q":[[0,"lurk"],[94,"lurk::cache_map"],[123,"lurk::circuit"],[128,"lurk::circuit::circuit_frame"],[189,"lurk::circuit::gadgets"],[192,"lurk::circuit::gadgets::constraints"],[193,"lurk::circuit::gadgets::data"],[272,"lurk::circuit::gadgets::pointer"],[369,"lurk::cli"],[371,"lurk::config"],[445,"lurk::cont"],[488,"lurk::cont::Continuation"],[520,"lurk::coprocessor"],[529,"lurk::coprocessor::trie"],[695,"lurk::error"],[763,"lurk::eval"],[930,"lurk::eval::lang"],[1023,"lurk::expr"],[1096,"lurk::field"],[1184,"lurk::hash"],[1294,"lurk::hash_witness"],[1605,"lurk::lem"],[1833,"lurk::package"],[1854,"lurk::parser"],[1883,"lurk::parser::base"],[1924,"lurk::parser::error"],[1992,"lurk::parser::position"],[2018,"lurk::parser::position::Pos"],[2024,"lurk::parser::string"],[2056,"lurk::parser::syntax"],[2077,"lurk::proof"],[2096,"lurk::proof::groth16"],[2153,"lurk::proof::nova"],[2231,"lurk::ptr"],[2343,"lurk::public_parameters"],[2347,"lurk::public_parameters::error"],[2369,"lurk::repl"],[2427,"lurk::state"],[2458,"lurk::store"],[2697,"lurk::symbol"],[2758,"lurk::syntax"],[2790,"lurk::tag"],[2998,"lurk::uint"],[3033,"lurk::writer"],[3036,"lurk::z_data"],[3077,"lurk::z_data::serde"],[3101,"lurk::z_data::serde::de"],[3147,"lurk::z_data::serde::ser"],[3257,"lurk::z_data::z_cont"],[3299,"lurk::z_data::z_cont::ZCont"],[3331,"lurk::z_data::z_expr"],[3373,"lurk::z_data::z_expr::ZExpr"],[3376,"lurk::z_data::z_ptr"],[3418,"lurk::z_data::z_store"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","Global config for parallelism.","","","","","","","","","","","","","","","","The finite field used in the language.","","","Returns the argument unchanged.","","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","This module offers a connection the the backend proving …","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","<code>CacheMap</code> is an adaptation of <code>FrozenMap</code>: …","Get mutable access to the underlying <code>HashMap</code>.","","","","","","","","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns a copy of the value corresponding to the key.","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","Calls <code>U::from(self)</code>.","Examples","","Examples","Applies a function to the owner of the value corresponding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","Parses CLI arguments and continues the program flow …","","","","","","","","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","The <code>trie</code> module implements a Trie with the following …","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Precompute the witness blocks for all the named hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","","The basic control nodes for LEM logical paths.","","","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hash2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Hash3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Hash4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>IfEq(x, y, eq_block, else_block)</code> runs <code>eq_block</code> if <code>x == y</code>, …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","","<code>MatchTag(x, cases)</code> performs a match on the tag of <code>x</code>, …","<code>MatchSymbol(x, cases, def)</code> checks whether <code>x</code> matches some …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","","The atomic operations of LEMs.","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","LEM tags","<code>Unhash2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Unhash3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Unhash4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","LEM variables","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","Calls a <code>Func</code> on an input until the stop contidion is …","Performs the static checks described in LEM’s docstring.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Instantiates a <code>Func</code> with the appropriate transformations …","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","Create R1CS constraints for a LEM function given an …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","Import the local symbols of another package","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Generates an outer Groth16 proof using the given …","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","The number of reductions used in the proof.","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","The commitment engine type for the first curve in the …","The commitment engine type for the second curve in the …","Why the next 4 types?","The type of the commitment key used for points of the …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Evaluates and generates the frames of the computation …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","A pointer to a continuation. Logically this is the same a …","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","A <code>Store</code> pointer","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","","Construct a Ptr from an opaque index","","get the index of an Opaque RawPtr","","The underlying pointer, which can be null, opaque, or an …","","An expression tag","","","","","","","","","","","","","","","","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","Calls <code>U::from(self)</code>.","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","Calls <code>U::from(self)</code>.","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","Calls <code>U::from(self)</code>.","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","",""],"i":[0,2,0,0,2,0,2,2,0,2,2,0,0,0,0,2,2,0,0,0,0,2,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,0,2,0,2,0,2,2,2,2,2,0,0,0,0,0,2,2,2,0,0,0,0,2,0,0,0,0,2,0,0,0,2,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,2,0,0,0,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,220,220,0,0,36,37,36,37,36,37,36,36,37,36,37,36,36,37,36,37,36,37,36,37,36,37,36,37,36,36,37,36,37,36,37,36,36,37,36,37,36,36,36,36,37,36,36,36,36,36,36,37,36,37,36,37,36,37,36,36,37,36,37,0,0,0,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,46,47,46,47,47,46,47,46,47,46,46,46,46,46,47,46,63,46,47,46,46,47,46,47,46,47,46,47,46,47,46,47,46,46,46,46,46,47,47,46,46,46,47,46,47,46,47,46,47,47,46,46,47,46,47,46,47,47,47,47,46,47,46,46,47,46,47,46,46,46,46,46,46,46,46,46,46,46,47,46,46,46,47,46,47,46,47,46,47,46,47,46,47,46,0,0,0,0,0,67,0,67,67,0,67,68,69,70,67,68,69,70,67,67,68,69,70,67,68,69,70,67,68,69,70,67,68,69,70,67,68,69,70,67,68,69,70,67,68,69,70,67,68,69,70,67,67,67,70,68,69,68,68,67,68,69,70,67,68,69,70,67,68,69,70,67,68,69,70,70,64,64,64,64,64,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,221,222,223,224,225,226,227,228,229,230,231,221,222,232,230,225,228,229,230,223,224,225,226,227,229,221,222,224,229,231,221,222,0,0,233,35,35,35,35,233,0,0,0,0,75,0,0,75,0,0,81,75,0,0,0,0,75,79,84,86,81,75,76,77,78,79,84,86,81,75,76,77,78,75,76,77,78,75,76,77,78,79,76,77,78,79,84,86,81,75,76,77,78,79,84,86,81,75,76,77,78,76,77,78,79,84,86,81,75,76,77,78,79,75,76,77,78,75,81,75,76,77,78,79,84,86,81,75,75,75,75,76,77,78,75,79,84,86,81,75,76,77,78,79,0,79,84,86,81,75,76,77,78,79,79,79,79,79,79,79,79,76,77,78,75,76,77,78,75,75,76,77,78,79,84,86,81,75,76,77,78,79,84,86,81,75,76,77,78,79,84,86,81,75,76,77,78,84,86,79,84,86,81,75,76,77,78,87,88,0,87,89,0,89,0,87,89,89,87,88,89,87,88,87,88,87,88,89,87,88,89,87,88,89,87,88,89,89,87,87,88,88,89,89,89,89,89,87,87,88,89,87,88,89,87,88,89,87,87,88,89,87,88,89,87,88,89,87,88,89,87,88,89,87,88,93,0,0,0,0,0,93,0,93,0,41,93,94,33,41,93,97,34,94,33,41,93,97,34,33,41,93,34,33,41,93,34,33,93,94,33,41,93,97,34,94,33,41,93,97,34,93,94,33,41,93,97,34,0,33,33,41,93,34,33,33,33,41,41,41,93,93,93,34,34,34,94,0,33,33,33,33,41,93,97,34,94,33,41,93,93,97,34,94,94,41,94,33,41,93,97,34,94,41,33,94,33,41,93,97,34,97,234,33,41,93,234,33,93,93,234,33,93,94,0,234,33,41,33,94,97,41,41,234,33,93,41,234,33,93,33,33,41,93,34,33,33,94,33,41,93,97,34,94,33,41,93,97,34,94,33,41,93,97,34,94,33,41,93,97,34,41,0,0,103,0,0,38,38,103,100,104,103,38,100,104,103,38,104,103,38,104,103,38,38,38,100,104,103,38,100,104,103,38,104,103,38,100,104,103,38,104,103,103,104,103,38,100,100,104,103,103,38,103,38,100,104,103,38,100,104,103,38,38,38,38,38,100,38,38,104,103,38,104,103,103,104,103,38,100,104,103,38,100,104,103,38,100,104,103,38,100,104,103,38,108,108,108,108,0,108,108,108,108,108,108,108,108,0,108,108,107,107,107,108,107,108,107,108,107,108,107,107,108,107,108,107,108,107,108,107,108,108,108,107,107,107,108,108,107,108,107,107,107,107,108,107,108,107,108,108,108,108,108,108,108,108,108,107,108,107,108,107,108,107,107,108,107,109,109,1,0,109,0,0,1,109,109,109,110,109,110,109,110,109,110,109,110,110,109,110,109,110,109,110,109,110,109,110,109,109,109,110,110,110,109,109,110,109,110,1,1,1,1,1,1,1,1,1,1,110,110,1,109,110,109,110,1,1,1,110,109,110,1,1,1,1,1,1,109,110,109,1,1,1,1,1,1,109,110,109,110,109,110,109,110,124,125,124,125,124,125,124,125,0,0,0,0,0,0,124,125,118,85,126,124,125,118,85,126,118,118,118,118,124,125,118,85,126,125,118,85,126,85,118,85,126,118,85,126,124,125,118,85,126,124,125,118,85,126,124,125,118,85,126,125,118,85,126,124,125,125,118,85,126,126,85,85,85,85,124,125,118,85,126,126,124,125,118,85,126,59,125,118,85,126,124,125,118,85,126,124,125,118,85,126,124,125,118,85,126,124,125,118,85,126,62,61,61,131,0,0,61,0,0,0,0,0,0,0,0,0,0,0,0,131,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,61,61,61,62,62,0,0,62,61,62,61,61,62,62,0,0,0,0,133,0,61,61,61,61,131,0,128,128,131,130,136,137,138,61,62,128,134,131,130,136,137,138,61,62,128,134,130,136,129,131,129,131,132,128,132,128,130,136,134,134,131,130,136,137,138,61,62,128,134,131,130,136,137,138,61,62,128,134,137,129,131,130,136,132,128,137,138,138,61,62,131,130,136,137,138,61,62,128,134,131,130,136,137,138,61,62,128,134,131,130,136,137,138,61,62,128,134,131,130,138,61,62,128,134,131,131,131,130,130,130,138,138,138,61,61,61,62,62,62,128,128,128,132,128,139,131,140,128,131,130,136,137,138,61,62,128,134,131,130,136,137,138,61,62,128,134,134,128,61,62,61,62,134,127,61,62,131,130,136,137,138,61,62,128,134,139,131,140,128,131,130,136,137,138,61,62,128,134,128,134,134,128,128,128,235,133,130,136,137,138,128,129,131,132,128,128,128,133,130,138,131,130,136,137,138,61,62,128,134,133,131,130,138,128,131,130,136,137,138,61,62,128,134,131,130,136,137,138,61,62,128,134,131,130,136,137,138,61,62,128,134,131,130,136,137,138,61,62,128,134,0,149,145,0,149,149,144,0,144,0,149,149,145,144,0,149,149,149,149,148,0,149,145,148,148,149,149,146,0,149,145,148,146,149,146,0,149,149,149,0,142,142,143,144,145,146,147,148,149,142,143,144,145,146,147,148,149,142,142,142,142,143,144,145,146,147,148,149,142,143,144,145,146,147,148,149,147,142,143,144,145,146,147,148,149,142,143,144,145,146,147,148,149,142,143,144,145,146,147,148,149,142,143,144,145,146,147,148,149,142,142,142,143,143,143,144,144,144,145,145,145,146,146,146,147,147,147,148,148,148,149,149,149,142,143,143,144,144,145,145,146,147,148,149,142,143,144,145,146,147,148,149,146,143,144,145,146,143,144,145,146,142,143,144,145,146,147,148,149,142,143,144,145,146,147,148,149,143,142,142,142,142,144,142,143,144,145,146,147,148,149,146,143,144,145,142,143,144,145,146,147,148,149,142,143,144,145,146,147,148,149,142,143,144,145,146,147,148,149,142,142,143,144,145,146,147,148,149,0,0,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151,0,0,153,0,0,153,0,153,153,153,153,153,153,153,0,153,153,153,153,153,0,0,0,153,153,153,153,153,153,154,154,154,0,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,0,154,0,0,0,0,0,0,0,154,154,154,154,154,154,163,163,163,163,163,163,163,0,0,163,163,161,161,163,161,163,161,163,161,163,161,163,161,163,161,163,161,163,161,163,163,163,161,161,161,161,161,163,163,161,161,163,161,161,163,161,161,163,161,163,0,161,161,161,161,161,163,161,163,161,163,161,163,161,163,161,163,161,165,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,236,236,236,236,236,236,166,166,166,0,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,0,0,0,0,0,0,0,0,166,166,166,166,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,237,237,0,237,237,237,237,237,0,237,238,238,238,237,0,0,0,0,0,0,171,170,169,171,170,169,169,169,171,171,170,169,171,170,169,169,171,170,169,171,170,169,171,170,169,171,170,169,171,171,171,169,169,171,171,169,169,169,171,170,169,171,170,169,171,170,169,171,171,171,170,169,0,0,178,178,178,178,180,0,0,0,0,178,0,178,0,0,0,0,180,0,0,179,180,181,179,180,181,179,179,180,179,180,181,179,180,181,179,180,179,180,181,179,181,179,179,181,179,180,181,181,179,180,181,179,180,181,181,181,181,180,0,181,179,180,179,179,180,181,179,180,181,179,180,181,180,179,180,181,0,183,183,183,0,0,0,58,57,58,58,58,183,58,57,183,58,57,58,183,58,57,183,58,57,183,183,58,57,183,58,57,183,58,57,183,58,57,183,183,183,58,58,58,57,57,57,183,58,58,57,57,183,58,58,57,183,58,57,183,58,57,183,58,57,183,58,57,183,58,57,58,58,57,239,58,58,58,183,183,58,239,58,239,58,183,57,58,57,58,57,183,183,58,57,58,57,183,58,57,183,58,57,183,58,57,183,58,57,183,58,57,0,0,0,0,185,0,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,0,0,0,192,188,192,188,188,188,191,188,188,192,188,192,188,192,188,188,188,192,188,191,191,191,191,188,191,188,192,188,192,188,188,188,191,188,191,192,188,188,191,188,191,188,0,0,0,192,188,192,188,192,188,192,188,192,188,0,72,72,72,72,72,72,72,72,72,72,72,72,72,0,72,72,72,72,0,0,72,72,72,72,72,72,72,72,0,72,0,0,0,0,32,194,194,32,32,32,91,193,194,32,91,193,194,32,32,32,32,194,32,32,194,194,91,193,194,91,193,194,194,32,32,194,32,194,32,32,32,194,32,32,32,32,91,193,194,32,91,193,194,194,32,91,193,194,194,194,32,194,194,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,91,91,193,194,32,91,193,194,32,32,32,32,32,32,32,32,32,32,32,32,194,194,32,32,32,32,32,32,194,32,194,32,32,91,193,194,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,91,193,194,32,32,194,194,194,194,32,194,32,32,32,32,194,32,194,32,194,32,194,194,32,32,32,32,194,32,32,194,193,32,194,194,32,32,32,32,194,32,32,32,32,194,32,194,32,32,32,194,32,32,91,193,194,91,32,32,32,32,91,193,194,32,91,193,194,32,91,193,194,194,32,32,32,193,32,91,193,194,32,32,32,32,193,0,0,0,0,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,196,196,196,196,196,196,196,0,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,114,115,71,71,71,71,71,114,114,113,114,113,114,114,113,115,0,115,71,71,114,115,71,114,115,0,113,115,115,115,71,113,115,115,71,71,71,115,113,113,114,115,0,0,0,114,71,115,115,114,113,115,115,113,0,71,71,113,113,114,71,240,114,115,240,113,71,114,115,113,71,114,115,113,71,114,115,113,71,114,115,113,71,114,115,113,71,114,115,113,71,114,115,113,71,114,115,113,71,114,115,113,71,114,115,113,71,114,115,113,113,113,71,71,71,114,114,114,115,115,115,113,113,71,71,114,114,115,115,113,71,114,115,217,113,71,114,115,113,71,114,115,113,71,114,115,113,71,114,115,113,71,114,115,113,115,113,113,114,115,113,71,114,115,240,114,115,240,114,115,217,113,71,114,115,217,113,71,114,115,113,71,114,115,113,71,114,115,113,113,71,71,114,114,115,115,113,71,114,115,113,71,114,115,113,71,114,115,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,241,241,201,201,0,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,0,201,201,201,0,201,201,201,201,201,201,201,0,201,201,201,201,0,0,0,0,203,0,203,203,203,203,203,0,203,203,203,203,203,203,0,203,203,0,203,0,203,203,203,203,0,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,0,204,204,204,204,204,204,204,204,0,0,0,0,0,210,206,207,208,209,210,206,207,208,209,210,206,207,208,209,210,206,207,208,209,210,206,207,208,209,206,206,206,207,208,209,209,210,206,207,208,209,210,206,207,208,209,210,206,207,208,209,210,210,210,210,206,206,210,210,206,208,209,209,210,210,210,210,207,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,207,0,210,206,207,208,209,210,206,207,208,209,210,206,207,208,209,210,206,207,208,209,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,0,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,242,243,244,245,246,247,248,249,250,251,252,242,243,253,251,246,249,250,251,244,245,246,247,248,250,242,243,245,250,252,242,243,198,198,198,198,198,198,198,198,198,198,198,198,198,198,0,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,254,254,254,0,0,0,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,55,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,0,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195],"f":[0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],0,[[]],[[]],0,0,0,0,[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],0,0,0,0,[4],[4],[5,[[6,[[2,[1]]]]]],[[[2,[1]],[2,[1]]]],[4],[[[2,[[0,[7,1]]]],[2,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],0,0,0,0,[[[2,[[0,[9,1]]]],10],11],[[[2,[1]],10],11],[[]],[12,[[2,[1]]]],[13,[[2,[1]]]],[1,[[2,[1]]]],0,[[[0,[14,15]],16],12],0,[[[2,[1]],17]],0,[[],4],[[]],[[[2,[1]]],1],[[[2,[1]]],8],[[[2,[1]]],8],0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,0,0,[[[2,[1]],[2,[1]]],[[19,[18]]]],0,0,0,0,[[[2,[1]],20],6],0,0,0,[[[2,[1]],[2,[1]]]],0,0,0,0,0,0,[[]],[[],21],[[],6],[[],6],[[],22],0,0,0,0,[[]],0,0,0,0,0,0,0,[23,[[25,[24]]]],[[]],[[]],[[],23],[4],[4],[4],[[[23,[9,9]],10],11],[[]],[[[23,[[27,[[0,[14,26,15]]]],[0,[26,14]],28]],[0,[14,26,15]]],19],[[[23,[[27,[[0,[14,26,15]]]],[0,[26,14]],29]],[0,[14,26,15]]],[[19,[29]]]],[[[23,[[0,[26,14]],29]],[0,[26,14]],29],29],[[[23,[[0,[26,14]],29]],[0,[26,14]],30],29],[[[23,[[0,[26,14]],29]],[0,[26,14]],30],29],[[],4],[[[23,[[0,[26,14]],28]],[0,[26,14]],28]],[[[23,[[0,[26,14]],28]],[0,[26,14]],30]],[[[23,[[0,[26,14]],28]],[0,[26,14]],30]],[[]],[[[23,[[0,[26,14]],28]]],8],[[[23,[3]]],[[31,[3]]]],[[[23,[[0,[26,14]],28]]],4],[[[23,[[27,[[0,[14,26,15]]]],[0,[26,14]],28]],[0,[14,26,15]],30],19],[[],23],[[],6],[[],6],[[],22],[[]],0,0,0,[[],4],[32,31],0,0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]]],4],[[],[[37,[1,[0,[3,29]],29,[35,[1]]]]]],[[4,[39,[[38,[1,[35,[1]]]]]]],[[36,[1,[33,[1]],[34,[1]],[35,[1]]]]]],[[]],[[]],[[]],[[]],0,[[[37,[[0,[3,1]],3,3,[0,[3,[35,[[0,[3,1]]]]]]]]],[[37,[[0,[3,1]],3,3,[0,[3,[35,[[0,[3,1]]]]]]]]]],[[[36,[[0,[3,1]],[0,[3,29,40]],[0,[3,40]],[0,[3,[35,[[0,[3,1]]]]]]]]],[[36,[[0,[3,1]],[0,[3,29,40]],[0,[3,40]],[0,[3,[35,[[0,[3,1]]]]]]]]]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[[[37,[[0,[9,1]],9,9,[0,[9,[35,[[0,[9,1]]]]]]]],10],11],0,[[]],[[]],[[[41,[[0,[3,29]],29,[35,[1]]]],[32,[1]]],[[37,[1,[0,[3,29]],29,[35,[1]]]]]],[[4,[42,[[41,[[33,[1]],[34,[1]],[35,[1]]]]]],[32,[1]],[39,[[38,[1,[35,[1]]]]]]],[[31,[[36,[1,[33,[1]],[34,[1]],[35,[1]]]]]]]],[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]]],[[32,[1]]]],[[],4],[[],4],0,0,[[]],[[]],0,0,0,[[[37,[1,[0,[7,9]],[35,[1]]]],[37,[1,[0,[7,9]],[35,[1]]]]],8],[[[36,[1,[0,[7,9,29,40]],40,[35,[1]]]],[36,[1,[0,[7,9,29,40]],40,[35,[1]]]]],8],[[],4],[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]]],[[31,[1]]]],[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]]],4],0,0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[43,[1]]],[[6,[44]]]],[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[43,[1]],[42,[[45,[1]]]]],[[6,[[31,[[45,[1]]]],44]]]],[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[43,[1]],[32,[1]],[46,[1]],[46,[1]],[47,[1]],[42,[[37,[1,[33,[1]],[34,[1]],[35,[1]]]]]],[48,[1]]]],[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[43,[1]],[32,[1]],[46,[1]],[46,[1]],[47,[1]],[42,[[37,[1,[33,[1]],[34,[1]],[35,[1]]]]]],[48,[1]]]],[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[43,[1]],[32,[1]],[46,[1]],[46,[1]],[47,[1]],[42,[[37,[1,[33,[1]],[34,[1]],[35,[1]]]]]],[19,[31]],[48,[1]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[[36,[33,34,[35,[49]]]],[51,[50]],[52,[50]]],[[6,[8,44]]]],[[]],[[]],0,0,0,0,[[[43,[53]],[45,[53]],[45,[53]]],[[6,[54,44]]]],0,[[[43,[1]],1],[[6,[[45,[1]],44]]]],0,0,[[]],[[]],0,0,0,0,[[[48,[[0,[3,1]]]]],[[48,[[0,[3,1]]]]]],[[]],0,0,0,[4],[4],[4],0,0,0,0,0,0,0,[[]],0,0,[[],4],[[]],0,0,0,0,[[[43,[1]],[32,[1]]],[[6,[[48,[1]],44]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,[[],6],[[],6],[[],22],0,0,[[]],0,0,0,[[[43,[1]],30],[[6,[[46,[1]],44]]]],[[[43,[1]],30],[[6,[[47,[1]],44]]]],[[[43,[1]],[55,[1]]],[[6,[[46,[1]],44]]]],[[[43,[1]],[56,[1]]],[[6,[[47,[1]],44]]]],[[[43,[1]],[32,[1]],[57,[1]]],[[6,[[47,[1]],44]]]],[[[43,[1]],[32,[1]],[58,[1]]],[[6,[[46,[1]],44]]]],[[[43,[1]],[32,[1]],30],[[6,[[47,[1]],44]]]],[[[46,[1]],[43,[1]],[46,[1]]],[[6,[54,44]]]],[[[47,[1]],[43,[1]],[47,[1]]],[[6,[54,44]]]],[[[43,[1]],[59,[1]]],[[6,[[46,[1]],44]]]],[[[46,[1]],[43,[1]],1],[[6,[54,44]]]],[[[43,[1]],[32,[1]],30],[[6,[[46,[1]],44]]]],[[[43,[1]],1,[45,[1]]],[[6,[[46,[1]],44]]]],[[[46,[1]],[43,[1]],1],[[6,[54,44]]]],[[[47,[1]],[43,[1]],1],[[6,[54,44]]]],[[[46,[1]],[43,[1]],[32,[1]]],[[6,[44]]]],[[],[[60,[45]]]],[[[46,[1]]],[[60,[[45,[1]]]]]],[[[47,[1]]],[[60,[[45,[1]]]]]],[[[43,[1]],[32,[1]],54],[[6,[[46,[1]],44]]]],[[[43,[1]],[19,[[58,[1]]]],[32,[1]]],[[6,[[46,[1]],44]]]],[[[43,[1]],[19,[[57,[1]]]],[32,[1]]],[[6,[[47,[1]],44]]]],[[]],[[]],[[]],[[]],[[4,[42,[[45,[1]]]]],[[46,[1]]]],[[4,[42,[[45,[1]]]]],[[47,[1]]]],[[[46,[[0,[3,53]]]]],[[46,[[0,[3,53]]]]]],[[[47,[[0,[3,1]]]]],[[47,[[0,[3,1]]]]]],[[]],[[]],[[[43,[1]],[48,[1]],[32,[1]],[45,[1]],[46,[1]]],[[6,[[46,[1]],44]]]],[[[43,[1]],[48,[1]],[32,[1]],[46,[1]],[46,[1]]],[[6,[[46,[1]],44]]]],[[[43,[1]],[48,[1]],[46,[1]],[46,[1]],61,[0,[61,[0,[1,[46,[1]]]]]],54],[[6,[[46,[1]],44]]]],[[[43,[1]],[48,[1]],[32,[1]],[46,[1]],[46,[1]],[46,[1]]],[[6,[[46,[1]],44]]]],[[[43,[1]],[48,[1]],[32,[1]],[42,[[46,[1]]]]],[[6,[[46,[1]],44]]]],[[[43,[1]],62,[45,[1]],[60,[63]],[0,[62,[0,[1,[45,[1]]]]]],54],[[6,[[47,[1]],44]]]],[[[43,[1]],62,[45,[1]],[60,[63]],[0,[62,[0,[1,[45,[1]]]]]]],[[6,[44]]]],[[[43,[1]],[48,[1]],[32,[1]],[46,[1]],[46,[1]]],[[6,[[46,[1]],44]]]],[[[43,[1]],[48,[1]],[32,[1]],[46,[1]],[47,[1]]],[[6,[[46,[1]],44]]]],[4],[4],[4],[4],[4],[4],[[[46,[1]],[43,[1]],[46,[1]]]],[[[47,[1]],[43,[1]],[47,[1]]]],[[[47,[1]],[32,[1]]],21],[[[46,[1]],[32,[1]]],21],[[[46,[1]],10],11],[[[47,[1]],10],11],[[]],[[]],[[[45,[1]],[45,[1]]],[[46,[1]]]],[[[45,[1]],[45,[1]]],[[47,[1]]]],[[[47,[1]],[32,[1]]],[[19,[[64,[1]]]]]],[[[47,[1]],[32,[1]]],[[19,[[57,[1]]]]]],[[[47,[1]],[32,[1]]],[[19,[[56,[1]]]]]],[[[46,[1]]],[[45,[1]]]],[[[47,[1]]],[[45,[1]]]],[[[46,[1]],[43,[1]],54,[46,[1]]],[[6,[44]]]],[[],4],[[],4],[[]],[[]],[[[46,[1]],[43,[1]]],[[6,[54,44]]]],[[[46,[1]],[43,[1]]],[[6,[54,44]]]],[[[46,[1]],[43,[1]]],[[6,[54,44]]]],[[[46,[1]],[43,[1]]],[[6,[54,44]]]],[[[46,[1]],[43,[1]],[48,[1]]],[[6,[54,44]]]],[[[46,[1]],[43,[1]]],[[6,[54,44]]]],[[[46,[1]],[43,[1]]],[[6,[54,44]]]],[[[46,[1]],[43,[1]]],[[6,[54,44]]]],[[[46,[1]],[43,[1]]],[[6,[54,44]]]],[[[46,[1]],[43,[1]]],[[6,[54,44]]]],[[[43,[1]],54,[46,[1]],[46,[1]]],[[6,[[46,[1]],44]]]],[[[43,[1]],54,[47,[1]],[47,[1]]],[[6,[[47,[1]],44]]]],[[[43,[1]],54,[55,[1]],[55,[1]]],[[6,[[46,[1]],44]]]],[[[46,[1]],[32,[1]]],[[19,[[58,[1]]]]]],[[[46,[1]]],[[45,[1]]]],[[[47,[1]]],[[45,[1]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[]],[[]],[[[46,[1]],[32,[1]]],[[19,[[55,[1]]]]]],[[[19,[65]]],[[66,[[25,[21,21]]]]]],[[],66],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[67,4,4],4],[[],67],[[],68],[[],69],[[],70],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[67,10],11],[[68,10],11],[[69,10],11],[[70,10],11],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[67,8],[67,8],[67,4],0,0,0,0,0,[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[64,[[0,[3,1]]]]],[[64,[[0,[3,1]]]]]],[[]],[[[64,[1]]],71],[4],[4],[4],[[[64,[[0,[7,1]]]],[64,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[64,[[0,[9,1]]]],10],11],[[[64,[1]],[32,[1]],72,73],74],[[]],[[[0,[14,15]],16],12],[[[64,[1]]],[[57,[1]]]],[[[64,[[0,[14,1]]]],17]],[[],4],[[[64,[1]],[32,[1]]]],[[]],[[]],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[],4],[[32,58,58,57],33],[[],8],[[32,[42,[58]]],58],[[43,48,32,[42,[46]],46,47],[[6,[44]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[75,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[75,[[0,[3,1]]]]],[[75,[[0,[3,1]]]]]],[[[76,[[0,[3,1]]]]],[[76,[[0,[3,1]]]]]],[[[77,[[0,[3,1]]]]],[[77,[[0,[3,1]]]]]],[[[78,[[0,[3,1]]]]],[[78,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[],[[79,[1]]]],[[],[[76,[[0,[80,1]]]]]],[[],[[77,[[0,[80,1]]]]]],[[],[[78,[[0,[80,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[76,[1]]]]]],[5,[[6,[[77,[1]]]]]],[5,[[6,[[78,[1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[[79,[1]]],1],[[[75,[1]]],4],[[[76,[1]]],4],[[[77,[1]]],4],[[[78,[1]]],4],[[[75,[1]],[32,[1]],[58,[1]],[58,[1]],[57,[1]]],[[33,[1]]]],[[[81,[9]],10],11],[[[75,[[0,[9,1]]]],10],11],[[[76,[[0,[9,1]]]],10],11],[[[77,[[0,[9,1]]]],10],11],[[[78,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[[76,[1]]],[[75,[1]]]],[[[77,[1]]],[[75,[1]]]],[[[78,[1]]],[[75,[1]]]],[[]],[[]],[[]],[[]],[[[75,[1]]],8],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[79,[1]],1,1],[[6,[8,[81,[1]]]]]],[[[32,[1]],[83,[[82,[72]]]],[38,[1,[75,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[79,[1]]],4],[[[79,[1]],1],[[6,[[19,[1]],[81,[1]]]]]],[[[32,[1]]],[[79,[1]]]],[[[32,[1]],4],[[79,[1]]]],[[[79,[1]],1,1],[[6,[[81,[1]]]]]],[[[79,[1]],1],[[6,[[84,[1]],[81,[1]]]]]],[[[79,[1]]],1],[[[79,[1]],4],4],[[[76,[1]],20],6],[[[77,[1]],20],6],[[[78,[1]],20],6],[[[75,[1]],[32,[1]],[42,[[58,[1]]]]],[[58,[1]]]],[[[76,[1]],[32,[1]],[42,[[58,[1]]]]],[[58,[1]]]],[[[77,[1]],[32,[1]],[42,[[58,[1]]]]],[[58,[1]]]],[[[78,[1]],[32,[1]],[42,[[58,[1]]]]],[[58,[1]]]],[[[75,[1]],[43,[1]],[48,[1]],[32,[1]],[42,[[46,[1]]]],[46,[1]],[47,[1]]],[[6,[44]]]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[[84,[1]],1,1,1,[85,[1]]],8],[[[86,[1]],1,1,1,[19,[1]],1,[85,[1]]],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[87,87],[[[88,[[0,[3,1]]]]],[[88,[[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[89,10],11],[[89,10],11],[[87,10],11],[[87,10],11],[[[88,[1]],10],11],[[[88,[[0,[9,1]]]],10],11],[[]],[90,89],[87,89],[44,89],[91,89],[[]],[91,87],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[89,[[19,[92]]]],[87,[[19,[92]]]],[[]],[[]],[[],21],[[],21],[[],21],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[33,[[0,[3,1]]]]],[[33,[[0,[3,1]]]]]],[[[41,[[0,[3,29]],[0,[3,29]],3]]],[[41,[[0,[3,29]],[0,[3,29]],3]]]],[93,93],[[[34,[[0,[3,1]]]]],[[34,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],0,[[],93],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[93]]]],[4],[4],[4],[4],[4],[4],[[[32,[1]]],[[58,[1]]]],0,[[[33,[[0,[7,1]]]],[33,[[0,[7,1]]]]],8],[[[41,[[0,[7,29]],[0,[7,29]],7]],[41,[[0,[7,29]],[0,[7,29]],7]]],8],[[93,93],8],[[[34,[[0,[7,1]]]],[34,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[94,[1,[35,[1]]]]],[[6,[87]]]],[[[32,[1]],95],[[6,[[58,[1]],87]]]],0,[[[33,[1]],[32,[1]],72,73],74],[[[33,[[0,[9,1]]]],10],11],[[[33,[1]],10],[[6,[96]]]],[[[41,[[0,[9,29]],[0,[9,29]],9]],10],11],[[93,10],11],[[[97,[[0,[9,29]],[0,[9,1]],[0,[9,[35,[[0,[9,1]]]]]]]],10],11],[[[34,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[[57,[1]]],93],[[]],[[]],[[]],[[[58,[1]],[58,[1]],[32,[1]],4,98,[38,[1,[35,[1]]]]],[[6,[[31,[[41,[[33,[1]],[34,[1]],[35,[1]]]]]],87]]]],[[[94,[1,[35,[1]]]]],[[6,[[31,[[41,[[33,[1]],[34,[1]],[35,[1]]]]]],87]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[94,[1,[35,[1]]]]],[[33,[1]]]],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[[33,[1]]],8],[[[41,[[33,[1]],29,[35,[1]]]]],8],[93,8],[[],8],[[[33,[1]]],8],[93,8],[93,8],[[],8],[[[33,[1]]],8],[93,8],[[[94,[1,[35,[1]]]]],[[6,[[99,[[97,[[34,[1]],1,[35,[1]]]]]],87]]]],0,[[32,4]],[[[33,[1]],[32,[1]],4]],[[[41,[[33,[1]],29,[35,[1]]]],[32,[1]]]],[[[33,[1]],[32,[1]]],[[19,[[58,[1]]]]]],[[[58,[1]],[58,[1]],[32,[1]],4,[38,[1,[35,[1]]]]],[[94,[1,[35,[1]]]]]],[[[97,[[34,[1]],1,[35,[1]]]]],19],0,[[[41,[[33,[1]],29,[35,[1]]]],[41,[[33,[1]],29,[35,[1]]]]],8],[[15,32,38],[[6,[87]]]],[[[33,[1]],[32,[1]],[38,[1,[35,[1]]]]],[[6,[87]]]],[[93,20],6],[[[42,[[41,[[33,[1]],29,[35,[1]]]]]]],4],[[],93],[[[33,[1]]],93],[[93,[32,[1]]],[[19,[[57,[1]]]]]],[[[33,[1]],[32,[1]]],[[31,[1]]]],[[]],[[]],[[]],[[]],[[],21],[[[33,[1]],[32,[1]]],[[6,[[31,[1]],91]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[[38,[1,[35,[1]]]],[101,[[100,[1,[35,[1]]]]]],[32,[1]]]],[[[38,[1,[35,[1]]]],[101,[102]],[101,[[35,[1]]]],[32,[1]]]],[[[103,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[104,[[0,[3,1]]]]],[[104,[[0,[3,1]]]]]],[[[103,[[0,[3,1]]]]],[[103,[[0,[3,1]]]]]],[[[38,[[0,[3,1]],[0,[3,[35,[[0,[3,1]]]]]]]]],[[38,[[0,[3,1]],[0,[3,[35,[[0,[3,1]]]]]]]]]],[[]],[[]],[[]],[[[38,[1,[35,[1]]]]],[[25,[102]]]],[[],[[38,[[0,[80,1]],[0,[80,[35,[[0,[80,1]]]]]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[104,[1]]]]]],[5,[[6,[[103,[[0,[105,1]]]]]]]],[5,[[6,[[38,[[0,[105,1]],[0,[105,[35,[[0,[105,1]]]]]]]]]]]],[4],[4],[4],[4],[[[104,[1]]],4],[[[103,[1]]],4],[[[103,[1]],[32,[1]],[58,[1]],[58,[1]],[57,[1]]],[[33,[1]]]],[[[104,[[0,[9,1]]]],10],11],[[[103,[[0,[9,1]]]],10],11],[[[38,[[0,[9,1]],[0,[9,[35,[[0,[9,1]]]]]]]],10],11],[[],[[100,[1,[35,[1]]]]]],[[]],[[]],[[[104,[1]]],[[103,[1]]]],[[]],[[]],[[[103,[1]]],8],[[[38,[1,[35,[1]]]]],8],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[38,[1,[35,[1]]]]],8],[[[38,[1,[35,[1]]]]],21],[[[38,[1,[35,[1]]]],[32,[1]],[58,[1]]],19],[[[38,[1,[35,[1]]]]],4],[[[101,[102]],[101,[[35,[1]]]]],[[100,[1,[35,[1]]]]]],[[],[[38,[1,[35,[1]]]]]],[[[32,[1]],[31,[[101,[[100,[1,[35,[1]]]]]]]]],[[38,[1,[35,[1]]]]]],[[[104,[1]],20],6],[[[103,[[0,[106,1]]]],20],6],[[[38,[[0,[106,1]],[0,[106,[35,[[0,[106,1]]]]]]]],20],6],[[[104,[1]],[32,[1]],[42,[[58,[1]]]]],[[58,[1]]]],[[[103,[1]],[32,[1]],[42,[[58,[1]]]]],[[58,[1]]]],[[[103,[1]],[43,[1]],[48,[1]],[32,[1]],[42,[[46,[1]]]],[46,[1]],[47,[1]]],[[6,[44]]]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[107,[1]],[43,[1]],[32,[1]]],[[6,[44]]]],[[[43,[1]],[32,[1]]],[[6,[44]]]],[[[43,[1]],[19,[[107,[1]]]],[32,[1]]],[[6,[44]]]],[[]],[[]],[[]],[[]],[[[108,[[0,[3,1]]]]],[[108,[[0,[3,1]]]]]],[[[107,[[0,[3,1]]]]],[[107,[[0,[3,1]]]]]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[[[108,[[0,[7,1]]]],[108,[[0,[7,1]]]]],8],[[[107,[[0,[7,1]]]],[107,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[108,[1]],[32,[1]],72,73],74],[[[108,[[0,[9,1]]]],10],11],[[[107,[[0,[9,1]]]],10],11],[[]],[[]],[[[0,[14,15]],16],12],[[[107,[1]],17]],[[[43,[1]],[32,[1]],[46,[1]],[47,[1]]],[[6,[[45,[1]],44]]]],[[],4],[[],4],[[]],[[]],[[[108,[1]]],8],[[[108,[1]]],8],[[[108,[1]]],8],[[[108,[1]]],8],[[[108,[1]]],8],[[[108,[1]]],8],[[[108,[1]]],8],[[[108,[1]]],8],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],0,[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[109,109],[[[110,[[0,[3,1]]]]],[[110,[[0,[3,1]]]]]],[[]],[[]],[[[110,[1]],[110,[1]]],18],[4],[4],[4],[4],[5,[[6,[109]]]],[5,[[6,[[110,[1]]]]]],[4],[4],[[109,109],8],[[[110,[[0,[7,1]]]],[110,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[109,10],11],[[109,10],11],[[[110,[[0,[9,1]]]],10],11],[[]],[[]],[[[42,[111]]],19],[112],[71],[113],[114],[115],[116],[117],[12],[[],109],[[[0,[14,15]],16],12],[[[110,[1]],17]],[[],21],[[],4],[[],4],[[]],[[]],[[],8],[[]],[[]],[[[110,[1]],[110,[1]]],[[19,[18]]]],[[109,20],6],[[[110,[1]],20],6],[[],[[31,[111]]]],[[],[[19,[112]]]],[[],[[19,[71]]]],[[],[[19,[113]]]],[[],[[19,[114]]]],[[],[[19,[115]]]],[[]],[[]],[[],21],[[],[[19,[116]]]],[[],[[19,[117]]]],[[],117],[[],[[19,[12]]]],[[],12],[[],21],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[118,[1]]],[[120,[1,119]]]],[[[118,[1]]],[[120,[1,121]]]],[[[118,[1]]],[[120,[1,122]]]],[[[118,[1]]],[[120,[1,123]]]],[[[124,[1]],[31,[1]]]],[125,125],[[[118,[[0,[3,1]]]]],[[118,[[0,[3,1]]]]]],[[[85,[[0,[3,1]]]]],[[85,[[0,[3,1]]]]]],[[[126,[[0,[3,1]]]]],[[126,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[[85,[1]],[60,[1]]],1],[[[118,[1]],125],[[124,[1]]]],0,0,[[],[[118,[1]]]],[[],[[85,[[0,[80,1]]]]]],[[],[[126,[[0,[80,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[125,10],11],[[[118,[[0,[9,1]]]],10],11],[[[85,[[0,[9,1]]]],10],11],[[[126,[[0,[9,1]]]],10],11],[[]],[[]],[4,125],[[]],[[]],[[]],[[[126,[1]],[110,[1]]],[[19,[[60,[1]]]]]],[[[85,[1]],[60,[1]]],1],[[[85,[1]],[60,[1]]],1],[[[85,[1]],[60,[1]]],1],[[[85,[1]],[60,[1]]],1],[[],4],[[],4],[[],4],[[],4],[[],4],[[[126,[1]],[110,[1]],[60,[1]]]],[[]],[[]],[[]],[[]],[[]],[[],60],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[128,[[0,[127,80,29,26,9]],29,1]]],[[31,[[0,[127,80,29,26,9]]]]]],[[[128,[[0,[127,80,29,26,9]],29,1]],[32,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[129,[1]],[32,[1]],[58,[1]]],[[66,[91]]]],[[[131,[[130,[1]]]],[32,[1]],[58,[1]]],[[66,[91]]]],[[[129,[1]],[32,[1]],[58,[1]]],[[66,[91]]]],[[[131,[[130,[1]]]],[32,[1]],[58,[1]]],[[66,[91]]]],[[[132,[1]],61,[32,[1]],[58,[1]]],[[66,[91]]]],[[[128,[61,[130,[1]],1]],61,[32,[1]],[58,[1]]],[[66,[91]]]],[[[132,[1]],61,[32,[1]],[58,[1]]],[[66,[87]]]],[[[128,[61,[130,[1]],1]],61,[32,[1]],[58,[1]]],[[66,[87]]]],0,0,[[[134,[127,[133,[1]],1]],[32,[1]],[124,[1]]],[[135,[1]]]],0,[[[131,[3]]],[[131,[3]]]],[[[130,[[0,[3,1]]]]],[[130,[[0,[3,1]]]]]],[[[136,[[0,[3,1]]]]],[[136,[[0,[3,1]]]]]],[[[137,[[0,[3,1]]]]],[[137,[[0,[3,1]]]]]],[[[138,[[0,[3,1]]]]],[[138,[[0,[3,1]]]]]],[61,61],[62,62],[[[128,[[0,[3,127]],3,[0,[3,1]]]]],[[128,[[0,[3,127]],3,[0,[3,1]]]]]],[[[134,[[0,[3,127]],[0,[3,[133,[[0,[3,1]]]]]],[0,[3,1]]]]],[[134,[[0,[3,127]],[0,[3,[133,[[0,[3,1]]]]]],[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[129,[1]],[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[131,[[130,[1]]]],[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],0,0,[[[132,[1]],61,[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[128,[61,[130,[1]],1]],61,[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],0,0,0,[[],61],[[],62],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[131,[7]],[131,[7]]],8],[[[130,[[0,[7,1]]]],[130,[[0,[7,1]]]]],8],[[[138,[[0,[7,1]]]],[138,[[0,[7,1]]]]],8],[[61,61],8],[[62,62],8],[[[128,[[0,[7,127]],7,[0,[7,1]]]],[128,[[0,[7,127]],7,[0,[7,1]]]]],8],[[[134,[[0,[7,127]],[0,[7,[133,[[0,[7,1]]]]]],[0,[7,1]]]],[134,[[0,[7,127]],[0,[7,[133,[[0,[7,1]]]]]],[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[132,[1]],61,[58,[1]],[58,[1]],[58,[1]],[32,[1]]],[[58,[1]]]],[[[128,[61,[130,[1]],1]],61,[58,[1]],[58,[1]],[58,[1]],[32,[1]]],[[58,[1]]]],[[[139,[1]],[32,[1]],[57,[1]]],[[19,[[64,[1]]]]]],[[[131,[[138,[1]]]],[32,[1]],[57,[1]]],[[19,[[64,[1]]]]]],[[[140,[1]],62,[32,[1]],[57,[1]]],[[19,[[64,[1]]]]]],[[[128,[62,[138,[1]],1]],62,[32,[1]],[57,[1]]],[[19,[[64,[1]]]]]],[[[131,[9]],10],11],[[[130,[[0,[9,1]]]],10],11],[[[136,[[0,[9,1]]]],10],11],[[[137,[[0,[9,1]]]],10],11],[[[138,[[0,[9,1]]]],10],11],[[61,10],11],[[62,10],11],[[[128,[[0,[9,127]],9,[0,[9,1]]]],10],11],[[[134,[[0,[9,127]],[0,[9,[133,[[0,[9,1]]]]]],[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[128,[127,[133,[1]],1]]],[[134,[127,[133,[1]],1]]]],[[]],[[[128,[[0,[127,80,29,26,9]],29,1]],[0,[127,80,29,26,9]]],[[131,[29]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[61,17]],[[62,17]],0,[[],4],[61,4],[62,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[139,[1]],[32,[1]],[64,[1]]],[[57,[1]]]],[[[131,[[138,[1]]]],[32,[1]],[64,[1]]],[[57,[1]]]],[[[140,[1]],62,[32,[1]],[64,[1]]],[[57,[1]]]],[[[128,[62,[138,[1]],1]],62,[32,[1]],[64,[1]]],[[57,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[[134,[127,[133,[1]],1]],[32,[1]]],31],0,[[],[[128,[[0,[127,80,29,26,9]],29,1]]]],[[],[[128,[[0,[127,80,29,26,9]],29,1]]]],[[[131,[29]]],[[128,[[0,[127,80,29,26,9]],29,1]]]],[[],141],[32,[[66,[141]]]],[[[130,[1]],[32,[1]]],[[66,[[141,[1]]]]]],[[[136,[1]]],[[141,[1]]]],[[[137,[1]]],[[141,[1]]]],[[[138,[1]],[32,[1]]],[[66,[[141,[1]]]]]],0,[[[129,[1]],[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[131,[[130,[1]]]],[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[132,[1]],61,[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[128,[61,[130,[1]],1]],61,[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[128,[[0,[127,80,29,26,9]],29,1]]],[[31,[[131,[29]]]]]],[[[128,[[0,[127,80,29,26,9]],29,1]]],4],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,19],[[[131,[[133,[1]]]],[32,[1]]],19],[[[130,[1]],[32,[1]]],19],[[[138,[1]],[32,[1]]],19],[[[128,[[0,[127,80,29,26,9]],29,1]]],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[142,[42,[0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[142,[31,[[0,[1]]]],[0,[1]],[0,[1]]],66],[[142,[31,[[0,[1]]]],[0,[1]],98],66],[142,66],[142,142],[143,143],[144,144],[145,145],[146,146],[147,147],[148,148],[149,149],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[142,142],8],[[143,143],8],[[144,144],8],[[145,145],8],[[146,146],8],[[147,147],8],[[148,148],8],[[149,149],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[142,10],11],[[143,10],11],[[143,10],11],[[144,10],11],[[144,10],11],[[145,10],11],[[145,10],11],[[146,10],11],[[147,10],11],[[148,10],11],[[149,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[1]],[0,[1]]],[[19,[146]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[143,17]],[[144,17]],[[145,17]],[[146,17]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[143,150],[[21,[31,[143]],4,147],[[66,[142]]]],[[142,[0,[1]]],4],[142,4],[[142,[43,[1]],[0,[1]],[0,[1]]],66],[144,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[146,[0,[1]]],[[0,[1]]]],[[],21],[[],21],[[],21],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[142,4],[[66,[142]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[4],[4],[4],[[151,152],21],[[]],[[151,[42,[152]]],66],[[],4],[[151,21],152],[[]],[151,152],[152,151],[[151,95],[[19,[152]]]],[[],6],[[],6],[[],22],[[151,151],66],[[]],0,0,0,0,0,0,0,[[]],[[]],[153,153],[[]],[4],[4],[4],0,[[153,10],11],[[153,10],11],[[]],[[],4],[[]],0,0,0,[[]],[[],21],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,[154,95],[[]],[[]],[154,154],[[]],[154,112],[[154,155],[[156,[1,[31,[111]]]]]],[[],154],[4],[4],[4],[[154,[157,[[42,[111]]]]],21],[[154,154],8],[[],8],[[],8],[[],8],[[154,10],11],[[]],[[],4],[[]],[[154,112],8],[[],98],[155,[[156,[1,154]]]],[[],98],[[],98],[154,98],[[],98],[154,[[158,[98]]]],[154,98],[[],98],[154,117],[[]],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,0,[[[0,[159,3,160]],95,[161,[[0,[159,3,160]],1]]],[[161,[[0,[159,3,160]],1]]]],[[[0,[159,3,160]],162,[161,[[0,[159,3,160]],1]]],[[161,[[0,[159,3,160]],1]]]],[[]],[[]],[[]],[[]],[[[163,[[0,[3,1]]]]],[[163,[[0,[3,1]]]]]],[[[161,[[0,[3,160]],[0,[3,1]]]]],[[161,[[0,[3,160]],[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[[[163,[[0,[7,1]]]],[163,[[0,[7,1]]]]],8],[[[161,[[0,[7,160]],[0,[7,1]]]],[161,[[0,[7,160]],[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,0,[[[163,[1]],10],11],[[[163,[[0,[9,1]]]],10],11],[[[161,[[0,[9,160]],[0,[9,1]]]],10],11],[[[161,[155,1]],10],11],[[]],[[]],[[[0,[159,3,160]],162],[[161,[[0,[159,3,160]],1]]]],[[],4],[[],4],0,[[]],[[]],[[[163,[1]]],8],[[[164,[160,[161,[160,1]]]],98],[[164,[160,[161,[160,1]]]]]],[[160,[163,[1]]],[[161,[160,1]]]],[[19,160,[163,[1]]],[[164,[160,[161,[160,1]]]]]],[[[161,[[0,[159,3,160]],1]],[161,[[0,[159,3,160]],1]]],[[161,[[0,[159,3,160]],1]]]],[[6,160,98],[[164,[160,[161,[160,1]]]]]],[[160,[163,[1]]],[[164,[160,[161,[160,1]]]]]],[[]],[[]],[[],21],[[],21],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[]],[[]],0,0,0,[[]],[[]],[[]],[165,165],[[]],[4],[4],[4],[[165,165],8],[[],8],[[],8],[[],8],[[165,10],11],[[]],[[155,155],165],[[],4],[[]],[[95,4,4,4,4],21],[[]],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[166,166],[[]],[4],[4],[4],[[166,166],8],[[],8],[[],8],[[],8],[[166,10],11],[[]],[[],4],[[]],[[112,95],98],[[],98],[[112,8,95],98],[[112,8,95],98],[112,98],[[112,8,95],98],[[112,8,95],98],[[],98],[[]],[[],6],[[],6],[[],22],[[]],[[[83,[[82,[72]]]],8],98],[[],98],[[],98],[155,[[156,[1,155]]]],[[[83,[[82,[72]]]],8,8],98],[[[83,[[82,[72]]]],8],98],[[],98],[154,98],[[[83,[[82,[72]]]],8],98],[[[83,[[82,[72]]]],8],98],[[[83,[[82,[72]]]],8],98],[[[83,[[82,[72]]]],8],98],[155,[[156,[1,[31,[155]]]]]],[155,[[156,[1,[31,[155]]]]]],[[],98],[[[83,[[82,[72]]]],8],98],[95,98],[95,98],[[],98],[[[83,[[82,[72]]]],8,8],98],[[],98],0,0,0,0,[4,4],[4,4],0,[[],38],[4,4],[4,8],[4,8],[[4,38]],0,[[[42,[[36,[33,34]]]]],[[6,[31,44]]]],[[],4],[[],31],[[],4],[[],4],[31,[[6,[8,44]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[169,[[0,[3,167,168]]]]],[[169,[[0,[3,167,168]]]]]],[[]],[[4,[39,[[38,[49,[35,[49]]]]]]],[[6,[[170,[50]],44]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[169,[[0,[167,168]]]]]]]],[4],[4],[4],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[171,[50,[35,[49]],49]]],[[38,[49,[35,[49]]]]]],[[4,[38,[49,[35,[49]]]]],[[171,[50,[35,[49]],49]]]],[[[171,[50,[35,[49]],49]],[172,[50]],[173,[50]],[58,[49]],[58,[49]],[32,[49]],4,[0,[174,3]],[39,[[38,[49,[35,[49]]]]]]],[[6,[89]]]],0,0,[[[171,[50,[35,[49]],49]],[36,[49,[33,[49]],[34,[49]],[35,[49]]]],[172,[50]],174],[[6,[[52,[50]],44]]]],[[[171,[50,[35,[49]],49]]],4],0,[[[169,[[0,[167,168]]]],20],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[[51,[50]],[175,[50]],[42,[49]],[42,[49]],[176,[50]],[0,[174,177]]],[[6,[8,44]]]],[[[36,[49,[33,[49]],[34,[49]],[35,[49]]]],[51,[50]],[52,[50]]],[[6,[8,44]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[179,[[0,[178,3]],[0,[3,[35,[[0,[178,3]]]]]]]]],[[179,[[0,[178,3]],[0,[3,[35,[[0,[178,3]]]]]]]]]],[[]],[[[180,[178,[35,[178]]]],[179,[178,[35,[178]]]]],[[6,[[180,[178,[35,[178]]]],89]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[179,[178,[35,[178]]]]]]]],[5,[[6,[[180,[[0,[105,178]],[0,[105,[35,[[0,[105,178]]]]]]]]]]]],[4],[4],[4],[[[179,[178,[35,[178]]]],73],74],[[[181,[178,[35,[178]]]],[179,[178,[35,[178]]]],[58,[178]],[58,[178]],[32,[178]],4,[39,[[38,[178,[35,[178]]]]]]],[[6,[89]]]],[[[179,[178,[35,[178]]]],[42,[111]]],[[19,[[42,[111]]]]]],[[[179,[178,[35,[178]]]]],4],[[[181,[[0,[9,178]],[0,[9,[35,[[0,[9,178]]]]]]]],10],11],[[]],[[]],[[]],[[[181,[178,[35,[178]]]],[58,[178]],[58,[178]],[32,[178]],4,[38,[178,[35,[178]]]]],[[6,[[31,[[41,[[33,[178]],[34,[178]],[35,[178]]]]]],89]]]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[181,[178,[35,[178]]]]],[[38,[178,[35,[178]]]]]],[[4,[38,[178,[35,[178]]]]],[[181,[178,[35,[178]]]]]],[[[181,[178,[35,[178]]]],[179,[178,[35,[178]]]],[42,[[41,[[33,[178]],[34,[178]],[35,[178]]]]]],[32,[178]],[39,[[38,[178,[35,[178]]]]]]],[[6,[89]]]],[[[179,[178,[35,[178]]]],[32,[178]],[42,[[182,[178,[35,[178]]]]]],4,[31,[178]],[39,[[38,[178,[35,[178]]]]]]],[[6,[[180,[178,[35,[178]]]],89]]]],[[4,[39,[[38,[178,[35,[178]]]]]]],[[179,[178,[35,[178]]]]]],[[[181,[178,[35,[178]]]]],4],[[[179,[178,[35,[178]]]],20],6],[[[180,[[0,[106,178]],[0,[106,[35,[[0,[106,178]]]]]]]],20],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[[180,[178,[35,[178]]]],[179,[178,[35,[178]]]],4,[42,[178]],[42,[178]]],[[6,[8,90]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[[43,[1]],[32,[1]],[19,[[58,[1]]]]],[[6,[44]]]],[[[58,[1]]],[[19,[[58,[1]]]]]],[[[58,[1]]],[[19,[[58,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[58,[1]],113],[[58,[1]]]],[183,183],[[[58,[[0,[3,1]]]]],[[58,[[0,[3,1]]]]]],[[[57,[[0,[3,1]]]]],[[57,[[0,[3,1]]]]]],[[]],[[]],[[]],[[183,183],18],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[183,183],8],[[[58,[[0,[7,1]]]],[58,[[0,[7,1]]]]],8],[[[57,[[0,[7,1]]]],[57,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[183,10],11],[[[58,[1]],[32,[1]],72,73],74],[[[58,[[0,[9,1]]]],10],11],[[[57,[[0,[9,1]]]],10],11],[[[57,[1]],[32,[1]],72,73],74],[[]],[[]],[112,[[58,[1]]]],[[]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[183,17]],[[[58,[1]],17]],[[[57,[1]],17]],[183,[[19,[4]]]],[[113,4],[[58,[1]]]],[[71,4],[[57,[1]]]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[58,[1]]],8],[[[58,[1]]],8],[[[57,[1]]],8],[[],8],[[[58,[1]]],8],[[[58,[1]]],8],[[[58,[1]]],8],[183,8],[183,8],[[[58,[1]]],8],[113,8],[[[58,[1]],113],8],[[],8],[[[58,[1]]],8],[4,183],[[71,183],[[57,[1]]]],[113,[[58,[1]]]],[71,[[57,[1]]]],[[113,4],[[58,[1]]]],[[71,4],[[57,[1]]]],[183,[[19,[4]]]],[[183,183],[[19,[18]]]],0,0,0,0,[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[]],[[]],[[]],0,[[4,8,[39,[[38,[178,[35,[178]]]]]],184],[[6,[[39,[[179,[178,[35,[178]]]]]],185]]]],[[],65],[[4,[39,[[38,[178,[35,[178]]]]]],30],[[6,[185]]]],0,0,0,0,[[]],[[]],[4],[4],[4],[[185,10],11],[[185,10],11],[186,185],[187,185],[[]],[[],4],[[]],[185,[[19,[92]]]],[[],21],[[],6],[[],6],[[],22],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[188,[[0,[3,1]],[0,[3,[35,[[0,[3,1]]]]]]]]],[[188,[[0,[3,1]],[0,[3,[35,[[0,[3,1]]]]]]]]]],[[]],[[],189],[[],189],0,[4],[4],[4],[4],[4],[4],0,[[[188,[1,[35,[1]]]],[58,[1]],[32,[1]]],66],[[]],[[]],[[32,[83,[[82,[72]]]],[0,[[157,[190]],29]]],66],[[32,[83,[[82,[72]]]],155,[0,[[157,[190]],29]]],[[66,[155]]]],[[32,[83,[[82,[72]]]],[157,[190]]],66],[[32,[83,[[82,[72]]]],58,[0,[[157,[190]],29]]],66],[[[188,[1,[35,[1]]]],[32,[1]],[83,[[82,[72]]]],[58,[1]],[0,[[157,[190]],29]]],66],[[32,72,58],66],[[[188,[1,[35,[1]]]],[32,[1]],72,[58,[1]]],66],[[],4],[[],4],[[]],[[]],0,0,[[],21],[[],21],[[32,4,[19,[189]],38]],[[[32,[1]],4,[19,[189]],[38,[1,[35,[1]]]]],[[66,[[192,[1,[191,[1,[35,[1]]]],[35,[1]]]]]]]],[[[32,[1]],4,[19,[189]],[38,[1,[35,[1]]]]],[[188,[1,[35,[1]]]]]],[[[32,[1]],4,[19,[189]],[38,[1,[35,[1]]]]],[[188,[1,[35,[1]]]]]],[21,21],[[[188,[1,[35,[1]]]],21],21],[[],21],[[[188,[1,[35,[1]]]]],21],[[[19,[[157,[190]]]],[38,[[0,[1,105]],[35,[[0,[1,105]]]]]]],66],[[[38,[[0,[1,105]],[35,[[0,[1,105]]]]]]],66],[[[32,[1]],[192,[1,[191,[1,[35,[1]]]],[35,[1]]]],[19,[[157,[190]]]]],66],[[[192,[1,[191,[1,[35,[1]]]],[35,[1]]]]],66],[[]],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[]],[[]],0,[[72,151]],[[]],[[]],[[],72],[4],[4],[4],[[72,152],21],[[]],[72,152],[[72,[42,[152]]],66],[[],4],[[],72],[[],72],[[72,[157,[95]]],152],[[72,[42,[[157,[95]]]],8,8],[[66,[152]]]],[[72,[42,[[157,[95]]]],8],[[66,[152]]]],[[]],[95,102],[[],102],[151,72],[72,[[83,[[82,[72]]]]]],[[72,95],[[19,[152]]]],[[72,152],66],[[],6],[[],6],[[],22],[[72,151],66],[95,102],[[]],0,0,0,0,[[[32,[1]],8],[[58,[1]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[32,[1]],[58,[1]]],[[6,[[58,[1]],91]]]],0,[[[32,[1]],[58,[1]]],[[6,[91]]]],[[[32,[1]],[58,[1]]],[[6,[[58,[1]],91]]]],0,0,[91,91],[[[193,[[0,[3,1]]]]],[[193,[[0,[3,1]]]]]],[[[194,[[0,[3,1]]]]],[[194,[[0,[3,1]]]]]],[[]],[[]],[[]],0,0,[[[32,[1]],[58,[1]]],[[58,[1]]]],0,[[[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],0,[[[32,[1]],[58,[1]],[58,[1]]],8],0,0,0,[[],[[32,[1]]]],0,0,[4],[4],[4],[4],[4],[4],[4],[4],0,[4],[4],[4],[4],0,0,0,0,0,[[[32,[1]]],[[194,[1]]]],[[[32,[1]],[58,[1]]],[[19,[[108,[1]]]]]],[[[32,[1]],[58,[1]]],[[19,[112]]]],[[[32,[1]],[58,[1]]],19],[[[32,[1]],[58,[1]]],19],[[[32,[1]],[57,[1]]],[[19,[[64,[1]]]]]],[[[32,[1]],[58,[1]]],19],[[[32,[1]],[58,[1]]],[[19,[102]]]],[[[32,[1]],[58,[1]]],[[19,[[31,[[58,[1]]]]]]]],[[[32,[1]],[58,[1]]],[[19,[102]]]],[[[32,[1]],[58,[1]]],[[19,[[2,[1]]]]]],[[[32,[1]],[58,[1]]],19],[[[32,[1]],[58,[1]]],[[19,[21]]]],[[[32,[1]],[58,[1]]],[[19,[102]]]],[[[32,[1]],[58,[1]]],[[19,[102]]]],[[[32,[1]],[58,[1]]],19],[[[32,[1]],[58,[1]]],[[19,[[107,[1]]]]]],[[[32,[1]],[58,[1]]],[[19,[13]]]],[[[32,[1]],[56,[1]]],[[19,[[57,[1]]]]]],[[[32,[1]],[55,[1]]],[[19,[[58,[1]]]]]],[[[32,[[0,[9,1]]]],10],11],[[91,10],11],[[91,10],11],[[[193,[[0,[9,1]]]],10],11],[[[194,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],0,[[[32,[1]]],[[57,[1]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]],[57,[1]]],[[19,[[60,[1]]]]]],[[[32,[1]],[107,[1]]],[[19,[[60,[1]]]]]],[[[32,[1]],113,1],[[19,[[58,[1]]]]]],[[[32,[1]],[101,[[2,[1]]]]],[[19,[[58,[1]]]]]],[[[32,[1]],[58,[1]]],[[19,[[55,[1]]]]]],[[[32,[1]],[57,[1]],[19,[[195,[1]]]]],[[6,[91]]]],[[[32,[1]],[58,[1]],[19,[[195,[1]]]]],[[6,[91]]]],0,0,[[[32,[1]],[57,[1]]],[[19,[[56,[1]]]]]],[[[32,[1]],[58,[1]]],[[19,[[55,[1]]]]]],[[[32,[1]],95],[[55,[1]]]],[[[32,[1]],102],[[55,[1]]]],[[[32,[1]],1,[58,[1]]],[[19,[[58,[1]]]]]],[[[32,[1]],1,[58,[1]]],[[58,[1]]]],0,[[[32,[1]]]],0,0,[[],4],[[],4],[[],4],[[],4],[[[32,[1]],112],[[58,[1]]]],[[[32,[1]],1,[58,[1]]],[[58,[1]]]],[[[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]]],[[57,[1]]]],[[[32,[1]],[58,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[32,[1]],[42,[[58,[1]]]]],[[58,[1]]]],[[[32,[1]],113,1],[[58,[1]]]],[[[32,[1]],1],[[58,[1]]]],[[[32,[1]],1],[[58,[1]]]],[[[32,[1]],1],[[58,[1]]]],[[[32,[1]],1],[[58,[1]]]],[[[32,[1]],[101,[[2,[1]]]]],[[58,[1]]]],[[[32,[1]],1],[[58,[1]]]],[[[32,[1]],1],[[58,[1]]]],[[[32,[1]],1],[[58,[1]]]],[[[32,[1]],1],[[58,[1]]]],[[[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[32,[1]],95],[[58,[1]]]],[[[32,[1]],102],[[58,[1]]]],[[[32,[1]],[42,[21]]],[[58,[1]]]],[[[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[32,[1]],8],[[58,[1]]]],[[[32,[1]],[196,[1]]],[[58,[1]]]],[[[32,[1]],[107,[1]]],[[58,[1]]]],[[[32,[1]],12],[[58,[1]]]],[[[32,[1]],13],[[58,[1]]]],[[[32,[1]],[56,[1]],[195,[1]]],[[19,[[57,[1]]]]]],[[[32,[1]],[55,[1]],[195,[1]]],[[19,[[58,[1]]]]]],[[]],[[]],[[]],[[]],0,[[[32,[1]],[157,[95]]],[[58,[1]]]],0,0,0,0,0,0,0,[[[32,[1]],[42,[[58,[1]]]]],[[58,[1]]]],0,[[[32,[1]],[57,[1]]],[[57,[1]]]],0,[[],[[32,[1]]]],[[[32,[1]]],[[194,[1]]]],[[[32,[1]]],[[58,[1]]]],0,[[[32,[1]],[101,[[2,[1]]]]],[[58,[1]]]],0,0,0,0,0,[[[32,[1]],[58,[1]]],19],0,[[[32,[1]],[58,[1]]],[[6,[91]]]],0,0,[[[193,[1]]],[[58,[1]]]],[[[32,[1]],[58,[1]],[58,[1]]],[[6,[8,91]]]],0,0,[[[32,[1]],95],[[6,[[58,[1]],153]]]],[[[32,[1]],[83,[[82,[72]]]],155],[[6,[153]]]],[[[32,[1]],[83,[[82,[72]]]],95],[[6,[[58,[1]],153]]]],[[[32,[1]],[58,[1]]],[[19,[[58,[1]]]]]],0,[[[32,[1]],[58,[1]]],[[6,[[58,[1]],91]]]],[[[32,[1]],95],[[58,[1]]]],0,[[[32,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],0,[[[32,[1]]],[[58,[1]]]],0,[[[32,[1]],[157,[95]]],[[58,[1]]]],0,[[[32,[1]]],[[58,[1]]]],0,0,0,[[]],[[]],[[]],[[],21],[[[32,[1]],[57,[1]]],[[19,[[197,[1]]]]]],[[[32,[1]],[58,[1]]],[[19,[[198,[1]]]]]],[[[32,[1]],[58,[1]]],[[6,[91]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],0,[[[32,[1]],12],[[58,[1]]]],0,[[[32,[1]],95],[[58,[1]]]],[[[193,[1]]],1],[[]],[[]],[[]],[[]],[[[32,[1]],1,1],[[6,[[56,[1]],91]]]],0,[[[32,[1]],1,1],[[6,[[55,[1]],91]]]],0,[[[193,[1]]],[[55,[1]]]],0,0,0,0,0,[[]],[[102,102],[[19,[102]]]],[[]],[[]],[102,102],[[]],[4],[4],[5,[[6,[102]]]],[[102,95],102],[102,[[19,[102]]]],[4],[[102,102],8],[[],8],[[],8],[[],8],[[102,[42,[[157,[95]]]]],102],[[102,10],11],[[102,10],11],[95,21],[102,21],[102,21],[102,21],[95,102],[[]],[95,[[19,[102]]]],[[[0,[14,15]],16],12],[[102,102],8],[[102,17]],[[],4],[[]],[102,8],[102,8],[102,8],[102,8],[112,8],[[[42,[[157,[95]]]]],102],[[[31,[21]]],102],[102,[[66,[95]]]],[[[42,[[157,[95]]]],8],102],[[[31,[21]],8],102],[[102,102],[[19,[18]]]],[102,[[42,[21]]]],[102,8],[8,102],[[],102],[[],102],[[102,20],6],[[[42,[[157,[95]]]]],102],[[[31,[21]]],102],[[]],[[],21],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[196,[[0,[3,1]]]]],[[196,[[0,[3,1]]]]]],[[]],[4],[4],[4],[[[196,[[0,[7,1]]]],[196,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[196,[1]],10],11],[[[196,[[0,[9,1]]]],10],11],[[]],[[],4],[[]],[[]],[[],21],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],31],[[],[[31,[114]]]],[[],[[31,[115]]]],[[],[[31,[95]]]],[[113,[43,[1]]],[[6,[[45,[1]],44]]]],[[71,[43,[1]]],[[6,[[45,[1]],44]]]],[[114,[43,[1]]],[[6,[[45,[1]],44]]]],[[115,[43,[1]]],[[6,[[45,[1]],44]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[113,113],[71,71],[114,114],[115,115],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[113]]]],[5,[[6,[71]]]],[5,[[6,[114]]]],[5,[[6,[115]]]],[4],[4],[4],[4],[[113,113],8],[[71,71],8],[[114,114],8],[[115,115],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[113,10],11],[[113,10],11],[[71,10],11],[[71,10],11],[[114,10],11],[[114,10],11],[[115,10],11],[[115,10],11],[[]],[[]],[[]],[[]],[1,19],[1,[[19,[113]]]],[1,[[19,[71]]]],[1,[[19,[114]]]],[1,[[19,[115]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[113,17]],[[71,17]],[[114,17]],[[115,17]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[113,8],[115,8],[[113,113],8],[113,8],[[114,114],[[19,[18]]]],[[115,115],[[19,[18]]]],[[113,20],6],[[71,20],6],[[114,20],6],[[115,20],6],[4,8],[[114,4],8],[[115,4],8],[[],95],[114,95],[115,95],[[],1],[113,1],[71,1],[114,1],[115,[[0,[[199,[12]],200]]]],[[]],[113],[71],[114],[115],[[]],[[]],[[]],[[]],[[],21],[[],21],[[],21],[[],21],[116,[[6,[113]]]],[[],6],[[],6],[116,[[6,[71]]]],[116,[[6,[114]]]],[[],6],[[],6],[116,[[6,[115]]]],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],0,0,[[13,13],13],[[]],[[]],[[]],[13,13],[[]],[4],[4],[5,[[6,[13]]]],[[13,13],13],[4],[[13,13],8],[[],8],[[],8],[[],8],[[13,10],11],[[13,10],11],[12,13],[[]],[[],4],[[]],[13,8],[[13,13],13],[[13,13],[[19,[18]]]],[[13,13],13],[[13,20],6],[[13,13],13],[[]],[[],21],[[],6],[[],6],[[],22],[[]],0,[[32,72,73],74],[[32,72],21],0,0,0,[[]],[[]],[[]],[4,111],[201,201],[[]],[4],[4],[4],[[201,201],8],[[],8],[[],8],[[],8],[[201,10],11],[[201,10],11],[[]],[[[42,[111]]],[[66,[201]]]],0,[[],4],[[]],[[[42,[111]]],[[19,[4]]]],0,[201,111],[111,8],[111,8],[201,[[31,[111]]]],[[]],[[],21],[4,[[31,[111]]]],0,[[],6],[[],6],[[],22],[[]],0,0,0,0,0,0,0,[[]],[[]],[202,203],[202,203],0,[4],[4],[4],[[203,10],11],[[203,10],11],[[]],0,[[],4],[[]],0,[[],21],0,[[],6],[[],6],[[],22],[[]],0,[[]],[[]],[4],[4],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,95,[42,[95]],205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,95,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,95,[42,[95]],205],6],[[204,4,205],6],[[204,95,4,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,205],6],[[204,95,205],6],[4],[[204,10],11],[[]],[201,[[6,[105,203]]]],[201,204],[[],4],[[]],[204,8],[[],6],[[],6],[[],22],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[206,6],[206,6],[206,6],[207,6],[208,6],[209,6],[209,6],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[210,8],[[210,8],6],[[210,[42,[111]]],6],[[210,112],6],[[206,[0,[106,15]]],6],[[206,[0,[106,15]]],6],[[210,211],6],[[210,212],6],[[206,[0,[106,15]]],6],[[208,[0,[106,15]]],6],[[209,95,[0,[106,15]]],6],[[209,95,[0,[106,15]]],6],[[210,213],6],[[210,214],6],[[210,215],6],[[210,216],6],[[207,[0,[106,15]]],6],[[210,[19,[4]]],6],[[210,95,[0,[106,15]]],6],[[210,95,117,95,[0,[106,15]]],6],[210,6],[[210,[19,[4]]],6],[[210,[0,[106,15]]],6],[[210,95],6],[[210,95,4],6],[[210,95,117,95,4],6],[[210,4],6],[[210,95,4],6],[[210,95,117,95,4],6],[[210,116],6],[[210,117],6],[[210,12],6],[[210,111],6],[210,6],[[210,95],6],[[210,95,117,95],6],[[207,[0,[106,15]]],6],[106,[[6,[201,203]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[197,[[0,[3,1]]]]],[[197,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[197,[[0,[105,1]]]]]]]],[4],[[[197,[[0,[7,1]]]],[197,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[197,[[0,[9,1]]]],10],11],[[]],[[[197,[1]]],[[60,[1]]]],[[],4],[[]],[[[197,[[0,[106,1]]]],20],6],[[]],[[],6],[[],6],[[],22],[[]],[[[197,[1]],[85,[1]]],[[56,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[198,[[0,[3,1]]]]],[[198,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[198,[[0,[105,1]]]]]]]],[4],[[[198,[[0,[7,1]]]],[198,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[198,[[0,[9,1]]]],10],11],[[[198,[1]],10],11],[[]],[[[32,[1]],[58,[1]]],[[19,[[198,[1]]]]]],[[],4],[[]],[[[198,[[0,[106,1]]]],20],6],[[]],[[],21],[[],6],[[],6],[[],22],[[]],[[[198,[1]],[85,[1]]],[[55,[1]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[[218,[[0,[3,217]],[0,[3,1]]]]],[[218,[[0,[3,217]],[0,[3,1]]]]]],[[]],[[[218,[217,1]],[218,[217,1]]],18],[4],[4],[5,[[6,[[218,[[0,[105,217]],[0,[105,1]]]]]]]],[4],[[[218,[[0,[7,217]],[0,[7,1]]]],[218,[[0,[7,217]],[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[218,[[0,[9,217]],[0,[9,1]]]],10],11],[[[218,[[0,[217,202]],1]],10],11],[[]],[95,[[6,[[218,[217,1]],219]]]],[95,[[6,[[55,[1]],91]]]],[95,[[6,[[218,[113,1]],91]]]],[[217,1],[[218,[217,1]]]],[[[0,[14,15]],16],12],[[[218,[217,1]],17]],[[],4],[[]],[[[218,[217,1]]],[[60,[1]]]],[[[218,[217,1]],[218,[217,1]]],[[19,[18]]]],[[[218,[217,1]]]],[[[218,[[0,[106,217]],[0,[106,1]]]],20],6],[[[218,[217,1]]],217],[[[218,[217,1]]],1],[[[218,[217,1]]],21],[[]],[[],21],[[],6],[[],6],[[],22],[[[218,[217,1]]],1],[[]],0,[[]],[[]],[[]],[[[195,[[0,[3,1]]]]],[[195,[[0,[3,1]]]]]],[[]],0,[[],[[195,[[0,[80,1]]]]]],[4],[4],[5,[[6,[[195,[[0,[105,1]]]]]]]],[4],[[[195,[[0,[7,1]]]],[195,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],0,[[[195,[[0,[9,1]]]],10],11],[[]],[[[195,[1]],[56,[1]]],[[19,[[197,[1]]]]]],[[[195,[1]],[55,[1]]],[[19,[[198,[1]]]]]],[[[55,[1]]],[[19,[[198,[1]]]]]],[[],4],[[[195,[1]],[32,[1]],[58,[1]]],[[19,[[55,[1]]]]]],[[[195,[1]],[55,[1]],[19,[[198,[1]]]]],[[19,[[19,[[198,[1]]]]]]]],[[]],[[],[[195,[1]]]],[[[32,[1]],[58,[1]]]],[[[195,[1]],[85,[1]]],[[55,[1]]]],[[[195,[1]],95,[85,[1]]]],[[[195,[1]],102,[85,[1]]]],[[[195,[[0,[106,1]]]],20],6],[[]],[[[195,[1]]],[[32,[1]]]],[[[195,[1]],[55,[1]]],[[6,[91]]]],[[[32,[1]]],[[195,[1]]]],[[],6],[[],6],[[],22],[[]]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"u64"],[4,"UInt"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[4,"Ordering"],[4,"Option"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[3,"CacheMap"],[3,"RandomState"],[3,"HashMap"],[8,"Eq"],[8,"Borrow"],[8,"StableDeref"],[8,"Copy"],[8,"FnOnce"],[3,"Vec"],[3,"Store"],[3,"IO"],[3,"Witness"],[8,"Coprocessor"],[3,"MultiFrame"],[3,"CircuitFrame"],[3,"Lang"],[3,"Arc"],[8,"Sync"],[3,"Frame"],[15,"slice"],[8,"ConstraintSystem"],[4,"SynthesisError"],[3,"AllocatedNum"],[3,"AllocatedPtr"],[3,"AllocatedContPtr"],[3,"GlobalAllocations"],[3,"Scalar"],[3,"Bls12"],[3,"PreparedVerifyingKey"],[3,"Proof"],[8,"PrimeField"],[4,"Boolean"],[6,"ZExprPtr"],[6,"ZContPtr"],[3,"ContPtr"],[3,"Ptr"],[8,"IntoHashComponents"],[15,"array"],[4,"ConsName"],[4,"ContName"],[8,"AsAllocatedHashComponents"],[4,"Continuation"],[3,"Utf8PathBuf"],[6,"Result"],[4,"Flow"],[3,"ParallelConfig"],[3,"WitnessGeneration"],[3,"Config"],[4,"ContTag"],[3,"State"],[8,"Write"],[6,"Result"],[4,"TrieCoproc"],[3,"NewCoprocessor"],[3,"LookupCoprocessor"],[3,"InsertCoprocessor"],[3,"Trie"],[8,"Default"],[4,"Error"],[3,"RefCell"],[3,"Rc"],[3,"LookupProof"],[3,"PoseidonCache"],[3,"InsertProof"],[4,"ReductionError"],[4,"LurkError"],[4,"ProofError"],[4,"NovaError"],[3,"Error"],[8,"Error"],[4,"Status"],[3,"Evaluator"],[15,"str"],[3,"Error"],[3,"FrameIt"],[8,"Fn"],[3,"Take"],[3,"Binding"],[8,"Into"],[3,"Symbol"],[4,"Coproc"],[3,"DummyCoprocessor"],[8,"Deserialize"],[8,"Serialize"],[3,"Thunk"],[4,"Expression"],[4,"LanguageField"],[3,"FWrap"],[15,"u8"],[15,"char"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[3,"HashConstants"],[6,"U3"],[3,"PoseidonConstants"],[6,"U4"],[6,"U6"],[6,"U8"],[4,"HashConst"],[4,"HashArity"],[3,"InversePoseidonCache"],[8,"HashName"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[6,"ConsWitness"],[8,"ContentAddressed"],[3,"CircuitHashWitness"],[6,"HashCircuitWitnessBlocks"],[3,"ScalarCons"],[3,"ScalarCont"],[3,"Cont"],[6,"ContStub"],[6,"ContWitness"],[6,"Preimage"],[3,"Func"],[3,"Var"],[4,"Tag"],[4,"CtrlTag"],[4,"Lit"],[3,"Block"],[4,"Ctrl"],[4,"Op"],[6,"AString"],[3,"Package"],[6,"SymbolRef"],[4,"Error"],[4,"LitBase"],[6,"Span"],[6,"ParseResult"],[8,"AsRef"],[3,"Box"],[8,"InputLength"],[8,"AsBytes"],[3,"ParseError"],[4,"ErrorKind"],[4,"ParseErrorKind"],[6,"IResult"],[4,"Pos"],[4,"StringFragment"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"PublicParams"],[3,"Groth16Prover"],[3,"Parameters"],[3,"GenericSRS"],[8,"RngCore"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[8,"Send"],[8,"CurveCycleEquipped"],[3,"PublicParams"],[4,"Proof"],[3,"NovaProver"],[6,"C1"],[4,"RawPtr"],[3,"Utf8Path"],[4,"Error"],[3,"Error"],[3,"Error"],[3,"ReplState"],[3,"Command"],[3,"Path"],[8,"ReplTrait"],[3,"Repl"],[3,"ConstantPtrs"],[3,"NamedConstants"],[3,"ZStore"],[4,"Syntax"],[4,"ZCont"],[4,"ZExpr"],[8,"From"],[8,"Field"],[4,"ZData"],[8,"Display"],[4,"SerdeError"],[3,"Deserializer"],[8,"Visitor"],[3,"SerializeCell"],[3,"SerializeMap"],[3,"SerializeTupleVariant"],[3,"StructSerializer"],[3,"Serializer"],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[8,"Tag"],[3,"ZPtr"],[3,"Error"],[8,"ToInputs"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"CoCircuit"],[8,"Evaluable"],[8,"CAddr"],[13,"Pos"],[8,"Prover"],[8,"Provable"],[8,"TypePredicates"],[8,"Op"],[8,"Write"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,2,1,2,1,1,2,1,2,1,2,2,1,1,2,1,2,1,2,1],"f":[0,0,0,[[]],[[]],[[]],[[]],[1],[[2,3],4],[[1,3],4],[[]],[[]],[[],1],[[]],[[]],[1],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6]],"c":[],"p":[[3,"MetricsSinkHandle"],[3,"MetricsSink"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
