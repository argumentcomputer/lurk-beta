var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","deserialize","drop","from","handle_meta","handle_non_meta","init","into","layout_raw","name","new","pointer_metadata","process_line","prompt","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"clutch"],[26,"clap_builder::builder::command"],[27,"rkyv::with"],[28,"core::result"],[29,"pasta_curves::pallas"],[30,"lurk::eval::lang"],[31,"lurk::store"],[32,"lurk::state"],[33,"core::cell"],[34,"alloc::rc"],[35,"lurk::ptr"],[36,"anyhow"],[37,"std::path"],[38,"core::convert"],[39,"core::marker"],[40,"lurk::eval"],[41,"core::alloc::layout"],[42,"core::alloc::layout"],[43,"core::option"],[44,"lurk::eval::lang"],[45,"alloc::alloc"],[46,"alloc::boxed"],[47,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[-1,-1,[]],[[[8,[6,[7,[6]]]],[9,[6]],[12,[[11,[10]]]],[13,[6]],-1],[[14,[5]]],[[16,[15]],17]],[[[8,[6,[7,[6]]]],[9,[6]],10,[13,[6]]],[[14,[[5,[[18,[6]],[18,[6]],2]]]]]],[[],2],[-1,-2,[],[]],[[],[[4,[19,20]]]],[[],21],[[[9,[6]],2,[22,[1]],[23,[6,[7,[6]]]]],[[8,[6,[7,[6]]]]]],[[]],[[[8,[6,[7,[6]]]],21],21],[[[8,[6,[7,[6]]]]],21],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,24,[]],[[[26,[-1,25]]],[[26,[27,25]]],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Command",26],[15,"usize"],[3,"With",27],[4,"Result",28],[15,"tuple"],[6,"Scalar",29],[4,"Coproc",30],[3,"ClutchState",0],[3,"Store",31],[3,"State",32],[3,"RefCell",33],[3,"Rc",34],[6,"Ptr",35],[6,"Result",36],[3,"Path",37],[8,"AsRef",38],[8,"Copy",39],[3,"IO",40],[3,"Layout",41],[3,"LayoutError",41],[3,"String",42],[4,"Option",43],[3,"Lang",30],[3,"TypeId",44],[3,"Global",45],[3,"Box",46],[8,"Any",44]],"b":[]},\
"fcomm":{"doc":"","t":"DEDDGRNDNDNEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMFMLLLLMLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLFLLLLLLLLLLLLKKKLLLLLLLLKK","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","file_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","from","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","FileMap","FileStore","borrow","borrow_mut","data_dir","deref","deref_mut","deserialize","drop","fmt","from","get","init","into","layout_raw","new","pointer_metadata","read_from_json_path","read_from_path","read_from_stdin","set","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","write_to_json_path","write_to_path"],"q":[[0,"fcomm"],[638,"fcomm::error"],[683,"fcomm::file_map"],[713,"lurk::store"],[714,"lurk::ptr"],[715,"lurk::eval::lang"],[716,"lurk::eval::lang"],[717,"lurk::circuit::circuit_frame"],[718,"lurk::proof::nova"],[719,"lurk::proof::nova"],[720,"core::clone"],[721,"lurk::field"],[722,"lurk::ptr"],[723,"serde::de"],[724,"core::default"],[725,"rkyv::with"],[726,"serde::de"],[727,"core::option"],[728,"lurk::eval"],[729,"core::fmt"],[730,"core::fmt"],[731,"core::hash"],[732,"core::marker"],[733,"core::hash"],[734,"core::alloc::layout"],[735,"lurk::public_parameters::error"],[736,"std::path"],[737,"serde::ser"],[738,"core::any"],[739,"alloc::alloc"],[740,"alloc::boxed"],[741,"core::any"],[742,"lurk::z_data::serde"],[743,"std::io::error"],[744,"anyhow"],[745,"bellpepper_core::constraint_system"],[746,"hex::error"],[747,"lurk::store"],[748,"core::fmt"],[749,"alloc::string"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,29,0,9,0,17,0,0,0,17,17,0,9,0,29,0,0,9,0,0,28,17,29,0,0,0,0,28,25,25,18,19,22,25,26,27,28,29,4,9,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,23,16,30,17,18,19,22,23,24,25,26,27,28,29,4,9,30,17,18,19,22,23,24,25,26,27,28,29,4,9,30,22,23,25,4,0,18,19,18,19,29,17,18,19,28,29,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,17,18,18,19,19,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,4,4,40,40,16,16,9,9,30,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,18,19,18,19,17,18,19,22,23,24,25,26,27,28,29,4,9,30,17,17,17,18,18,18,19,19,19,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,4,4,4,9,9,9,30,30,30,0,18,24,16,0,9,16,18,19,24,4,18,19,4,0,17,18,19,22,23,24,25,26,27,28,29,4,40,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,22,29,22,28,22,22,17,17,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,23,25,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,9,9,18,19,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,25,0,16,25,25,9,16,25,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,30,9,16,22,28,9,16,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,4,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,30,18,19,25,17,18,19,22,23,24,25,26,27,28,29,4,9,30,22,17,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,40,30,30,16,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,80,80,0,80,80,80,80,80,80,80,80,80,80,80,80,82,82,82,80,80,80,80,80,80,80,80,82,82],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[17,17],[18,18],[[[19,[-1]]],[[19,[-1]]],[20,21]],[[[22,[-1]]],[[22,[-1]]],[20,21]],[[[23,[-1]]],[[23,[-1]]],[20,21]],[[[24,[-1]]],[[24,[-1]]],[20,21]],[[[25,[-1]]],[[25,[-1]]],[20,21]],[26,26],[[[27,[-1]]],[[27,[-1]]],[20,21]],[[[28,[-1]]],[[28,[-1]]],[20,21]],[29,29],[[[4,[-1]]],[[4,[-1]]],[20,21]],[[[9,[-1]]],[[9,[-1]]],[20,21]],[[[30,[-1]]],[[30,[-1]]],[20,21]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],0,0,0,0,[[],32],0,0,0,0,[[29,[2,[-1]]],[[33,[-1]]],[21,34,35]],[17,5],[[],18],[[],[[19,[-1]]],[36,21]],[[],[[28,[-1]]],21],[[],29],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[17]]],38],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[18]]],38],[-1,[[11,[[19,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[22,[-2]]]]],38,21],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[23,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[24,[-2]]]]],38,[39,21]],[-1,[[11,[[25,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[26]]],38],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[27,[-2]]]]],38,[39,21]],[-1,[[11,[[28,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[29]]],38],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[4,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[40]]],38],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[16,[-2]]]]],38,[39,41]],[-1,[[11,[[9,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[30,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],0,0,0,0,[[17,17],6],[[18,18],6],[[[19,[-1]],[19,[-1]]],6,[42,21]],[[[22,[-1]],[22,[-1]]],6,[42,21]],[[[23,[-1]],[23,[-1]]],6,[42,21]],[[[24,[-1]],[24,[-1]]],6,[42,21]],[[[25,[-1]],[25,[-1]]],6,[42,21]],[[26,26],6],[[[27,[-1]],[27,[-1]]],6,[42,21]],[[[28,[-1]],[28,[-1]]],6,[42,21]],[[29,29],6],[[[4,[-1]],[4,[-1]]],6,[42,21]],[[[9,[-1]],[9,[-1]]],6,[42,21]],[[[30,[-1]],[30,[-1]]],6,[42,21]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[[2,[-1]],[3,[-1]],5],[[11,[18,10]]],[21,34]],[[[24,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[21,34,35]],[[[2,[1]],[3,[1]],[43,[[3,[1]]]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[2,[-1]],[3,[-1]],[43,[[3,[-1]]]],5,[8,[-1,[7,[-1]]]]],[[11,[[31,[[44,[-1]],5]],10]]],21],[[[9,[-1]]],[[43,[18]]],21],[[[16,[1]],[2,[1]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],0,0,0,0,0,0,[[[4,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[21,34,35]],0,[[17,45],46],[[18,45],46],[[[19,[-1]],45],46,[47,21]],[[[22,[-1]],45],46,[47,21]],[[[23,[-1]],45],46,[47,21]],[[[24,[-1]],45],46,[47,21]],[[[25,[-1]],45],46,[47,21]],[[26,45],46],[[[27,[-1]],45],46,[47,21]],[[[28,[-1]],45],46,[47,21]],[[29,45],46],[[[4,[-1]],45],46,[47,21]],[[40,45],46],[[[9,[-1]],45],46,[47,21]],[[[30,[-1]],45],46,[47,21]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1]],[3,[-1]]],[[11,[[22,[-1]],10]]],[21,34,35]],[[[2,[-1]],[33,[-1]]],29,[21,34]],[-1,[[11,[[22,[-2]]]]],[[50,[[49,[48]]]]],21],[[[2,[-1]],[3,[-1]]],[[28,[-1]]],[21,34,35]],[[[2,[-1]],[3,[-1]],-1],[[11,[[22,[-1]],10]]],[21,34,35]],[[[2,[-1]],[3,[-1]]],[[11,[[31,[[22,[-1]],-1]],10]]],[21,34,35]],[[-1,-2],51,[52,53],54],[[17,-1],31,55],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],[[[9,[-1]]],6,21],[[[9,[-1]]],6,21],0,0,[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],0,[5,58],0,[[[2,[1]],[23,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[23,[1]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[9,[-1]]],[[43,[[25,[-1]]]]],21],[[[16,[1]],[2,[1]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[9,[-1]]],[[11,[[59,[-1]],10]]],[21,34,39]],[[[2,[1]],[9,[1]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[22,[-1]],[2,[-1]]],[[3,[-1]]],[21,34,35]],[[[28,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[3,[-1]]],[21,34,35]],[[[9,[-1]]],[[43,[[19,[-1]]]]],21],[[[16,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],0,0,[[17,-1],11,62],[[18,-1],11,62],[[[19,[-1]],-2],11,[34,21],62],[[[22,[-1]],-2],11,21,62],[[[23,[-1]],-2],11,[34,21],62],[[[24,[-1]],-2],11,[34,21],62],[[[25,[-1]],-2],11,[34,21],62],[[26,-1],11,62],[[[27,[-1]],-2],11,[34,21],62],[[[28,[-1]],-2],11,[34,21],62],[[29,-1],11,62],[[[4,[-1]],-2],11,[34,21],62],[[40,-1],11,62],[[[16,[-1]],-2],11,[34,41],62],[[[9,[-1]],-2],11,[34,21],62],[[[30,[-1]],-2],11,[34,21],62],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],63,21],[-1,[[11,[-2]]],[],[]],[5,[[11,[17]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],0,0,0,[[[16,[1]],[14,[1,[12,[1,[7,[1]]]]]],[8,[1,[7,[1]]]]],[[11,[40,10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,68,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[5,31],[[10,45],46],[[10,45],46],[69,10],[60,10],[70,10],[71,10],[72,10],[-1,-1,[]],[73,10],[74,10],[[-1,-2],[[75,[-2,-3]]],[],[76,77,78],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[11,[56,57]]]],[[]],[10,[[43,[68]]]],[-1,63,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],79],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[5,31],[[[80,[-1,-2]],45],46,[47,81],[47,82]],[-1,-1,[]],[[[80,[-1,-2]],-1],[[43,[-2]]],81,82],[[],5],[-1,-2,[],[]],[[],[[11,[56,57]]]],[-1,[[11,[[80,[-2,-3]],60]]],[[50,[61]]],81,82],[[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[[],[[11,[-1,60]]],[]],[[[80,[-1,-2]],-1,-2],[[11,[31,60]]],81,82],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,-2,[],[]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]]],"c":[],"p":[[6,"S1",0],[3,"Store",713],[6,"Ptr",714],[3,"CommittedExpression",0],[15,"usize"],[15,"bool"],[4,"Coproc",715],[3,"Lang",715],[4,"Claim",0],[4,"Error",638],[4,"Result",716],[3,"MultiFrame",717],[3,"NovaProver",718],[3,"PublicParams",718],[3,"Arc",719],[3,"Proof",0],[4,"ReductionCount",0],[3,"Evaluation",0],[3,"PtrEvaluation",0],[8,"Clone",720],[8,"LurkField",721],[3,"Commitment",0],[3,"OpeningRequest",0],[3,"Expression",0],[3,"Opening",0],[3,"ZBytes",0],[3,"ZStorePtr",0],[4,"LurkPtr",0],[4,"LurkCont",0],[3,"Cert",0],[15,"tuple"],[6,"CommittedExpressionMap",0],[6,"ContPtr",714],[8,"Serialize",722],[8,"DeserializeOwned",723],[8,"Default",724],[3,"With",725],[8,"Deserializer",723],[8,"Deserialize",723],[3,"VerificationResult",0],[8,"CurveCycleEquipped",718],[8,"PartialEq",726],[4,"Option",727],[3,"IO",728],[3,"Formatter",729],[6,"Result",729],[8,"Debug",729],[15,"u8"],[15,"slice"],[8,"AsRef",730],[15,"u64"],[8,"Hash",731],[8,"Sized",732],[8,"BuildHasher",731],[8,"Hasher",731],[3,"Layout",733],[3,"LayoutError",733],[6,"NovaProofCache",0],[6,"ZExprPtr",734],[4,"Error",735],[3,"Path",736],[8,"Serializer",722],[3,"String",737],[3,"TypeId",738],[3,"Global",739],[3,"Box",740],[8,"Any",738],[8,"Error",741],[4,"SerdeError",742],[3,"Error",743],[3,"Error",744],[4,"SynthesisError",745],[4,"FromHexError",746],[3,"Error",713],[3,"IndentedSection",747],[8,"Display",729],[8,"Send",732],[8,"Sync",732],[3,"Utf8PathBuf",748],[3,"FileMap",683],[8,"ToString",737],[8,"FileStore",683]],"b":[[658,"impl-Debug-for-Error"],[659,"impl-Display-for-Error"],[660,"impl-From%3CSerdeError%3E-for-Error"],[661,"impl-From%3CError%3E-for-Error"],[662,"impl-From%3CError%3E-for-Error"],[663,"impl-From%3CError%3E-for-Error"],[664,"impl-From%3CSynthesisError%3E-for-Error"],[666,"impl-From%3CFromHexError%3E-for-Error"],[667,"impl-From%3CError%3E-for-Error"]]},\
"lurk":{"doc":"","t":"ENCRNCLLOLLOAALLAAAOLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCIAAKKDDLLLLLLLLLLMLLLLLLLMLLLLLLFLLLLLMLMLLLLLLLLLLMMLLLLLLMMLLLMMLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLMAAAAIKKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFAAENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHDMLLMFMLLLLLLMLLLLLLMLMMLLLLLLLFDLLLLLLLLLLLLLLLLLLLLEHHNDNDNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLFFLMMLLLLLMMFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLLLLAKLLLLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNIDDDDNNEENDMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLMLLLLLLLLLLLLLLLLLLLLLFLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLKLLLLKLLLLKLLLALLLLLLLKLLLMLLLMLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNNNNNENNNNNNNNNDNNENNNNNNNNENNNNNNNNENDLLMLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLALMLLLLMLLLLLLLALMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNDNNDDMLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFFFFFFNDDNEMLLMLLLLLLMLLLLMMLLLLLLLLLLLLLLMLLLLLMMMMLLLLMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNNNNNEGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFQIQQQQQIQIQIIIIQQQQQKKKKKKLKLKKKKLKKKKKKLLLKALKKKKKKKKKKAKGGGQQQQNIGGGQGQGDGEDNGGLLLLLLMFFLLLMLLLLLLLLLLLLLLLLLLLMMLLLLLLMLLLLLLLMLMMLLLLLFLLLLMLLLLLLLLLLLLLLLLLLLLLLLGNENNEDNGDGLLLLLLLLFFLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAAAFFFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDEDNNNMMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLLLMLLLLLLLLKLKLLLLLMLLMKLKLLLLLKLKLFFFLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMLMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLLMMLLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLLNNELLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","repl","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","arity","blank","blank","blank","borrow","borrow","borrow_mut","borrow_mut","cached_witness","cached_witness","circuit_index","circuit_index","clone","clone","clone_into","clone_into","compute_witness","count","deref","deref","deref_mut","deref_mut","deserialize","deserialize","destructure_list","drop","drop","emitted","fmt","fmt","folding_config","frames","frames","from","from","from_frame","from_frames","from_frames","get_evaluation_frames","get_store","init","init","input","input","input","into","into","io_to_scalar_vector","layout_raw","layout_raw","make_dummy","meta","next_pc","num_circuits","output","output","output","output","pointer_metadata","pointer_metadata","precedes","precedes","precedes","primary_circuit","public_input_size","public_inputs","reduction_count","secondary_circuit","significant_frame_count","store","store","synthesize","synthesize","synthesize","synthesize_frames","synthesize_frames","synthesize_frames_parallel","synthesize_frames_sequential","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","witness","circom","constraints","data","pointer","CircomGadget","into_circom_input","name","simple_evaluate","simple_evaluate_lem","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","quote_ptr","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","config","parse_and_run","paths","repl","Backend","Nova","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_possible_value","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value_variants","vzip","CLI_CONFIG","CliSettings","backend","borrow","borrow_mut","circom_dir","cli_config","commits_dir","default","deref","deref_mut","deserialize","deserialize","drop","field","fmt","from","from_config","init","into","layout_raw","limit","pointer_metadata","proofs_dir","rc","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","lurk_default_dir","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Flow","LURK_CONFIG","LURK_CONFIG_FILE","Parallel","ParallelConfig","ParallelN","PerfConfig","Sequential","Settings","WitnessGeneration","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_config","home_dir","init","init","init","init","init","into","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lurk_config","lurk_config_file","num_threads","parallelism","perf","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","public_params_default_dir","public_params_dir","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","evaluate_lem","evaluate_lem_internal","evaluate_lem_simple","has_circuit","sha256","simple_evaluate","synthesize","synthesize_lem","synthesize_lem_internal","synthesize_lem_simple","synthesize_step_circuit","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","evaluate_lem_simple","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","simple_evaluate","synthesize","synthesize_lem_simple","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SC","Sha256Coproc","Sha256Coprocessor","arity","arity","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eval_arity","eval_arity","evaluate","evaluate_lem","evaluate_lem_internal","evaluate_lem_simple","evaluate_lem_simple","fmt","fmt","from","from","from","has_circuit","has_circuit","init","init","into","into","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","synthesize","synthesize_lem","synthesize_lem_internal","synthesize_lem_simple","synthesize_lem_simple","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","StandardTrie","Trie","TrieCoproc","arity","arity","arity","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","evaluate_lem","evaluate_lem_internal","evaluate_lem_simple","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","has_circuit","has_circuit","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","synthesize","synthesize","synthesize","synthesize_insert","synthesize_lem","synthesize_lem_internal","synthesize_lem_simple","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Coprocessor","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Lurk","Meta","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","cont","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_sym_env","env","env","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_frames","get_coprocessor_z_ptr","get_frames","header","i","init","init","init","init","init","init","init","initial","input","input","input_size","into","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_coprocessor","is_error","is_error","is_error","is_incomplete","is_lurk","is_terminal","is_terminal","is_terminal","iter","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","log","log","log","maybe_emitted_expression","meta","new","next","output","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","add_coprocessor_lem","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","evaluate_lem","evaluate_lem_internal","evaluate_lem_simple","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_coprocessor","get_coprocessor_from_zptr","get_coprocessor_z_ptr","get_index","get_index_by_symbol","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup","lookup_by_sym","max_coprocessor_arity","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","synthesize_lem","synthesize_lem_internal","synthesize_lem_simple","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BLS12_381","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_possible_value","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_variants","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","length","names_and_ptrs","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_blank","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Cproc","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Null","Num","Op","Op1","Op2","Open","Or","Return","String","Sub","Symbol","Tag","Trunc","Var","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_field","from_ptr","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","input_params","interpreter","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","multiframe","name","name","new","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slot","store","synthesize_frame","synthesize_frame_aux","to_field","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AllocatedVal","Bits","Boolean","GlobalAllocator","Number","Pointer","SlotsAllocations","SlotsWitness","allocations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_slots_allocations","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","get_allocated_const","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness","eval_step","evaluate","evaluate_simple","evaluate_with_env_and_cont","make_cprocs_funcs_from_lang","make_eval_step_from_lang","Boolean","Frame","Hints","Pointer","Val","bit_decomp","blank","blank","blank","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone_into","clone_into","commitment","cproc_outputs","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","emitted","fmt","fmt","from","from","from","hash4","hash6","hash8","hints","init","init","init","input","input","into","into","into","layout_raw","layout_raw","layout_raw","new_from_func","output","output","pc","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","MultiFrame","arity","arity","blank","borrow","borrow_mut","cached_witness","circuit_index","clone","clone_into","compute_witness","deref","deref_mut","deserialize","drop","emitted","fmt","frames","from","from_frames","get_evaluation_frames","init","into","io_to_scalar_vector","layout_raw","make_dummy","num_circuits","output","pointer_metadata","precedes","primary_circuit","public_input_size","public_inputs","reduction_count","secondary_circuit","significant_frame_count","synthesize","synthesize","synthesize","synthesize_frames","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Atom","Ptr","Tuple2","Tuple2","Tuple3","Tuple3","Tuple4","Tuple4","ZChildren","ZPtr","borrow","borrow","borrow_mut","borrow_mut","cast","char","clone","clone_into","comm","dbg_display","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","dummy","dummy","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt_to_string","from","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","init","into","into","is_nil","is_null","is_tuple","layout_raw","layout_raw","null","num","num_u64","pointer_metadata","pointer_metadata","serialize","serialize","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u64","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Store","add_comm","borrow","borrow_mut","car_cdr","commit","cons","default","deref","deref_mut","deserialize","drop","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_string","fetch_sym","fetch_symbol","fetch_symbol_path","fmt","from","get_cont_terminal","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","hydrate_z_cache","init","initial_empty_env","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_fun","intern_lurk_symbol","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","intern_user_symbol","into","key","layout_raw","list","open","pointer_metadata","poseidon_cache","ptr_eq","ptr_eq","read","read","read_maybe_meta","read_with_default_state","to_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","from_upto","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","AllocatedIO","CEKState","CircuitFrame","ContPtr","ContPtr","Error","EvalFrame","EvaluationStore","FrameIO","FrameLike","GlobalAllocation","MultiFrameTrait","NIVCProver","Provable","Prover","Ptr","Ptr","PublicParams","Store","StoreError","blank","cached_witness","compute_witness","cont","emitted","env","expected_total_iterations","expr","frame_padding_count","frames","from_frames","get_cont_terminal","get_evaluation_frames","get_evaluation_frames","hydrate_z_cache","initial_empty_env","input","io_to_scalar_vector","lang","make_dummy","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","output","output","precedes","ptr_eq","public_input_size","public_inputs","read","reduction_count","reduction_count","significant_frame_count","supernova","synthesize_frames","C1LEM","C1Lurk","C2","CE1","CE2","CK1","CK2","Compressed","CurveCycleEquipped","EE1","EE2","G1","G1","G2","G2","NovaCircuitShape","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached_witness","circuit_cache_key","circuits","clone","clone_into","compress","count","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","folding_config","frames","from","from","from","init","init","init","input","into","into","into","lang","layout_raw","layout_raw","layout_raw","meta","new","next_pc","output","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","recursive_snark","reduction_count","serialize","serialize","store","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","C2","Compressed","FoldingConfig","IVC","NIVC","Proof","PublicParams","Recursive","SuperNovaAuxParams","SuperNovaProver","SuperNovaPublicParams","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuit_cache_keys","circuit_index","circuit_shapes","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","evaluate_and_prove","fmt","fmt","from","from","from","from","index","init","init","init","init","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pp","prove","prove_recursively","public_params","recursive_snark","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","allocate_maybe_fun_unconstrained","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","disk_cache","error","instance","public_params","supernova_aux_params","supernova_circuit_params","supernova_public_params","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Instance","Kind","Metadata","NovaPublicParams","SuperNovaAuxParams","SuperNovaCircuitParams","_p","abomonated","abomonated","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_key","cache_key","circuit_param_instances","clone","clone","clone_into","clone_into","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","key","kind","kind","lang","lang","lang","layout_raw","layout_raw","layout_raw","new","open","pointer_metadata","pointer_metadata","pointer_metadata","rc","rc","reindex","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","env","eval_expr","fmt","fmt","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","layout_raw","layout_raw","limit","name","name","new","new","new","new","pointer_metadata","pointer_metadata","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","header","hidden","hide","hide","hydrate_scalar_cache","hydrate_z_cache","if_","if_store","in_current_span","init","init","init","init","initial_empty_env","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","ptr_eq","quote","quotient","read","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","fmt_to_string_raw","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Cproc","Cproc","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","simple_fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","deserialize","drop","dummy","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[100,"lurk::circuit"],[105,"lurk::circuit::circuit_frame"],[203,"lurk::circuit::gadgets"],[207,"lurk::circuit::gadgets::circom"],[212,"lurk::circuit::gadgets::constraints"],[213,"lurk::circuit::gadgets::data"],[300,"lurk::circuit::gadgets::pointer"],[410,"lurk::cli"],[415,"lurk::cli::backend"],[450,"lurk::cli::config"],[482,"lurk::cli::paths"],[483,"lurk::cli::repl"],[504,"lurk::config"],[653,"lurk::cont"],[702,"lurk::cont::Continuation"],[734,"lurk::coprocessor"],[752,"lurk::coprocessor::circom"],[753,"lurk::coprocessor::circom::non_wasm"],[786,"lurk::coprocessor::sha256"],[858,"lurk::coprocessor::trie"],[1093,"lurk::error"],[1188,"lurk::eval"],[1432,"lurk::eval::lang"],[1564,"lurk::expr"],[1649,"lurk::field"],[1755,"lurk::hash"],[1893,"lurk::hash_witness"],[2270,"lurk::lem"],[2542,"lurk::lem::circuit"],[2627,"lurk::lem::eval"],[2633,"lurk::lem::interpreter"],[2720,"lurk::lem::multiframe"],[2768,"lurk::lem::pointers"],[2849,"lurk::lem::store"],[2914,"lurk::package"],[2942,"lurk::parser"],[2983,"lurk::parser::base"],[3030,"lurk::parser::error"],[3112,"lurk::parser::position"],[3144,"lurk::parser::position::Pos"],[3150,"lurk::parser::string"],[3188,"lurk::parser::syntax"],[3209,"lurk::proof"],[3267,"lurk::proof::nova"],[3376,"lurk::proof::supernova"],[3487,"lurk::ptr"],[3593,"lurk::public_parameters"],[3601,"lurk::public_parameters::error"],[3632,"lurk::public_parameters::instance"],[3731,"lurk::repl"],[3803,"lurk::state"],[3841,"lurk::store"],[4112,"lurk::symbol"],[4181,"lurk::syntax"],[4220,"lurk::tag"],[4458,"lurk::uint"],[4500,"lurk::writer"],[4504,"lurk::z_data"],[4552,"lurk::z_data::serde"],[4585,"lurk::z_data::serde::de"],[4637,"lurk::z_data::serde::ser"],[4782,"lurk::z_data::z_cont"],[4830,"lurk::z_data::z_cont::ZCont"],[4862,"lurk::z_data::z_expr"],[4911,"lurk::z_data::z_expr::ZExpr"],[4914,"lurk::z_data::z_ptr"],[4964,"lurk::z_data::z_store"],[5010,"core::clone"],[5011,"core::result"],[5012,"serde::de"],[5013,"rkyv::with"],[5014,"core::cmp"],[5015,"core::fmt"],[5016,"core::fmt"],[5017,"core::marker"],[5018,"core::hash"],[5019,"core::fmt"],[5020,"core::alloc::layout"],[5021,"serde::ser"],[5022,"alloc::string"],[5023,"core::any"],[5024,"alloc::alloc"],[5025,"alloc::boxed"],[5026,"core::any"],[5027,"alloc::sync"],[5028,"bellpepper::util_cs::witness_cs"],[5029,"bellpepper_core::gadgets::num"],[5030,"bellpepper_core::constraint_system"],[5031,"bellpepper_core::constraint_system"],[5032,"bellpepper_core::gadgets::boolean"],[5033,"ff"],[5034,"core::ops::function"],[5035,"clap_builder::builder::possible_value"],[5036,"camino"],[5037,"std::collections::hash::map"],[5038,"config::error"],[5039,"pasta_curves::pallas"],[5040,"camino"],[5041,"std::io"],[5042,"serde::de"],[5043,"core::cell"],[5044,"alloc::rc"],[5045,"core::error"],[5046,"nova_snark::errors"],[5047,"core::marker"],[5048,"core::convert"],[5049,"indexmap::map"],[5050,"typenum::generated::consts"],[5051,"neptune::poseidon"],[5052,"typenum::generated::consts"],[5053,"nom::traits"],[5054,"nom::internal"],[5055,"bellpepper_core::util_cs::test_cs"],[5056,"nova_snark::traits::circuit"],[5057,"nova_snark"],[5058,"nova_snark::supernova"],[5059,"nova_snark::traits::circuit_supernova"],[5060,"nova_snark::supernova"],[5061,"std::io::error"],[5062,"std::fs"],[5063,"clap_builder::builder::command"],[5064,"std::path"],[5065,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","Global config for Lurk Includes settings for cache …","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","Returns the argument unchanged.","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","","","","","","","","","","","","","","","","","","","Return the circuit index assigned to this <code>MultiFrame</code>’s …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Make a dummy <code>MultiFrame</code>, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","Global config for the CLI Includes settings for cache …","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Global config varable for <code>CliSettings</code>","Contains the CLI configuration settings","Proof generation and verification system","","","Cache directory for Circom files","Gets the <code>CLI_CONFIG</code> settings. If uninitialized, sets the …","Cache directory for commitments","","","","","","","Finite field used for evaluation and proving","","Returns the argument unchanged.","Loads config settings from a file or env var, or CLI arg …","","Calls <code>U::from(self)</code>.","","Iteration limit for the program, which is arbitrary to …","","Cache directory for proofs","Reduction count, which is the number of circuit reductions …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The level of parallelism used when synthesizing the Lurk …","Global config variable for <code>Settings</code>","Global path variable for configuration file","Try to be smart about thread management based on # of cpus","Parallel configuration settings","How many threads to use? (Advisory, might be ignored.)","Performance-related configuration settings","Runs without parallelism (default)","Contains the Lurk config settings The <code>public_params_dir</code> …","Should we use optimized witness-generation when possible?","","","","","","","","","","","Returns the number of parallel steps to run per thread …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads config settings from a file or env vars The public …","Returns the home directory used by <code>cargo`` and </code>rustup`","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> on <code>Flow::Parallel</code> or <code>Flow::ParallelN</code>","Returns <code>true</code> on <code>Flow::Sequential</code>","","","","","","Gets the <code>LURK_CONFIG</code> settings. If uninitialized, sets the …","Gets the <code>LURK_CONFIG_FILE</code> path. If uninitialized, sets the …","Returns the number of parallel threads to run","Parallelism settings","Parallelism &amp; witness gen configs","","","","","","The poseidon witness part of synthesis.","NOTE: Neptune itself <em>will</em> do this transparently at the …","","Public parameter disk cache location","Multiple <code>StepCircuit</code>s.","Synthesis (within one <code>StepCircuit</code>)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Witness generation settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","","","","Returns true if this Coprocessor actually implements a …","","As with all evaluation, the value returned from …","","","","","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Precompute the witness blocks for all the named hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","<code>Cproc(ys, c, xs)</code> binds <code>ys</code> to the results of coprocessor <code>c</code> …","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","LEM tags","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","LEM variables","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cached version of Lurk’s default step function (IVC, no …","","","","Creates the <code>Func</code>s used to call coprocessors in the NIVC …","Creates a LEM <code>Func</code> corresponding to Lurk’s step function …","","A <code>Frame</code> carries the data that results from interpreting a …","<code>Hints</code> hold the non-deterministic hints for hashes and <code>Func</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Make a dummy instance, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","","","","<code>ZChildren</code> keeps track of the children of <code>ZPtr</code>s, in case …","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Safe version of <code>hash_ptr_unsafe</code> that doesn’t hit a stack …","","","","Hashes enqueued <code>Ptr</code> trees from the bottom to the top, …","","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Equality of the content-addressed versions of two pointers","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","The associated type of allocated input and output to the …","The State of a CEK machine.","The associated <code>CircuitFrame</code> type","the type for the Store’s continuation poitners","The associated <code>ContPtr</code> type","the type for the Store’s errors","The associated <code>Frame</code> type","A trait for a store of expressions","the type for the Frame’s IO","A Frame of evaluation in a CEK machine.","The associated type which manages global allocations","Trait to support multiple <code>MultiFrame</code> implementations.","Supertrait for <code>Prover</code> that also supports NIVC.","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","the type for the Store’s pointers","The associated <code>Ptr</code> type","The associated public parameters type for the prover.","The associated <code>Store</code> type","The error type for the Store type","Synthesize a blank circuit.","Returns a reference to the cached witness values","Populates a WitnessCS with the witness values for the …","the continuation (K)","the emitted frames","the environment (E)","Returns the expected total number of iterations for the …","the expression, or control word (C)","Returns the number of padding frames needed for a given …","Iterates through the Self::CircuitFrame instances","Create an instance from some <code>Self::Frame</code>s.","getting the terminal continuation pointer","Evaluates and generates the frames of the computation …","Evaluates and generates the <code>Frame</code>s of the computation …","cache hashes for pointers enqueued for hydration","getting a pointer to the initial, empty environment","the input of the frame","Returns a public IO vector when equipped with the local …","Returns a reference to the Prover’s Lang.","Make a dummy instance, duplicating <code>self</code>’s final …","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","the output of the frame","The output of the last frame","Returns true if the supplied instance directly precedes …","hash-equality of the expressions represented by Ptrs","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","interpreting a string representation of an expression","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Counting the number of non-trivial frames in the evaluation","An adapter to a SuperNova proving system implementation.","Synthesize some frames.","LEM’s version of C1","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","The commitment engine type for the first curve in the …","The commitment engine type for the second curve in the …","Why the next 4 types?","The type of the commitment key used for points of the …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","Type alias for Nova Circuit Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","Computes a cache key of the primary circuit. The point is …","Generates the circuits for the Nova proving system.","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","Returns the first step of the RecursiveSNARK to be proved","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Folding configuration specifies <code>Lang</code> and can be either <code>IVC</code> …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the SuperNova …","A proof for the intermediate steps of a recursive …","Type alias for SuperNova Aux Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","Computes a cache key of a supernova primary circuit. The …","Collects all the cache keys of supernova instance. We need …","Return the circuit index assigned in this <code>FoldingConfig</code> to …","The internal circuit shapes","","","","","","","","","","","","","","","","return the digest","","","","","Evaluates and proves the computation given the public …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","","","","Public params for SuperNova.","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the running claim params for the SuperNova …","Returns the first step of the RecursiveSNARK to be proved","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the claim, which (for now), …","","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","Instances","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Instances compute a cache-key for the objects they …","From ::nova, there are 3 “kinds” of public param …","What we put into the cache","Tag for nova::NovaPublicParams instances","Tag for supernova::SuperNovaAuxParams instances","Tag for [supernova::SuperNovaCircuitParams] instances","","","","","","","","","","","","If this Instance is of Kind::SuperNovaAuxParams, then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key (or cache_key) of this Instance used to retrieve …","","","The key (or cache_key) of this Instance used to retrieve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","","","","",""],"if":[0,0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[1,[-1]]],[[1,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,0,[5,-1,[]],[5,-1,[]],[-1,[[6,[[1,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[[1,[-1]],[1,[-1]]],2,3],[5,2],[[[1,[-1]],[1,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,0,0,[[[1,[-1]],11],12,3],[[[1,[-1]],11],12,[13,3]],[14,[[1,[-1]]],3],[-1,-1,[]],[15,[[1,[-1]]],3],[-1,[[1,[-1]]],3],0,[[-1,-2],14,[16,17],18],0,[[[1,[-1]],-2],2,3,19],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],9,3],[[[1,[-1]]],9,3],0,[[],[[6,[24,25]]]],0,0,0,0,[[],[[1,[-1]]],3],[[],[[1,[-1]]],3],[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,[[[1,[-1]],[1,[-1]]],[[27,[26]]],3],[[]],0,0,0,0,[[[1,[-1]],-2],6,3,28],0,0,0,[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[],5],[[-1,[34,[-2]]],[[35,[-2]]],[],[]],0,0,[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[],[[38,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]],5],[[36,[-1,-2]]],3,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1,-2]]],[[27,[[42,[-1]]]]],3,[[37,[-1]]]],0,[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[38,[-1,-2]]],[[38,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[[36,[-1,-2]]],[[36,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[36,[-1,-2]]],[[42,[-1]]],3,[[37,[-1]]]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-2,[34,[-1]],[43,[-1]],5,[44,[-1]]],[[6,[[2,[[35,[[44,[-1]]]],[45,[-1]]]],46]]],3,[[47,[-1]]]],[5,2],[5,2],[[],[[35,[[48,[-1]]]]],3],[[[38,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[36,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],0,[[[36,[-1,-2]]],[[27,[35]]],3,[[37,[-1]]]],0,[-1,-1,[]],[-1,-1,[]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]],[34,[-1]]],[[38,[-1,-2]]],3,[[37,[-1]]]],[[5,[52,[[51,[[49,[-1]],[50,[-1]],-1,-2]]]],[34,[-1]],[40,[[39,[-1,-2]]]]],[[35,[[36,[-1,-2]]]]],3,[[37,[-1]]]],[[5,52,[40,[[39,[-1,-2]]]]],[[35,[[36,[-1,-2]]]]],3,[[37,[-1]]]],[[-1,[48,[-2]],[48,[-2]],5,[53,[-2,-3]]],[[6,[[35,[[51,[[49,[-2]],[50,[-2]],-2,-3]]]],54]]],55,3,[[37,[-2]]]],[[[36,[-1,-2]]],[[34,[-1]]],3,[[37,[-1]]]],[[],5],[[],5],[[[38,[-1,-2]]],[],3,[[37,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[[35,[-1]]]]],3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[27,[[38,[-1,-2]]]],[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],0,0,[[[36,[-1,-2]]],5,[56,3],[[37,[-1]]]],[[[38,[-1,-2]]],[],3,[[37,[-1]]]],[[[36,[-1,-2]]],27,3,[[37,[-1]]]],0,0,[[]],[[]],[[[38,[-1,-2]],[38,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],[36,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],[36,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],5],[[36,[-1,-2]]],[56,3],[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],[[35,[-1]]],3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],[[57,[-1]]],[56,3],[[37,[-1]]]],[52,5],0,0,[[[36,[-1,-2]],-3],[[6,[2,46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[27,[[45,[-1]]]],[52,[[45,[-1]]]]],[[6,[[2,[[27,[[45,[-1]]]],[35,[[45,[-1]]]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[52,[[45,[-1]]]]],[[6,[[35,[[45,[-1]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[58,[-1]],[52,[[38,[-1,-2]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,52,[43,[-1]]],[[6,[46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[58,[-1]],[52,[[38,[-1,-2]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[58,[-1]],[52,[[38,[-1,-2]]]],[27,[[35,[[2,[[59,[-1]],[60,[-1]]]]]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,[52,[[44,[-2]]]]],[[35,[[2,[29,[35,[-2]]]]]]],[],[]],[-1,61,[]],[[-1,[34,[-2]],[52,[[48,[-2]]]]],[[48,[-2]]],[],[]],[[-1,[62,[-2]],[52,[[63,[-2]]]]],[[63,[-2]]],[],[]],[[-2,[45,[-1]],[45,[-1]]],[[6,[64,46]]],65,[[47,[-1]]]],0,[[-2,-1],[[45,[-1]]],3,[[47,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[43,[-1]]],[[43,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,0,0,0,0,0,[[[43,[-1]],11],12,[13,3]],[-1,-1,[]],0,0,[[],5],[-1,-2,[],[]],0,[[],[[6,[24,25]]]],0,0,0,[[-2,[34,[-1]]],[[6,[[43,[-1]],46]]],3,[[47,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[[-2,-3],[[6,[[44,[-1]],46]]],3,[[47,[-1]]],66],[[-2,-3],[[6,[[58,[-1]],46]]],3,[[47,[-1]]],66],[[-2,[67,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[68,[-1]]],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[69,[-1]]],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[48,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],-3],[[6,[[58,[-1]],46]]],3,[[47,[-1]]],66],[[[44,[-1]],-2,[44,[-1]]],[[6,[64,46]]],3,[[47,[-1]]]],[[[58,[-1]],-2,[58,[-1]]],[[6,[64,46]]],3,[[47,[-1]]]],[[-2,-3],[[6,[[44,[-1]],46]]],3,[[47,[-1]]],[[70,[-1]]]],[[[44,[-1]],-2,-1],[[6,[64,46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],-3],[[6,[[44,[-1]],46]]],3,[[47,[-1]]],66],[[-2,-1,[45,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,-1],[[6,[64,46]]],3,[[47,[-1]]]],[[[58,[-1]],-2,-1],[[6,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,[34,[-1]]],[[6,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[-1,[[71,[[45,[-2]]]]],[],[]],[[[44,[-1]]],[[71,[[45,[-1]]]]],3],[[[58,[-1]]],[[71,[[45,[-1]]]]],3],[[-2,[34,[-1]],64],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[27,[[48,[-1]]]],[34,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[27,[[69,[-1]]]],[34,[-1]]],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[52,[[45,[-1]]]]],[[44,[-1]]],3],[[5,[52,[[45,[-1]]]]],[[58,[-1]]],3],[[[44,[-1]]],[[44,[-1]]],[4,65]],[[[58,[-1]]],[[58,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-2,[34,[-1]],[45,[-1]],[71,[72]]],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[45,[-1]],[44,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[44,[-1]],[44,[-1]],73,[0,[73,[0,[-1,[44,[-1]]]]]],64],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,74,[45,[-1]],[71,[72]],[0,[74,[0,[-1,[45,[-1]]]]]],64],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,74,[45,[-1]],[71,[72]],[0,[74,[0,[-1,[45,[-1]]]]]]],[[6,[[2,[[58,[-1]],[45,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[58,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[44,[-1]],-2,[44,[-1]]],2,3,[[47,[-1]]]],[[[58,[-1]],-2,[58,[-1]]],2,3,[[47,[-1]]]],[[[58,[-1]],[34,[-1]]],29,3],[[[44,[-1]],[34,[-1]]],29,3],[[[44,[-1]],11],12,3],[[[58,[-1]],11],12,3],[-1,-1,[]],[-1,-1,[]],[[[45,[-1]],[45,[-1]]],[[44,[-1]]],3],[[[45,[-1]],[45,[-1]]],[[58,[-1]]],3],[[[58,[-1]],[34,[-1]]],[[27,[[75,[-1]]]]],3],[[[58,[-1]],[34,[-1]]],[[27,[[69,[-1]]]]],3],[[[58,[-1]],[34,[-1]]],[[27,[[68,[-1]]]]],3],[[[44,[-1]]],[[45,[-1]]],3],[[[58,[-1]]],[[45,[-1]]],3],[[[44,[-1]],-2,64,[44,[-1]]],2,3,[[47,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]],-2],[[6,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,[43,[-1]]],[[6,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[64,46]]],3,[[47,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[-2,64,[44,[-1]],[44,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,64,[58,[-1]],[58,[-1]]],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,64,[67,[-1]],[67,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[]],[[]],[[[44,[-1]],[34,[-1]]],[[27,[[48,[-1]]]]],3],[[[44,[-1]]],[[45,[-1]]],3],[[[58,[-1]]],[[45,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]],[34,[-1]]],[[27,[[67,[-1]]]]],3],0,0,[[],[[76,[2]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[77,77],[[-1,-2],2,[],[]],[[],77],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[77]]],7],[5,2],[[77,77],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[77,11],12],[[77,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[77,[[27,[78]]]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[],[[52,[77]]]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[27,[79]],[27,[[80,[61,29]]]]],81],0,[[],81],[5,-1,[]],[5,-1,[]],[-1,[[6,[81]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,[[81,11],12],[-1,-1,[]],[[79,[27,[[80,[61,29]]]]],[[6,[81,82]]]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],0,[[]],0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[],79],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[84,[83]],85],[[76,[2]]]],[[[62,[83]],5,5,77],[[84,[83]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[86,5,5],5],[[],87],[[],88],[[],89],[[],90],[[],86],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[87]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[88]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[87,87],9],[[88,88],9],[[89,89],9],[[90,90],9],[[86,86],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[87,11],12],[[88,11],12],[[89,11],12],[[90,11],12],[[86,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[79,[27,[[80,[61,29]]]]],[[6,[87,82]]]],[[],79],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[86,9],[86,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[27,[79]],[27,[[80,[61,29]]]]],87],[[[27,[79]]],79],[86,5],0,0,[[]],[[]],[[]],[[]],[[]],0,0,[[],79],0,0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[75,[-1]]],[[75,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[[75,[-1]]],91,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[75,[-1]],[75,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[75,[-1]],11],12,[13,3]],[[[75,[-1]],[34,[-1]],92,-2],[[93,[2]]],3,94],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[[75,[-1]]],[[69,[-1]]],3],[[[75,[-1]],-2],2,[16,3],19],[[],5],[[[75,[-1]],[34,[-1]]],[[2,[5,9]]],3],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],0,[-1,5,[]],[[-1,[34,[-2]],[48,[-2]],[48,[-2]],[69,[-2]]],[[49,[-2]]],[],[]],[[-1,[62,[-2]],[52,[[63,[-2]]]],[63,[-2]],[63,[-2]]],[[35,[[63,[-2]]]]],[],[]],[[-1,[62,[-2]],[52,[[63,[-2]]]]],[[35,[[63,[-2]]]]],[],[]],[[-1,[62,[-2]],[52,[[63,[-2]]]]],[[63,[-2]]],[],[]],[-1,9,[]],0,[[-1,[34,[-2]],[52,[[48,[-2]]]]],[[48,[-2]]],[],[]],[[-1,-3,[43,[-2]],[34,[-2]],[52,[[44,[-2]]]],[44,[-2]],[58,[-2]],64],[[6,[[2,[[44,[-2]],[44,[-2]],[58,[-2]]]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[95,[-2]],[62,[-2]],64,[52,[[44,[-2]]]],[44,[-2]],[44,[-2]]],[[6,[[35,[[44,[-2]]]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[95,[-2]],[62,[-2]],64,[52,[[44,[-2]]]]],[[6,[[35,[[44,[-2]]]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[95,[-2]],[62,[-2]],64,[52,[[44,[-2]]]]],[[6,[[44,[-2]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[34,[-2]],[43,[-2]],[67,[-2]],[44,[-2]],[44,[-2]],[58,[-2]],64],[[6,[[2,[[44,[-2]],[44,[-2]],[58,[-2]]]],46]]],[],[],[[47,[-2]]]],0,0,0,[[[96,[-1,-2]]],5,3,[[97,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[96,[-1,-2]]],[[96,[-1,-2]]],3,[[97,[-1]]]],[[-1,-2],2,[],[]],[-2,[[76,[[96,[-1,-2]]]]],3,[[97,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[96,[-1,-2]]],5,3,[[97,[-1]],13]],[[[96,[-1,-2]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3,[[97,[-1]],13]],[[[96,[-1,-2]],11],12,[13,3],[13,[97,[-1]]]],[-1,-1,[]],[[[96,[-1,-2]]],9,3,[[97,[-1]],13]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[96,[-1,-2]]],61,3,[[97,[-1]]]],[-2,[[96,[-1,-2]]],3,[[97,[-1]]]],[[]],[[[96,[-1,-2]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3,[[97,[-1]],13]],[[[96,[-1,-2]],-3,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[76,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[97,[-1]]],[[47,[-1]]]],[[[96,[-1,-2]],-3,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[6,[[44,[-1]],46]]],3,[[97,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[[[98,[-1]]],5,3],[[[99,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[98,[-1]]],[[98,[-1]]],[4,3]],[[[99,[-1]]],[[99,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[98,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[99,[-2]]]]],7,[100,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[98,[-1]]],5,3],[[[99,[-1]]],5,3],[[[99,[-1]],[34,[-1]],[48,[-1]],[48,[-1]],[69,[-1]]],[[49,[-1]]],3],[[[99,[-1]],[62,[-1]],[52,[[63,[-1]]]],[63,[-1]],[63,[-1]]],[[35,[[63,[-1]]]]],3],[[[99,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[35,[[63,[-1]]]]],3],[[[98,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[99,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[98,[-1]],11],12,[13,3]],[[[99,[-1]],11],12,[13,3]],[-1,-1,[]],[[[98,[-1]]],[[99,[-1]]],3],[-1,-1,[]],[[[98,[-1]]],9,3],[[[99,[-1]]],9,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[5,[[98,[-1]]],3],[[]],[[]],[[[98,[-1]],-2],6,3,28],[[[99,[-1]],-2],6,[101,3],28],[[[98,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[99,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[98,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[6,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[99,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[6,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[99,[-1]],-2,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]],[44,[-1]],[44,[-1]]],[[6,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[99,[-1]],-2,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[6,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[98,[-1]],-2,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[[99,[-1]],-2,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[102,[-1]]],5,3],[[[103,[-1]]],5,3],[[[104,[-1]]],5,3],[[[105,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[102,[-1]]],[[102,[-1]]],[4,3]],[[[103,[-1]]],[[103,[-1]]],[4,3]],[[[104,[-1]]],[[104,[-1]]],[4,3]],[[[105,[-1]]],[[105,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[103,[-1]]],[106,3]],[[],[[104,[-1]]],[106,3]],[[],[[105,[-1]]],[106,3]],[[],[[107,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[103,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[104,[-2]]]]],7,3],[-1,[[6,[[105,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[107,[-1]]],-1,3],[[[102,[-1]]],5,3],[[[103,[-1]]],5,3],[[[104,[-1]]],5,3],[[[105,[-1]]],5,3],[[[102,[-1]],[34,[-1]],[48,[-1]],[48,[-1]],[69,[-1]]],[[49,[-1]]],3],[[[102,[-1]],[62,[-1]],[52,[[63,[-1]]]],[63,[-1]],[63,[-1]]],[[35,[[63,[-1]]]]],3],[[[102,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[35,[[63,[-1]]]]],3],[[[102,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[108,[-1]],11],12,13],[[[102,[-1]],11],12,[13,3]],[[[103,[-1]],11],12,[13,3]],[[[104,[-1]],11],12,[13,3]],[[[105,[-1]],11],12,[13,3]],[[[107,[-1]],11],12,[13,3]],[[[109,[-1]],11],12,[13,3]],[[[110,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[103,[-1]]],[[102,[-1]]],3],[[[105,[-1]]],[[102,[-1]]],3],[[[104,[-1]]],[[102,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[102,[-1]]],9,3],[[[103,[-1]]],9,3],[[[104,[-1]]],9,3],[[[105,[-1]]],9,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[107,[-1]],-1,-1],[[6,[9,[108,[-1]]]]],3],[[[34,[-1]],[112,[[111,[92]]]],[53,[-1,[102,[-1]]]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[107,[-1]]],5,3],[[[107,[-1]],-1],[[6,[[27,[-1]],[108,[-1]]]]],3],[[[34,[-1]]],[[107,[-1]]],3],[[[34,[-1]],5],[[107,[-1]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[107,[-1]],-1,-1],[[6,[[2,[[110,[-1]],9]],[108,[-1]]]]],3],[[[107,[-1]],-1],[[6,[[109,[-1]],[108,[-1]]]]],3],[[[107,[-1]]],-1,3],[[[107,[-1]],5],5,3],[[[103,[-1]],-2],6,3,28],[[[104,[-1]],-2],6,3,28],[[[105,[-1]],-2],6,3,28],[[[102,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[103,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[104,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[105,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[102,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[6,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[103,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[6,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[104,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[6,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[105,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[6,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[107,[-1]],-2,[34,[-1]],[45,[-1]],[45,[-1]],[45,[-1]]],[[6,[[45,[-1]],46]]],3,[[47,[-1]]]],[[[102,[-1]],-2,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]],[44,[-1]],[44,[-1]]],[[6,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[102,[-1]],-2,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[6,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[102,[-1]],-2,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[109,[-1]],-1,-1,-1,[113,[-1]]],9,3],[[[110,[-1]],-1,-1,-1,[27,[-1]],-1,[113,[-1]]],9,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,114,[]],[-1,114,[]],[-1,114,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[115,115],[[[116,[-1]]],[[116,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[54,11],12],[[54,11],12],[[115,11],12],[[115,11],12],[[[116,[-1]],11],12,3],[[[116,[-1]],11],12,[13,3]],[46,54],[117,54],[115,54],[118,54],[-1,-1,[]],[-1,-1,[]],[117,115],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[54,[[27,[114]]]],[115,[[27,[114]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[49,[-1]]],[[49,[-1]]],[4,3]],[[[41,[-1]]],[[41,[-1]]],[4,3]],[[[51,[-1,-2,-3,-4]]],[[51,[-1,-2,-3,-4]]],[4,119],[4,119],[4,3],4],[120,120],[[[50,[-1]]],[[50,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[49,[-1]]],[[69,[-1]]],3],0,[[],[[41,[-1]]],3],[[],120],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[120]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[34,[-1]]],[[48,[-1]]],3],[[[49,[-1]]],[[48,[-1]]],3],0,[[[49,[-1]],[49,[-1]]],9,[10,3]],[[[41,[-1]],[41,[-1]]],9,[10,3]],[[[51,[-1,-2,-3,-4]],[51,[-1,-2,-3,-4]]],9,[10,119],[10,119],[10,3],10],[[120,120],9],[[[50,[-1]],[50,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[121,[-1,-2]]],[[6,[[2,[[49,[-1]],5,[35,[[48,[-1]]]]]],115]]],3,[[37,[-1]]]],[[[34,[-1]],61],[[6,[[48,[-1]],115]]],3],[[[49,[-1]]],[[48,[-1]]],3],0,[[[49,[-1]],[34,[-1]],92,-2],[[93,[2]]],3,94],[[[49,[-1]],11],[[6,[2,122]]],3],[[[49,[-1]],11],12,[13,3]],[[[41,[-1]],11],12,[13,3]],[[[51,[-1,-2,-3,-4]],11],12,[13,119],[13,119],[13,3],13],[[120,11],12],[[[123,[-1,-2,-3]],11],12,[13,119],[13,3],[13,[37,[-2]]]],[[[50,[-1]],11],12,[13,3]],[[[121,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[69,[-1]]],120,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[48,[-1]],[48,[-1]],[34,[-1]],5,-2,[53,[-1,-3]]],[[6,[[35,[[51,[[49,[-1]],[50,[-1]],-1,-3]]]],115]]],3,55,[[37,[-1]]]],[[[41,[-1]]],[[27,[[67,[-1]]]]],3],[[[121,[-1,-2]]],[[6,[[35,[[51,[[49,[-1]],[50,[-1]],-1,-2]]]],115]]],3,[[37,[-1]]]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[121,[-1,-2]]],[[49,[-1]]],3,[[37,[-1]]]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]]],[],3,[[37,[-1]]]],0,[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[[49,[-1]]],9,3],[[[51,[[49,[-1]],-2,-1,-3]]],9,3,119,[[37,[-1]]]],[120,9],[[[41,[-1]]],9,3],[-1,9,[]],[[[49,[-1]]],9,3],[120,9],[120,9],[[[41,[-1]]],9,3],[-1,9,[]],[[[49,[-1]]],9,3],[120,9],[[[121,[-1,-2]]],[[6,[[124,[[123,[[50,[-1]],-1,-2]]]],115]]],3,[[37,[-1]]]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[-1,[34,[-2]],5],2,[],[]],[[[49,[-1]],[34,[-1]],5],2,3],[[[51,[[49,[-1]],-2,-1,-3]],[34,[-1]]],2,3,119,[[37,[-1]]]],[[[49,[-1]],[34,[-1]]],[[27,[[48,[-1]]]]],3],0,[[[48,[-1]],[48,[-1]],[34,[-1]],5,[53,[-1,-2]]],[[121,[-1,-2]]],3,[[37,[-1]]]],[[[123,[[50,[-1]],-1,-2]]],27,3,[[37,[-1]]]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]]],[],3,[[37,[-1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[[49,[-1]],-2,-1,-3]],[51,[[49,[-1]],-2,-1,-3]]],9,3,119,[[37,[-1]]]],[[-1,[34,[-2]],[53,[-2,-3]]],[[6,[[2,[-1,-4,[41,[-2]]]],115]]],17,[],[],[]],[[[49,[-1]],[34,[-1]],[53,[-1,-2]]],[[6,[[2,[[49,[-1]],[50,[-1]],[41,[-1]]]],115]]],3,[[37,[-1]]]],[[120,-1],6,28],[[[52,[[51,[[49,[-1]],-2,-1,-3]]]]],5,3,119,[[37,[-1]]]],[-1,120,[]],[[[49,[-1]]],120,3],[[120,[34,[-1]]],[[27,[[69,[-1]]]]],3],[[[49,[-1]],[34,[-1]]],[[35,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[49,[-1]],[34,[-1]]],[[6,[[35,[-1]],117]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[53,[-1,-2]],-3,[34,[-1]]],2,3,[[37,[-1]]],[[126,[[125,[-1,-2]]]]]],[[[53,[-1,-2]],-3,-4,[34,[-1]]],2,3,[[37,[-1]]],[[126,[127]]],[[126,[-2]]]],[[[53,[-1,-2]],-3,-4,[62,[-1]]],2,3,[[37,[-1]]],[[126,[127]]],[[126,[-2]]]],[[[128,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-1]]],[[129,[-1]]],[4,3]],[[[128,[-1]]],[[128,[-1]]],[4,3]],[[[53,[-1,-2]]],[[53,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[53,[-1,-2]]],5,3,[[37,[-1]]]],[[[53,[-1,-2]]],[[130,[127,[2,[-2,[67,[-1]]]]]]],3,[[37,[-1]]]],[[],[[53,[-1,-2]]],[106,3],[106,[37,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[129,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[128,[-2]]]]],7,[100,3]],[-1,[[6,[[53,[-2,-3]]]]],7,[100,3],[100,[37,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[129,[-1]]],5,3],[[[128,[-1]]],5,3],[[[128,[-1]],[34,[-1]],[48,[-1]],[48,[-1]],[69,[-1]]],[[49,[-1]]],3],[[[128,[-1]],[62,[-1]],[52,[[63,[-1]]]],[63,[-1]],[63,[-1]]],[[35,[[63,[-1]]]]],3],[[[128,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[35,[[63,[-1]]]]],3],[[[128,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[129,[-1]],11],12,[13,3]],[[[128,[-1]],11],12,[13,3]],[[[53,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[125,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[[[129,[-1]]],[[128,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-3]]],[[125,[-2,-3]]],[[126,[127]]],3,[[37,[-2]]]],[-1,-1,[]],[[[53,[-1,-2]],5],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]],[67,[-1]]],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]],5],[[27,[[67,[-1]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]],[67,[-1]]],[[27,[5]]],3,[[37,[-1]]]],[[[53,[-1,-2]],127],[[27,[5]]],3,[[37,[-1]]]],[[[128,[-1]]],9,3],[[[53,[-1,-2]]],9,3,[[37,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2]]],9,3,[[37,[-1]]]],[[[53,[-1,-2]]],29,3,[[37,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[53,[-1,-2]],[34,[-1]],[48,[-1]]],[[27,[[2,[-2,[67,[-1]]]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]],127],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]]],5,3,[[37,[-1]]]],[[],[[53,[-1,-2]]],3,[[37,[-1]]]],[[-1,-4],[[125,[-2,-3]]],[[126,[127]]],3,[[37,[-2]]],[[126,[-3]]]],[[[34,[-1]],[35,[-3]]],[[53,[-1,-2]]],3,[[37,[-1]]],[[126,[[125,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[129,[-1]],-2],6,3,28],[[[128,[-1]],-2],6,[101,3],28],[[[53,[-1,-2]],-3],6,[101,3],[101,[37,[-1]]],28],[[[129,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[128,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[128,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[6,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[128,[-1]],-2,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]],[44,[-1]],[44,[-1]]],[[6,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[128,[-1]],-2,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[6,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[128,[-1]],-2,[95,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[131,[-1]],-2,[34,[-1]]],[[6,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]]],[[6,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[27,[[131,[-1]]]],[34,[-1]]],[[6,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[132,[-1]]],[[132,[-1]]],[4,3]],[[[131,[-1]]],[[131,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[132,[-1]],[132,[-1]]],9,[10,3]],[[[131,[-1]],[131,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[132,[-1]],11],12,[13,3]],[[[132,[-1]],[34,[-1]],92,-2],[[93,[2]]],3,94],[[[131,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[[131,[-1]],-2],2,3,19],[[-2,[34,[-1]],[44,[-1]],[58,[-1]]],[[6,[[45,[-1]],46]]],3,[[47,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[[132,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[133,133],[[[134,[-1]]],[[134,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[134,[-1]],[134,[-1]]],26,3],[[],133],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[133]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[134,[-2]]]]],7,3],[5,2],[5,2],[[133,133],9],[[[134,[-1]],[134,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[133,11],12],[[133,11],12],[[[134,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[52,[135]]],[[27,[-1]]],[]],[136,-1,[]],[91,-1,[]],[137,-1,[]],[138,-1,[]],[139,-1,[]],[140,-1,[]],[141,-1,[]],[14,-1,[]],[-1,133,[]],[[-1,-2],14,[16,17],18],[[[134,[-1]],-2],2,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,29,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],-1,[]],[[],-1,[]],[[[134,[-1]],[134,[-1]]],[[27,[26]]],3],[[]],[[]],[[133,-1],6,28],[[[134,[-1]],-2],6,3,28],[-1,[[35,[135]]],[]],[-1,[[27,[136]]],[]],[-1,[[27,[91]]],[]],[-1,[[27,[137]]],[]],[-1,[[27,[138]]],[]],[-1,[[27,[139]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[133,[[27,[78]]]],[-1,29,[]],[-1,[[27,[142]]],[]],[-1,142,[]],[-1,[[27,[140]]],[]],[-1,[[27,[141]]],[]],[-1,141,[]],[-1,[[27,[14]]],[]],[-1,14,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[],[[52,[133]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[143,[-1]]],[[145,[-1,144]]],3],[[[143,[-1]]],[[145,[-1,146]]],3],[[[143,[-1]]],[[145,[-1,147]]],3],[[[143,[-1]]],[[145,[-1,148]]],3],[[[149,[-1]],[52,[-1]]],[[2,[[35,[-1]],-1]]],3],[150,150],[[[143,[-1]]],[[143,[-1]]],[4,3]],[[[113,[-1]]],[[113,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[113,[-1]],[71,[-1]]],-1,3],[[[143,[-1]],150],[[149,[-1]]],3],0,0,[[],[[143,[-1]]],3],[[],[[113,[-1]]],[106,3]],[[],[[151,[-1]]],[106,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[150,11],12],[[[149,[-1]],11],12,[13,3]],[[[143,[-1]],11],12,[13,3]],[[[113,[-1]],11],12,[13,3]],[[[151,[-1]],11],12,[13,3]],[-1,-1,[]],[5,150],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[151,[-1]],[134,[-1]]],[[27,[[71,[-1]]]]],3],[[[113,[-1]],[71,[-1]]],-1,3],[[[113,[-1]],[71,[-1]]],-1,3],[[[113,[-1]],[71,[-1]]],-1,3],[[[113,[-1]],[71,[-1]]],-1,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[[151,[-1]],[134,[-1]],[71,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[71,[-2]]],[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[152,[-1,-2,-3]]],[[35,[-1]]],[153,106,119,154,13],119,3],[[[152,[-1,-2,-3]],[34,[-3]]],2,[153,106,119,154,13],119,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[155,[-1]],[34,[-1]],[48,[-1]]],[[76,[[2,[[48,[-1]],[48,[-1]]]],117]]],3],[[[157,[[156,[-1]]]],[34,[-1]],[48,[-1]]],[[76,[[2,[[48,[-1]],[48,[-1]]]],117]]],3],[[[158,[-1]],73,[34,[-1]],[48,[-1]]],[[76,[[2,[[48,[-1]],[48,[-1]]]],117]]],3],[[[152,[73,[156,[-1]],-1]],73,[34,[-1]],[48,[-1]]],[[76,[[2,[[48,[-1]],[48,[-1]]]],117]]],3],[[[158,[-1]],73,[34,[-1]],[48,[-1]]],[[76,[[2,[[48,[-1]],[48,[-1]]]],115]]],3],[[[152,[73,[156,[-1]],-1]],73,[34,[-1]],[48,[-1]]],[[76,[[2,[[48,[-1]],[48,[-1]]]],115]]],3],0,0,[[[159,[-1,-3,-2]],[34,[-2]],[149,[-2]]],[[160,[-2]]],153,3,[[161,[-2]]]],0,0,0,[[[157,[-1]]],[[157,[-1]]],4],[[[156,[-1]]],[[156,[-1]]],[4,3]],[[[162,[-1]]],[[162,[-1]]],[4,3]],[[[163,[-1]]],[[163,[-1]]],[4,3]],[[[164,[-1]]],[[164,[-1]]],[4,3]],[73,73],[74,74],[[[152,[-1,-2,-3]]],[[152,[-1,-2,-3]]],[4,153],4,[4,3]],[[[159,[-1,-3,-2]]],[[159,[-1,-3,-2]]],[4,153],[4,3],[4,[161,[-2]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[155,[-1]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[157,[[156,[-1]]]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,0,[[[158,[-1]],73,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[152,[73,[156,[-1]],-1]],73,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,0,0,[[],73],[[],74],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[157,[-1]],[157,[-1]]],9,10],[[[156,[-1]],[156,[-1]]],9,[10,3]],[[[164,[-1]],[164,[-1]]],9,[10,3]],[[73,73],9],[[74,74],9],[[[152,[-1,-2,-3]],[152,[-1,-2,-3]]],9,[10,153],10,[10,3]],[[[159,[-1,-3,-2]],[159,[-1,-3,-2]]],9,[10,153],[10,3],[10,[161,[-2]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[158,[-1]],73,[48,[-1]],[48,[-1]],[48,[-1]],[34,[-1]]],[[48,[-1]]],3],[[[152,[73,[156,[-1]],-1]],73,[48,[-1]],[48,[-1]],[48,[-1]],[34,[-1]]],[[48,[-1]]],3],[[[165,[-1]],[34,[-1]],[69,[-1]]],[[27,[[75,[-1]]]]],3],[[[157,[[164,[-1]]]],[34,[-1]],[69,[-1]]],[[27,[[75,[-1]]]]],3],[[[166,[-1]],74,[34,[-1]],[69,[-1]]],[[27,[[75,[-1]]]]],3],[[[152,[74,[164,[-1]],-1]],74,[34,[-1]],[69,[-1]]],[[27,[[75,[-1]]]]],3],[[[157,[-1]],11],12,13],[[[156,[-1]],11],12,[13,3]],[[[162,[-1]],11],12,[13,3]],[[[163,[-1]],11],12,[13,3]],[[[164,[-1]],11],12,[13,3]],[[73,11],12],[[74,11],12],[[[152,[-1,-2,-3]],11],12,[13,153],13,[13,3]],[[[159,[-1,-3,-2]],11],12,[13,153],[13,3],[13,[161,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[152,[-1,-3,-2]]],[[159,[-1,-3,-2]]],153,3,[[161,[-2]]]],[-1,-1,[]],[[[152,[-1,-2,-3]],-1],[[157,[-2]]],[153,106,119,154,13],119,3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[73,-1],2,19],[[74,-1],2,19],0,0,0,[-1,5,[]],[73,5],[74,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[165,[-1]],[34,[-1]],[75,[-1]]],[[69,[-1]]],3],[[[157,[[164,[-1]]]],[34,[-1]],[75,[-1]]],[[69,[-1]]],3],[[[166,[-1]],74,[34,[-1]],[75,[-1]]],[[69,[-1]]],3],[[[152,[74,[164,[-1]],-1]],74,[34,[-1]],[75,[-1]]],[[69,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],5],[[[159,[-1,-3,-2]],[34,[-2]]],[[35,[[2,[-1,27]]]]],153,3,[[161,[-2]]]],0,0,0,[[],[[152,[-1,-2,-3]]],[153,106,119,154,13],119,3],[[],[[152,[-1,-2,-3]]],[153,106,119,154,13],119,3],[[[157,[-1]]],[[152,[-2,-1,-3]]],119,[153,106,119,154,13],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[167,[-2]]],[],[]],[[-1,[34,[-2]]],[[76,[[167,[-2]]]]],[],[]],[[[156,[-1]],[34,[-1]]],[[76,[[167,[-1]]]]],3],[[[162,[-1]]],[[167,[-1]]],3],[[[163,[-1]]],[[167,[-1]]],3],[[[164,[-1]],[34,[-1]]],[[76,[[167,[-1]]]]],3],0,0,0,[[[155,[-1]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[157,[[156,[-1]]]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[158,[-1]],73,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[152,[73,[156,[-1]],-1]],73,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[152,[-1,-2,-3]]],[[35,[[157,[-2]]]]],[153,106,119,154,13],119,3],[[[152,[-1,-2,-3]]],5,[153,106,119,154,13],119,3],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[34,[-2]]],27,[],[]],[[[157,[-2]],[34,[-1]]],27,3,[[161,[-1]]]],[[[156,[-1]],[34,[-1]]],27,3],[[[164,[-1]],[34,[-1]]],27,3],[[[152,[-1,-2,-3]]],5,[153,106,119,154,13],119,3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[168,-2,[62,[-1]]],[[76,[[95,[-1]],46]]],3,[[47,[-1]]]],[[168,[52,[0]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[168,[52,[[63,[-1]]]],[62,[-1]],[169,[-1]],[35,[[63,[-1]]]],[53,[-1,-2]],5],[[76,[[2,[[170,[-1]],0]]]]],3,[[37,[-1]]]],[[168,[52,[[63,[-1]]]],[62,[-1]],[53,[-1,-2]],5],[[76,[[170,[-1]]]]],3,[[37,[-1]]]],[168,[[76,[2]]]],0,[168,168],[171,171],[172,172],[173,173],[174,174],[175,175],[176,176],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[172]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[168,168],9],[[171,171],9],[[172,172],9],[[173,173],9],[[174,174],9],[[175,175],9],[[176,176],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[168,11],12],[[171,11],12],[[171,11],12],[[172,11],12],[[172,11],12],[[173,11],12],[[174,11],12],[[175,11],12],[[176,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[172]]],3],[[[63,[-1]],[62,[-1]]],[[27,[173]]],3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[171,-1],2,19],[[172,-1],2,19],[[173,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[171,177],0,[[29,[35,[171]],5,174],[[76,[168]]]],[61,171],[[168,[62,[-1]]],5,3],[168,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[172,-1],6,28],0,0,[[168,-2,[62,[-1]],[170,[-1]],[95,[-1]],[0,[[178,[-1]]]],[53,[-1,-3]],[27,[[179,[-1]]]]],[[76,[[35,[[44,[-1]]]]]]],3,[[47,[-1]]],[[37,[-1]]]],[[168,-2,[62,[-1]],[170,[-1]],[53,[-1,-3]]],[[76,[2]]],3,[[47,[-1]]],[[37,[-1]]]],[172,-1,3],[172,-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[173,[62,[-1]]],[[63,[-1]]],3],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[140,[[76,[172]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[168,5],[[76,[168]]]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[95,[-1]]],[106,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[95,[-1]],-1],[[76,[[45,[-1]]]]],3],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],168],[[[27,[[2,[168,[53,[-1,-2]]]]]],[63,[-1]],[62,[-1]],5],[[76,[[2,[[35,[[170,[-1]]]],5]]]]],3,[[37,[-1]]]],[[[27,[[2,[168,[53,[-1,-2]]]]]],[63,[-1]],[62,[-1]],5],[[76,[[2,[[35,[[63,[-1]]]],5,[35,[[63,[-1]]]]]]]]],3,[[37,[-1]]]],[[[27,[[2,[168,[53,[-1,-2]]]]]],[63,[-1]],[63,[-1]],[63,[-1]],[62,[-1]],5],[[76,[[2,[[35,[[170,[-1]]]],5]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]]],[[40,[[52,[168]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]],9],168,3,[[37,[-1]]]],0,0,0,0,0,0,[168,[[169,[-1]]],3],[[168,5],[[170,[-1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[169,[-1]]],[[169,[-1]]],[4,3]],[[[170,[-1]]],[[170,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[],[[169,[-1]]],[106,3]],[[],[[170,[-1]]],[106,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],0,[[[169,[-1]],11],12,[13,3]],[[[170,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[[],5],[[],5],[[[170,[-1]]],[],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[168,[[169,[-1]]],3],[[[170,[-1]]],[],3],0,0,[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[181,[-1,-2]]],5,3,[[37,[-1]]]],[[[181,[-1,-2]]],5,3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]],5],[[181,[-1,-2]]],3,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[181,[-1,-2]]],[[27,[[42,[-1]]]]],3,[[37,[-1]]]],[[[181,[-1,-2]]],5,3,[[37,[-1]]]],[[[181,[-1,-2]]],[[181,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[[181,[-1,-2]],[62,[-1]]],[[42,[-1]]],3,[[37,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[62,[-1]]],[[35,[[63,[-1]]]]],3],[[[181,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[181,[-1,-2]]],[[27,[35]]],3,[[37,[-1]]]],[-1,-1,[]],[[5,[52,[[170,[-1]]]],[40,[[39,[-1,-2]]]]],[[35,[[181,[-1,-2]]]]],3,[[37,[-1]]]],[[-1,5,[53,[-2,-3]]],[[76,[35,54]]],55,3,[[37,[-2]]]],[[],5],[-1,-2,[],[]],[[],[[76,[[35,[-1]]]]],3],[[],[[6,[24,25]]]],[[5,27,[40,[[39,[-1,-2]]]],[41,[-1]]],[[181,[-1,-2]]],3,[[37,[-1]]]],[[[181,[-1,-2]]],5,[56,3],[[37,[-1]]]],[[[181,[-1,-2]]],27,3,[[37,[-1]]]],[[]],[[[181,[-1,-2]],[181,[-1,-2]]],9,3,[[37,[-1]]]],[[[181,[-1,-2]],5],[[181,[-1,-2]]],[56,3],[[37,[-1]]]],[[[181,[-1,-2]]],5,3,[[37,[-1]]]],[[[181,[-1,-2]]],[[35,[-1]]],3,[[37,[-1]]]],[[[181,[-1,-2]]],5,3,[[37,[-1]]]],[[[181,[-1,-2]]],[[57,[-1]]],[56,3],[[37,[-1]]]],[52,5],[[[181,[-1,-2]],-3,[27,[[45,[-1]]]],[52,[[45,[-1]]]]],[[76,[[2,[[27,[[45,[-1]]]],[35,[[45,[-1]]]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[181,[-1,-2]],-3,[52,[[45,[-1]]]]],[[76,[[35,[[45,[-1]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[181,[-1,-2]],-3],[[76,[2,46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[181,[-1,-2]],-3,52],[[76,[46]]],3,[[37,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1]],172],[[63,[-1]]],3],[136,[[63,[-1]]],3],[[[63,[-1]]],[[63,[-1]]],[4,3]],[[-1,-2],2,[],[]],[-1,[[63,[-1]]],3],[[[63,[-1]],[62,[-1]]],29,3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[63,[-2]]]]],7,[100,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[182,[-2]]]]],7,[100,3]],[5,2],[5,2],[[],[[183,[-1]]],3],[[],[[63,[-1]]],3],[[[63,[-1]],[63,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[63,[-1]],11],12,[13,3]],[[[182,[-1]],11],12,[13,3]],[[[63,[-1]],[62,[-1]],92],29,3],[-1,-1,[]],[-1,-1,[]],[[[63,[-1]]],[[27,[-1]]],3],[[-1,-2],14,[16,17],18],[[[63,[-1]]],[[27,[5]]],3],[[[63,[-1]]],[[27,[5]]],3],[[[63,[-1]]],[[27,[5]]],3],[[[63,[-1]],-2],2,3,19],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1]]],9,3],[[[63,[-1]]],9,3],[[[63,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[172,[[63,[-1]]],3],[-1,[[63,[-1]]],3],[14,[[63,[-1]]],3],[[]],[[]],[[[63,[-1]],-2],6,[101,3],28],[[[182,[-1]],-2],6,[101,3],28],[[[63,[-1]]],172,3],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[14,[[63,[-1]]],3],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[62,[-1]],-1,-1,[63,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[[[62,[-1]],[63,[-1]]],[[76,[[2,[[63,[-1]],[63,[-1]]]]]]],3],[[[62,[-1]],[63,[-1]]],[[76,[[63,[-1]]]]],3],[[[62,[-1]],[63,[-1]],[63,[-1]]],[[63,[-1]]],3],[[],[[62,[-1]]],[106,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[62,[-1]],5],[[27,[[2,[[63,[-1]],[63,[-1]]]]]]],3],[[[62,[-1]],5],[[27,[[2,[[63,[-1]],[63,[-1]],[63,[-1]]]]]]],3],[[[62,[-1]],5],[[27,[[2,[[63,[-1]],[63,[-1]],[63,[-1]],[63,[-1]]]]]]],3],[[[62,[-1]],[63,[-1]]],[[27,[127]]],3],[[[62,[-1]],[63,[-1]]],[[27,[29]]],3],[[[62,[-1]],[63,[-1]]],[[27,[127]]],3],[[[62,[-1]],[63,[-1]]],[[27,[127]]],3],[[[62,[-1]],5],[[27,[[35,[29]]]]],3],[[[62,[-1]],11],12,[13,3]],[-1,-1,[]],[[[62,[-1]]],[],3],[[[62,[-1]],[63,[-1]]],[[76,[[183,[-1]]]]],3],[[[62,[-1]],-1,[63,[-1]]],[[76,[[63,[-1]]]]],3],[[[62,[-1]],-1,[63,[-1]]],[[76,[[2,[-1,[183,[-1]]]]]]],3],[[[62,[-1]]],2,3],[[[62,[-1]]],2,3],[[],5],[[[62,[-1]]],[],3],[[[62,[-1]],172,[63,[-1]],[63,[-1]]],[[63,[-1]]],3],[[[62,[-1]],172,[63,[-1]],[63,[-1]],[183,[-1]]],[[63,[-1]]],3],[[[62,[-1]],172,[63,[-1]],[63,[-1]],[63,[-1]]],[[63,[-1]]],3],[[[62,[-1]],172,[63,[-1]],[63,[-1]],[63,[-1]],[183,[-1]]],[[63,[-1]]],3],[[[62,[-1]],172,[63,[-1]],[63,[-1]],[63,[-1]],[63,[-1]]],[[63,[-1]]],3],[[[62,[-1]],172,[63,[-1]],[63,[-1]],[63,[-1]],[63,[-1]],[183,[-1]]],[[63,[-1]]],3],[[[62,[-1]],[63,[-1]],[63,[-1]],[63,[-1]]],[[63,[-1]]],3],[[[62,[-1]],61],[[63,[-1]]],3],[[[62,[-1]]],[[63,[-1]]],3],[[[62,[-1]],61],[[63,[-1]]],3],[[[62,[-1]],127],[[63,[-1]]],3],[[[62,[-1]],[52,[29]]],[[63,[-1]]],3],[[[62,[-1]],[184,[-1]]],[[63,[-1]]],3],[[[62,[-1]],61],[[63,[-1]]],3],[-1,-2,[],[]],[[[62,[-1]],61],[[63,[-1]]],3],[[],[[6,[24,25]]]],[[[62,[-1]],[35,[[63,[-1]]]]],[[63,[-1]]],3],[[[62,[-1]],-1],[[27,[[2,[-1,[63,[-1]]]]]]],3],[[]],0,[[[62,[-1]],[63,[-1]],[63,[-1]]],[[76,[9]]],3],[[[62,[-1]]],[[76,[9]]],3],[[[62,[-1]],[112,[[111,[92]]]],61],[[76,[[63,[-1]]]]],3],[[[62,[-1]],61],76,3],[[[62,[-1]],[112,[[111,[92]]]],61],[[76,[[2,[185,[63,[-1]],9]],186]]],3],[[[62,[-1]],61],[[76,[[63,[-1]]]]],3],[[[62,[-1]],[52,[[63,[-1]]]]],[[76,[[35,[-1]]]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[187,11],12],[[187,188],29],[-1,-1,[]],[[187,[52,[188]]],[[76,[2]]]],[[],5],[[187,-1],188,[[126,[29]]]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[187,188],[188,187],[[]],[[187,61],[[27,[188]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[187,187],[[76,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,114,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[186,186],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,[[186,11],12],[[186,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[189,61],[-1,-2,[],[]],[-1,-2,[],[]],[189,189],[[-1,-2],2,[],[]],[189,136],[[189,185],[[190,[-1,[35,[135]]]]],3],[[],189],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[189,-1],29,[[191,[[52,[135]]]]]],[[189,189],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[189,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[189,136],9],[[],[[6,[24,25]]]],[[],[[0,[55]]]],[185,[[190,[-1,189]]],3],[[],[[0,[55]]]],[[],[[0,[55]]]],[189,[[0,[55]]]],[[],[[0,[55]]]],[189,[[32,[55]]]],[189,[[0,[55]]]],[[],[[0,[55]]]],[[]],[189,141],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,61,[192,[-1,-2]]],[[192,[-1,-2]]],[193,4,194],3],[[-1,195,[192,[-1,-2]]],[[192,[-1,-2]]],[193,4,194],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[196,[-1]]],[[196,[-1]]],[4,3]],[[[192,[-1,-2]]],[[192,[-1,-2]]],[4,194],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[196,[-1]],[196,[-1]]],9,[10,3]],[[[192,[-1,-2]],[192,[-1,-2]]],9,[10,194],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[[196,[-1]],11],12,[13,3]],[[[196,[-1]],11],12,3],[[[192,[-1,-2]],11],12,[13,194],[13,3]],[[[192,[185,-1]],11],12,3],[-1,-1,[]],[-1,-1,[]],[[-1,195],[[192,[-1,-2]]],[193,4,194],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[196,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[197,[-1,-2,[192,[-1,-3]]]],-4],[[197,[-1,-2,[192,[-1,-3]]]]],194,[],3,55],[[-1,[196,[-2]]],[[192,[-1,-2]]],194,3],[[[27,[-1]],-2,[196,[-3]]],[[197,[-2,-1,[192,[-2,-3]]]]],[],194,3],[[[192,[-1,-2]],[192,[-1,-2]]],[[192,[-1,-2]]],[193,4,194],3],[[]],[[]],[[[6,[-1,-2]],-3,-4],[[197,[-3,-1,[192,[-3,-5]]]]],[],[],194,55,3],[[-1,[196,[-2]]],[[197,[-1,-3,[192,[-1,-2]]]]],194,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[198,198],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[198,198],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[198,11],12],[-1,-1,[]],[[185,185],198],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[61,5,5,5,5],29],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[199,199],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[199,199],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[199,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[136,61],[[0,[55]]]],[[],[[0,[55]]]],[[136,9,61],[[0,[55]]]],[[136,9,61],[[0,[55]]]],[136,[[0,[55]]]],[[136,9,61],[[0,[55]]]],[[136,9,61],[[0,[55]]]],[[],[[0,[55]]]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[112,[[111,[92]]]],9],[[0,[55]]]],[[],[[0,[55]]]],[[],[[0,[55]]]],[185,[[190,[-1,185]]],3],[[[112,[[111,[92]]]],9,9],[[0,[55]]]],[[[112,[[111,[92]]]],9],[[0,[55]]]],[[],[[0,[55]]]],[189,[[0,[55]]]],[[[112,[[111,[92]]]],9],[[0,[55]]]],[[[112,[[111,[92]]]],9],[[0,[55]]]],[[[112,[[111,[92]]]],9],[[0,[55]]]],[[[112,[[111,[92]]]],9],[[0,[55]]]],[185,[[190,[-1,[35,[185]]]]],3],[185,[[190,[-1,[35,[185]]]]],3],[[],[[0,[55]]]],[[[112,[[111,[92]]]],9],[[0,[55]]]],[61,[[0,[55]]]],[61,[[0,[55]]]],[[],[[0,[55]]]],[[[112,[[111,[92]]]],9,9],[[0,[55]]]],[[],[[0,[55]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[40,[[39,[-1,-2]]]],[41,[-1]],5],-3,[],[],[]],[-1,[[27,[[42,[-2]]]]],[],[]],[-1,[[42,[-2]]],[],[]],[-1,-2,[],[]],[[],35],[-1,-2,[],[]],[[-1,5],5,[]],[-1,-2,[],[]],[[-1,5],5,[]],[-1,[[27,[35]]],[]],[[5,52,[40,[[39,[-1,-2]]]]],[[35,[-3]]],[],[],[]],[-1,[],[]],[[-1,5,[53,[-2,-3]]],[[6,[35,54]]],55,[],[]],[[-1,[48,[-2]],[48,[-2]],[34,[-2]],5,[40,[[53,[-2,-3]]]]],[[6,[[35,[[51,[[49,[-2]],[50,[-2]],-2,-3]]]],54]]],[],[],[]],[-1,2,[]],[-1,[],[]],[-1,[],[]],[[],[[6,[[35,[-1]]]]],[]],[-1,[[53,[-2,-3]]],[],[],[]],[[5,27,[40,[[39,[-1,-2]]]],[41,[-1]]],-3,[],[],[]],[[-1,5],5,[]],[[-1,5],9,[]],[[-1,5],9,[]],[[5,[53,[-1,-2]]],-3,[],[],[]],0,[[-1,[52,[-2]]],[[6,[[35,[[2,[-2,[200,[-3]]]]]],46]]],[],[],[]],[-1,[],[]],[-1,27,[]],[[-1,-1],9,[]],[-1,[[6,[9]]],[]],[-1,5,[]],[-1,[[35,[-2]]],[],[]],[[-1,61],6,[]],[-1,5,[]],[-1,5,[]],[52,5],0,[[-1,-3,52],[[6,[46]]],[],[],[[47,[-2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[5,[40,[[53,[-1,-2]]]]],-1,56,[[37,[-1]]]],[[5,[40,[[53,[-1,-2]]]]],[[2,[-3,[201,[-1]]]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[[[203,[-1,-2]]],[[203,[-1,-2]]],[56,4],[4,[204,[-1]]]],[[-1,-2],2,[],[]],[[[205,[-1,-2,-3]],[203,[-1,-3]]],[[6,[[205,[-1,-2,-3]],54]]],56,[[37,[-1]]],[[202,[-1,-2]]]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[203,[-2,-3]]]]],7,56,[[204,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[205,[-2,-3,-4]]]]],7,56,[[37,[-2]]],[[202,[-2,-3]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[203,[-1,-2]],-3],[[93,[2]]],56,[[204,[-1]]],94],[[[206,[-1,-2,-3]],[203,[-1,-3]],5,[40,[[53,[-1,-2]]]]],[[6,[[2,[[205,[-1,-2,-3]],[35,[-1]],[35,[-1]],5]],54]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[[[203,[-1,-2]],[52,[135]]],[[27,[[52,[135]]]]],56,[[204,[-1]]]],[[[203,[-1,-2]]],5,56,[[204,[-1]]]],[[[206,[-1,-2,-3]],11],12,[13,56],[13,[37,[-1]]],[13,[202,[-1,-2]]]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[206,[-1,-2,-3]]],[[53,[-1,-2]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[[5,[53,[-1,-2]]],[[206,[-1,-2,-3]]],56,[[37,[-1]]],[[202,[-1,-2]]]],0,0,[[]],[[]],[[]],[[[206,[-1,-2,-3]],[203,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[6,[[2,[[205,[-1,-2,-3]],[35,[-1]],[35,[-1]],5]],54]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[[[203,[-1,-3]],[27,[[209,[[207,[-1]],[208,[-1]],-3,[201,[-1]]]]]],[52,[-3]],5,[35,[-1]],[40,[[53,[-1,-2]]]]],[[6,[[205,[-1,-2,-3]],54]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[[5,[40,[[53,[-1,-2]]]]],[[203,[-1,-3]]],56,[[37,[-1]]],[[204,[-1]],[202,[-1,-2]]]],[[[206,[-1,-2,-3]],[203,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[6,[[2,[[209,[[207,[-1]],[208,[-1]],-3,[201,[-1]]]],[35,[-3]],[35,[-1]],[35,[-1]],5]],54]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[[[206,[-1,-2,-3]]],5,56,[[37,[-1]]],[[202,[-1,-2]]]],[[[203,[-1,-2]],-3],6,56,[[204,[-1]]],28],[[[205,[-1,-2,-3]],-4],6,56,[[37,[-1]]],[[202,[-1,-2]]],28],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[205,[-1,-2,-3]],[203,[-1,-3]],5,[52,[-1]],[52,[-1]]],[[6,[9,118]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[40,[[53,[-1,-2]]]],5],-1,56,[[37,[-1]]]],[[5,[40,[[53,[-1,-2]]]]],[[210,[[207,[-1]]]]],56,[[37,[-1]]]],[[[39,[-1,-2]],[41,[-1]]],5,3,[[37,[-1]]]],0,[[[39,[-1,-2]]],[[39,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[211,[-2,-3,-4]]]]],7,[100,56],[[37,[-2]]],[[202,[-2,-3]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[[212,[-1,-2]]],-1,56,[[213,[-1]]]],[5,2],[5,2],[5,2],[5,2],[[[214,[-1,-2,-3]],[212,[-1,-3]],5,[40,[[53,[-1,-2]]]]],[[6,[[2,[[211,[-1,-2,-3]],[35,[-1]],[35,[-1]],5,5]],54]]],56,[[37,[-1]]],[]],[[[214,[-1,-2,-3]],11],12,[13,56],[13,[37,[-1]]],[13,[202,[-1,-2]]]],[[[39,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[212,[-1,-2]],5],[],56,[[213,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[214,[-1,-2,-3]]],[[53,[-1,-2]]],56,[[37,[-1]]],[[202,[-1,-2]],[213,[-1]]]],[[[39,[-1,-2]]],[[40,[[53,[-1,-2]]]]],3,[[37,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[53,[-1,-2]]],[[214,[-1,-2,-3]]],56,[[37,[-1]]],[[202,[-1,-2]],[213,[-1]]]],[[[40,[[53,[-1,-2]]]],5],[[39,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[53,[-1,-2]]]],5],[[39,[-1,-2]]],3,[[37,[-1]]]],[[[39,[-1,-2]]],5,3,[[37,[-1]]]],[[]],[[]],[[]],[[]],0,[[[214,[-1,-2,-3]],[212,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[6,[[2,[[211,[-1,-2,-3]],[35,[-1]],[35,[-1]],5,5]],54]]],56,[[37,[-1]]],[]],[[[212,[-1,-3]],[27,[[215,[[207,[-1]],[208,[-1]]]]]],[52,[-3]],[35,[-1]]],[[6,[[2,[[211,[-1,-2,-3]],5]],54]]],56,[[37,[-1]]],[]],[[5,[40,[[53,[-1,-2]]]]],[[212,[-1,-3]]],56,[[37,[-1]]],[]],[[[214,[-1,-2,-3]],[212,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[6,[[2,[[215,[[207,[-1]],[208,[-1]]]],[35,[-1]],[35,[-1]],5]],54]]],56,[[37,[-1]]],[]],[[[214,[-1,-2,-3]]],5,56,[[37,[-1]]],[[202,[-1,-2]],[213,[-1]]]],[[[39,[-1,-2]]],5,3,[[37,[-1]]]],[[[211,[-1,-2,-3]],-4],6,[101,56],[[37,[-1]]],[[202,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[211,[-1,-2,-3]],[212,[-1,-3]],5,5,[52,[-1]],[52,[-1]]],[[6,[9,216]]],56,[[37,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-2,[34,[-1]],[27,[[48,[-1]]]]],[[6,[[2,[[45,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[27,[[48,[-1]]]]],[[6,[[2,[[45,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[217,[-1,137]]],[[27,[[217,[-1,137]]]]],3],[[[217,[-1,137]]],[[27,[[217,[-1,137]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[217,[-1,137]],137],[[217,[-1,137]]],3],[218,218],[[[217,[-1,-2]]],[[217,[-1,-2]]],[4,3],[4,219]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[218,218],26],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[218,218],9],[[[217,[-1,-2]],[217,[-1,-2]]],9,[10,3],[10,219]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[48,[-1]],[34,[-1]],92,-2],[[93,[2]]],3,94],[[[69,[-1]],[34,[-1]],92,-2],[[93,[2]]],3,94],[[218,11],12],[[[217,[-1,-2]],11],12,[13,3],[13,219]],[136,[[48,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[218,-1],2,19],[[[217,[-1,-2]],-3],2,3,219,19],[218,[[27,[5]]]],[[-1,5],[[217,[-2,-1]]],219,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[217,[-1,137]]],9,3],[[[217,[-1,137]]],9,3],[[[69,[-1]]],9,3],[[[217,[-1,91]]],9,3],[-1,9,[]],[[[48,[-1]]],9,3],[[[217,[-1,137]]],9,3],[[[217,[-1,137]]],9,3],[218,9],[218,9],[[[217,[-1,-2]]],9,3,219],[[-1,137],9,[]],[[[48,[-1]],137],9,3],[-1,9,[]],[[[48,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[91,218],[[69,[-1]]],3],[5,218],[[91,218],[[217,[-1,91]]],3],[-1,[[217,[-2,-1]]],219,3],[[-1,5],[[217,[-2,-1]]],219,3],[218,[[27,[5]]]],[[218,218],[[27,[26]]]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[220,[-1,-2,-3]]],[[6,[[40,[[203,[-1,-3]]]],221]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[[[220,[-1,-2,-3]]],[[6,[[222,[-1]],221]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[[[220,[-1,-2,-3]]],[[6,[[223,[-1]],221]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[[[220,[-1,-2,-3]]],[[6,[[212,[-1,-3]],221]]],56,[[37,[-1]]],[]],[[[220,[-1,-2,-3]],-4],[[6,[-5,221]]],56,[[37,[-1]]],[[202,[-1,-2]]],66,[]],0,0,0,0,[-1,114,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[221,11],12],[[221,11],12],[224,221],[-1,-1,[]],[225,221],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[221,[[27,[114]]]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[220,[-1,-2,-3]]],[[35,[[220,[-1,-2,-3]]]]],56,[[37,[-1]]],[]],[226,226],[227,227],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[220,[-1,-2,-3]],85],[[93,[228]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[226]]],7],[-1,[[6,[227]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[226,226],9],[[227,227],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[220,[-1,-2,-3]],11],12,[13,56],[13,[37,[-1]]],[13,[202,[-1,-2]]]],[[226,11],12],[[227,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[220,[-1,-2,-3]]],29,56,[[37,[-1]]],[[202,[-1,-2]]]],0,0,[[[220,[-1,-2,-3]]],[[40,[[53,[-1,-2]]]]],56,[[37,[-1]]],[[202,[-1,-2]]]],0,0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[40,[[53,[-1,-2]]]],9,226],[[220,[-1,-2,-3]]],56,[[37,[-1]]],[]],[[[220,[-1,-2,-3]],85],[[93,[228]]],56,[[37,[-1]]],[[202,[-1,-2]]]],[[]],[[]],[[]],0,0,[[[220,[-1,-2,-3]],5],[[220,[-1,-2,-3]]],56,[[37,[-1]]],[]],[[226,-1],6,28],[[227,-1],6,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[229,[-1,-2]]],[[229,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[],230],[[],230],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],0,[[[229,[-1,-2]],[48,[-1]],[34,[-1]]],[[76,[[2,[[48,[-1]],5,[69,[-1]],[35,[[48,[-1]]]]]]]]],3,[[37,[-1]]]],[[[229,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[231,[-1,-3,-2]],11],12,[13,3],[13,[37,[-1]]],[13,[232,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[[-1,[34,[-2]],[112,[[111,[92]]]],-3],[[76,[2]]],[],[],[[191,[233]],119]],[[-1,[34,[-2]],[112,[[111,[92]]]],185,-3],[[76,[185]]],[],[],[[191,[233]],119]],[[-1,[34,[-2]],[112,[[111,[92]]]],-3],[[76,[2]]],[],[],[[191,[233]]]],[[-1,[34,[-2]],[112,[[111,[92]]]],[48,[-2]],-3],[[76,[2]]],[],[],[[191,[233]],119]],[[[229,[-1,-2]],[34,[-1]],[112,[[111,[92]]]],[48,[-1]],-3],[[76,[2]]],3,[[37,[-1]]],[[191,[233]],119]],[[-1,[34,[-2]],92,[48,[-2]]],[[76,[[2,[[49,[-2]],[49,[-2]],5]]]]],[],[]],[[[229,[-1,-2]],[34,[-1]],92,[48,[-1]]],[[76,[[2,[[49,[-1]],[49,[-1]],5]]]]],3,[[37,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[[],29],[[],29],[[[34,[-1]],5,[27,[230]],[53,[-1,-2]]],-3,[],[],[]],[[[34,[-1]],5,[27,[230]],[53,[-1,-2]]],[[229,[-1,-2]]],3,[[37,[-1]]]],[[[34,[-1]],5,[27,[230]],[53,[-1,-2]]],[[229,[-1,-2]]],3,[[37,[-1]]]],[[[34,[-1]],5,[27,[230]],[53,[-1,-2]]],[[76,[[231,[-1,-3,-2]]]]],3,[[37,[-1]]],[[232,[-1,-2]]]],[[]],[[]],[[-1,29],29,[]],[[[229,[-1,-2]],29],29,3,[[37,[-1]]]],[-1,29,[]],[[[229,[-1,-2]]],29,3,[[37,[-1]]]],[[[27,[-1]],[53,[-2,-3]]],[[76,[2]]],[[191,[233]]],[3,100],[[37,[-2]]]],[[[53,[-1,-2]]],[[76,[2]]],[3,100],[[37,[-1]]]],[[[34,[-1]],[231,[-1,-3,-2]],[27,[-4]]],[[76,[2]]],3,[[37,[-1]]],[[232,[-1,-2]]],[[191,[233]]]],[[[231,[-1,-3,-2]]],[[76,[2]]],3,[[37,[-1]]],[[232,[-1,-2]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[92,187],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],92],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[92,11],12],[[92,188],29],[-1,-1,[]],[92,188],[[92,[52,[188]]],[[76,[2]]]],[[],5],[[],92],[[],92],[[92,-1],188,[[191,[61]]]],[[92,[52,[-1]],9,9],[[76,[188]]],[[191,[61]]]],[[92,[52,[-1]],9],[[76,[188]]],[[191,[61]]]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[61,127],[[],127],[187,92],[[]],[92,[[112,[[111,[92]]]]]],[[92,61],[[27,[188]]]],[[92,188],[[76,[2]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[92,187],[[76,[2]]]],[61,127],[-1,-2,[],[]],0,0,0,0,[-1,114,[]],[[[34,[-1]],9],[[48,[-1]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[34,[-1]],[48,[-1]]],[[6,[[48,[-1]],117]]],3],0,[[[34,[-1]],[48,[-1]]],[[6,[[2,[[48,[-1]],[48,[-1]]]],117]]],3],[[[34,[-1]],[48,[-1]]],[[6,[[48,[-1]],117]]],3],0,0,[117,117],[[[234,[-1]]],[[234,[-1]]],[4,3]],[[[235,[-1]]],[[235,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[34,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],9,3],0,0,0,[[],[[34,[-1]]],3],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],0,[5,2],[5,2],[5,2],[5,2],0,0,0,0,0,[[[34,[-1]]],[[235,[-1]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[132,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[136]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[134,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[69,[-1]]],[[27,[[75,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[127]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[35,[[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[127]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[1,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[29]]],3],[[[34,[-1]],[48,[-1]]],[[27,[127]]],3],[[[34,[-1]],[48,[-1]]],[[27,[127]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[131,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[15]]],3],[[[34,[-1]],[68,[-1]]],[[27,[[69,[-1]]]]],3],[[[34,[-1]],[67,[-1]]],[[27,[[48,[-1]]]]],3],[[[34,[-1]],11],12,[13,3]],[[117,11],12],[[117,11],12],[[[234,[-1]],11],12,[13,3]],[[[235,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[],3],[[[34,[-1]],[69,[-1]]],[[27,[[71,[-1]]]]],3],[[[34,[-1]],[131,[-1]]],[[27,[[71,[-1]]]]],3],[[[34,[-1]],137,-1],[[27,[[48,[-1]]]]],3],[[[34,[-1]],-2],[[27,[[48,[-1]]]]],3,[[126,[[1,[-1]]]]]],[[[34,[-1]],[48,[-1]]],[[27,[[67,[-1]]]]],3],[[[34,[-1]],[69,[-1]],[27,[[236,[-1]]]]],[[6,[[2,[[68,[-1]],[27,[[237,[-1]]]]]],117]]],3],[[[34,[-1]],[48,[-1]],[27,[[236,[-1]]]]],[[6,[[2,[[67,[-1]],[27,[[238,[-1]]]]]],117]]],3],0,0,[[[34,[-1]],[69,[-1]]],[[27,[[68,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[67,[-1]]]]],3],[[[34,[-1]],61],[[67,[-1]]],3],[[[34,[-1]],127],[[67,[-1]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[[34,[-1]],-1,[48,[-1]]],[[27,[[48,[-1]]]]],3],[[[34,[-1]],-1,[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]]],2,3],[[[34,[-1]]],2,3],0,0,[-1,[],[]],[[],5],[[],5],[[],5],[[],5],[[[34,[-1]]],[],3],[[[34,[-1]],136],[[48,[-1]]],3],[[[34,[-1]],-1,[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[34,[-1]],137,-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-2],[[48,[-1]]],3,[[126,[[1,[-1]]]]]],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],61],[[48,[-1]]],3],[[[34,[-1]],127],[[48,[-1]]],3],[[[34,[-1]],[52,[29]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],9],[[48,[-1]]],3],[[[34,[-1]],[184,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[131,[-1]]],[[48,[-1]]],3],[[[34,[-1]],14],[[48,[-1]]],3],[[[34,[-1]],15],[[48,[-1]]],3],[[[34,[-1]],[68,[-1]],[236,[-1]]],[[27,[[69,[-1]]]]],3],[[[34,[-1]],[67,[-1]],[236,[-1]]],[[27,[[48,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[191,[61]]]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,0,0,0,0,0,[[[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],0,[[[34,[-1]],[69,[-1]]],[[69,[-1]]],3],0,[[],[[34,[-1]]],3],[[[34,[-1]]],[[235,[-1]]],3],[[[34,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[126,[[1,[-1]]]]]],0,0,0,0,0,[[[34,[-1]],[48,[-1]]],[[27,[[2,[-1,[48,[-1]]]]]]],3],0,[[[34,[-1]],[48,[-1]]],[[6,[[2,[-1,[48,[-1]]]],117]]],3],[[]],[[]],[[]],[[]],0,0,[[[234,[-1]]],[[48,[-1]]],3],[[[34,[-1]]],[[6,[9]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[6,[9,117]]],3],0,0,[[[34,[-1]],61],6,3],[[[34,[-1]],61],[[6,[[48,[-1]],186]]],3],[[[34,[-1]],[112,[[111,[92]]]],185],[[6,[[2,[185,[48,[-1]],9]],186]]],3],[[[34,[-1]],[112,[[111,[92]]]],61],[[6,[[48,[-1]],186]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[48,[-1]]]]],3],0,[[[34,[-1]],[48,[-1]]],[[6,[[48,[-1]],117]]],3],[[[34,[-1]],61],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[191,[61]]]],0,[[[34,[-1]]],[[48,[-1]]],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[34,[-1]],[69,[-1]]],[[27,[[237,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[238,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[6,[[2,[[236,[-1]],[67,[-1]]]],117]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[[[34,[-1]],14],[[48,[-1]]],3],0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[34,[-1]],61],[[48,[-1]]],3],[[[234,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[34,[-1]],-1,-1],[[6,[[68,[-1]],117]]],3],0,[[[34,[-1]],-1,-1],[[6,[[67,[-1]],117]]],3],0,[[[234,[-1]]],[[67,[-1]]],3],0,0,0,0,0,[[]],[[127,127],[[27,[127]]]],[-1,-2,[],[]],[-1,-2,[],[]],[127,127],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[127]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[127,61],127],[127,[[27,[127]]]],[5,2],[[127,127],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[127,[52,[-1]]],127,[[191,[61]]]],[[127,11],12],[[127,11],12],[61,29],[127,29],[127,29],[127,29],[61,127],[-1,-1,[]],[61,[[27,[127]]]],[[-1,-2],14,[16,17],18],[[127,127],9],[[127,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[127,9],[127,9],[127,9],[127,9],[136,9],[[[52,[-1]]],127,[[191,[61]]]],[[[35,[29]]],127],[[],[[6,[24,25]]]],[127,[[76,[61]]]],[[[52,[-1]],9],127,[[191,[61]]]],[[[35,[29]],9],127],[[127,127],[[27,[26]]]],[127,[[52,[29]]]],[[]],[127,9],[9,127],[[],127],[[],127],[[127,-1],6,28],[127,2],[[[52,[-1]]],127,[[191,[61]]]],[[[35,[29]]],127],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[184,[-1]]],[[184,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[184,[-1]],[184,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[184,[-1]],11],12,[13,3]],[[[184,[-1]],11],12,3],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[35,[-1]]],[]],[[],[[35,[138]]]],[[],[[35,[139]]]],[[],[[35,[61]]]],[[137,-2],[[45,[-1]]],3,[[47,[-1]]]],[[91,-2],[[45,[-1]]],3,[[47,[-1]]]],[[138,-2],[[45,[-1]]],3,[[47,[-1]]]],[[139,-2],[[45,[-1]]],3,[[47,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[137,137],[91,91],[138,138],[139,139],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[137]]],7],[-1,[[6,[91]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[138]]],7],[-1,[[6,[139]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[137,137],9],[[91,91],9],[[138,138],9],[[139,139],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[137,11],12],[[137,11],12],[[91,11],12],[[91,11],12],[[138,11],12],[[138,11],12],[[139,11],12],[[139,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[-2]]],3,[]],[-1,[[27,[137]]],3],[-1,[[27,[91]]],3],[-1,[[27,[138]]],3],[-1,[[27,[139]]],3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[137,-1],2,19],[[91,-1],2,19],[[138,-1],2,19],[[139,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[137,9],[139,9],[[137,137],9],[137,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[138,138],[[27,[26]]]],[[139,139],[[27,[26]]]],[[]],[[]],[[]],[[]],[[137,-1],6,28],[[91,-1],6,28],[[138,-1],6,28],[[139,-1],6,28],[[-1,5],9,[]],[[138,5],9],[[139,5],9],[-1,61,[]],[138,61],[139,61],[-1,-2,[],3],[137,-1,3],[91,-1,3],[138,-1,3],[139,-1,[[239,[14]],240]],[-1,[],[]],[137],[91],[138],[139],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[140,[[6,[137]]]],[140,[[6,[91]]]],[-1,[[6,[-2]]],[],[]],[140,[[6,[138]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[140,[[6,[139]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[15,15],15],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[15]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[15,15],15],[5,2],[[15,15],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[15,11],12],[[15,11],12],[14,15],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[15,9],[[],[[6,[24,25]]]],[[15,15],15],[[15,15],[[27,[26]]]],[[]],[[15,15],15],[[15,-1],6,28],[[15,15],15],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[[-1,[34,[-2]],92,-3],[[93,[2]]],[],[],94],[[-1,[34,[-2]],92],29,[],[]],[[-1,[34,[-2]]],29,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,135],[241,241],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[241,241],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[241,11],12],[[241,11],12],[-1,-1,[]],[[[52,[135]]],[[76,[241]]]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[52,[135]]],[[27,[5]]]],0,[241,135],[135,9],[135,9],[241,[[35,[135]]]],[-1,-2,[],[]],[-1,29,[]],[5,[[35,[135]]]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,114,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,242,21],[-1,242,21],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[242,11],12],[[242,11],12],[-1,-1,[]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],0,[-1,29,[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,61,[52,[61]],-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,61,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,61,[52,[61]],-1],6,244],[[243,5,-1],6,244],[[243,61,5,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,-1],6,244],[[243,61,-1],6,244],[5,2],[[243,11],12],[-1,-1,[]],[241,[[6,[-1,242]]],100],[241,243],[[],5],[-1,-2,[],[]],[243,9],[[],[[6,[24,25]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[245,6],[245,6],[245,6],[246,6],[247,6],[248,6],[248,6],[[249,11],12],[[245,11],12],[[246,11],12],[[247,11],12],[[248,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[249,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[[249,9],6],[[249,[52,[135]]],6],[[249,136],6],[[245,-1],[[6,[2]]],[101,17]],[[245,-1],[[6,[2]]],[101,17]],[[249,250],6],[[249,251],6],[[245,-1],[[6,[2]]],[101,17]],[[247,-1],[[6,[2]]],[101,17]],[[248,61,-1],[[6,[2]]],[101,17]],[[248,61,-1],[[6,[2]]],[101,17]],[[249,252],6],[[249,253],6],[[249,254],6],[[249,255],6],[[246,-1],[[6,[2]]],[101,17]],[[249,[27,[5]]],6],[[249,61,-1],6,[101,17]],[[249,61,141,61,-1],6,[101,17]],[249,6],[[249,[27,[5]]],6],[[249,-1],6,[101,17]],[[249,61],6],[[249,61,5],6],[[249,61,141,61,5],6],[[249,5],6],[[249,61,5],6],[[249,61,141,61,5],6],[[249,140],6],[[249,141],6],[[249,14],6],[[249,135],6],[249,6],[[249,61],6],[[249,61,141,61],6],[[246,-1],[[6,[2]]],[101,17]],[-1,[[6,[241,242]]],101],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[237,[-1]]],[[237,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[237,[-2]]]]],7,[100,3]],[5,2],[[[237,[-1]],[237,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[237,[-1]],11],12,[13,3]],[-1,-1,[]],[[[237,[-1]]],[[71,[-1]]],3],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[237,[-1]],-2],6,[101,3],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[237,[-1]],[113,[-1]]],[[68,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[238,[-1]]],[[238,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[238,[-2]]]]],7,[100,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[238,[-1]],[238,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[238,[-1]],11],12,[13,3]],[[[238,[-1]],11],12,3],[-1,-1,[]],[[[34,[-1]],[48,[-1]]],[[27,[[238,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[238,[-1]],-2],6,[101,3],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[238,[-1]],[113,[-1]]],[[67,[-1]]],3],0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[256,[-1,-2]]],[[256,[-1,-2]]],[4,219],[4,3]],[[-1,-2],2,[],[]],[[[256,[-1,-2]],[256,[-1,-2]]],26,219,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[256,[-2,-3]]]]],7,[100,219],[100,3]],[5,2],[[],[[256,[172,-1]]],3],[[[256,[-1,-2]],[256,[-1,-2]]],9,[10,219],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[256,[-1,-2]],11],12,[13,219],[13,3]],[[[256,[-1,-2]],11],12,[219,21],3],[-1,-1,[]],[61,[[6,[[256,[-1,-2]],257]]],219,3],[61,[[6,[[67,[-1]],117]]],3],[61,[[6,[[256,[137,-1]],117]]],3],[[-1,-2],[[256,[-1,-2]]],219,3],[[-1,-2],14,[16,17],18],[[[256,[-1,-2]],-3],2,219,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[256,[-1,-2]]],[[71,[-2]]],219,3],[[],[[6,[24,25]]]],[[[256,[-1,-2]],[256,[-1,-2]]],[[27,[26]]],219,3],[[[256,[-1,-2]]],[[2,[-2,-2]]],219,3],[[]],[[[256,[-1,-2]],-3],6,[101,219],[101,3],28],[[[256,[-1,-2]]],-1,219,3],[[[256,[-1,-2]]],-2,219,3],[[[256,[-1,-2]]],29,219,3],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[[256,[-1,-2]]],-2,219,3],[-1,-2,[],[]],0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[236,[-1]]],[[236,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,[[],[[236,[-1]]],[106,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[236,[-2]]]]],7,[100,3]],[5,2],[[[236,[-1]],[236,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[236,[-1]],11],12,[13,3]],[-1,-1,[]],[[[236,[-1]],[68,[-1]]],[[27,[[237,[-1]]]]],3],[[[236,[-1]],[67,[-1]]],[[27,[[238,[-1]]]]],3],[[[67,[-1]]],[[27,[[238,[-1]]]]],3],[[],5],[[[236,[-1]],[34,[-1]],[48,[-1]]],[[27,[[67,[-1]]]]],3],[[[236,[-1]],[67,[-1]],[27,[[238,[-1]]]]],[[27,[[27,[[238,[-1]]]]]]],3],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[236,[-1]]],3],[[[34,[-1]],[48,[-1]]],[[2,[[236,[-1]],[27,[[67,[-1]]]]]]],3],[[[236,[-1]],[113,[-1]]],[[67,[-1]]],3],[[]],[[[236,[-1]],61,[113,[-1]]],[[2,[[67,[-1]],[238,[-1]]]]],3],[[[236,[-1]],127,[113,[-1]]],[[2,[[67,[-1]],[238,[-1]]]]],3],[[[236,[-1]],-2],6,[101,3],28],[-1,-2,[],[]],[[[236,[-1]]],[[34,[-1]]],3],[[[236,[-1]],[67,[-1]]],[[6,[[2,[[34,[-1]],[48,[-1]]]],117]]],3],[[[34,[-1]]],[[236,[-1]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Num",0],[15,"tuple"],[8,"LurkField",1649],[8,"Clone",5010],[15,"usize"],[4,"Result",5011],[8,"Deserializer",5012],[3,"With",5013],[15,"bool"],[8,"PartialEq",5014],[3,"Formatter",5015],[6,"Result",5015],[8,"Debug",5015],[15,"u64"],[4,"UInt",4458],[8,"Hash",5016],[8,"Sized",5017],[8,"BuildHasher",5016],[8,"Hasher",5016],[3,"IndentedSection",5018],[8,"Display",5015],[8,"Send",5017],[8,"Sync",5017],[3,"Layout",5019],[3,"LayoutError",5019],[4,"Ordering",5014],[4,"Option",5020],[8,"Serializer",5021],[3,"String",5022],[3,"TypeId",5023],[3,"Global",5024],[3,"Box",5025],[8,"Any",5023],[3,"Store",3841],[3,"Vec",5026],[3,"MultiFrame",105],[8,"Coprocessor",734],[3,"CircuitFrame",105],[4,"FoldingConfig",3376],[3,"Arc",5027],[4,"Meta",1188],[3,"WitnessCS",5028],[3,"GlobalAllocations",213],[3,"AllocatedPtr",300],[3,"AllocatedNum",5029],[4,"SynthesisError",5030],[8,"ConstraintSystem",5030],[6,"Ptr",3487],[3,"IO",1188],[3,"Witness",1188],[3,"Frame",1188],[15,"slice"],[3,"Lang",1432],[4,"ProofError",1093],[8,"Fn",5031],[8,"CurveCycleEquipped",3267],[6,"C2",3376],[3,"AllocatedContPtr",300],[6,"ConsCircuitWitness",1893],[6,"ContCircuitWitness",1893],[15,"str"],[3,"Store",2849],[4,"Ptr",2768],[4,"Boolean",5032],[8,"PrimeField",5033],[8,"FnOnce",5031],[6,"ZExprPtr",4914],[6,"ZContPtr",4914],[6,"ContPtr",3487],[8,"IntoHashComponents",1755],[15,"array"],[8,"AsAllocatedHashComponents",300],[4,"ConsName",1893],[4,"ContName",1893],[4,"Continuation",653],[6,"Result",5034],[4,"Backend",415],[3,"PossibleValue",5035],[3,"Utf8PathBuf",5036],[3,"HashMap",5037],[3,"CliSettings",450],[4,"ConfigError",5038],[6,"Scalar",5039],[3,"Repl",483],[3,"Utf8Path",5036],[4,"Flow",504],[3,"Settings",504],[3,"PerfConfig",504],[3,"ParallelConfig",504],[3,"WitnessGeneration",504],[4,"ContTag",4220],[3,"State",3803],[6,"Result",5040],[8,"Write",5041],[3,"GlobalAllocator",2542],[3,"CircomCoprocessor",753],[8,"CircomGadget",207],[3,"Sha256Coprocessor",786],[4,"Sha256Coproc",786],[8,"Deserialize",5012],[8,"Serialize",5021],[4,"TrieCoproc",858],[3,"NewCoprocessor",858],[3,"LookupCoprocessor",858],[3,"InsertCoprocessor",858],[8,"Default",5042],[3,"Trie",858],[4,"Error",858],[3,"LookupProof",858],[3,"InsertProof",858],[3,"RefCell",5043],[3,"Rc",5044],[3,"PoseidonCache",1755],[8,"Error",5045],[4,"ReductionError",1093],[4,"LurkError",1093],[3,"Error",3841],[4,"NovaError",5046],[8,"Copy",5017],[4,"Status",1188],[3,"Evaluator",1188],[3,"Error",5015],[3,"FrameIt",1188],[3,"Take",5047],[3,"Binding",1432],[8,"Into",5048],[3,"Symbol",4112],[4,"Coproc",1432],[3,"DummyCoprocessor",1432],[3,"IndexMap",5049],[3,"Thunk",1564],[4,"Expression",1564],[4,"LanguageField",1649],[3,"FWrap",1649],[15,"u8"],[15,"char"],[4,"ExprTag",4220],[4,"Op1",4220],[4,"Op2",4220],[15,"u16"],[15,"u32"],[15,"u128"],[3,"HashConstants",1755],[6,"U3",5050],[3,"PoseidonConstants",5051],[6,"U4",5050],[6,"U6",5050],[6,"U8",5050],[4,"HashConst",1755],[4,"HashArity",1755],[3,"InversePoseidonCache",1755],[3,"HashWitness",1893],[8,"HashName",1893],[8,"Eq",5014],[6,"ConsStub",1893],[3,"Cons",1893],[4,"Stub",1893],[6,"ConsWitness",1893],[3,"CircuitHashWitness",1893],[6,"HashCircuitWitnessBlocks",1893],[8,"ContentAddressed",1893],[3,"ScalarCons",1893],[3,"ScalarCont",1893],[3,"Cont",1893],[6,"ContStub",1893],[6,"ContWitness",1893],[6,"Preimage",1893],[3,"Func",2270],[3,"Hints",2633],[3,"Frame",2633],[3,"Var",2270],[4,"Tag",2270],[4,"Lit",2270],[3,"Block",2270],[4,"Ctrl",2270],[4,"Op",2270],[6,"AString",2270],[4,"AllocatedVal",2542],[3,"SlotsWitness",2542],[3,"SlotsAllocations",2542],[3,"MultiFrame",2720],[4,"ZChildren",2768],[6,"ZPtr",2768],[4,"Syntax",4181],[6,"Span",2942],[4,"Error",2942],[3,"Package",2914],[6,"SymbolRef",2914],[4,"LitBase",2983],[6,"ParseResult",2942],[8,"AsRef",5048],[3,"ParseError",3030],[8,"InputLength",5052],[8,"AsBytes",5052],[4,"ErrorKind",5053],[4,"ParseErrorKind",3030],[6,"IResult",5054],[4,"Pos",3112],[4,"StringFragment",3150],[3,"TestConstraintSystem",5055],[6,"C2",3267],[8,"MultiFrameTrait",3209],[3,"PublicParams",3267],[8,"StepCircuit",5056],[4,"Proof",3267],[3,"NovaProver",3267],[6,"G1",3267],[6,"G2",3267],[3,"RecursiveSNARK",5057],[3,"CircuitDigests",5058],[4,"Proof",3376],[3,"PublicParams",3376],[8,"StepCircuit",5059],[3,"SuperNovaProver",3376],[3,"RecursiveSNARK",5058],[4,"SuperNovaError",5060],[3,"GPtr",3487],[4,"RawPtr",3487],[8,"Tag",4220],[3,"Instance",3632],[4,"Error",3601],[6,"SuperNovaAuxParams",3376],[6,"NovaCircuitShape",3267],[3,"Error",5040],[3,"Error",5061],[4,"Kind",3632],[3,"Metadata",3632],[3,"File",5062],[3,"ReplState",3731],[3,"Command",5063],[3,"Repl",3731],[8,"ReplTrait",3731],[3,"Path",5064],[3,"ConstantPtrs",3841],[3,"NamedConstants",3841],[3,"ZStore",4964],[4,"ZCont",4782],[4,"ZExpr",4862],[8,"From",5048],[8,"Field",5033],[4,"ZData",4504],[4,"SerdeError",4552],[3,"Deserializer",4585],[8,"Visitor",5012],[3,"SerializeCell",4637],[3,"SerializeMap",4637],[3,"SerializeTupleVariant",4637],[3,"StructSerializer",4637],[3,"Serializer",4637],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"ZPtr",4914],[3,"Error",5034],[8,"ToInputs",100],[13,"Let",702],[13,"LetRec",702],[13,"Call0",702],[13,"Call",702],[13,"Call2",702],[13,"Tail",702],[13,"Lookup",702],[13,"Unop",702],[13,"Binop",702],[13,"Binop2",702],[13,"If",702],[13,"Emit",702],[8,"CoCircuit",734],[6,"ChildMap",858],[8,"Evaluable",1188],[8,"CAddr",1893],[4,"Val",2633],[13,"Pos",3144],[8,"EvaluationStore",3209],[8,"FrameLike",3209],[8,"Prover",3209],[8,"CEKState",3209],[8,"Provable",3209],[6,"C1Lurk",3267],[6,"SuperNovaPublicParams",3376],[8,"TypePredicates",3487],[8,"Op",4220],[8,"Write",4500],[13,"Let",4830],[13,"LetRec",4830],[13,"Call0",4830],[13,"Call",4830],[13,"Call2",4830],[13,"Tail",4830],[13,"Lookup",4830],[13,"Unop",4830],[13,"Binop",4830],[13,"Binop2",4830],[13,"If",4830],[13,"Emit",4830],[13,"Fun",4911]],"b":[[34,"impl-Display-for-Num%3CF%3E"],[35,"impl-Debug-for-Num%3CF%3E"],[36,"impl-From%3Cu64%3E-for-Num%3CF%3E"],[38,"impl-From%3CUInt%3E-for-Num%3CF%3E"],[107,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'_,+F,+C%3E"],[108,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[110,"impl-MultiFrame%3C\'a,+F,+C%3E"],[111,"impl-MultiFrameTrait%3C\'a,+F,+C%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[118,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'_,+F,+C%3E"],[119,"impl-MultiFrame%3C\'a,+F,+C%3E"],[144,"impl-MultiFrame%3C\'a,+F,+C%3E"],[145,"impl-MultiFrameTrait%3C\'a,+F,+C%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[169,"impl-MultiFrame%3C\'_,+F,+C%3E"],[170,"impl-MultiFrameTrait%3C\'a,+F,+C%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[179,"impl-Circuit%3CF%3E-for-MultiFrame%3C\'_,+F,+C%3E"],[180,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'_,+F,+C%3E"],[181,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[182,"impl-MultiFrame%3C\'a,+F,+C%3E"],[183,"impl-MultiFrameTrait%3C\'a,+F,+C%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[431,"impl-Debug-for-Backend"],[432,"impl-Display-for-Backend"],[683,"impl-Debug-for-Continuation%3CF%3E"],[684,"impl-Write%3CF%3E-for-Continuation%3CF%3E"],[961,"impl-From%3CNewCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[962,"impl-From%3CInsertCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[963,"impl-From%3CLookupCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[1128,"impl-Debug-for-ProofError"],[1129,"impl-Display-for-ProofError"],[1130,"impl-Display-for-ReductionError"],[1131,"impl-Debug-for-ReductionError"],[1132,"impl-Display-for-LurkError%3CF%3E"],[1133,"impl-Debug-for-LurkError%3CF%3E"],[1134,"impl-From%3CSynthesisError%3E-for-ProofError"],[1135,"impl-From%3CError%3E-for-ProofError"],[1136,"impl-From%3CReductionError%3E-for-ProofError"],[1137,"impl-From%3CNovaError%3E-for-ProofError"],[1287,"impl-Write%3CF%3E-for-IO%3CF%3E"],[1288,"impl-Display-for-IO%3CF%3E"],[1289,"impl-Debug-for-IO%3CF%3E"],[1608,"impl-Debug-for-Expression%3CF%3E"],[1609,"impl-Write%3CF%3E-for-Expression%3CF%3E"],[1689,"impl-Display-for-LanguageField"],[1690,"impl-Debug-for-LanguageField"],[2410,"impl-Display-for-Var"],[2411,"impl-Debug-for-Var"],[2412,"impl-Display-for-Tag"],[2413,"impl-Debug-for-Tag"],[2479,"impl-Tag-for-Tag"],[2480,"impl-Tag"],[2721,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2722,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2756,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2757,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2758,"impl-Circuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2875,"impl-EvaluationStore-for-Store%3CF%3E"],[2876,"impl-Store%3CF%3E"],[2900,"impl-Store%3CF%3E"],[2901,"impl-EvaluationStore-for-Store%3CF%3E"],[2902,"impl-Store%3CF%3E"],[2903,"impl-EvaluationStore-for-Store%3CF%3E"],[2962,"impl-Display-for-Error"],[2963,"impl-Debug-for-Error"],[3069,"impl-Debug-for-ParseErrorKind%3CF%3E"],[3070,"impl-Display-for-ParseErrorKind%3CF%3E"],[3071,"impl-Debug-for-ParseError%3CI,+F%3E"],[3072,"impl-Display-for-ParseError%3CLocatedSpan%3C%26str%3E,+F%3E"],[3612,"impl-Debug-for-Error"],[3613,"impl-Display-for-Error"],[3614,"impl-From%3CError%3E-for-Error"],[3616,"impl-From%3CError%3E-for-Error"],[3775,"impl-ReplTrait%3CF,+C%3E-for-ReplState%3CF,+C%3E"],[3776,"impl-ReplState%3CF,+C%3E"],[3930,"impl-Debug-for-Error"],[3931,"impl-Display-for-Error"],[3942,"impl-Store%3CF%3E"],[3943,"impl-EvaluationStore-for-Store%3CF%3E"],[4044,"impl-EvaluationStore-for-Store%3CF%3E"],[4045,"impl-Store%3CF%3E"],[4048,"impl-EvaluationStore-for-Store%3CF%3E"],[4049,"impl-Store%3CF%3E"],[4135,"impl-Debug-for-Symbol"],[4136,"impl-Display-for-Symbol"],[4203,"impl-Debug-for-Syntax%3CF%3E"],[4204,"impl-Display-for-Syntax%3CF%3E"],[4347,"impl-Debug-for-ExprTag"],[4348,"impl-Display-for-ExprTag"],[4349,"impl-Display-for-ContTag"],[4350,"impl-Debug-for-ContTag"],[4351,"impl-Debug-for-Op1"],[4352,"impl-Display-for-Op1"],[4353,"impl-Display-for-Op2"],[4354,"impl-Debug-for-Op2"],[4476,"impl-Display-for-UInt"],[4477,"impl-Debug-for-UInt"],[4521,"impl-Debug-for-ZData"],[4522,"impl-Display-for-ZData"],[4558,"impl-Error-for-SerdeError"],[4559,"impl-Error-for-SerdeError"],[4565,"impl-Display-for-SerdeError"],[4566,"impl-Debug-for-SerdeError"],[4672,"impl-SerializeTuple-for-SerializeCell"],[4673,"impl-SerializeSeq-for-SerializeCell"],[4674,"impl-SerializeTupleStruct-for-SerializeCell"],[4677,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4678,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4713,"impl-SerializeTuple-for-SerializeCell"],[4714,"impl-SerializeSeq-for-SerializeCell"],[4719,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4720,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4891,"impl-Debug-for-ZExpr%3CF%3E"],[4892,"impl-Display-for-ZExpr%3CF%3E"],[4933,"impl-Debug-for-ZPtr%3CE,+F%3E"],[4934,"impl-Display-for-ZPtr%3CE,+F%3E"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"MetricsSinkHandle",0],[15,"tuple"],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
