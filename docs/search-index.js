var searchIndex = JSON.parse('{\
"lurk":{"doc":"Lurk","t":"ENCNCLLOLLOAALLAAAOLLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCIAAKKDLLLLLLLLFLLLLMLLMLLMLLLLLLLLMAAAAIKKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFAAENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHDMLLMFMLLLLLLMLLLLLLMLMMLLLLLLLFDLLLLLLLLLLLLLLLLLLLLLEHHNDNDNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLFFMMLLLLLMMFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLLLALAKLLLLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNIDDDDNNEENDMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLKLLLLKLLKLLLALLLLLLLKLLLMLLMLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLMMLLLLLLMMMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNNNNNNENNNNNNNNNDNNNNNNENNNNNNNENNNNNNNNENDNLLMLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLALMLLLLMLLLLLLLALMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNDNNDDMLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFFFFFFFFNDDNEMLLMLLLLLLMLLLLLLMMLLLLLLLLLLLLLLMLLLLLMMMMLLLLMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNENNNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFQIQQQQQIQIQIIIIQQQQQKKKKKKLKLKKKKLKKKKKKLLLKALKKKKKKKKKKAKGGNIGQGQGQGQGDGEDNGGLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLGNENNEDNGDGLLLLLLLLFFLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAAAFFFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDEDNNNMMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLMMLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLLNNELLLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","blank","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","destructure_list","drop","fmt","from","init","input","into","layout_raw","output","pointer_metadata","precedes","store","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","witness","circom","constraints","data","pointer","CircomGadget","evaluate_simple","into_circom_input","name","simple_evaluate_alpha","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","quote_ptr","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from","from","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","config","parse_and_run","paths","repl","Backend","Nova","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_possible_value","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value_variants","vzip","CLI_CONFIG","CliSettings","backend","borrow","borrow_mut","circom_dir","cli_config","commits_dir","default","deref","deref_mut","deserialize","deserialize","drop","field","fmt","from","from_config","init","into","layout_raw","limit","pointer_metadata","proofs_dir","rc","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","lurk_default_dir","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","handle_non_meta","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Flow","LURK_CONFIG","LURK_CONFIG_FILE","Parallel","ParallelConfig","ParallelN","PerfConfig","Sequential","Settings","WitnessGeneration","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_config","home_dir","init","init","init","init","init","into","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lurk_config","lurk_config_file","parallelism","perf","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","public_params_default_dir","public_params_dir","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","evaluate_alpha","evaluate_internal","evaluate_simple","gadgets","has_circuit","sha256","simple_evaluate_alpha","synthesize","synthesize_alpha","synthesize_internal","synthesize_simple","synthesize_step_circuit","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","evaluate_simple","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","simple_evaluate_alpha","synthesize_alpha","synthesize_simple","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","construct_cons","construct_list","construct_tuple2","construct_tuple3","construct_tuple4","SC","Sha256Coproc","Sha256Coprocessor","arity","arity","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eval_arity","eval_arity","evaluate","evaluate_alpha","evaluate_internal","evaluate_simple","evaluate_simple","fmt","fmt","from","from","from","has_circuit","has_circuit","init","init","into","into","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","serialize","serialize","simple_evaluate_alpha","simple_evaluate_alpha","synthesize","synthesize_alpha","synthesize_alpha","synthesize_internal","synthesize_simple","synthesize_simple","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","StandardTrie","Trie","TrieCoproc","arity","arity","arity","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","evaluate_alpha","evaluate_internal","evaluate_simple","evaluate_simple","evaluate_simple","evaluate_simple","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","has_circuit","has_circuit","has_circuit","init","init","init","init","init","init","init","init","insert","install","install_lem","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate_alpha","simple_evaluate_alpha","simple_evaluate_alpha","simple_evaluate_alpha","synthesize","synthesize_alpha","synthesize_alpha","synthesize_alpha","synthesize_alpha","synthesize_insert","synthesize_internal","synthesize_simple","synthesize_simple","synthesize_simple","synthesize_simple","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Coprocessor","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Lurk","Meta","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_frames","get_frames","header","i","init","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_coprocessor","is_error","is_error","is_error","is_terminal","is_terminal","is_terminal","iter","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","log","log","log","maybe_emitted_expression","meta","new","next","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_binding_alpha","add_coprocessor","add_coprocessor_alpha","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","evaluate_alpha","evaluate_internal","evaluate_simple","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_index","get_index_by_symbol","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup","lookup_by_sym","max_coprocessor_arity","new","new","new_with_bindings","new_with_bindings_alpha","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","simple_evaluate_alpha","simple_evaluate_alpha","synthesize","synthesize_alpha","synthesize_internal","synthesize_simple","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compare","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_possible_value","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_variants","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Copy","Cproc","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hash3Zeros","Hash4Zeros","Hash6Zeros","Hash8Zeros","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Num","Op","Op1","Op2","Open","Or","Return","String","Sub","Symbol","Tag","Trunc","Var","Zero","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_field","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","input_params","interpreter","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","multiframe","name","name","new","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slots_count","store","synthesize_frame","synthesize_frame_aux","to_field","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AllocatedVal","Bits","Boolean","GlobalAllocator","Number","Pointer","SlotWitness","SlotsAllocations","allocations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_slots_allocations","clone","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","get_allocated_ptr","get_allocated_ptr_from_ptr","get_const","get_tag","get_tag_cloned","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","new_const","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness","eval_step","evaluate","evaluate_simple","evaluate_simple_with_env","evaluate_with_env","evaluate_with_env_and_cont","make_cprocs_funcs_from_lang","make_eval_step_from_lang","Boolean","Frame","Hints","Pointer","Val","bit_decomp","blank","blank","blank","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone","clone_into","clone_into","clone_into","commitment","cproc_outputs","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","emitted","fmt","fmt","from","from","from","hash4","hash6","hash8","hints","init","init","init","input","input","into","into","into","layout_raw","layout_raw","layout_raw","new_from_func","output","output","pc","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","MultiFrame","arity","arity","blank","borrow","borrow_mut","cached_witness","circuit_index","clone","clone_into","compute_witness","deref","deref_mut","deserialize","drop","emitted","fmt","frames","from","from_frames","get_evaluation_frames","init","into","io_to_scalar_vector","layout_raw","make_dummy","num_circuits","output","pointer_metadata","precedes","primary_circuit","public_input_size","public_inputs","reduction_count","secondary_circuit","significant_frame_count","synthesize","synthesize","synthesize","synthesize_frames","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Ptr","Tuple2","Tuple3","Tuple4","ZPtr","borrow","borrow_mut","cast","char","clone","clone_into","comm","dbg_display","deref","deref_mut","deserialize","deserialize","drop","dummy","dummy","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt_to_string","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","into","is_nil","is_tuple","is_zero","layout_raw","num","num_u64","pointer_metadata","serialize","tag","to_owned","try_from","try_into","type_id","u64","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","zero","Store","add_comm","borrow","borrow_mut","car_cdr","commit","cons","cont_error","cont_outermost","cont_terminal","default","deref","deref_mut","deserialize","drop","expect_2_ptrs","expect_3_ptrs","expect_4_ptrs","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_list","fetch_string","fetch_sym","fetch_symbol","fetch_symbol_path","fmt","from","get_cont_terminal","hash3zeros","hash4zeros","hash6zeros","hash8zeros","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","hydrate_z_cache","improper_list","init","initial_empty_env","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_fun","intern_lurk_symbol","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","intern_user_symbol","into","inverse_poseidon_cache","key","layout_raw","list","open","pointer_metadata","poseidon_cache","ptr_eq","ptr_eq","read","read","read_maybe_meta","read_with_default_state","to_scalar_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from_upto","get_from_offset","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","AllocatedIO","CEKState","CircuitFrame","ContPtr","ContPtr","Error","EvalFrame","EvaluationStore","FrameIO","FrameLike","GlobalAllocation","MultiFrameTrait","NIVCProver","Provable","Prover","Ptr","Ptr","PublicParams","Store","StoreError","blank","cached_witness","compute_witness","cont","emitted","env","expected_total_iterations","expr","frame_padding_count","frames","from_frames","get_cont_terminal","get_evaluation_frames","get_evaluation_frames","hydrate_z_cache","initial_empty_env","input","io_to_scalar_vector","lang","make_dummy","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","output","output","precedes","ptr_eq","public_input_size","public_inputs","read","reduction_count","reduction_count","significant_frame_count","supernova","synthesize_frames","C1LEM","C2","Compressed","CurveCycleEquipped","EE1","EE1","EE2","EE2","G1","G1","G2","G2","NovaCircuitShape","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuits","clone","clone_into","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","reduction_count","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","C2","Compressed","FoldingConfig","IVC","NIVC","Proof","PublicParams","Recursive","SuperNovaAuxParams","SuperNovaProver","SuperNovaPublicParams","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuit_cache_keys","circuit_index","circuit_shapes","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","evaluate_and_prove","fmt","fmt","from","from","from","from","index","init","init","init","init","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pp","prove","prove_recursively","public_params","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","allocate_maybe_fun_unconstrained","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","compare","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","disk_cache","error","instance","public_params","supernova_aux_params","supernova_circuit_params","supernova_public_params","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Instance","Kind","Metadata","NovaPublicParams","SuperNovaAuxParams","SuperNovaCircuitParams","_p","abomonated","abomonated","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_key","cache_key","circuit_param_instances","clone","clone","clone_into","clone_into","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","key","kind","kind","lang","lang","lang","layout_raw","layout_raw","layout_raw","new","open","pointer_metadata","pointer_metadata","pointer_metadata","rc","rc","reindex","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","quote","quotient","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","get_pos","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Cproc","Cproc","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","simple_fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","compare","deref","deref_mut","deserialize","deserialize","drop","dummy","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[99,"lurk::circuit"],[104,"lurk::circuit::circuit_frame"],[134,"lurk::circuit::gadgets"],[138,"lurk::circuit::gadgets::circom"],[143,"lurk::circuit::gadgets::constraints"],[144,"lurk::circuit::gadgets::data"],[231,"lurk::circuit::gadgets::pointer"],[342,"lurk::cli"],[347,"lurk::cli::backend"],[383,"lurk::cli::config"],[415,"lurk::cli::paths"],[416,"lurk::cli::repl"],[438,"lurk::config"],[590,"lurk::cont"],[640,"lurk::cont::Continuation"],[672,"lurk::coprocessor"],[691,"lurk::coprocessor::circom"],[692,"lurk::coprocessor::circom::non_wasm"],[725,"lurk::coprocessor::gadgets"],[730,"lurk::coprocessor::sha256"],[802,"lurk::coprocessor::trie"],[1044,"lurk::error"],[1139,"lurk::eval"],[1380,"lurk::eval::lang"],[1511,"lurk::expr"],[1598,"lurk::field"],[1706,"lurk::hash"],[1844,"lurk::hash_witness"],[2220,"lurk::lem"],[2503,"lurk::lem::circuit"],[2596,"lurk::lem::eval"],[2604,"lurk::lem::interpreter"],[2694,"lurk::lem::multiframe"],[2742,"lurk::lem::pointers"],[2798,"lurk::lem::store"],[2876,"lurk::package"],[2904,"lurk::parser"],[2945,"lurk::parser::base"],[2993,"lurk::parser::error"],[3077,"lurk::parser::position"],[3111,"lurk::parser::position::Pos"],[3117,"lurk::parser::string"],[3156,"lurk::parser::syntax"],[3177,"lurk::proof"],[3235,"lurk::proof::nova"],[3331,"lurk::proof::supernova"],[3441,"lurk::ptr"],[3550,"lurk::public_parameters"],[3558,"lurk::public_parameters::error"],[3589,"lurk::public_parameters::instance"],[3690,"lurk::state"],[3728,"lurk::store"],[3991,"lurk::symbol"],[4060,"lurk::syntax"],[4101,"lurk::tag"],[4343,"lurk::uint"],[4386,"lurk::writer"],[4390,"lurk::z_data"],[4439,"lurk::z_data::serde"],[4472,"lurk::z_data::serde::de"],[4524,"lurk::z_data::serde::ser"],[4669,"lurk::z_data::z_cont"],[4718,"lurk::z_data::z_cont::ZCont"],[4750,"lurk::z_data::z_expr"],[4800,"lurk::z_data::z_expr::ZExpr"],[4803,"lurk::z_data::z_ptr"],[4855,"lurk::z_data::z_store"],[4900,"core::clone"],[4901,"core::result"],[4902,"serde::de"],[4903,"rkyv::with"],[4904,"core::cmp"],[4905,"core::fmt"],[4906,"core::fmt"],[4907,"core::marker"],[4908,"core::hash"],[4909,"core::fmt"],[4910,"core::alloc::layout"],[4911,"serde::ser"],[4912,"alloc::string"],[4913,"core::any"],[4914,"alloc::boxed"],[4915,"core::any"],[4916,"bellpepper_core::gadgets::num"],[4917,"bellpepper_core::constraint_system"],[4918,"bellpepper_core::constraint_system"],[4919,"ff"],[4920,"core::ops::function"],[4921,"anyhow"],[4922,"clap_builder::builder::possible_value"],[4923,"camino"],[4924,"std::collections::hash::map"],[4925,"config::error"],[4926,"pasta_curves::pallas"],[4927,"camino"],[4928,"std::io"],[4929,"serde::de"],[4930,"core::cell"],[4931,"alloc::rc"],[4932,"core::error"],[4933,"nova_snark::errors"],[4934,"core::marker"],[4935,"core::convert"],[4936,"indexmap::map"],[4937,"typenum::generated::consts"],[4938,"neptune::poseidon"],[4939,"typenum::generated::consts"],[4940,"bellpepper::util_cs::witness_cs"],[4941,"core::convert"],[4942,"nom::traits"],[4943,"nom::internal"],[4944,"bellpepper_core::util_cs::test_cs"],[4945,"nova_snark::traits::circuit"],[4946,"nova_snark::supernova"],[4947,"nova_snark::traits::circuit_supernova"],[4948,"nova_snark::supernova::error"],[4949,"serde_json::error"],[4950,"std::io::error"],[4951,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","a small scalar field element in U64 representation for …","","","","","","","","","","","","Global config for Lurk Includes settings for cache …","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","","Returns the argument unchanged.","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","Global config for the CLI Includes settings for cache …","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Global config varable for <code>CliSettings</code>","Contains the CLI configuration settings","Proof generation and verification system","","","Cache directory for Circom files","Gets the <code>CLI_CONFIG</code> settings. If uninitialized, sets the …","Cache directory for commitments","","","","","","","Finite field used for evaluation and proving","","Returns the argument unchanged.","Loads config settings from a file or env var, or CLI arg …","","Calls <code>U::from(self)</code>.","","Iteration limit for the program, which is arbitrary to …","","Cache directory for proofs","Reduction count, which is the number of circuit reductions …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The level of parallelism used when synthesizing the Lurk …","Global config variable for <code>Settings</code>","Global path variable for configuration file","Try to be smart about thread management based on # of cpus","Parallel configuration settings","How many threads to use? (Advisory, might be ignored.)","Performance-related configuration settings","Runs without parallelism (default)","Contains the Lurk config settings The <code>public_params_dir</code> …","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads config settings from a file or env vars The public …","Returns the home directory used by <code>cargo`` and </code>rustup`","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> on <code>Flow::Parallel</code> or <code>Flow::ParallelN</code>","Returns <code>true</code> on <code>Flow::Sequential</code>","","","","","","Gets the <code>LURK_CONFIG</code> settings. If uninitialized, sets the …","Gets the <code>LURK_CONFIG_FILE</code> path. If uninitialized, sets the …","Parallelism settings","Parallelism &amp; witness gen configs","","","","","","The poseidon witness part of synthesis.","NOTE: Neptune itself <em>will</em> do this transparently at the …","","Public parameter disk cache location","Multiple <code>StepCircuit</code>s.","Synthesis (within one <code>StepCircuit</code>)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Witness generation settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","","","","Helper gadgets for synthesis","Returns true if this Coprocessor actually implements a …","","As with all evaluation, the value returned from …","","","","","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","","","Constructs a cons-list with the provided <code>elts</code>. The …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","Returns a value corresponding to the commitment associated …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","<code>Copy(x, y)</code> binds <code>x</code> to a copy of what <code>y</code> is bound to","<code>Cproc(ys, c, xs)</code> binds <code>ys</code> to the results of coprocessor <code>c</code> …","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hash3Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash4Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash6Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash8Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","The LEM <code>Tag</code> is a wrapper around other types that are used …","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","LEM variables","<code>Zero(x, t)</code> binds <code>x</code> to a <code>Ptr::zero(t)</code>","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Checks if the allocation for a numeric variable has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cached version of Lurk’s default step function (IVC, no …","","","","","","Creates the <code>Func</code>s used to call coprocessors in the NIVC …","Creates a LEM <code>Func</code> corresponding to Lurk’s step function …","","A <code>Frame</code> carries the data that results from interpreting a …","<code>Hints</code> hold the non-deterministic hints for hashes and <code>Func</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Make a dummy instance, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","","","","Fetches a cons list that was interned. If the list is …","","","","","","Returns the argument unchanged.","","","","","","Safe version of <code>hash_ptr_unsafe</code> that doesn’t hit a stack …","","","Hashes enqueued <code>Ptr</code> trees from the bottom to the top, …","","Interns a sequence of pointers as an improper cons-list …","","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","","","Calls <code>U::from(self)</code>.","","","","Interns a sequence of pointers as a proper (<code>nil</code>…","","","","Equality of the content-addressed versions of two pointers","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","Retrieves the <code>from_offset</code> attribute, if present","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","The associated type of allocated input and output to the …","The State of a CEK machine.","The associated <code>CircuitFrame</code> type","the type for the Store’s continuation poitners","The associated <code>ContPtr</code> type","the type for the Store’s errors","The associated <code>Frame</code> type","A trait for a store of expressions","the type for the Frame’s IO","A Frame of evaluation in a CEK machine.","The associated type which manages global allocations","Trait to support multiple <code>MultiFrame</code> implementations.","Supertrait for <code>Prover</code> that also supports NIVC.","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","the type for the Store’s pointers","The associated <code>Ptr</code> type","The associated public parameters type for the prover.","The associated <code>Store</code> type","The error type for the Store type","Synthesize a blank circuit.","Returns a reference to the cached witness values","Populates a WitnessCS with the witness values for the …","the continuation (K)","the emitted frames","the environment (E)","Returns the expected total number of iterations for the …","the expression, or control word (C)","Returns the number of padding frames needed for a given …","Iterates through the Self::CircuitFrame instances","Create an instance from some <code>Self::Frame</code>s.","getting the terminal continuation pointer","Evaluates and generates the frames of the computation …","Evaluates and generates the <code>Frame</code>s of the computation …","cache hashes for pointers enqueued for hydration","getting a pointer to the initial, empty environment","the input of the frame","Returns a public IO vector when equipped with the local …","Returns a reference to the Prover’s Lang.","Make a dummy instance, duplicating <code>self</code>’s final …","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","the output of the frame","The output of the last frame","Returns true if the supplied instance directly precedes …","hash-equality of the expressions represented by Ptrs","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","interpreting a string representation of an expression","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Counting the number of non-trivial frames in the evaluation","An adapter to a SuperNova proving system implementation.","Synthesize some frames.","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Why the next 2 types?","Type alias for the Evaluation Engine using G2 group …","a concrete implementation of an …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","Type alias for Nova Circuit Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","Computes a cache key of the primary circuit. The point is …","Generates the circuits for the Nova proving system.","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Folding configuration specifies <code>Lang</code> and can be either <code>IVC</code> …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the SuperNova …","A proof for the intermediate steps of a recursive …","Type alias for SuperNova Aux Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","Computes a cache key of a supernova primary circuit. The …","Collects all the cache keys of supernova instance. We need …","Return the circuit index assigned in this <code>FoldingConfig</code> to …","The internal circuit shapes","","","","","","","","","","","","","","","","return the digest","","","","","Evaluates and proves the computation given the public …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","","","","Public params for SuperNova.","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the running claim params for the SuperNova …","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the claim, which (for now), …","","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","Instances","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Instances compute a cache-key for the objects they …","From ::nova, there are 3 “kinds” of public param …","What we put into the cache","Tag for nova::NovaPublicParams instances","Tag for supernova::SuperNovaAuxParams instances","Tag for [supernova::SuperNovaCircuitParams] instances","","","","","","","","","","","","If this Instance is of Kind::SuperNovaAuxParams, then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key (or cache_key) of this Instance used to retrieve …","","","The key (or cache_key) of this Instance used to retrieve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","A character literal: ‘A’, ‘λ’","An improper cons-list of expressions: (1 2 . 3)","A nil-terminated cons-list of expressions: (1 2 3)","An element of the finite field <code>F</code>","A quoted expression: ’a, ’(1 2)","A string literal: “foobar”, “foo\\\\nbar”","A hierarchical symbol: foo, foo.bar.baz or keyword :foo","Lurk’s syntax for parsing","A u64 integer: 1u64, 0xffu64","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Retrieves the <code>Pos</code> attribute","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","","","","","","",""],"i":[0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,245,245,0,35,35,35,35,35,35,35,35,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,84,84,84,84,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,38,50,38,50,50,38,50,38,50,38,38,38,38,38,50,38,57,38,50,38,38,50,38,50,38,50,38,50,38,50,38,50,50,38,38,38,38,38,50,50,38,38,38,50,38,50,38,50,38,50,38,50,50,38,38,50,38,38,50,50,38,50,50,50,38,50,38,38,50,38,50,38,38,38,38,38,38,38,38,38,38,38,50,38,50,38,38,50,38,38,50,38,50,38,50,38,50,38,50,38,50,38,50,38,50,38,50,38,0,0,0,0,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,67,67,67,67,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,0,0,76,0,76,0,76,0,0,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,72,73,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,72,72,72,73,73,73,73,74,74,74,74,75,75,75,75,76,76,76,76,72,73,74,75,76,72,73,74,75,76,72,0,72,73,74,75,76,72,73,74,75,76,76,76,72,73,74,75,76,0,0,73,72,72,73,74,75,76,74,75,0,72,74,74,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,73,60,60,60,60,60,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,246,247,248,249,250,251,252,253,254,255,256,246,247,257,255,250,253,254,255,248,249,250,251,252,254,246,247,249,254,256,246,247,0,0,258,0,36,36,36,36,36,0,36,0,36,258,258,258,258,36,0,0,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,0,0,0,86,0,0,85,86,85,86,85,86,85,86,85,86,85,86,85,86,85,85,86,86,85,86,85,86,86,86,86,85,86,85,86,85,86,86,85,86,85,86,85,86,85,86,85,85,86,85,86,85,86,86,85,86,86,85,86,85,86,85,86,85,86,85,86,85,86,85,86,85,86,85,86,0,0,0,89,0,0,89,0,0,95,89,0,0,0,0,0,89,90,91,92,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,89,90,91,92,89,90,91,92,259,90,91,92,94,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,95,89,90,90,91,91,92,92,94,96,97,95,89,90,91,92,94,96,97,94,89,90,91,92,89,89,89,89,90,91,92,95,89,90,91,92,94,96,97,95,89,89,89,89,90,91,92,94,96,97,89,90,91,92,95,89,90,91,92,94,96,97,94,0,0,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,94,94,94,94,95,89,90,91,92,94,96,97,94,94,94,94,90,91,92,89,90,91,92,89,89,90,91,92,94,89,89,90,91,92,89,90,91,92,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,96,97,95,89,90,91,92,94,96,97,105,106,0,105,107,0,107,0,105,107,107,105,106,107,105,106,107,105,106,105,106,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,107,105,105,106,106,107,107,107,107,107,105,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,107,105,106,110,113,0,0,0,0,0,113,110,0,0,113,0,111,113,81,110,111,113,117,114,115,81,110,111,113,117,114,115,81,110,111,113,114,81,110,111,113,114,81,110,113,81,110,111,113,117,114,115,81,110,111,113,117,114,115,81,110,111,113,113,117,114,115,81,110,111,113,117,114,115,0,81,81,110,111,113,114,81,81,81,81,110,110,110,110,111,111,111,111,113,113,113,113,114,114,114,114,115,0,81,81,81,81,110,111,113,117,114,115,81,110,111,113,113,117,114,115,115,115,81,111,81,110,111,113,117,114,115,115,111,81,81,110,111,113,117,114,115,117,260,81,111,113,110,260,81,113,260,81,113,115,0,81,110,111,113,117,114,115,260,81,111,81,111,115,117,111,81,110,111,113,117,114,115,111,260,81,113,111,260,81,113,81,81,110,111,113,114,81,81,81,110,111,113,117,114,115,81,110,111,113,117,114,115,81,110,111,113,117,114,115,81,110,111,113,117,114,115,81,110,111,113,117,114,115,81,110,111,113,117,114,115,81,110,111,113,117,114,115,111,0,0,123,0,0,100,100,100,100,123,124,123,100,120,124,123,100,120,124,123,100,124,123,100,100,100,100,124,123,100,120,124,123,100,120,124,124,123,123,100,100,120,124,123,100,120,124,123,123,123,123,123,124,123,100,120,124,123,123,100,120,120,100,100,123,100,124,123,100,120,124,123,100,120,100,100,124,123,100,120,100,100,100,100,120,100,100,124,123,100,120,124,123,100,124,123,123,123,123,123,124,123,100,124,123,100,120,124,123,100,120,124,123,100,120,124,123,100,120,124,123,100,120,124,123,100,120,124,123,100,120,127,127,127,127,0,127,127,127,127,127,127,127,127,0,127,127,126,126,126,127,126,127,126,127,126,127,126,126,127,126,127,126,127,126,127,126,127,126,127,127,127,127,126,126,126,126,127,127,126,127,126,126,126,126,127,126,127,126,127,127,127,127,127,127,127,127,127,126,127,126,127,126,127,126,127,126,127,126,127,126,127,126,127,126,126,127,126,128,3,0,128,0,0,3,128,128,128,129,128,129,128,129,128,129,128,129,129,129,128,128,129,128,129,128,128,129,129,128,129,128,129,128,128,128,128,129,129,129,129,128,128,129,128,129,3,3,3,3,3,3,3,3,3,3,129,129,128,3,128,129,128,129,3,128,129,3,3,129,128,129,128,129,3,3,3,3,3,3,128,129,128,128,3,3,3,3,3,3,3,3,128,129,128,129,128,129,128,129,128,129,128,129,128,128,129,144,143,144,143,144,143,144,143,0,0,0,0,0,0,144,143,103,101,102,144,143,103,101,102,103,103,103,103,143,144,103,101,144,103,101,101,103,101,102,103,101,102,144,143,103,101,102,144,143,103,101,102,144,143,103,101,102,144,143,103,101,102,144,143,103,101,102,144,144,143,103,101,102,102,101,101,101,101,144,143,103,101,102,102,144,143,103,101,102,55,144,143,103,101,102,144,143,103,101,102,144,103,101,144,143,103,101,102,144,143,103,101,102,144,143,103,101,102,144,143,103,101,102,144,143,103,101,102,144,143,103,101,102,144,143,103,101,102,59,58,58,148,157,150,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,148,157,150,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,58,58,58,59,59,0,0,59,58,59,58,58,59,59,0,0,0,0,156,0,58,58,58,58,148,157,150,0,145,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,149,152,148,150,151,145,151,145,149,152,261,262,155,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,153,148,150,149,152,151,145,153,154,154,58,59,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,150,149,154,58,59,145,155,150,150,150,150,149,149,149,149,154,154,154,154,58,58,58,58,59,59,59,59,145,145,145,145,151,145,157,150,158,145,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,155,145,58,59,58,59,261,262,155,146,58,59,150,149,152,153,154,58,59,145,155,157,150,158,145,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,261,262,155,145,145,150,149,152,153,154,58,59,145,155,263,156,149,152,153,154,151,158,145,148,150,151,145,145,156,149,154,150,149,152,153,154,58,59,145,155,156,150,149,154,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,150,149,152,153,154,58,59,145,155,0,168,168,0,168,168,168,168,168,164,168,168,0,168,168,168,168,168,168,168,168,164,0,168,168,168,168,168,167,0,168,168,167,167,168,168,165,0,164,164,168,168,167,165,168,165,0,168,0,168,160,160,160,160,163,164,165,166,167,168,160,163,164,165,166,167,168,160,160,160,0,160,163,164,165,166,167,168,160,163,164,165,166,167,168,166,160,163,164,165,166,167,168,160,163,164,165,166,167,168,160,163,164,164,165,166,167,168,160,163,164,165,166,167,168,160,163,164,165,166,167,168,160,160,160,160,163,163,163,163,164,164,164,164,165,165,165,165,166,166,166,166,167,167,167,167,168,168,168,168,0,160,163,163,164,164,165,166,167,168,160,163,164,165,166,167,168,164,163,164,165,163,164,165,163,164,160,163,164,165,166,167,168,160,0,160,163,164,165,166,167,168,160,163,164,165,166,167,168,0,163,160,160,163,160,160,160,160,163,164,165,166,167,168,0,164,160,0,160,160,164,164,160,163,164,165,166,167,168,165,163,164,160,163,164,164,165,166,167,168,160,163,164,165,166,167,168,160,163,164,165,166,167,168,160,160,163,164,165,166,167,168,160,163,164,165,166,167,168,160,163,164,165,166,167,168,160,163,164,165,166,167,168,0,170,170,0,170,170,0,0,171,173,171,170,82,173,171,170,82,0,170,170,82,173,171,170,82,173,171,170,82,173,171,170,82,173,171,170,82,173,171,170,82,82,82,82,82,82,173,171,170,82,173,171,170,82,173,171,170,82,82,173,171,170,82,170,173,171,170,82,173,171,170,82,173,171,170,82,173,171,170,82,173,171,170,82,173,171,170,82,173,171,170,82,171,0,0,0,0,0,0,0,0,174,0,0,174,0,161,161,162,162,174,161,162,174,161,162,161,174,161,162,174,161,162,161,161,161,162,174,161,162,174,161,162,174,161,162,174,161,162,162,161,162,174,161,162,161,161,161,162,174,161,162,162,162,174,161,162,174,161,162,161,162,162,162,174,161,162,174,161,162,174,161,162,174,161,162,174,161,162,174,161,162,174,161,162,174,161,162,174,161,162,0,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,43,0,43,43,43,0,43,43,43,43,43,43,43,43,43,43,43,43,43,180,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,187,0,0,183,187,0,0,183,183,0,183,183,183,183,183,183,183,183,0,182,183,183,183,183,183,183,183,183,183,0,0,0,183,183,183,183,183,183,183,183,183,186,186,186,0,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,0,186,0,0,0,0,0,0,0,186,186,186,186,186,186,186,186,186,186,193,193,193,193,193,193,193,0,0,193,193,189,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,193,193,193,193,189,189,189,189,189,189,193,193,189,189,193,189,189,193,189,193,189,189,193,189,193,193,189,0,189,189,189,193,189,189,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,195,0,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,264,264,264,264,264,264,196,196,196,0,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,0,0,0,0,0,0,0,0,196,196,196,196,196,196,196,196,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,199,0,199,265,199,265,199,0,266,0,199,0,0,0,0,265,199,267,199,199,199,199,199,268,199,268,267,268,267,199,199,265,199,267,265,265,266,199,267,199,267,267,267,267,0,267,266,199,199,265,269,269,265,269,267,199,0,199,0,0,202,0,0,178,0,178,0,178,0,178,0,0,0,0,0,202,0,0,200,202,203,200,202,203,0,0,200,200,202,200,202,203,200,202,203,200,200,202,202,203,200,202,203,200,203,200,200,203,200,202,203,200,202,203,200,202,203,203,200,202,203,203,200,202,203,203,202,0,203,200,202,200,200,202,203,200,202,203,200,202,203,200,202,203,200,202,203,200,202,203,202,200,202,203,0,206,0,176,176,0,0,206,0,0,0,207,206,209,176,207,206,209,176,0,0,176,270,176,176,207,206,209,176,207,206,209,176,207,206,206,209,176,207,207,206,209,176,209,209,176,207,206,209,176,207,207,206,209,176,207,206,209,176,209,176,207,206,209,176,209,176,176,176,207,206,209,176,207,209,206,0,209,176,206,176,207,206,209,176,207,206,209,176,207,206,209,176,207,206,209,176,207,206,209,176,207,206,209,176,206,207,206,209,176,0,0,212,212,212,0,0,0,46,54,211,46,211,211,211,212,211,212,211,211,212,211,212,211,212,212,212,211,212,211,212,211,212,211,212,211,212,212,212,212,211,211,211,211,46,54,212,211,46,212,211,212,211,212,211,212,211,212,211,212,211,211,211,54,211,271,46,211,211,212,212,211,271,46,271,46,212,211,54,212,211,211,211,212,212,212,211,46,54,211,46,54,211,212,211,212,211,212,211,212,211,212,211,212,211,212,211,212,211,0,0,0,0,0,0,0,0,214,0,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,0,0,0,219,219,219,213,213,220,213,219,220,213,219,220,213,220,213,219,220,219,220,213,213,219,220,213,219,220,213,219,219,220,220,213,219,220,219,220,219,219,219,219,220,220,220,220,213,219,220,213,219,220,213,219,220,213,219,220,213,213,220,213,213,220,213,219,220,213,213,213,219,220,213,220,213,219,220,219,220,213,219,220,213,219,220,213,219,220,213,219,220,213,219,220,213,219,220,213,219,220,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,78,78,78,78,78,0,0,78,78,78,78,78,78,78,78,78,78,78,78,0,78,0,0,0,0,108,33,223,223,33,33,33,108,222,223,33,108,222,223,33,33,33,33,223,33,33,223,223,108,222,223,108,222,223,223,33,33,223,33,223,33,33,223,33,33,33,33,108,222,223,33,108,222,223,33,108,222,223,223,33,108,222,223,223,223,33,223,223,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,108,108,222,223,33,108,222,223,33,33,33,33,33,33,33,33,33,33,33,33,223,223,33,33,108,33,33,223,33,223,33,108,33,108,222,223,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,108,222,223,33,33,223,33,108,222,223,223,223,223,33,223,33,33,33,33,223,33,223,33,223,33,223,223,33,33,33,33,223,33,33,108,222,223,33,223,222,33,223,223,33,33,33,33,223,33,33,33,33,223,33,223,33,33,33,223,33,33,108,222,223,108,33,33,33,33,108,222,223,33,108,222,223,33,108,222,223,223,33,33,33,108,222,223,33,108,222,223,33,108,222,223,33,222,33,108,222,223,33,33,33,33,222,0,0,0,0,0,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,181,181,181,181,181,181,181,0,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,133,134,77,77,77,77,77,133,133,132,133,132,133,133,132,134,0,132,77,134,77,77,133,134,77,133,134,0,132,134,134,134,77,132,134,134,77,77,77,134,132,132,133,134,0,0,0,133,77,134,134,133,132,134,134,132,0,77,77,132,132,133,77,272,133,134,272,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,132,132,77,77,133,133,134,134,132,77,133,134,132,77,133,134,132,132,132,132,77,77,77,77,133,133,133,133,134,134,134,134,132,132,77,77,133,133,134,134,132,77,133,134,52,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,132,134,132,132,132,77,133,134,133,134,132,77,133,134,132,77,133,134,272,133,134,272,133,134,52,132,77,133,134,52,132,77,133,134,132,77,133,134,132,77,133,134,132,132,77,77,133,133,134,134,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,132,77,133,134,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,273,273,273,229,229,0,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,0,229,229,229,229,229,229,0,229,229,229,229,229,229,229,0,229,229,229,229,229,229,229,0,0,0,0,230,0,230,230,230,230,230,230,0,230,230,230,230,230,230,230,0,230,230,230,230,230,230,0,230,0,230,230,230,230,230,230,230,0,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,0,231,231,231,231,231,231,231,231,231,231,231,231,231,0,0,0,0,0,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,233,233,233,234,235,236,236,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,237,237,233,234,235,236,237,233,234,235,236,237,237,237,233,233,237,237,233,235,236,236,237,237,237,237,234,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,234,0,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,237,233,234,235,236,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,0,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,274,275,276,277,278,279,280,281,282,283,284,274,275,285,283,278,281,282,283,276,277,278,279,280,282,274,275,277,282,284,274,275,226,226,226,226,226,226,226,226,226,226,226,226,226,226,0,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,286,286,286,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,61,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224],"f":[0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[1,[-1]]],[[1,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,0,[5,-1,[]],[5,-1,[]],[-1,[[6,[[1,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[[1,[-1]],[1,[-1]]],2,3],[5,2],[[[1,[-1]],[1,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,0,0,[[[1,[-1]],11],12,[13,3]],[[[1,[-1]],11],12,3],[14,[[1,[-1]]],3],[15,[[1,[-1]]],3],[-1,-1,[]],[-1,[[1,[-1]]],3],0,[[-1,-2],14,[16,17],18],0,[[[1,[-1]],-2],2,3,19],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],9,3],[[[1,[-1]]],9,3],0,[[],[[6,[24,25]]]],0,0,0,0,[[],[[1,[-1]]],3],[[],[[1,[-1]]],3],[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,[[[1,[-1]],[1,[-1]]],[[27,[26]]],3],[[]],0,0,0,[[[1,[-1]],-2],6,3,28],0,0,0,[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],0,0,[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[],5],[[-1,[33,[-2]]],[[34,[-2]]],[],[]],0,[[],[[35,[-1,-2]]],3,[[36,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],[[35,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-2,[33,[-1]],[37,[-1]],5,[38,[-1]]],[[6,[[2,[[34,[[38,[-1]]]],[39,[-1]]]],40]]],3,[[41,[-1]]]],[5,2],[[[35,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[-1,-1,[]],[[],5],0,[-1,-2,[],[]],[[],[[6,[24,25]]]],0,[[]],[[[35,[-1,-2]],[35,[-1,-2]]],9,3,[[36,[-1]]]],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,[42,[-2]],[44,[[43,[-2]]]]],[[43,[-2]]],[],[]],[[-1,[44,[[38,[-2]]]]],[[34,[[2,[29,[34,[-2]]]]]]],[],[]],[-1,45,[]],[[-1,[33,[-2]],[44,[[46,[-2]]]]],[[46,[-2]]],[],[]],[[-2,[39,[-1]],[39,[-1]]],[[6,[47,40]]],48,[[41,[-1]]]],0,[[-2,-1],[[39,[-1]]],3,[[41,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[37,[-1]]],[[37,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,0,0,0,0,0,[[[37,[-1]],11],12,[13,3]],[-1,-1,[]],0,0,[[],5],[-1,-2,[],[]],0,[[],[[6,[24,25]]]],0,0,0,[[-2,[33,[-1]]],[[6,[[37,[-1]],40]]],3,[[41,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],0,0,[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,[[-2,-3],[[6,[[38,[-1]],40]]],3,[[41,[-1]]],49],[[-2,-3],[[6,[[50,[-1]],40]]],3,[[41,[-1]]],49],[[-2,[51,[-3,-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]],52],[[-2,[53,[-1]]],[[6,[[50,[-1]],40]]],3,[[41,[-1]]]],[[-2,[33,[-1]],[54,[-1]]],[[6,[[50,[-1]],40]]],3,[[41,[-1]]]],[[-2,[33,[-1]],[46,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[33,[-1]],-3],[[6,[[50,[-1]],40]]],3,[[41,[-1]]],49],[[[38,[-1]],-2,[38,[-1]]],[[6,[47,40]]],3,[[41,[-1]]]],[[[50,[-1]],-2,[50,[-1]]],[[6,[47,40]]],3,[[41,[-1]]]],[[-2,-3],[[6,[[38,[-1]],40]]],3,[[41,[-1]]],[[55,[-1]]]],[[[38,[-1]],-2,-1],[[6,[47,40]]],3,[[41,[-1]]]],[[-2,[33,[-1]],-3],[[6,[[38,[-1]],40]]],3,[[41,[-1]]],49],[[-2,-1,[39,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[[38,[-1]],-2,-1],[[6,[47,40]]],3,[[41,[-1]]]],[[[50,[-1]],-2,-1],[[6,[47,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2,[33,[-1]]],[[6,[[2,[[39,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[-1,[[56,[[39,[-2]]]]],[],[]],[[[38,[-1]]],[[56,[[39,[-1]]]]],3],[[[50,[-1]]],[[56,[[39,[-1]]]]],3],[[-2,[33,[-1]],47],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[27,[[46,[-1]]]],[33,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[27,[[54,[-1]]]],[33,[-1]]],[[6,[[50,[-1]],40]]],3,[[41,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[44,[[39,[-1]]]]],[[38,[-1]]],3],[[5,[44,[[39,[-1]]]]],[[50,[-1]]],3],[[[38,[-1]]],[[38,[-1]]],[4,48]],[[[50,[-1]]],[[50,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-2,[33,[-1]],[39,[-1]],[56,[57]]],[[6,[[50,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[39,[-1]],[38,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[38,[-1]],[38,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[38,[-1]],[38,[-1]],58,[0,[58,[0,[-1,[38,[-1]]]]]],47],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[38,[-1]],[38,[-1]],[38,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[44,[[38,[-1]]]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,59,[39,[-1]],[56,[57]],[0,[59,[0,[-1,[39,[-1]]]]]],47],[[6,[[50,[-1]],40]]],3,[[41,[-1]]]],[[-2,59,[39,[-1]],[56,[57]],[0,[59,[0,[-1,[39,[-1]]]]]]],[[6,[[2,[[50,[-1]],[39,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[38,[-1]],[38,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[38,[-1]],[50,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[38,[-1]],-2,[38,[-1]]],2,3,[[41,[-1]]]],[[[50,[-1]],-2,[50,[-1]]],2,3,[[41,[-1]]]],[[[50,[-1]],[33,[-1]]],29,3],[[[38,[-1]],[33,[-1]]],29,3],[[[38,[-1]],11],12,3],[[[50,[-1]],11],12,3],[-1,-1,[]],[[[50,[-1]]],[[38,[-1]]],3],[[[38,[-1]]],[[50,[-1]]],3],[-1,-1,[]],[[[39,[-1]],[39,[-1]]],[[38,[-1]]],3],[[[50,[-1]],[33,[-1]]],[[27,[[60,[-1]]]]],3],[[[50,[-1]],[33,[-1]]],[[27,[[54,[-1]]]]],3],[[[50,[-1]],[33,[-1]]],[[27,[[53,[-1]]]]],3],[[[38,[-1]]],[[39,[-1]]],3],[[[50,[-1]]],[[39,[-1]]],3],[[[38,[-1]],-2,47,[38,[-1]]],2,3,[[41,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1]],-2],[[6,[47,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[6,[47,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[6,[47,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[6,[47,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2,[37,[-1]]],[[6,[47,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[6,[47,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[6,[47,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[6,[47,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[6,[47,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[6,[47,40]]],3,[[41,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[-2,47,[38,[-1]],[38,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,47,[50,[-1]],[50,[-1]]],[[6,[[50,[-1]],40]]],3,[[41,[-1]]]],[[-2,47,[61,[-1]],[61,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[]],[[]],[[[38,[-1]],[33,[-1]]],[[27,[[46,[-1]]]]],3],[[[38,[-1]]],[[39,[-1]]],3],[[[50,[-1]]],[[39,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1]],[33,[-1]]],[[27,[[61,[-1]]]]],3],0,0,[[],[[62,[2]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[63,63],[[-1,-2],2,[],[]],[[],63],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[63]]],7],[5,2],[[63,63],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[63,11],12],[[63,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[63,[[27,[64]]]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[],[[44,[63]]]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[27,[65]],[27,[[66,[45,29]]]]],67],0,[[],67],[5,-1,[]],[5,-1,[]],[-1,[[6,[67]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,[[67,11],12],[-1,-1,[]],[[65,[27,[[66,[45,29]]]]],[[6,[67,68]]]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],0,[[]],0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[],65],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[[70,[69]],[43,[69]]],[[62,[2]]]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[70,[69]],71,9],[[62,[2]]]],[[[42,[69]],5,5,63],[[70,[69]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],72],[[],73],[[],74],[[],75],[[],76],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[72]]],7],[-1,[[6,[73]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[72,72],9],[[73,73],9],[[74,74],9],[[75,75],9],[[76,76],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[72,11],12],[[73,11],12],[[74,11],12],[[75,11],12],[[76,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[65,[27,[[66,[45,29]]]]],[[6,[72,68]]]],[[],65],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,9],[76,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[27,[65]],[27,[[66,[45,29]]]]],72],[[[27,[65]]],65],0,0,[[]],[[]],[[]],[[]],[[]],0,0,[[],65],0,0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[60,[-1]]],[[60,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[[60,[-1]]],77,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[60,[-1]],[60,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[60,[-1]],11],12,[13,3]],[[[60,[-1]],[33,[-1]],78,-2],[[79,[2]]],3,80],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[[60,[-1]]],[[54,[-1]]],3],[[[60,[-1]],-2],2,[16,3],19],[[],5],[[[60,[-1]],[33,[-1]]],[[2,[5,9]]],3],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],0,[-1,5,[]],[[-1,[42,[-2]],[44,[[43,[-2]]]],[43,[-2]],[43,[-2]]],[[34,[[43,[-2]]]]],[],[]],[[-1,[33,[-2]],[46,[-2]],[46,[-2]],[54,[-2]]],[[81,[-2]]],[],[]],[[-1,[42,[-2]],[44,[[43,[-2]]]]],[[34,[[43,[-2]]]]],[],[]],[[-1,[42,[-2]],[44,[[43,[-2]]]]],[[43,[-2]]],[],[]],0,[-1,9,[]],0,[[-1,[33,[-2]],[44,[[46,[-2]]]]],[[46,[-2]]],[],[]],[[-1,-3,[82,[-2]],[42,[-2]],47,[44,[[38,[-2]]]],[38,[-2]],[38,[-2]]],[[6,[[34,[[38,[-2]]]],40]]],[],[],[[41,[-2]]]],[[-1,-3,[37,[-2]],[33,[-2]],[44,[[38,[-2]]]],[38,[-2]],[50,[-2]],47],[[6,[[2,[[38,[-2]],[38,[-2]],[50,[-2]]]],40]]],[],[],[[41,[-2]]]],[[-1,-3,[82,[-2]],[42,[-2]],47,[44,[[38,[-2]]]]],[[6,[[34,[[38,[-2]]]],40]]],[],[],[[41,[-2]]]],[[-1,-3,[82,[-2]],[42,[-2]],47,[44,[[38,[-2]]]]],[[6,[[38,[-2]],40]]],[],[],[[41,[-2]]]],[[-1,-3,[33,[-2]],[37,[-2]],[61,[-2]],[38,[-2]],[38,[-2]],[50,[-2]],47],[[6,[[2,[[38,[-2]],[38,[-2]],[50,[-2]]]],40]]],[],[],[[41,[-2]]]],0,0,0,[[[83,[-1,-2]]],5,3,[[84,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[83,[-1,-2]]],[[83,[-1,-2]]],3,[[84,[-1]]]],[[-1,-2],2,[],[]],[-2,[[62,[[83,[-1,-2]]]]],3,[[84,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[83,[-1,-2]]],5,3,[[84,[-1]],13]],[[[83,[-1,-2]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3,[[84,[-1]],13]],[[[83,[-1,-2]],11],12,[13,3],[13,[84,[-1]]]],[-1,-1,[]],[[[83,[-1,-2]]],9,3,[[84,[-1]],13]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[83,[-1,-2]]],45,3,[[84,[-1]]]],[-2,[[83,[-1,-2]]],3,[[84,[-1]]]],[[]],[[[83,[-1,-2]],[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3,[[84,[-1]],13]],[[[83,[-1,-2]],-3,[37,[-1]],[33,[-1]],[44,[[38,[-1]]]],[38,[-1]],[50,[-1]],47],[[62,[[2,[[38,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[84,[-1]]],[[41,[-1]]]],[[[83,[-1,-2]],-3,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[38,[-1]],40]]],3,[[84,[-1]]],[[41,[-1]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[-2,[82,[-1]],[42,[-1]],[38,[-1]],[38,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[82,[-1]],[42,[-1]],[44,[[38,[-1]]]],[27,[[38,[-1]]]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[82,[-1]],[42,[-1]],-3,[38,[-1]],[38,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]],52],[[-2,[82,[-1]],[42,[-1]],-3,[38,[-1]],[38,[-1]],[38,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]],52],[[-2,[82,[-1]],[42,[-1]],-3,[38,[-1]],[38,[-1]],[38,[-1]],[38,[-1]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]],52],0,0,0,[[[85,[-1]]],5,3],[[[86,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[85,[-1]]],[[85,[-1]]],[4,3]],[[[86,[-1]]],[[86,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[85,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[86,[-2]]]]],7,[87,3]],[5,2],[5,2],[[[85,[-1]]],5,3],[[[86,[-1]]],5,3],[[[86,[-1]],[42,[-1]],[44,[[43,[-1]]]],[43,[-1]],[43,[-1]]],[[34,[[43,[-1]]]]],3],[[[86,[-1]],[33,[-1]],[46,[-1]],[46,[-1]],[54,[-1]]],[[81,[-1]]],3],[[[86,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[34,[[43,[-1]]]]],3],[[[85,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[86,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[85,[-1]],11],12,[13,3]],[[[86,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[85,[-1]]],[[86,[-1]]],3],[[[85,[-1]]],9,3],[[[86,[-1]]],9,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[5,[[85,[-1]]],3],[[]],[[]],[[[85,[-1]],-2],6,3,28],[[[86,[-1]],-2],6,[88,3],28],[[[85,[-1]],[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3],[[[86,[-1]],[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3],[[[86,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]],[38,[-1]],[38,[-1]]],[[6,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[85,[-1]],-2,[37,[-1]],[33,[-1]],[44,[[38,[-1]]]],[38,[-1]],[50,[-1]],47],[[6,[[2,[[38,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[[[86,[-1]],-2,[37,[-1]],[33,[-1]],[44,[[38,[-1]]]],[38,[-1]],[50,[-1]],47],[[6,[[2,[[38,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[[[86,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[85,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[[86,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[89,[-1]]],5,3],[[[90,[-1]]],5,3],[[[91,[-1]]],5,3],[[[92,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[89,[-1]]],[[89,[-1]]],[4,3]],[[[90,[-1]]],[[90,[-1]]],[4,3]],[[[91,[-1]]],[[91,[-1]]],[4,3]],[[[92,[-1]]],[[92,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[90,[-1]]],[93,3]],[[],[[91,[-1]]],[93,3]],[[],[[92,[-1]]],[93,3]],[[],[[94,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[90,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[91,[-2]]]]],7,3],[-1,[[6,[[92,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[94,[-1]]],-1,3],[[[89,[-1]]],5,3],[[[90,[-1]]],5,3],[[[91,[-1]]],5,3],[[[92,[-1]]],5,3],[[[89,[-1]],[42,[-1]],[44,[[43,[-1]]]],[43,[-1]],[43,[-1]]],[[34,[[43,[-1]]]]],3],[[[89,[-1]],[33,[-1]],[46,[-1]],[46,[-1]],[54,[-1]]],[[81,[-1]]],3],[[[89,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[34,[[43,[-1]]]]],3],[[[89,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[90,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[91,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[92,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[95,[-1]],11],12,13],[[[89,[-1]],11],12,[13,3]],[[[90,[-1]],11],12,[13,3]],[[[91,[-1]],11],12,[13,3]],[[[92,[-1]],11],12,[13,3]],[[[94,[-1]],11],12,[13,3]],[[[96,[-1]],11],12,[13,3]],[[[97,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[92,[-1]]],[[89,[-1]]],3],[[[91,[-1]]],[[89,[-1]]],3],[[[90,[-1]]],[[89,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[89,[-1]]],9,3],[[[90,[-1]]],9,3],[[[91,[-1]]],9,3],[[[92,[-1]]],9,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[94,[-1]],-1,-1],[[6,[9,[95,[-1]]]]],3],[[[33,[-1]],[99,[[98,[78]]]],[100,[-1,[89,[-1]]]]],2,3],[[[42,[-1]],[99,[[98,[78]]]],[100,[-1,[89,[-1]]]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[94,[-1]]],5,3],[[[94,[-1]],-1],[[6,[[27,[-1]],[95,[-1]]]]],3],[[[101,[-1]],[102,[-1]]],[[94,[-1]]],3],[[[101,[-1]],[102,[-1]],5],[[94,[-1]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[94,[-1]],-1,-1],[[6,[[2,[[97,[-1]],9]],[95,[-1]]]]],3],[[[94,[-1]],-1],[[6,[[96,[-1]],[95,[-1]]]]],3],[[[94,[-1]]],-1,3],[[[94,[-1]],5],5,3],[[[90,[-1]],-2],6,3,28],[[[91,[-1]],-2],6,3,28],[[[92,[-1]],-2],6,3,28],[[[89,[-1]],[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3],[[[90,[-1]],[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3],[[[91,[-1]],[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3],[[[92,[-1]],[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3],[[[89,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]],[38,[-1]],[38,[-1]]],[[6,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[89,[-1]],-2,[37,[-1]],[33,[-1]],[44,[[38,[-1]]]],[38,[-1]],[50,[-1]],47],[[6,[[2,[[38,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[[[90,[-1]],-2,[37,[-1]],[33,[-1]],[44,[[38,[-1]]]],[38,[-1]],[50,[-1]],47],[[6,[[2,[[38,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[[[91,[-1]],-2,[37,[-1]],[33,[-1]],[44,[[38,[-1]]]],[38,[-1]],[50,[-1]],47],[[6,[[2,[[38,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[[[92,[-1]],-2,[37,[-1]],[33,[-1]],[44,[[38,[-1]]]],[38,[-1]],[50,[-1]],47],[[6,[[2,[[38,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[[[94,[-1]],-2,[103,[-1]],[39,[-1]],[39,[-1]],[39,[-1]]],[[6,[[39,[-1]],40]]],3,[[41,[-1]]]],[[[89,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[89,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[[90,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[[91,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[[[92,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[96,[-1]],-1,-1,-1,[101,[-1]]],9,3],[[[97,[-1]],-1,-1,-1,[27,[-1]],-1,[101,[-1]]],9,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,104,[]],[-1,104,[]],[-1,104,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[105,105],[[[106,[-1]]],[[106,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[107,11],12],[[107,11],12],[[105,11],12],[[105,11],12],[[[106,[-1]],11],12,[13,3]],[[[106,[-1]],11],12,3],[105,107],[-1,-1,[]],[108,107],[40,107],[109,107],[108,105],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[107,[[27,[104]]]],[105,[[27,[104]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[81,[-1]]],[[81,[-1]]],[4,3]],[[[110,[-1]]],[[110,[-1]]],[4,3]],[[[111,[-1,-2,-3,-4]]],[[111,[-1,-2,-3,-4]]],[4,112],[4,112],[4,3],4],[113,113],[[[114,[-1]]],[[114,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[110,[-1]]],3],[[],113],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[113]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[33,[-1]]],[[46,[-1]]],3],0,[[[81,[-1]],[81,[-1]]],9,[10,3]],[[[110,[-1]],[110,[-1]]],9,[10,3]],[[[111,[-1,-2,-3,-4]],[111,[-1,-2,-3,-4]]],9,[10,112],[10,112],[10,3],10],[[113,113],9],[[[114,[-1]],[114,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[115,[-1,-2]]],[[6,[[2,[[81,[-1]],5,[34,[[46,[-1]]]]]],105]]],3,[[36,[-1]]]],[[[33,[-1]],45],[[6,[[46,[-1]],105]]],3],0,[[[81,[-1]],11],12,[13,3]],[[[81,[-1]],11],[[6,[2,116]]],3],[[[81,[-1]],[33,[-1]],78,-2],[[79,[2]]],3,80],[[[110,[-1]],11],12,[13,3]],[[[111,[-1,-2,-3,-4]],11],12,[13,112],[13,112],[13,3],13],[[113,11],12],[[[117,[-1,-2,-3]],11],12,[13,112],[13,3],[13,[36,[-2]]]],[[[114,[-1]],11],12,[13,3]],[[[115,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[54,[-1]]],113,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[46,[-1]],[46,[-1]],[33,[-1]],5,-2,[100,[-1,-3]]],[[6,[[34,[[111,[[81,[-1]],[114,[-1]],-1,-3]]]],105]]],3,118,[[36,[-1]]]],[[[115,[-1,-2]]],[[6,[[34,[[111,[[81,[-1]],[114,[-1]],-1,-2]]]],105]]],3,[[36,[-1]]]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[115,[-1,-2]]],[[81,[-1]]],3,[[36,[-1]]]],0,[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[[81,[-1]]],9,3],[[[111,[[81,[-1]],-2,-1,-3]]],9,3,112,[[36,[-1]]]],[113,9],[[[110,[-1]]],9,3],[-1,9,[]],[[[81,[-1]]],9,3],[113,9],[-1,9,[]],[[[81,[-1]]],9,3],[113,9],[[[115,[-1,-2]]],[[6,[[119,[[117,[[114,[-1]],-1,-2]]]],105]]],3,[[36,[-1]]]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[-1,[33,[-2]],5],2,[],[]],[[[81,[-1]],[33,[-1]],5],2,3],[[[111,[[81,[-1]],-2,-1,-3]],[33,[-1]]],2,3,112,[[36,[-1]]]],[[[81,[-1]],[33,[-1]]],[[27,[[46,[-1]]]]],3],0,[[[46,[-1]],[46,[-1]],[33,[-1]],5,[100,[-1,-2]]],[[115,[-1,-2]]],3,[[36,[-1]]]],[[[117,[[114,[-1]],-1,-2]]],27,3,[[36,[-1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[111,[[81,[-1]],-2,-1,-3]],[111,[[81,[-1]],-2,-1,-3]]],9,3,112,[[36,[-1]]]],[[-1,[33,[-2]],[100,[-2,-3]]],[[6,[[2,[-1,-4,[110,[-2]]]],105]]],17,[],[],[]],[[[81,[-1]],[33,[-1]],[100,[-1,-2]]],[[6,[[2,[[81,[-1]],[114,[-1]],[110,[-1]]]],105]]],3,[[36,[-1]]]],[[113,-1],6,28],[[[44,[[111,[[81,[-1]],-2,-1,-3]]]]],5,3,112,[[36,[-1]]]],[-1,113,[]],[[[81,[-1]]],113,3],[[113,[33,[-1]]],[[27,[[54,[-1]]]]],3],[[[81,[-1]],[33,[-1]]],[[34,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[81,[-1]],[33,[-1]]],[[6,[[34,[-1]],108]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[100,[-1,-2]],-3,[42,[-1]]],2,3,[[36,[-1]]],[[121,[[120,[-1,-2]]]]]],[[[100,[-1,-2]],-3,[33,[-1]]],2,3,[[36,[-1]]],[[121,[[120,[-1,-2]]]]]],[[[100,[-1,-2]],-3,-4,[42,[-1]]],2,3,[[36,[-1]]],[[121,[122]]],[[121,[-2]]]],[[[100,[-1,-2]],-3,-4,[33,[-1]]],2,3,[[36,[-1]]],[[121,[122]]],[[121,[-2]]]],[[[123,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[124,[-1]]],[[124,[-1]]],[4,3]],[[[123,[-1]]],[[123,[-1]]],[4,3]],[[[100,[-1,-2]]],[[100,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[100,[-1,-2]]],5,3,[[36,[-1]]]],[[[100,[-1,-2]]],[[125,[122,[2,[-2,[61,[-1]]]]]]],3,[[36,[-1]]]],[[],[[100,[-1,-2]]],[93,3],[93,[36,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[124,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[123,[-2]]]]],7,[87,3]],[-1,[[6,[[100,[-2,-3]]]]],7,[87,3],[87,[36,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[124,[-1]]],5,3],[[[123,[-1]]],5,3],[[[123,[-1]],[42,[-1]],[44,[[43,[-1]]]],[43,[-1]],[43,[-1]]],[[34,[[43,[-1]]]]],3],[[[123,[-1]],[33,[-1]],[46,[-1]],[46,[-1]],[54,[-1]]],[[81,[-1]]],3],[[[123,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[34,[[43,[-1]]]]],3],[[[123,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[124,[-1]],11],12,[13,3]],[[[123,[-1]],11],12,[13,3]],[[[100,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[[[120,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[-1,-1,[]],[[[124,[-1]]],[[123,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-3]]],[[120,[-2,-3]]],[[121,[122]]],3,[[36,[-2]]]],[-1,-1,[]],[[[100,[-1,-2]],[61,[-1]]],[[27,[5]]],3,[[36,[-1]]]],[[[100,[-1,-2]],122],[[27,[5]]],3,[[36,[-1]]]],[[[123,[-1]]],9,3],[[[100,[-1,-2]]],9,3,[[36,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[100,[-1,-2]]],9,3,[[36,[-1]]]],[[[100,[-1,-2]]],29,3,[[36,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[100,[-1,-2]],[33,[-1]],[46,[-1]]],[[27,[[2,[-2,[61,[-1]]]]]]],3,[[36,[-1]]]],[[[100,[-1,-2]],122],[[27,[-2]]],3,[[36,[-1]]]],[[[100,[-1,-2]]],5,3,[[36,[-1]]]],[[],[[100,[-1,-2]]],3,[[36,[-1]]]],[[-1,-4],[[120,[-2,-3]]],[[121,[122]]],3,[[36,[-2]]],[[121,[-3]]]],[[[42,[-1]],[34,[-3]]],[[100,[-1,-2]]],3,[[36,[-1]]],[[121,[[120,[-1,-2]]]]]],[[[33,[-1]],[34,[-3]]],[[100,[-1,-2]]],3,[[36,[-1]]],[[121,[[120,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[124,[-1]],-2],6,3,28],[[[123,[-1]],-2],6,[88,3],28],[[[100,[-1,-2]],-3],6,[88,3],[88,[36,[-1]]],28],[[[124,[-1]],[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3],[[[123,[-1]],[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3],[[[123,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]],[38,[-1]],[38,[-1]]],[[6,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[123,[-1]],-2,[37,[-1]],[33,[-1]],[44,[[38,[-1]]]],[38,[-1]],[50,[-1]],47],[[6,[[2,[[38,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[[[123,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[123,[-1]],-2,[82,[-1]],[42,[-1]],47,[44,[[38,[-1]]]]],[[6,[[38,[-1]],40]]],3,[[41,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[126,[-1]],-2,[33,[-1]]],[[6,[[2,[[39,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[33,[-1]]],[[6,[[2,[[39,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[27,[[126,[-1]]]],[33,[-1]]],[[6,[[2,[[39,[-1]],[38,[-1]],[50,[-1]]]],40]]],3,[[41,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[127,[-1]]],[[127,[-1]]],[4,3]],[[[126,[-1]]],[[126,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[127,[-1]],[127,[-1]]],9,[10,3]],[[[126,[-1]],[126,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[127,[-1]],11],12,[13,3]],[[[127,[-1]],[33,[-1]],78,-2],[[79,[2]]],3,80],[[[126,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[[126,[-1]],-2],2,3,19],[[-2,[33,[-1]],[38,[-1]],[50,[-1]]],[[6,[[39,[-1]],40]]],3,[[41,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[127,[-1]]],9,3],[[[127,[-1]]],9,3],[[[127,[-1]]],9,3],[[[127,[-1]]],9,3],[[[127,[-1]]],9,3],[[[127,[-1]]],9,3],[[[127,[-1]]],9,3],[[[127,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[128,128],[[[129,[-1]]],[[129,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[129,[-1]],[129,[-1]]],26,3],[[-1,-2],26,[],[]],[[],128],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[128]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[129,[-2]]]]],7,3],[5,2],[5,2],[[128,128],9],[[[129,[-1]],[129,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[128,11],12],[[128,11],12],[[[129,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[44,[130]]],[[27,[-1]]],[]],[131,-1,[]],[77,-1,[]],[132,-1,[]],[133,-1,[]],[134,-1,[]],[135,-1,[]],[136,-1,[]],[14,-1,[]],[-1,128,[]],[[-1,-2],14,[16,17],18],[[[129,[-1]],-2],2,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,29,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],-1,[]],[[],-1,[]],[[[129,[-1]],[129,[-1]]],[[27,[26]]],3],[[]],[[]],[[128,-1],6,28],[[[129,[-1]],-2],6,3,28],[-1,[[34,[130]]],[]],[-1,[[27,[131]]],[]],[-1,[[27,[77]]],[]],[-1,[[27,[132]]],[]],[-1,[[27,[133]]],[]],[-1,[[27,[134]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[128,[[27,[64]]]],[-1,29,[]],[-1,[[27,[137]]],[]],[-1,137,[]],[-1,[[27,[135]]],[]],[-1,[[27,[136]]],[]],[-1,136,[]],[-1,[[27,[14]]],[]],[-1,14,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[],[[44,[128]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[103,[-1]]],[[139,[-1,138]]],3],[[[103,[-1]]],[[139,[-1,140]]],3],[[[103,[-1]]],[[139,[-1,141]]],3],[[[103,[-1]]],[[139,[-1,142]]],3],[[[143,[-1]],[44,[-1]]],[[2,[[34,[-1]],-1]]],3],[144,144],[[[103,[-1]]],[[103,[-1]]],[4,3]],[[[101,[-1]]],[[101,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[101,[-1]],[56,[-1]]],-1,3],[[[103,[-1]],144],[[143,[-1]]],3],0,0,[[],[[103,[-1]]],3],[[],[[101,[-1]]],[93,3]],[[],[[102,[-1]]],[93,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[144,11],12],[[[143,[-1]],11],12,[13,3]],[[[103,[-1]],11],12,[13,3]],[[[101,[-1]],11],12,[13,3]],[[[102,[-1]],11],12,[13,3]],[5,144],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[102,[-1]],[129,[-1]]],[[27,[[56,[-1]]]]],3],[[[101,[-1]],[56,[-1]]],-1,3],[[[101,[-1]],[56,[-1]]],-1,3],[[[101,[-1]],[56,[-1]]],-1,3],[[[101,[-1]],[56,[-1]]],-1,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[[102,[-1]],[129,[-1]],[56,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[56,[-2]]],[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[145,[-1,-2,-3]],[33,[-3]]],2,[146,93,112,147,13],112,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[148,[-1]],[33,[-1]],[46,[-1]]],[[62,[[2,[[46,[-1]],[46,[-1]]]],108]]],3],[[[150,[[149,[-1]]]],[33,[-1]],[46,[-1]]],[[62,[[2,[[46,[-1]],[46,[-1]]]],108]]],3],[[[151,[-1]],58,[33,[-1]],[46,[-1]]],[[62,[[2,[[46,[-1]],[46,[-1]]]],108]]],3],[[[145,[58,[149,[-1]],-1]],58,[33,[-1]],[46,[-1]]],[[62,[[2,[[46,[-1]],[46,[-1]]]],108]]],3],[[[151,[-1]],58,[33,[-1]],[46,[-1]]],[[62,[[2,[[46,[-1]],[46,[-1]]]],105]]],3],[[[145,[58,[149,[-1]],-1]],58,[33,[-1]],[46,[-1]]],[[62,[[2,[[46,[-1]],[46,[-1]]]],105]]],3],0,0,0,0,0,[[[150,[-1]]],[[150,[-1]]],4],[[[149,[-1]]],[[149,[-1]]],[4,3]],[[[152,[-1]]],[[152,[-1]]],[4,3]],[[[153,[-1]]],[[153,[-1]]],[4,3]],[[[154,[-1]]],[[154,[-1]]],[4,3]],[58,58],[59,59],[[[145,[-1,-2,-3]]],[[145,[-1,-2,-3]]],[4,146],4,[4,3]],[[[155,[-1,-3,-2]]],[[155,[-1,-3,-2]]],[4,146],[4,3],[4,[156,[-2]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[148,[-1]],[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[150,[[149,[-1]]]],[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],0,0,[[[151,[-1]],58,[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[145,[58,[149,[-1]],-1]],58,[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],0,0,0,[[],58],[[],59],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[150,[-1]],[150,[-1]]],9,10],[[[149,[-1]],[149,[-1]]],9,[10,3]],[[[154,[-1]],[154,[-1]]],9,[10,3]],[[58,58],9],[[59,59],9],[[[145,[-1,-2,-3]],[145,[-1,-2,-3]]],9,[10,146],10,[10,3]],[[[155,[-1,-3,-2]],[155,[-1,-3,-2]]],9,[10,146],[10,3],[10,[156,[-2]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[151,[-1]],58,[46,[-1]],[46,[-1]],[46,[-1]],[33,[-1]]],[[46,[-1]]],3],[[[145,[58,[149,[-1]],-1]],58,[46,[-1]],[46,[-1]],[46,[-1]],[33,[-1]]],[[46,[-1]]],3],[[[157,[-1]],[33,[-1]],[54,[-1]]],[[27,[[60,[-1]]]]],3],[[[150,[[154,[-1]]]],[33,[-1]],[54,[-1]]],[[27,[[60,[-1]]]]],3],[[[158,[-1]],59,[33,[-1]],[54,[-1]]],[[27,[[60,[-1]]]]],3],[[[145,[59,[154,[-1]],-1]],59,[33,[-1]],[54,[-1]]],[[27,[[60,[-1]]]]],3],[[[150,[-1]],11],12,13],[[[149,[-1]],11],12,[13,3]],[[[152,[-1]],11],12,[13,3]],[[[153,[-1]],11],12,[13,3]],[[[154,[-1]],11],12,[13,3]],[[58,11],12],[[59,11],12],[[[145,[-1,-2,-3]],11],12,[13,146],13,[13,3]],[[[155,[-1,-3,-2]],11],12,[13,146],[13,3],[13,[156,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[145,[-1,-3,-2]]],[[155,[-1,-3,-2]]],146,3,[[156,[-2]]]],[-1,-1,[]],[[[145,[-1,-2,-3]],-1],[[150,[-2]]],[146,93,112,147,13],112,3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[58,-1],2,19],[[59,-1],2,19],0,0,0,[-1,5,[]],[58,5],[59,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[157,[-1]],[33,[-1]],[60,[-1]]],[[54,[-1]]],3],[[[150,[[154,[-1]]]],[33,[-1]],[60,[-1]]],[[54,[-1]]],3],[[[158,[-1]],59,[33,[-1]],[60,[-1]]],[[54,[-1]]],3],[[[145,[59,[154,[-1]],-1]],59,[33,[-1]],[60,[-1]]],[[54,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,0,0,[[],[[145,[-1,-2,-3]]],[146,93,112,147,13],112,3],[[[150,[-1]]],[[145,[-2,-1,-3]]],112,[146,93,112,147,13],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[159,[-2]]],[],[]],[[-1,[33,[-2]]],[[62,[[159,[-2]]]]],[],[]],[[[149,[-1]],[33,[-1]]],[[62,[[159,[-1]]]]],3],[[[152,[-1]]],[[159,[-1]]],3],[[[153,[-1]]],[[159,[-1]]],3],[[[154,[-1]],[33,[-1]]],[[62,[[159,[-1]]]]],3],0,0,0,[[[148,[-1]],[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[150,[[149,[-1]]]],[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[151,[-1]],58,[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[145,[58,[149,[-1]],-1]],58,[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[145,[-1,-2,-3]]],5,[146,93,112,147,13],112,3],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[33,[-2]]],27,[],[]],[[[150,[-2]],[33,[-1]]],27,3,[[156,[-1]]]],[[[149,[-1]],[33,[-1]]],27,3],[[[154,[-1]],[33,[-1]]],27,3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[160,-2,[42,[-1]]],[[62,[[82,[-1]],40]]],3,[[41,[-1]]]],[[160,[44,[0]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[160,[44,[[43,[-1]]]],[42,[-1]],[161,[-1]],[34,[[43,[-1]]]],[100,[-1,-2]],5],[[62,[[2,[[162,[-1]],0]]]]],3,[[36,[-1]]]],[[160,[44,[[43,[-1]]]],[42,[-1]],[100,[-1,-2]],5],[[62,[[162,[-1]]]]],3,[[36,[-1]]]],[160,[[62,[2]]]],0,[160,160],[163,163],[164,164],[165,165],[166,166],[167,167],[168,168],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[164]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[160,160],9],[[163,163],9],[[164,164],9],[[165,165],9],[[166,166],9],[[167,167],9],[[168,168],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[160,11],12],[[163,11],12],[[163,11],12],[[164,11],12],[[164,11],12],[[165,11],12],[[166,11],12],[[167,11],12],[[168,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[164]]],3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[163,-1],2,19],[[164,-1],2,19],[[165,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[163,169],0,[[29,[34,[163]],5,166],[[62,[160]]]],[45,163],[[160,[42,[-1]]],5,3],[160,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[164,-1],6,28],0,0,[[160,-2,[42,[-1]],[162,[-1]],[82,[-1]],[0,[[170,[-1]]]],[100,[-1,-3]],[27,[[44,[[172,[[171,[-1]]]]]]]]],[[62,[[34,[[38,[-1]]]]]]],3,[[41,[-1]]],[[36,[-1]]]],[[160,-2,[42,[-1]],[162,[-1]],[100,[-1,-3]]],[[62,[2]]],3,[[41,[-1]]],[[36,[-1]]]],[164,-1,3],[164,-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[165,[42,[-1]]],[[43,[-1]]],3],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[135,[[62,[164]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[160,5],[[62,[160]]]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[170,[-1]]],[[170,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[],[[82,[-1]]],[93,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[82,[-1]],-2,-1],[[62,[[38,[-1]]]]],3,52],[[[82,[-1]],[43,[-1]],[42,[-1]]],[[62,[[38,[-1]]]]],3],[[[82,[-1]],-1],[[62,[[39,[-1]]]]],3],[[[82,[-1]],-2],[[62,[[39,[-1]]]]],3,52],[[[82,[-1]],-2],[[62,[[39,[-1]]]]],3,52],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[82,[-1]],-2,-1],2,3,[[41,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],160],[[[27,[[2,[160,[100,[-1,-2]]]]]],[43,[-1]],[42,[-1]],5],[[62,[[2,[[34,[[162,[-1]]]],5]]]]],3,[[36,[-1]]]],[[[27,[[2,[160,[100,[-1,-2]]]]]],[43,[-1]],[42,[-1]],5],[[62,[[2,[[34,[[43,[-1]]]],5,[34,[[43,[-1]]]]]]]]],3,[[36,[-1]]]],[[[27,[[2,[160,[100,[-1,-2]]]]]],[43,[-1]],[43,[-1]],[42,[-1]],5],[[62,[[2,[[34,[[43,[-1]]]],5,[34,[[43,[-1]]]]]]]]],3,[[36,[-1]]]],[[[27,[[2,[160,[100,[-1,-2]]]]]],[43,[-1]],[43,[-1]],[42,[-1]],5],[[62,[[2,[[34,[[162,[-1]]]],5]]]]],3,[[36,[-1]]]],[[[27,[[2,[160,[100,[-1,-2]]]]]],[43,[-1]],[43,[-1]],[43,[-1]],[42,[-1]],5],[[62,[[2,[[34,[[162,[-1]]]],5]]]]],3,[[36,[-1]]]],[[[100,[-1,-2]]],[[172,[[44,[160]]]]],3,[[36,[-1]]]],[[[100,[-1,-2]],9],160,3,[[36,[-1]]]],0,0,0,0,0,0,[160,[[161,[-1]]],3],[[160,5],[[162,[-1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[174,[-1]]],[[174,[-1]]],[4,3]],[[[161,[-1]]],[[161,[-1]]],[4,3]],[[[162,[-1]]],[[162,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[],[[161,[-1]]],[93,3]],[[],[[162,[-1]]],[93,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],0,[[[161,[-1]],11],12,[13,3]],[[[162,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[[],5],[[],5],[[[162,[-1]]],[],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[160,[[161,[-1]]],3],[[[162,[-1]]],[],3],0,0,[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[175,[-1,-2]]],5,3,[[36,[-1]]]],[[[175,[-1,-2]]],5,3,[[36,[-1]]]],[[[172,[[176,[-1,-2]]]],[110,[-1]],5],[[175,[-1,-2]]],3,[[36,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[175,[-1,-2]]],[[27,[[177,[-1]]]]],3,[[36,[-1]]]],[[[175,[-1,-2]]],5,3,[[36,[-1]]]],[[[175,[-1,-2]]],[[175,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[[[175,[-1,-2]],[42,[-1]]],[[177,[-1]]],3,[[36,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[42,[-1]]],[[34,[[43,[-1]]]]],3],[[[175,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[[[175,[-1,-2]]],[[27,[34]]],3,[[36,[-1]]]],[-1,-1,[]],[[5,[44,[[162,[-1]]]],[172,[[176,[-1,-2]]]]],[[34,[[175,[-1,-2]]]]],3,[[36,[-1]]]],[[-1,5,[100,[-2,-3]]],[[62,[34,107]]],118,3,[[36,[-2]]]],[[],5],[-1,-2,[],[]],[[],[[34,[-1]]],3],[[],[[6,[24,25]]]],[[5,27,[172,[[176,[-1,-2]]]],[110,[-1]]],[[175,[-1,-2]]],3,[[36,[-1]]]],[[[175,[-1,-2]]],5,[178,3],[[36,[-1]]]],[[[175,[-1,-2]]],27,3,[[36,[-1]]]],[[]],[[[175,[-1,-2]],[175,[-1,-2]]],9,3,[[36,[-1]]]],[[[175,[-1,-2]],5],[[175,[-1,-2]]],[178,3],[[36,[-1]]]],[[[175,[-1,-2]]],5,3,[[36,[-1]]]],[[[175,[-1,-2]]],[[34,[-1]]],3,[[36,[-1]]]],[[[175,[-1,-2]]],5,3,[[36,[-1]]]],[[[175,[-1,-2]]],[[179,[-1]]],[178,3],[[36,[-1]]]],[44,5],[[[175,[-1,-2]],-3,[27,[[39,[-1]]]],[44,[[39,[-1]]]]],[[62,[[2,[[27,[[39,[-1]]]],[34,[[39,[-1]]]]]],40]]],3,[[36,[-1]]],[[41,[-1]]]],[[[175,[-1,-2]],-3],[[62,[2,40]]],3,[[36,[-1]]],[[41,[-1]]]],[[[175,[-1,-2]],-3,[44,[[39,[-1]]]]],[[62,[[34,[[39,[-1]]]],40]]],3,[[36,[-1]]],[[41,[-1]]]],[[[175,[-1,-2]],-3,44],[[62,[40]]],3,[[36,[-1]]],[[41,[-1]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]],164],[[43,[-1]]],3],[131,[[43,[-1]]],3],[[[43,[-1]]],[[43,[-1]]],[4,3]],[[-1,-2],2,[],[]],[-1,[[43,[-1]]],3],[[[43,[-1]],[42,[-1]]],29,3],[5,-1,[]],[5,-1,[]],[-1,[[6,[[43,[-2]]]]],7,[87,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[],[[180,[-1]]],3],[[],[[43,[-1]]],3],[[[43,[-1]],[43,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[43,[-1]],11],12,[13,3]],[[[43,[-1]],[42,[-1]],78],29,3],[-1,-1,[]],[[[43,[-1]]],[[27,[-1]]],3],[[-1,-2],14,[16,17],18],[[[43,[-1]]],[[27,[5]]],3],[[[43,[-1]]],[[27,[5]]],3],[[[43,[-1]]],[[27,[5]]],3],[[[43,[-1]],-2],2,3,19],[[],5],[-1,-2,[],[]],[[[43,[-1]]],9,3],[[[43,[-1]]],9,3],[[[43,[-1]]],9,3],[[],[[6,[24,25]]]],[-1,[[43,[-1]]],3],[14,[[43,[-1]]],3],[[]],[[[43,[-1]],-2],6,[88,3],28],[[[43,[-1]]],164,3],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[14,[[43,[-1]]],3],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[164,[[43,[-1]]],3],0,[[[42,[-1]],-1,-1,[43,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[-1]],[43,[-1]]],[[62,[[2,[[43,[-1]],[43,[-1]]]]]]],3],[[[42,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],[43,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]]],[[43,[-1]]],3],[[[42,[-1]]],[[43,[-1]]],3],[[[42,[-1]]],[[43,[-1]]],3],[[],[[42,[-1]]],3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[42,[-1]],5],[[2,[[43,[-1]],[43,[-1]]]]],3],[[[42,[-1]],5],[[2,[[43,[-1]],[43,[-1]],[43,[-1]]]]],3],[[[42,[-1]],5],[[2,[[43,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]]]],3],[[[42,[-1]],5],[[27,[[2,[[43,[-1]],[43,[-1]]]]]]],3],[[[42,[-1]],5],[[27,[[2,[[43,[-1]],[43,[-1]],[43,[-1]]]]]]],3],[[[42,[-1]],5],[[27,[[2,[[43,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]]]]]],3],[[[42,[-1]],[43,[-1]]],[[27,[122]]],3],[[[42,[-1]],[43,[-1]]],[[27,[[2,[[34,[[43,[-1]]]],[27,[[43,[-1]]]]]]]]],3],[[[42,[-1]],[43,[-1]]],[[27,[29]]],3],[[[42,[-1]],[43,[-1]]],[[27,[122]]],3],[[[42,[-1]],[43,[-1]]],[[27,[122]]],3],[[[42,[-1]],5],[[27,[[34,[29]]]]],3],[[[42,[-1]],11],12,[13,3]],[-1,-1,[]],[[[42,[-1]]],[],3],0,0,0,0,[[[42,[-1]],[43,[-1]]],[[180,[-1]]],3],[[[42,[-1]],-1,[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],-1,[43,[-1]]],[[2,[-1,[180,[-1]]]]],3],[[[42,[-1]]],2,3],[[[42,[-1]]],2,3],[[[42,[-1]],[34,[[43,[-1]]]],[43,[-1]]],[[43,[-1]]],3],[[],5],[[[42,[-1]]],[],3],[[[42,[-1]],164,[43,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],164,[43,[-1]],[43,[-1]],[180,[-1]]],[[43,[-1]]],3],[[[42,[-1]],164,[43,[-1]],[43,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],164,[43,[-1]],[43,[-1]],[43,[-1]],[180,[-1]]],[[43,[-1]]],3],[[[42,[-1]],164,[43,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],164,[43,[-1]],[43,[-1]],[43,[-1]],[43,[-1]],[180,[-1]]],[[43,[-1]]],3],[[[42,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],45],[[43,[-1]]],3],[[[42,[-1]]],[[43,[-1]]],3],[[[42,[-1]],45],[[43,[-1]]],3],[[[42,[-1]],122],[[43,[-1]]],3],[[[42,[-1]],[44,[29]]],[[43,[-1]]],3],[[[42,[-1]],[181,[-1]]],[[43,[-1]]],3],[[[42,[-1]],45],[[43,[-1]]],3],[-1,-2,[],[]],0,[[[42,[-1]],45],[[43,[-1]]],3],[[],[[6,[24,25]]]],[[[42,[-1]],[34,[[43,[-1]]]]],[[43,[-1]]],3],[[[42,[-1]],-1],[[27,[[2,[-1,[43,[-1]]]]]]],3],[[]],0,[[[42,[-1]],[43,[-1]],[43,[-1]]],9,3],[[[42,[-1]]],9,3],[[[42,[-1]],45],62,3],[[[42,[-1]],[99,[[98,[78]]]],45],[[62,[[43,[-1]]]]],3],[[[42,[-1]],[99,[[98,[78]]]],45],[[62,[[2,[5,182,[43,[-1]],9]],183]]],3],[[[42,[-1]],45],[[62,[[43,[-1]]]]],3],[[[42,[-1]],[44,[[43,[-1]]]]],[[34,[-1]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[184,11],12],[[184,185],29],[-1,-1,[]],[[184,[44,[185]]],[[62,[2]]]],[[],5],[[184,-1],185,[[121,[29]]]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[184,185],[185,184],[[]],[[184,45],[[27,[185]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[184,184],[[62,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,104,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[183,183],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,[[183,11],12],[[183,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,[186,45],[-1,-2,[],[]],[-1,-2,[],[]],[186,186],[[-1,-2],2,[],[]],[186,131],[[186,182],[[187,[-1,[34,[130]]]]],3],[[],186],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[186,-1],29,[[188,[[44,[130]]]]]],[[186,186],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[186,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[186,131],9],[[],[[6,[24,25]]]],[[],[[0,[118]]]],[182,[[187,[-1,186]]],3],[[],[[0,[118]]]],[[],[[0,[118]]]],[186,[[0,[118]]]],[[],[[0,[118]]]],[186,[[31,[118]]]],[186,[[0,[118]]]],[[],[[0,[118]]]],[[]],[186,136],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,45,[189,[-1,-2]]],[[189,[-1,-2]]],[190,4,191],3],[[-1,192,[189,[-1,-2]]],[[189,[-1,-2]]],[190,4,191],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[193,[-1]]],[[193,[-1]]],[4,3]],[[[189,[-1,-2]]],[[189,[-1,-2]]],[4,191],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[193,[-1]],[193,[-1]]],9,[10,3]],[[[189,[-1,-2]],[189,[-1,-2]]],9,[10,191],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[[193,[-1]],11],12,3],[[[193,[-1]],11],12,[13,3]],[[[189,[182,-1]],11],12,3],[[[189,[-1,-2]],11],12,[13,191],[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,192],[[189,[-1,-2]]],[190,4,191],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[193,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[194,[-1,-2,[189,[-1,-3]]]],-4],[[194,[-1,-2,[189,[-1,-3]]]]],191,[],3,118],[[-1,[193,[-2]]],[[189,[-1,-2]]],191,3],[[[27,[-1]],-2,[193,[-3]]],[[194,[-2,-1,[189,[-2,-3]]]]],[],191,3],[[[189,[-1,-2]],[189,[-1,-2]]],[[189,[-1,-2]]],[190,4,191],3],[[]],[[]],[[[6,[-1,-2]],-3,-4],[[194,[-3,-1,[189,[-3,-5]]]]],[],[],191,118,3],[[-1,[193,[-2]]],[[194,[-1,-3,[189,[-1,-2]]]]],191,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[195,195],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[195,195],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[195,11],12],[-1,-1,[]],[[182,182],195],[195,[[27,[5]]]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[45,5,5,5,5],29],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[196,196],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[196,196],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[196,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[131,45],[[0,[118]]]],[[],[[0,[118]]]],[[131,9,45],[[0,[118]]]],[[131,9,45],[[0,[118]]]],[131,[[0,[118]]]],[[131,9,45],[[0,[118]]]],[[131,9,45],[[0,[118]]]],[[],[[0,[118]]]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[99,[[98,[78]]]],9],[[0,[118]]]],[[],[[0,[118]]]],[[],[[0,[118]]]],[182,[[187,[-1,182]]],3],[[[99,[[98,[78]]]],9,9],[[0,[118]]]],[[[99,[[98,[78]]]],9],[[0,[118]]]],[[],[[0,[118]]]],[186,[[0,[118]]]],[[[99,[[98,[78]]]],9],[[0,[118]]]],[[[99,[[98,[78]]]],9],[[0,[118]]]],[[[99,[[98,[78]]]],9],[[0,[118]]]],[[[99,[[98,[78]]]],9],[[0,[118]]]],[182,[[187,[-1,[34,[182]]]]],3],[182,[[187,[-1,[34,[182]]]]],3],[[],[[0,[118]]]],[[[99,[[98,[78]]]],9],[[0,[118]]]],[45,[[0,[118]]]],[45,[[0,[118]]]],[[],[[0,[118]]]],[[[99,[[98,[78]]]],9,9],[[0,[118]]]],[[],[[0,[118]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[172,[[176,[-1,-2]]]],[110,[-1]],5],-3,[],[],[]],[-1,[[27,[[177,[-2]]]]],[],[]],[-1,[[177,[-2]]],[],[]],[-1,-2,[],[]],[[],34],[-1,-2,[],[]],[[-1,5],5,[]],[-1,-2,[],[]],[[-1,5],5,[]],[-1,[[27,[34]]],[]],[[5,44,[172,[[176,[-1,-2]]]]],[[34,[-3]]],[],[],[]],[-1,[],[]],[[-1,5,[100,[-2,-3]]],[[6,[34,107]]],118,[],[]],[[-1,[46,[-2]],[46,[-2]],[33,[-2]],5,[172,[[100,[-2,-3]]]]],[[6,[[34,[[111,[[81,[-2]],[114,[-2]],-2,-3]]]],107]]],[],[],[]],[-1,2,[]],[-1,[],[]],[-1,[],[]],[[],[[34,[-1]]],[]],[-1,[[100,[-2,-3]]],[],[],[]],[[5,27,[172,[[176,[-1,-2]]]],[110,[-1]]],-3,[],[],[]],[[-1,5],5,[]],[[-1,5],9,[]],[[-1,5],9,[]],[[5,[100,[-1,-2]]],-3,[],[],[]],0,[[-1,[44,[-2]]],[[6,[[34,[[2,[-2,[197,[-3]]]]]],40]]],[],[],[]],[-1,[],[]],[-1,27,[]],[[-1,-1],9,[]],[-1,9,[]],[-1,5,[]],[-1,[[34,[-2]]],[],[]],[[-1,45],6,[]],[-1,5,[]],[-1,5,[]],[44,5],0,[[-1,-3,44],[[6,[40]]],[],[],[[41,[-2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[172,[[100,[-1,-2]]]]],-1,178,[[36,[-1]]]],[[5,[172,[[100,[-1,-2]]]]],[[2,[-3,[198,[-1]]]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[[[200,[-1,-2]]],[[200,[-1,-2]]],[178,4],[4,[201,[-1]]]],[[-1,-2],2,[],[]],[[[202,[-1,-2,-3]],[200,[-1,-3]]],[[6,[[202,[-1,-2,-3]],107]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[200,[-2,-3]]]]],7,178,[[201,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[202,[-2,-3,-4]]]]],7,178,[[36,[-2]]],[[199,[-2,-3]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[200,[-1,-2]],-3],[[79,[2]]],178,[[201,[-1]]],80],[[[203,[-1,-2,-3]],[200,[-1,-3]],5,[172,[[100,[-1,-2]]]]],[[6,[[2,[[202,[-1,-2,-3]],[34,[-1]],[34,[-1]],5]],107]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[[[200,[-1,-2]],[44,[130]]],[[27,[[44,[130]]]]],178,[[201,[-1]]]],[[[200,[-1,-2]]],5,178,[[201,[-1]]]],[[[203,[-1,-2,-3]],11],12,[13,178],[13,[36,[-1]]],[13,[199,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[203,[-1,-2,-3]]],[[100,[-1,-2]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[100,[-1,-2]]],[[203,[-1,-2,-3]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[[]],[[]],[[]],[[[203,[-1,-2,-3]],[200,[-1,-3]],44,[172,[[100,[-1,-2]]]]],[[6,[[2,[[202,[-1,-2,-3]],[34,[-1]],[34,[-1]],5]],107]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[[[200,[-1,-3]],[44,[-3]],5,[34,[-1]],[172,[[100,[-1,-2]]]]],[[6,[[202,[-1,-2,-3]],107]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[[5,[172,[[100,[-1,-2]]]]],[[200,[-1,-3]]],178,[[36,[-1]]],[[201,[-1]],[199,[-1,-2]]]],[[[203,[-1,-2,-3]]],5,178,[[36,[-1]]],[[199,[-1,-2]]]],[[[200,[-1,-2]],-3],6,178,[[201,[-1]]],28],[[[202,[-1,-2,-3]],-4],6,178,[[36,[-1]]],[[199,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[202,[-1,-2,-3]],[200,[-1,-3]],5,[44,[-1]],[44,[-1]]],[[6,[9,109]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[172,[[100,[-1,-2]]]],5],-1,178,[[36,[-1]]]],[[5,[172,[[100,[-1,-2]]]]],[[205,[[204,[-1]]]]],178,[[36,[-1]]]],[[[176,[-1,-2]],[110,[-1]]],5,3,[[36,[-1]]]],0,[[[176,[-1,-2]]],[[176,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[206,[-2,-3,-4]]]]],7,[87,178],[[36,[-2]]],[[199,[-2,-3]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[[207,[-1,-2]]],-1,178,[[208,[-1]]]],[5,2],[5,2],[5,2],[5,2],[[[209,[-1,-2,-3]],[207,[-1,-3]],5,[172,[[100,[-1,-2]]]]],[[6,[[2,[[206,[-1,-2,-3]],[34,[-1]],[34,[-1]],5,5]],107]]],178,[[36,[-1]]],[]],[[[209,[-1,-2,-3]],11],12,[13,178],[13,[36,[-1]]],[13,[199,[-1,-2]]]],[[[176,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[207,[-1,-2]],5],[],178,[[208,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[209,[-1,-2,-3]]],[[100,[-1,-2]]],178,[[36,[-1]]],[[199,[-1,-2]],[208,[-1]]]],[[[176,[-1,-2]]],[[172,[[100,[-1,-2]]]]],3,[[36,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[100,[-1,-2]]],[[209,[-1,-2,-3]]],178,[[36,[-1]]],[[199,[-1,-2]],[208,[-1]]]],[[[172,[[100,[-1,-2]]]],5],[[176,[-1,-2]]],3,[[36,[-1]]]],[[[172,[[100,[-1,-2]]]],5],[[176,[-1,-2]]],3,[[36,[-1]]]],[[[176,[-1,-2]]],5,3,[[36,[-1]]]],[[]],[[]],[[]],[[]],0,[[[209,[-1,-2,-3]],[207,[-1,-3]],44,[172,[[100,[-1,-2]]]]],[[6,[[2,[[206,[-1,-2,-3]],[34,[-1]],[34,[-1]],5,5]],107]]],178,[[36,[-1]]],[]],[[[207,[-1,-3]],[44,[-3]],[34,[-1]]],[[6,[[2,[[206,[-1,-2,-3]],5]],107]]],178,[[36,[-1]]],[]],[[5,[172,[[100,[-1,-2]]]]],[[207,[-1,-3]]],178,[[36,[-1]]],[]],[[[209,[-1,-2,-3]]],5,178,[[36,[-1]]],[[199,[-1,-2]],[208,[-1]]]],[[[176,[-1,-2]]],5,3,[[36,[-1]]]],[[[206,[-1,-2,-3]],-4],6,[88,178],[[36,[-1]]],[[199,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[206,[-1,-2,-3]],[207,[-1,-3]],5,5,[44,[-1]],[44,[-1]]],[[6,[9,210]]],178,[[36,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-2,[33,[-1]],[27,[[46,[-1]]]]],[[6,[[2,[[39,[-1]],[38,[-1]],[38,[-1]],[38,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[33,[-1]],[27,[[46,[-1]]]]],[[6,[[2,[[39,[-1]],[38,[-1]],[38,[-1]],[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[211,[-1,132]]],[[27,[[211,[-1,132]]]]],3],[[[211,[-1,132]]],[[27,[[211,[-1,132]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[211,[-1,132]],132],[[211,[-1,132]]],3],[212,212],[[[211,[-1,-2]]],[[211,[-1,-2]]],[4,3],[4,52]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[212,212],26],[[-1,-2],26,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[212,212],9],[[[211,[-1,-2]],[211,[-1,-2]]],9,[10,3],[10,52]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[46,[-1]],[33,[-1]],78,-2],[[79,[2]]],3,80],[[[54,[-1]],[33,[-1]],78,-2],[[79,[2]]],3,80],[[212,11],12],[[[211,[-1,-2]],11],12,[13,3],[13,52]],[131,[[46,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[212,-1],2,19],[[[211,[-1,-2]],-3],2,3,52,19],[212,[[27,[5]]]],[[-1,5],[[211,[-2,-1]]],52,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[211,[-1,132]]],9,3],[[[211,[-1,132]]],9,3],[[[54,[-1]]],9,3],[[[211,[-1,77]]],9,3],[-1,9,[]],[[[46,[-1]]],9,3],[[[211,[-1,132]]],9,3],[[[211,[-1,132]]],9,3],[212,9],[212,9],[[[211,[-1,-2]]],9,3,52],[[-1,132],9,[]],[[[46,[-1]],132],9,3],[-1,9,[]],[[[46,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[77,212],[[54,[-1]]],3],[5,212],[[77,212],[[211,[-1,77]]],3],[-1,[[211,[-2,-1]]],52,3],[[-1,5],[[211,[-2,-1]]],52,3],[212,[[27,[5]]]],[[212,212],[[27,[26]]]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[213,[-1,-2,-3]]],[[6,[[172,[[200,[-1,-3]]]],214]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[[[213,[-1,-2,-3]]],[[6,[[215,[-1]],214]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[[[213,[-1,-2,-3]]],[[6,[[216,[-1]],214]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[[[213,[-1,-2,-3]]],[[6,[[207,[-1,-3]],214]]],178,[[36,[-1]]],[]],[[[213,[-1,-2,-3]],-4],[[6,[-5,214]]],178,[[36,[-1]]],[[199,[-1,-2]]],49,[]],0,0,0,0,[-1,104,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[214,11],12],[[214,11],12],[-1,-1,[]],[217,214],[218,214],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[214,[[27,[104]]]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[213,[-1,-2,-3]]],[[34,[[213,[-1,-2,-3]]]]],178,[[36,[-1]]],[]],[219,219],[220,220],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[213,[-1,-2,-3]],71],[[79,[221]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[219]]],7],[-1,[[6,[220]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[219,219],9],[[220,220],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[213,[-1,-2,-3]],11],12,[13,178],[13,[36,[-1]]],[13,[199,[-1,-2]]]],[[219,11],12],[[220,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[213,[-1,-2,-3]]],29,178,[[36,[-1]]],[[199,[-1,-2]]]],0,0,[[[213,[-1,-2,-3]]],[[172,[[100,[-1,-2]]]]],178,[[36,[-1]]],[[199,[-1,-2]]]],0,0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[172,[[100,[-1,-2]]]],9,219],[[213,[-1,-2,-3]]],178,[[36,[-1]]],[]],[[[213,[-1,-2,-3]],71],[[79,[221]]],178,[[36,[-1]]],[[199,[-1,-2]]]],[[]],[[]],[[]],0,0,[[[213,[-1,-2,-3]],5],[[213,[-1,-2,-3]]],178,[[36,[-1]]],[]],[[219,-1],6,28],[[220,-1],6,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[78,184],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],78],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[78,11],12],[[78,185],29],[-1,-1,[]],[78,185],[[78,[44,[185]]],[[62,[2]]]],[[],5],[[],78],[[],78],[[78,-1],185,[[188,[45]]]],[[78,[44,[-1]],9,9],[[62,[185]]],[[188,[45]]]],[[78,[44,[-1]],9],[[62,[185]]],[[188,[45]]]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[45,122],[[],122],[184,78],[[]],[78,[[99,[[98,[78]]]]]],[[78,45],[[27,[185]]]],[[78,185],[[62,[2]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[78,184],[[62,[2]]]],[45,122],[-1,-2,[],[]],0,0,0,0,[-1,104,[]],[[[33,[-1]],9],[[46,[-1]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[33,[-1]],[46,[-1]]],[[6,[[46,[-1]],108]]],3],0,[[[33,[-1]],[46,[-1]]],[[6,[[2,[[46,[-1]],[46,[-1]]]],108]]],3],[[[33,[-1]],[46,[-1]]],[[6,[[46,[-1]],108]]],3],0,0,[108,108],[[[222,[-1]]],[[222,[-1]]],[4,3]],[[[223,[-1]]],[[223,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[33,[-1]],[46,[-1]]],[[46,[-1]]],3],0,[[[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],0,0,0,0,[[],[[33,[-1]]],3],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],0,[5,2],[5,2],[5,2],[5,2],0,0,0,0,0,[[[33,[-1]]],[[223,[-1]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[127,[-1]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[131]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[2,[[129,[-1]],[46,[-1]]]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[2,[[46,[-1]],[46,[-1]]]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[60,[-1]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[2,[[46,[-1]],[46,[-1]],[46,[-1]]]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[122]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[34,[[46,[-1]]]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[122]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[1,[-1]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[2,[[46,[-1]],[46,[-1]]]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[29]]],3],[[[33,[-1]],[46,[-1]]],[[27,[122]]],3],[[[33,[-1]],[46,[-1]]],[[27,[122]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[2,[[46,[-1]],[46,[-1]]]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[126,[-1]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[15]]],3],[[[33,[-1]],[53,[-1]]],[[27,[[54,[-1]]]]],3],[[[33,[-1]],[61,[-1]]],[[27,[[46,[-1]]]]],3],[[[33,[-1]],11],12,[13,3]],[[108,11],12],[[108,11],12],[[[222,[-1]],11],12,[13,3]],[[[223,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[33,[-1]]],[[54,[-1]]],3],[[[33,[-1]]],[[54,[-1]]],3],[[[33,[-1]]],[[54,[-1]]],3],[[[33,[-1]]],[[54,[-1]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[56,[-1]]]]],3],[[[33,[-1]],[126,[-1]]],[[27,[[56,[-1]]]]],3],[[[33,[-1]],132,-1],[[27,[[46,[-1]]]]],3],[[[33,[-1]],-2],[[27,[[46,[-1]]]]],3,[[121,[[1,[-1]]]]]],[[[33,[-1]],[46,[-1]]],[[27,[[61,[-1]]]]],3],[[[33,[-1]],[54,[-1]],[27,[[224,[-1]]]]],[[6,[[2,[[53,[-1]],[27,[[225,[-1]]]]]],108]]],3],[[[33,[-1]],[46,[-1]],[27,[[224,[-1]]]]],[[6,[[2,[[61,[-1]],[27,[[226,[-1]]]]]],108]]],3],0,0,[[[33,[-1]],[54,[-1]]],[[27,[[53,[-1]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[61,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[[33,[-1]],-1,[46,[-1]]],[[27,[[46,[-1]]]]],3],[[[33,[-1]],-1,[46,[-1]]],[[46,[-1]]],3],0,[[[33,[-1]]],2,3],0,0,[-1,[],[]],[[],5],[[],5],[[],5],[[],5],[[[33,[-1]],131],[[46,[-1]]],3],[[[33,[-1]],-1,[46,[-1]]],[[46,[-1]]],3],[[[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[33,[-1]]],[[54,[-1]]],3],[[[33,[-1]]],[[54,[-1]]],3],[[[33,[-1]]],[[54,[-1]]],3],[[[33,[-1]]],[[54,[-1]]],3],[[[33,[-1]],[46,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3],[[[33,[-1]],132,-1],[[46,[-1]]],3],[[[33,[-1]],-1],[[46,[-1]]],3],[[[33,[-1]],-1],[[46,[-1]]],3],[[[33,[-1]],-1],[[46,[-1]]],3],[[[33,[-1]],-1],[[46,[-1]]],3],[[[33,[-1]],-2],[[46,[-1]]],3,[[121,[[1,[-1]]]]]],[[[33,[-1]],-1],[[46,[-1]]],3],[[[33,[-1]],-1],[[46,[-1]]],3],[[[33,[-1]],-1],[[46,[-1]]],3],[[[33,[-1]],-1],[[46,[-1]]],3],[[[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[33,[-1]],45],[[46,[-1]]],3],[[[33,[-1]],122],[[46,[-1]]],3],[[[33,[-1]],[44,[29]]],[[46,[-1]]],3],[[[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],[[[33,[-1]],9],[[46,[-1]]],3],[[[33,[-1]],[181,[-1]]],[[46,[-1]]],3],[[[33,[-1]],[126,[-1]]],[[46,[-1]]],3],[[[33,[-1]],14],[[46,[-1]]],3],[[[33,[-1]],15],[[46,[-1]]],3],[[[33,[-1]],[53,[-1]],[224,[-1]]],[[27,[[54,[-1]]]]],3],[[[33,[-1]],[61,[-1]],[224,[-1]]],[[27,[[46,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[33,[-1]],-2],[[46,[-1]]],3,[[188,[45]]]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,0,0,0,0,0,[[[33,[-1]],[44,[[46,[-1]]]]],[[46,[-1]]],3],0,[[[33,[-1]],[54,[-1]]],[[54,[-1]]],3],0,[[],[[33,[-1]]],3],[[[33,[-1]]],[[223,[-1]]],3],[[[33,[-1]]],[[46,[-1]]],3],0,[[[33,[-1]],-2],[[46,[-1]]],3,[[121,[[1,[-1]]]]]],0,0,0,0,0,[[[33,[-1]],[46,[-1]]],[[27,[[2,[-1,[46,[-1]]]]]]],3],0,[[[33,[-1]],[46,[-1]]],[[6,[[2,[-1,[46,[-1]]]],108]]],3],[[]],[[]],[[]],[[]],0,0,[[[222,[-1]]],[[46,[-1]]],3],[[[33,[-1]],[46,[-1]],[46,[-1]]],[[6,[9,108]]],3],0,0,[[[33,[-1]],45],[[6,[[46,[-1]],183]]],3],[[[33,[-1]],[99,[[98,[78]]]],182],[[6,[[2,[182,[46,[-1]],9]],183]]],3],[[[33,[-1]],[99,[[98,[78]]]],45],[[6,[[46,[-1]],183]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[46,[-1]]]]],3],0,[[[33,[-1]],[46,[-1]]],[[6,[[46,[-1]],108]]],3],[[[33,[-1]],45],[[46,[-1]]],3],0,[[[33,[-1]],[46,[-1]],[46,[-1]]],[[46,[-1]]],3],0,[[[33,[-1]]],[[46,[-1]]],3],0,[[[33,[-1]],-2],[[46,[-1]]],3,[[188,[45]]]],0,[[[33,[-1]]],[[46,[-1]]],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[33,[-1]],[54,[-1]]],[[27,[[225,[-1]]]]],3],[[[33,[-1]],[46,[-1]]],[[27,[[226,[-1]]]]],3],[[[33,[-1]],[46,[-1]]],[[6,[[2,[[224,[-1]],[61,[-1]]]],108]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[[[33,[-1]],14],[[46,[-1]]],3],0,[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[33,[-1]],45],[[46,[-1]]],3],[[[222,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1]],-1,-1],[[6,[[53,[-1]],108]]],3],0,[[[33,[-1]],-1,-1],[[6,[[61,[-1]],108]]],3],0,[[[222,[-1]]],[[61,[-1]]],3],0,0,0,0,0,[[]],[[122,122],[[27,[122]]]],[-1,-2,[],[]],[-1,-2,[],[]],[122,122],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[122]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[122,45],122],[122,[[27,[122]]]],[5,2],[[122,122],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[122,[44,[-1]]],122,[[188,[45]]]],[[122,11],12],[[122,11],12],[45,29],[122,29],[122,29],[-1,-1,[]],[45,122],[45,[[27,[122]]]],[[-1,-2],14,[16,17],18],[[122,122],9],[[122,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[122,9],[122,9],[122,9],[122,9],[131,9],[[[44,[-1]]],122,[[188,[45]]]],[[[34,[29]]],122],[[],[[6,[24,25]]]],[122,[[62,[45]]]],[[[44,[-1]],9],122,[[188,[45]]]],[[[34,[29]],9],122],[[122,122],[[27,[26]]]],[122,[[44,[29]]]],[[]],[122,9],[9,122],[[],122],[[],122],[[122,-1],6,28],[122,2],[[[44,[-1]]],122,[[188,[45]]]],[[[34,[29]]],122],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[181,[-1]]],[[181,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[181,[-1]],[181,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[181,[-1]],11],12,3],[[[181,[-1]],11],12,[13,3]],[-1,-1,[]],[[[181,[-1]]],195,3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[34,[-1]]],[]],[[],[[34,[133]]]],[[],[[34,[134]]]],[[],[[34,[45]]]],[[132,-2],[[39,[-1]]],3,[[41,[-1]]]],[[77,-2],[[39,[-1]]],3,[[41,[-1]]]],[[133,-2],[[39,[-1]]],3,[[41,[-1]]]],[[134,-2],[[39,[-1]]],3,[[41,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[132,132],[77,77],[133,133],[134,134],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[132]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[77]]],7],[-1,[[6,[133]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[134]]],7],[5,2],[5,2],[5,2],[5,2],[[132,132],9],[[77,77],9],[[133,133],9],[[134,134],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[132,11],12],[[132,11],12],[[77,11],12],[[77,11],12],[[133,11],12],[[133,11],12],[[134,11],12],[[134,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[-2]]],3,[]],[-1,[[27,[132]]],3],[-1,[[27,[77]]],3],[-1,[[27,[133]]],3],[-1,[[27,[134]]],3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[132,-1],2,19],[[77,-1],2,19],[[133,-1],2,19],[[134,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[132,9],[134,9],[[132,132],9],[132,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[133,133],[[27,[26]]]],[[134,134],[[27,[26]]]],[[]],[[]],[[]],[[]],[[132,-1],6,28],[[77,-1],6,28],[[133,-1],6,28],[[134,-1],6,28],[[-1,5],9,[]],[[133,5],9],[[134,5],9],[-1,45,[]],[133,45],[134,45],[-1,-2,[],3],[132,-1,3],[77,-1,3],[133,-1,3],[134,-1,[[227,[14]],228]],[-1,[],[]],[132],[77],[133],[134],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[135,[[6,[132]]]],[-1,[[6,[-2]]],[],[]],[135,[[6,[77]]]],[-1,[[6,[-2]]],[],[]],[135,[[6,[133]]]],[-1,[[6,[-2]]],[],[]],[135,[[6,[134]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[15,15],15],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[15]]],7],[[15,15],15],[5,2],[[15,15],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[15,11],12],[[15,11],12],[-1,-1,[]],[14,15],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[15,9],[[],[[6,[24,25]]]],[[15,15],15],[[15,15],[[27,[26]]]],[[]],[[15,15],15],[[15,-1],6,28],[[15,15],15],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,[[-1,[33,[-2]],78,-3],[[79,[2]]],[],[],80],[[-1,[33,[-2]],78],29,[],[]],[[-1,[33,[-2]]],29,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,130],[229,229],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[229,229],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[229,11],12],[[229,11],12],[-1,-1,[]],[[[44,[130]]],[[62,[229]]]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[44,[130]]],[[27,[5]]]],0,[229,130],[130,9],[130,9],[229,[[34,[130]]]],[-1,-2,[],[]],[-1,29,[]],[5,[[34,[130]]]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,104,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,230,21],[-1,230,21],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[230,11],12],[[230,11],12],[-1,-1,[]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],0,[-1,29,[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,45,[44,[45]],-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,45,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,45,[44,[45]],-1],6,232],[[231,5,-1],6,232],[[231,45,5,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,-1],6,232],[[231,45,-1],6,232],[5,2],[[231,11],12],[-1,-1,[]],[229,[[6,[-1,230]]],87],[229,231],[[],5],[-1,-2,[],[]],[231,9],[[],[[6,[24,25]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[233,6],[233,6],[233,6],[234,6],[235,6],[236,6],[236,6],[[237,11],12],[[233,11],12],[[234,11],12],[[235,11],12],[[236,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[237,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[[237,9],6],[[237,[44,[130]]],6],[[237,131],6],[[233,-1],[[6,[2]]],[88,17]],[[233,-1],[[6,[2]]],[88,17]],[[237,238],6],[[237,239],6],[[233,-1],[[6,[2]]],[88,17]],[[235,-1],[[6,[2]]],[88,17]],[[236,45,-1],[[6,[2]]],[88,17]],[[236,45,-1],[[6,[2]]],[88,17]],[[237,240],6],[[237,241],6],[[237,242],6],[[237,243],6],[[234,-1],[[6,[2]]],[88,17]],[[237,[27,[5]]],6],[[237,45,-1],6,[88,17]],[[237,45,136,45,-1],6,[88,17]],[237,6],[[237,[27,[5]]],6],[[237,-1],6,[88,17]],[[237,45],6],[[237,45,5],6],[[237,45,136,45,5],6],[[237,5],6],[[237,45,5],6],[[237,45,136,45,5],6],[[237,135],6],[[237,136],6],[[237,14],6],[[237,130],6],[237,6],[[237,45],6],[[237,45,136,45],6],[[234,-1],[[6,[2]]],[88,17]],[-1,[[6,[229,230]]],88],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[225,[-1]]],[[225,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[225,[-2]]]]],7,[87,3]],[5,2],[[[225,[-1]],[225,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[225,[-1]],11],12,[13,3]],[-1,-1,[]],[[[225,[-1]]],[[56,[-1]]],3],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[225,[-1]],-2],6,[88,3],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[225,[-1]],[101,[-1]]],[[53,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[226,[-1]]],[[226,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[226,[-2]]]]],7,[87,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[226,[-1]],[226,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[226,[-1]],11],12,[13,3]],[[[226,[-1]],11],12,3],[-1,-1,[]],[[[33,[-1]],[46,[-1]]],[[27,[[226,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[226,[-1]],-2],6,[88,3],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[226,[-1]],[101,[-1]]],[[61,[-1]]],3],0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1,-2]]],[[51,[-1,-2]]],[4,52],[4,3]],[[-1,-2],2,[],[]],[[[51,[-1,-2]],[51,[-1,-2]]],26,52,3],[[-1,-2],26,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[51,[-2,-3]]]]],7,[87,52],[87,3]],[5,2],[[],[[51,[164,-1]]],3],[[[51,[-1,-2]],[51,[-1,-2]]],9,[10,52],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[51,[-1,-2]],11],12,[13,52],[13,3]],[[[51,[-1,-2]],11],12,[52,21],3],[-1,-1,[]],[45,[[6,[[51,[-1,-2]],244]]],52,3],[45,[[6,[[61,[-1]],108]]],3],[45,[[6,[[51,[132,-1]],108]]],3],[[-1,-2],[[51,[-1,-2]]],52,3],[[-1,-2],14,[16,17],18],[[[51,[-1,-2]],-3],2,52,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[51,[-1,-2]]],[[56,[-2]]],52,3],[[],[[6,[24,25]]]],[[[51,[-1,-2]],[51,[-1,-2]]],[[27,[26]]],52,3],[[[51,[-1,-2]]],[[2,[-2,-2]]],52,3],[[]],[[[51,[-1,-2]],-3],6,[88,52],[88,3],28],[[[51,[-1,-2]]],-1,52,3],[[[51,[-1,-2]]],-2,52,3],[[[51,[-1,-2]]],29,52,3],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[[51,[-1,-2]]],-2,52,3],[-1,-2,[],[]],0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[224,[-1]]],[[224,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,[[],[[224,[-1]]],[93,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[224,[-2]]]]],7,[87,3]],[5,2],[[[224,[-1]],[224,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[224,[-1]],11],12,[13,3]],[-1,-1,[]],[[[224,[-1]],[53,[-1]]],[[27,[[225,[-1]]]]],3],[[[224,[-1]],[61,[-1]]],[[27,[[226,[-1]]]]],3],[[[61,[-1]]],[[27,[[226,[-1]]]]],3],[[],5],[[[224,[-1]],[61,[-1]],[27,[[226,[-1]]]]],[[27,[[27,[[226,[-1]]]]]]],3],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[224,[-1]]],3],[[[33,[-1]],[46,[-1]]],[[2,[[224,[-1]],[27,[[61,[-1]]]]]]],3],[[[224,[-1]],[101,[-1]]],[[61,[-1]]],3],[[]],[[[224,[-1]],45,[101,[-1]]],[[2,[[61,[-1]],[226,[-1]]]]],3],[[[224,[-1]],122,[101,[-1]]],[[2,[[61,[-1]],[226,[-1]]]]],3],[[[224,[-1]],-2],6,[88,3],28],[-1,-2,[],[]],[[[224,[-1]]],[[33,[-1]]],3],[[[224,[-1]],[61,[-1]]],[[6,[[2,[[33,[-1]],[46,[-1]]]],108]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Num",0],[15,"tuple"],[8,"LurkField",1598],[8,"Clone",4900],[15,"usize"],[4,"Result",4901],[8,"Deserializer",4902],[3,"With",4903],[15,"bool"],[8,"PartialEq",4904],[3,"Formatter",4905],[6,"Result",4905],[8,"Debug",4905],[15,"u64"],[4,"UInt",4343],[8,"Hash",4906],[8,"Sized",4907],[8,"BuildHasher",4906],[8,"Hasher",4906],[3,"IndentedSection",4908],[8,"Display",4905],[8,"Send",4907],[8,"Sync",4907],[3,"Layout",4909],[3,"LayoutError",4909],[4,"Ordering",4904],[4,"Option",4910],[8,"Serializer",4911],[3,"String",4912],[3,"TypeId",4913],[3,"Box",4914],[8,"Any",4913],[3,"Store",3728],[3,"Vec",4915],[3,"CircuitFrame",104],[8,"Coprocessor",672],[3,"GlobalAllocations",144],[3,"AllocatedPtr",231],[3,"AllocatedNum",4916],[4,"SynthesisError",4917],[8,"ConstraintSystem",4917],[3,"Store",2798],[4,"Ptr",2742],[15,"slice"],[15,"str"],[6,"Ptr",3441],[4,"Boolean",4918],[8,"PrimeField",4919],[8,"FnOnce",4920],[3,"AllocatedContPtr",231],[3,"ZPtr",4803],[8,"Tag",4101],[6,"ZContPtr",4803],[6,"ContPtr",3441],[8,"IntoHashComponents",1706],[15,"array"],[8,"AsAllocatedHashComponents",231],[4,"ConsName",1844],[4,"ContName",1844],[4,"Continuation",590],[6,"ZExprPtr",4803],[6,"Result",4921],[4,"Backend",347],[3,"PossibleValue",4922],[3,"Utf8PathBuf",4923],[3,"HashMap",4924],[3,"CliSettings",383],[4,"ConfigError",4925],[6,"Scalar",4926],[3,"Repl",416],[3,"Utf8Path",4923],[3,"Settings",438],[3,"PerfConfig",438],[3,"ParallelConfig",438],[3,"WitnessGeneration",438],[4,"Flow",438],[4,"ContTag",4101],[3,"State",3690],[6,"Result",4927],[8,"Write",4928],[3,"IO",1139],[3,"GlobalAllocator",2503],[3,"CircomCoprocessor",692],[8,"CircomGadget",138],[3,"Sha256Coprocessor",730],[4,"Sha256Coproc",730],[8,"Deserialize",4902],[8,"Serialize",4911],[4,"TrieCoproc",802],[3,"NewCoprocessor",802],[3,"LookupCoprocessor",802],[3,"InsertCoprocessor",802],[8,"Default",4929],[3,"Trie",802],[4,"Error",802],[3,"LookupProof",802],[3,"InsertProof",802],[3,"RefCell",4930],[3,"Rc",4931],[3,"Lang",1380],[3,"PoseidonCache",1706],[3,"InversePoseidonCache",1706],[3,"HashConstants",1706],[8,"Error",4932],[4,"ReductionError",1044],[4,"LurkError",1044],[4,"ProofError",1044],[3,"Error",3728],[4,"NovaError",4933],[4,"Meta",1139],[3,"Frame",1139],[8,"Copy",4907],[4,"Status",1139],[3,"Witness",1139],[3,"Evaluator",1139],[3,"Error",4905],[3,"FrameIt",1139],[8,"Fn",4920],[3,"Take",4934],[3,"Binding",1380],[8,"Into",4935],[3,"Symbol",3991],[4,"Coproc",1380],[3,"DummyCoprocessor",1380],[3,"IndexMap",4936],[3,"Thunk",1511],[4,"Expression",1511],[4,"LanguageField",1598],[3,"FWrap",1598],[15,"u8"],[15,"char"],[4,"ExprTag",4101],[4,"Op1",4101],[4,"Op2",4101],[15,"u16"],[15,"u32"],[15,"u128"],[6,"U3",4937],[3,"PoseidonConstants",4938],[6,"U4",4937],[6,"U6",4937],[6,"U8",4937],[4,"HashConst",1706],[4,"HashArity",1706],[3,"HashWitness",1844],[8,"HashName",1844],[8,"Eq",4904],[6,"ConsStub",1844],[3,"Cons",1844],[4,"Stub",1844],[6,"ConsWitness",1844],[3,"ScalarCons",1844],[3,"ScalarCont",1844],[3,"Cont",1844],[3,"CircuitHashWitness",1844],[8,"ContentAddressed",1844],[6,"ContStub",1844],[6,"ContWitness",1844],[6,"Preimage",1844],[3,"Func",2220],[3,"Hints",2604],[3,"Frame",2604],[3,"Var",2220],[4,"Tag",2220],[4,"Lit",2220],[3,"Block",2220],[4,"Ctrl",2220],[4,"Op",2220],[6,"AString",2220],[4,"AllocatedVal",2503],[3,"SlotWitness",2503],[3,"Arc",4939],[3,"SlotsAllocations",2503],[4,"Val",2604],[3,"MultiFrame",2694],[4,"FoldingConfig",3331],[3,"WitnessCS",4940],[8,"CurveCycleEquipped",3235],[6,"C2",3331],[6,"ZPtr",2742],[4,"Syntax",4060],[6,"Span",2904],[4,"Error",2904],[3,"Package",2876],[6,"SymbolRef",2876],[4,"LitBase",2945],[6,"ParseResult",2904],[8,"AsRef",4935],[3,"ParseError",2993],[8,"InputLength",4941],[8,"AsBytes",4941],[4,"ErrorKind",4942],[4,"ParseErrorKind",2993],[6,"IResult",4943],[4,"Pos",3077],[4,"StringFragment",3117],[3,"TestConstraintSystem",4944],[6,"C2",3235],[8,"MultiFrameTrait",3177],[3,"PublicParams",3235],[8,"StepCircuit",4945],[4,"Proof",3235],[3,"NovaProver",3235],[6,"G1",3235],[3,"CircuitDigests",4946],[4,"Proof",3331],[3,"PublicParams",3331],[8,"StepCircuit",4947],[3,"SuperNovaProver",3331],[4,"SuperNovaError",4948],[3,"GPtr",3441],[4,"RawPtr",3441],[3,"Instance",3589],[4,"Error",3558],[6,"SuperNovaAuxParams",3331],[6,"NovaCircuitShape",3235],[3,"Error",4949],[3,"Error",4927],[4,"Kind",3589],[3,"Metadata",3589],[3,"File",4950],[3,"ConstantPtrs",3728],[3,"NamedConstants",3728],[3,"ZStore",4855],[4,"ZCont",4669],[4,"ZExpr",4750],[8,"From",4935],[8,"Field",4919],[4,"ZData",4390],[4,"SerdeError",4439],[3,"Deserializer",4472],[8,"Visitor",4902],[3,"SerializeCell",4524],[3,"SerializeMap",4524],[3,"SerializeTupleVariant",4524],[3,"StructSerializer",4524],[3,"Serializer",4524],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"Error",4921],[8,"ToInputs",99],[13,"Let",640],[13,"LetRec",640],[13,"Call0",640],[13,"Call",640],[13,"Call2",640],[13,"Tail",640],[13,"Lookup",640],[13,"Unop",640],[13,"Binop",640],[13,"Binop2",640],[13,"If",640],[13,"Emit",640],[8,"CoCircuit",672],[6,"ChildMap",802],[8,"Evaluable",1139],[6,"ConsCircuitWitness",1844],[6,"ContCircuitWitness",1844],[8,"CAddr",1844],[13,"Pos",3111],[8,"EvaluationStore",3177],[8,"FrameLike",3177],[8,"Prover",3177],[8,"CEKState",3177],[8,"Provable",3177],[6,"SuperNovaPublicParams",3331],[8,"TypePredicates",3441],[8,"Op",4101],[8,"Write",4386],[13,"Let",4718],[13,"LetRec",4718],[13,"Call0",4718],[13,"Call",4718],[13,"Call2",4718],[13,"Tail",4718],[13,"Lookup",4718],[13,"Unop",4718],[13,"Binop",4718],[13,"Binop2",4718],[13,"If",4718],[13,"Emit",4718],[13,"Fun",4800]],"b":[[34,"impl-Debug-for-Num%3CF%3E"],[35,"impl-Display-for-Num%3CF%3E"],[36,"impl-From%3Cu64%3E-for-Num%3CF%3E"],[37,"impl-From%3CUInt%3E-for-Num%3CF%3E"],[364,"impl-Debug-for-Backend"],[365,"impl-Display-for-Backend"],[621,"impl-Debug-for-Continuation%3CF%3E"],[622,"impl-Write%3CF%3E-for-Continuation%3CF%3E"],[908,"impl-From%3CInsertCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[909,"impl-From%3CLookupCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[910,"impl-From%3CNewCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[1079,"impl-Display-for-ProofError"],[1080,"impl-Debug-for-ProofError"],[1081,"impl-Debug-for-ReductionError"],[1082,"impl-Display-for-ReductionError"],[1083,"impl-Debug-for-LurkError%3CF%3E"],[1084,"impl-Display-for-LurkError%3CF%3E"],[1085,"impl-From%3CReductionError%3E-for-ProofError"],[1087,"impl-From%3CError%3E-for-ProofError"],[1088,"impl-From%3CSynthesisError%3E-for-ProofError"],[1089,"impl-From%3CNovaError%3E-for-ProofError"],[1240,"impl-Debug-for-IO%3CF%3E"],[1241,"impl-Display-for-IO%3CF%3E"],[1242,"impl-Write%3CF%3E-for-IO%3CF%3E"],[1557,"impl-Debug-for-Expression%3CF%3E"],[1558,"impl-Write%3CF%3E-for-Expression%3CF%3E"],[1640,"impl-Display-for-LanguageField"],[1641,"impl-Debug-for-LanguageField"],[2372,"impl-Debug-for-Var"],[2373,"impl-Display-for-Var"],[2374,"impl-Display-for-Tag"],[2375,"impl-Debug-for-Tag"],[2440,"impl-Tag"],[2441,"impl-Tag-for-Tag"],[2695,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2696,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2730,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2731,"impl-Circuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2732,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2835,"impl-Store%3CF%3E"],[2836,"impl-EvaluationStore-for-Store%3CF%3E"],[2862,"impl-Store%3CF%3E"],[2863,"impl-EvaluationStore-for-Store%3CF%3E"],[2864,"impl-EvaluationStore-for-Store%3CF%3E"],[2865,"impl-Store%3CF%3E"],[2924,"impl-Debug-for-Error"],[2925,"impl-Display-for-Error"],[3034,"impl-Display-for-ParseErrorKind%3CF%3E"],[3035,"impl-Debug-for-ParseErrorKind%3CF%3E"],[3036,"impl-Display-for-ParseError%3CLocatedSpan%3C%26str%3E,+F%3E"],[3037,"impl-Debug-for-ParseError%3CI,+F%3E"],[3569,"impl-Display-for-Error"],[3570,"impl-Debug-for-Error"],[3572,"impl-From%3CError%3E-for-Error"],[3573,"impl-From%3CError%3E-for-Error"],[3816,"impl-Display-for-Error"],[3817,"impl-Debug-for-Error"],[4015,"impl-Display-for-Symbol"],[4016,"impl-Debug-for-Symbol"],[4083,"impl-Display-for-Syntax%3CF%3E"],[4084,"impl-Debug-for-Syntax%3CF%3E"],[4232,"impl-Debug-for-ExprTag"],[4233,"impl-Display-for-ExprTag"],[4234,"impl-Debug-for-ContTag"],[4235,"impl-Display-for-ContTag"],[4236,"impl-Debug-for-Op1"],[4237,"impl-Display-for-Op1"],[4238,"impl-Display-for-Op2"],[4239,"impl-Debug-for-Op2"],[4362,"impl-Debug-for-UInt"],[4363,"impl-Display-for-UInt"],[4408,"impl-Display-for-ZData"],[4409,"impl-Debug-for-ZData"],[4445,"impl-Error-for-SerdeError"],[4446,"impl-Error-for-SerdeError"],[4452,"impl-Debug-for-SerdeError"],[4453,"impl-Display-for-SerdeError"],[4559,"impl-SerializeTupleStruct-for-SerializeCell"],[4560,"impl-SerializeSeq-for-SerializeCell"],[4561,"impl-SerializeTuple-for-SerializeCell"],[4564,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4565,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4600,"impl-SerializeSeq-for-SerializeCell"],[4601,"impl-SerializeTuple-for-SerializeCell"],[4606,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4607,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4780,"impl-Debug-for-ZExpr%3CF%3E"],[4781,"impl-Display-for-ZExpr%3CF%3E"],[4824,"impl-Debug-for-ZPtr%3CE,+F%3E"],[4825,"impl-Display-for-ZPtr%3CE,+F%3E"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"MetricsSinkHandle",0],[15,"tuple"],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
