var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLFLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","deserialize","drop","from","handle_meta","handle_non_meta","init","into","layout_raw","name","new","pointer_metadata","process_line","prompt","public_param_dir","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"clutch"],[27,"clap_builder::builder::command"],[28,"rkyv::with"],[29,"core::result"],[30,"pasta_curves::pallas"],[31,"lurk::eval::lang"],[32,"lurk::store"],[33,"lurk::state"],[34,"core::cell"],[35,"alloc::rc"],[36,"lurk::ptr"],[37,"anyhow"],[38,"std::path"],[39,"core::convert"],[40,"core::marker"],[41,"lurk::eval"],[42,"core::alloc::layout"],[43,"core::alloc::layout"],[44,"core::option"],[45,"lurk::eval::lang"],[46,"core::any"],[47,"alloc::alloc"],[48,"alloc::boxed"],[49,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[-1,-1,[]],[[[8,[6,[7,[6]]]],[9,[6]],[12,[[11,[10]]]],[13,[6]],-1],[[14,[5]]],[[16,[15]],17]],[[[8,[6,[7,[6]]]],[9,[6]],10,[13,[6]]],[[14,[[5,[[18,[6]],[18,[6]],2]]]]]],[[],2],[-1,-2,[],[]],[[],[[4,[19,20]]]],[[],21],[[[9,[6]],2,[22,[1]],[23,[6,[7,[6]]]]],[[8,[6,[7,[6]]]]]],[[]],[[[8,[6,[7,[6]]]],21],21],[[[8,[6,[7,[6]]]]],21],[[],24],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,25,[]],[[[27,[-1,26]]],[[27,[28,26]]],[]],[-1,28,[]],[-1,28,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Command",27],[15,"usize"],[3,"With",28],[4,"Result",29],[15,"tuple"],[6,"Scalar",30],[4,"Coproc",31],[3,"ClutchState",0],[3,"Store",32],[3,"State",33],[3,"RefCell",34],[3,"Rc",35],[6,"Ptr",36],[6,"Result",37],[3,"Path",38],[8,"AsRef",39],[8,"Copy",40],[3,"IO",41],[3,"Layout",42],[3,"LayoutError",42],[3,"String",43],[4,"Option",44],[3,"Lang",31],[3,"Utf8PathBuf",45],[3,"TypeId",46],[3,"Global",47],[3,"Box",48],[8,"Any",46]]},\
"fcomm":{"doc":"","t":"DEDDGRNDNDNEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMFMLLLLMLLLLLLLLLLLLLLLLMMLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLFLLLLLLLLLLLLKKKLLLLLLLLKK","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","file_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_param_dir","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","from","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","FileMap","FileStore","borrow","borrow_mut","data_dir","deref","deref_mut","deserialize","drop","fmt","from","get","init","into","layout_raw","new","pointer_metadata","read_from_json_path","read_from_path","read_from_stdin","set","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","write_to_json_path","write_to_path"],"q":[[0,"fcomm"],[639,"fcomm::error"],[684,"fcomm::file_map"],[714,"lurk::store"],[715,"lurk::ptr"],[716,"lurk::eval::lang"],[717,"lurk::eval::lang"],[718,"lurk::proof::nova"],[719,"lurk::proof::nova"],[720,"core::clone"],[721,"lurk::field"],[722,"lurk::ptr"],[723,"serde::de"],[724,"core::default"],[725,"rkyv::with"],[726,"serde::de"],[727,"core::option"],[728,"lurk::eval"],[729,"core::fmt"],[730,"core::fmt"],[731,"core::hash"],[732,"core::marker"],[733,"core::hash"],[734,"core::alloc::layout"],[735,"camino"],[736,"lurk::public_parameters::error"],[737,"std::path"],[738,"serde::ser"],[739,"core::any"],[740,"alloc::alloc"],[741,"alloc::boxed"],[742,"core::any"],[743,"bellpepper_core::constraint_system"],[744,"lurk::z_data::serde"],[745,"anyhow"],[746,"hex::error"],[747,"lurk::store"],[748,"color_eyre::section"],[749,"core::fmt"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,28,0,9,0,16,0,0,0,16,16,0,9,0,28,0,0,9,0,0,27,16,28,0,0,0,0,27,24,24,17,18,21,24,25,26,27,28,4,9,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,22,15,29,16,17,18,21,22,23,24,25,26,27,28,4,9,29,16,17,18,21,22,23,24,25,26,27,28,4,9,29,21,22,24,4,0,17,18,17,18,28,16,17,18,27,28,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,16,17,17,18,18,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,4,4,39,39,15,15,9,9,29,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,17,18,17,18,16,17,18,21,22,23,24,25,26,27,28,4,9,29,16,16,16,17,17,17,18,18,18,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,4,4,4,9,9,9,29,29,29,0,17,23,15,0,9,15,17,18,23,4,17,18,4,0,16,17,18,21,22,23,24,25,26,27,28,4,39,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,21,28,21,27,21,21,16,16,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,22,24,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,15,9,9,17,18,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,24,0,15,24,24,9,15,24,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,15,29,9,15,21,27,9,15,0,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,15,4,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,29,17,18,24,16,17,18,21,22,23,24,25,26,27,28,4,9,29,21,16,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,39,29,29,15,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,79,79,0,79,79,79,79,79,79,79,79,79,79,79,79,81,81,81,79,79,79,79,79,79,79,79,81,81],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[16,16],[17,17],[[[18,[-1]]],[[18,[-1]]],[19,20]],[[[21,[-1]]],[[21,[-1]]],[19,20]],[[[22,[-1]]],[[22,[-1]]],[19,20]],[[[23,[-1]]],[[23,[-1]]],[19,20]],[[[24,[-1]]],[[24,[-1]]],[19,20]],[25,25],[[[26,[-1]]],[[26,[-1]]],[19,20]],[[[27,[-1]]],[[27,[-1]]],[19,20]],[28,28],[[[4,[-1]]],[[4,[-1]]],[19,20]],[[[9,[-1]]],[[9,[-1]]],[19,20]],[[[29,[-1]]],[[29,[-1]]],[19,20]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,0,0,0,[[],31],0,0,0,0,[[28,[2,[-1]]],[[32,[-1]]],[20,33,34]],[16,5],[[],17],[[],[[18,[-1]]],[35,20]],[[],[[27,[-1]]],20],[[],28],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[16]]],37],[-1,[[11,[17]]],37],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[18,[-2]]]]],37,[38,20]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[21,[-2]]]]],37,20],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[22,[-2]]]]],37,[38,20]],[-1,[[11,[[23,[-2]]]]],37,[38,20]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[24,[-2]]]]],37,[38,20]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[25]]],37],[-1,[[11,[[26,[-2]]]]],37,[38,20]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[27,[-2]]]]],37,[38,20]],[-1,[[11,[28]]],37],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[4,[-2]]]]],37,[38,20]],[-1,[[11,[39]]],37],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[15,[-2]]]]],37,[38,40]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[9,[-2]]]]],37,[38,20]],[-1,[[11,[[29,[-2]]]]],37,[38,20]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],0,0,0,0,[[16,16],6],[[17,17],6],[[[18,[-1]],[18,[-1]]],6,[41,20]],[[[21,[-1]],[21,[-1]]],6,[41,20]],[[[22,[-1]],[22,[-1]]],6,[41,20]],[[[23,[-1]],[23,[-1]]],6,[41,20]],[[[24,[-1]],[24,[-1]]],6,[41,20]],[[25,25],6],[[[26,[-1]],[26,[-1]]],6,[41,20]],[[[27,[-1]],[27,[-1]]],6,[41,20]],[[28,28],6],[[[4,[-1]],[4,[-1]]],6,[41,20]],[[[9,[-1]],[9,[-1]]],6,[41,20]],[[[29,[-1]],[29,[-1]]],6,[41,20]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[[2,[-1]],[3,[-1]],5],[[11,[17,10]]],[20,33]],[[[23,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[20,33,34]],[[[2,[1]],[3,[1]],[42,[[3,[1]]]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[2,[-1]],[3,[-1]],[42,[[3,[-1]]]],5,[8,[-1,[7,[-1]]]]],[[11,[[30,[[43,[-1]],5]],10]]],20],[[[9,[-1]]],[[42,[17]]],20],[[[15,[1]],[2,[1]]],[[11,[[30,[[43,[1]],[43,[1]]]],10]]]],0,0,0,0,0,0,[[[4,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[20,33,34]],0,[[16,44],45],[[17,44],45],[[[18,[-1]],44],45,[46,20]],[[[21,[-1]],44],45,[46,20]],[[[22,[-1]],44],45,[46,20]],[[[23,[-1]],44],45,[46,20]],[[[24,[-1]],44],45,[46,20]],[[25,44],45],[[[26,[-1]],44],45,[46,20]],[[[27,[-1]],44],45,[46,20]],[[28,44],45],[[[4,[-1]],44],45,[46,20]],[[39,44],45],[[[9,[-1]],44],45,[46,20]],[[[29,[-1]],44],45,[46,20]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1]],[3,[-1]]],[[11,[[21,[-1]],10]]],[20,33,34]],[[[2,[-1]],[32,[-1]]],28,[20,33]],[-1,[[11,[[21,[-2]]]]],[[49,[[48,[47]]]]],20],[[[2,[-1]],[3,[-1]]],[[27,[-1]]],[20,33,34]],[[[2,[-1]],[3,[-1]],-1],[[11,[[21,[-1]],10]]],[20,33,34]],[[[2,[-1]],[3,[-1]]],[[11,[[30,[[21,[-1]],-1]],10]]],[20,33,34]],[[-1,-2],50,[51,52],53],[[16,-1],30,54],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[30,[[43,[1]],[43,[1]]]],10]]]],[[[9,[-1]]],6,20],[[[9,[-1]]],6,20],0,0,[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],0,[5,57],0,[[[2,[1]],[22,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[22,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[9,[-1]]],[[42,[[24,[-1]]]]],20],[[[15,[1]],[2,[1]]],[[11,[[30,[[43,[1]],[43,[1]]]],10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[9,[-1]]],[[11,[[58,[-1]],10]]],[20,33,38]],[[[2,[1]],[9,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[21,[-1]],[2,[-1]]],[[3,[-1]]],[20,33,34]],[[[27,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[3,[-1]]],[20,33,34]],[[[9,[-1]]],[[42,[[18,[-1]]]]],20],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[30,[[43,[1]],[43,[1]]]],10]]]],[[],59],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],0,0,[[16,-1],11,62],[[17,-1],11,62],[[[18,[-1]],-2],11,[33,20],62],[[[21,[-1]],-2],11,20,62],[[[22,[-1]],-2],11,[33,20],62],[[[23,[-1]],-2],11,[33,20],62],[[[24,[-1]],-2],11,[33,20],62],[[25,-1],11,62],[[[26,[-1]],-2],11,[33,20],62],[[[27,[-1]],-2],11,[33,20],62],[[28,-1],11,62],[[[4,[-1]],-2],11,[33,20],62],[[39,-1],11,62],[[[15,[-1]],-2],11,[33,40],62],[[[9,[-1]],-2],11,[33,20],62],[[[29,[-1]],-2],11,[33,20],62],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]]],63,20],[5,[[11,[16]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],0,0,0,[[[15,[1]],[13,[1,[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[39,10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,68,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[5,30],[[10,44],45],[[10,44],45],[69,10],[70,10],[71,10],[72,10],[73,10],[74,10],[-1,-1,[]],[60,10],[[-1,-2],[[75,[-2,-3]]],[],[76,77,78],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[11,[55,56]]]],[[]],[10,[[42,[68]]]],[-1,63,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],59],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[36,[-3,-4]]]]],[],[],[],[]],[5,30],[[[79,[-1,-2]],44],45,[46,80],[46,81]],[-1,-1,[]],[[[79,[-1,-2]],-1],[[42,[-2]]],80,81],[[],5],[-1,-2,[],[]],[[],[[11,[55,56]]]],[-1,[[11,[[79,[-2,-3]],60]]],[[49,[61]]],80,81],[[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[[],[[11,[-1,60]]],[]],[[[79,[-1,-2]],-1,-2],[[11,[30,60]]],80,81],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,-2,[],[]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]]],"c":[],"p":[[6,"S1",0],[3,"Store",714],[6,"Ptr",715],[3,"CommittedExpression",0],[15,"usize"],[15,"bool"],[4,"Coproc",716],[3,"Lang",716],[4,"Claim",0],[4,"Error",639],[4,"Result",717],[3,"NovaProver",718],[3,"PublicParams",718],[3,"Arc",719],[3,"Proof",0],[4,"ReductionCount",0],[3,"Evaluation",0],[3,"PtrEvaluation",0],[8,"Clone",720],[8,"LurkField",721],[3,"Commitment",0],[3,"OpeningRequest",0],[3,"Expression",0],[3,"Opening",0],[3,"ZBytes",0],[3,"ZStorePtr",0],[4,"LurkPtr",0],[4,"LurkCont",0],[3,"Cert",0],[15,"tuple"],[6,"CommittedExpressionMap",0],[6,"ContPtr",715],[8,"Serialize",722],[8,"DeserializeOwned",723],[8,"Default",724],[3,"With",725],[8,"Deserializer",723],[8,"Deserialize",723],[3,"VerificationResult",0],[8,"CurveCycleEquipped",718],[8,"PartialEq",726],[4,"Option",727],[3,"IO",728],[3,"Formatter",729],[6,"Result",729],[8,"Debug",729],[15,"u8"],[15,"slice"],[8,"AsRef",730],[15,"u64"],[8,"Hash",731],[8,"Sized",732],[8,"BuildHasher",731],[8,"Hasher",731],[3,"Layout",733],[3,"LayoutError",733],[6,"NovaProofCache",0],[6,"ZExprPtr",734],[3,"Utf8PathBuf",735],[4,"Error",736],[3,"Path",737],[8,"Serializer",722],[3,"String",738],[3,"TypeId",739],[3,"Global",740],[3,"Box",741],[8,"Any",739],[8,"Error",742],[4,"SynthesisError",743],[4,"SerdeError",744],[3,"Error",745],[4,"FromHexError",746],[3,"Error",714],[3,"Error",747],[3,"IndentedSection",748],[8,"Display",729],[8,"Send",732],[8,"Sync",732],[3,"FileMap",684],[8,"ToString",738],[8,"FileStore",684]]},\
"lurk":{"doc":"","t":"ENCRNCLLOLLAOAALLAAAOLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIAAKKDDLLLLLLLMLLLLLMLLLLLLFLLLLMMLLLLLLLMMLLLLMMMLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMAAAAIKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFFAAENNLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLHDENDNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLKLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGDELLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNIDDDDNNEENDMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLKLLLLKLLLLKLLLALLLLLLLKLLLMLLMLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNDNNNNNNENNNNNNNNNDNNENNNNNNNENNNNNNNENDLLMLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLLMLLLMLLLLLLLALMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLADLLLLLLLLLLLLLLLLLLLFFFFNNDEDNLLMLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLMMMLLLMLLLLLLMLMLLLMLLLLLLLLLLLLLLLLLLLLLLLLNNENNNNNNEGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLDLLLLLLLLLLLLLLLLLFFLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFIIIIQLLLAKLLLKALKKKKAFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLGGQQQQNIGGGQGQDGEDNGGLLLLLLMLLLMLLLLLLLLLLLLLLLLLLLMMLLLLLLMLLLLLLLMLMLLLLLFLLLMLLLLLLLLLLLLLLLLLLLLLLLNENNDDEDNDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLLLMLLLLLLLLKLKLLLLLMLLMKLKLLLLLKLKLFFFLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMLMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLMMLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLNNELLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","cache_map","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","repl","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","CacheMap","as_mut","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","from","get","get_copy","get_copy_or_insert","get_copy_or_insert_with","get_copy_or_insert_with_key","init","insert","insert_with","insert_with_key","into","is_empty","keys_cloned","layout_raw","len","map_get","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","blank","blank","borrow","borrow","borrow_mut","borrow_mut","cached_witness","circuit_index","clone","clone","clone_into","clone_into","count","deref","deref","deref_mut","deref_mut","deserialize","deserialize","destructure_list","drop","drop","fmt","fmt","folding_config","frames","from","from","from_frame","from_frames","get_store","init","init","input","input","into","into","layout_raw","layout_raw","meta","output","output","pointer_metadata","pointer_metadata","precedes","precedes","public_input_size","public_inputs","reduction_count","store","store","synthesize","synthesize","synthesize_frames","synthesize_frames_parallel","synthesize_frames_sequential","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","verify_groth16_proof","vzip","vzip","witness","circom","constraints","data","pointer","CircomGadget","into_circom_input","name","simple_evaluate","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","quote_ptr","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","get_config","parse_and_run","paths","repl","Backend","Nova","SnarkPackPlus","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","from","header","init","into","layout_raw","pointer_metadata","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","CONFIG","Config","Flow","Parallel","ParallelConfig","ParallelN","Sequential","WitnessGeneration","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","num_threads","parallelism","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","has_circuit","simple_evaluate","synthesize","synthesize_step_circuit","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","simple_evaluate","synthesize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","Trie","TrieCoproc","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Coprocessor","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Lurk","Meta","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_frames","get_coprocessor_z_ptr","get_frames","header","i","init","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_coprocessor","is_error","is_error","is_error","is_incomplete","is_lurk","is_terminal","is_terminal","is_terminal","iter","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","log","log","log","maybe_emitted_expression","meta","new","next","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_coprocessor","get_coprocessor_from_zptr","get_coprocessor_z_ptr","get_index","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup","max_coprocessor_arity","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BLS12_381","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","length","names_and_ptrs","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_blank","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hide","IfEq","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Null","Num","Op","Op1","Op2","Open","Return","String","Sub","Symbol","Tag","Trunc","Var","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_until","call_until_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_field","from_ptr","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","init_store","input_params","interpreter","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","name","name","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slot","store","synthesize_frame","synthesize_frame_aux","to_field","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_ptr_cached","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zstore","GlobalAllocator","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","eval_step","evaluate","evaluate_simple","evaluate_with_env_and_cont","FPair","FPtr","Frame","PreimageData","Preimages","PtrVec","blank","blank","blank","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone","clone_into","clone_into","clone_into","commitment","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","from","from","from","hash4","hash6","hash8","init","init","init","input","into","into","into","layout_raw","layout_raw","layout_raw","less_than","new_from_func","output","pointer_metadata","pointer_metadata","pointer_metadata","preimages","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Atom","Atom","Ptr","Tuple2","Tuple2","Tuple3","Tuple3","Tuple4","Tuple4","ZChildren","ZPtr","borrow","borrow","borrow_mut","borrow_mut","cast","char","clone","clone_into","comm","dbg_display","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt_to_string","from","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","init","into","into","is_nil","is_null","layout_raw","layout_raw","null","num","num_u64","pointer_metadata","pointer_metadata","serialize","serialize","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u64","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Store","borrow","borrow_mut","car_cdr","commit","default","deref","deref_mut","deserialize","drop","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_string","fetch_sym","fetch_symbol","fetch_symbol_path","fmt","from","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","init","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_lurk_sym","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","interned_string","interned_symbol","into","key","layout_raw","list","open","pointer_metadata","poseidon_cache","read","read_maybe_meta","read_with_default_state","to_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ZStore","add_comm","borrow","borrow_mut","default","deref","deref_mut","deserialize","deserialize","drop","fmt","from","get_children","init","into","layout_raw","open","pointer_metadata","populate_store","populate_z_store","serialize","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","from_upto","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","NIVCProver","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","get_evaluation_frames","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","supernova","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","outer_prove","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_count","prove","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","CE1","CE2","CK1","CK2","Compressed","CurveCycleEquipped","EE1","EE2","G1","G1","G2","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached_witness","clone","clone_into","compress","count","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","folding_config","frames","from","from","from","init","init","init","input","into","into","into","lang","layout_raw","layout_raw","layout_raw","meta","new","output","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","reduction_count","serialize","serialize","store","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","Compressed","FoldingConfig","IVC","NIVC","NIVCStep","NIVCSteps","Proof","PublicParams","Recursive","SuperNovaProver","SuperNovaPublicParams","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_index","circuit_index","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","fmt","fmt","from","from","from","from","from","from","from_frames","index","init","init","init","init","init","init","into","into","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","num_circuits","num_steps","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","primary_circuit","prove","prove_recursively","reduction_count","reduction_count","serialize","serialize","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","allocate_maybe_fun_unconstrained","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","error","public_params","public_params_default_dir","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","env","eval_expr","fmt","fmt","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","layout_raw","layout_raw","limit","name","name","new","new","new","new","pointer_metadata","pointer_metadata","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","quote","quotient","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","fmt_to_string_raw","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[101,"lurk::cache_map"],[136,"lurk::circuit"],[141,"lurk::circuit::circuit_frame"],[218,"lurk::circuit::gadgets"],[222,"lurk::circuit::gadgets::circom"],[226,"lurk::circuit::gadgets::constraints"],[227,"lurk::circuit::gadgets::data"],[314,"lurk::circuit::gadgets::pointer"],[424,"lurk::cli"],[429,"lurk::cli::backend"],[453,"lurk::cli::repl"],[474,"lurk::config"],[572,"lurk::cont"],[621,"lurk::cont::Continuation"],[653,"lurk::coprocessor"],[664,"lurk::coprocessor::circom"],[665,"lurk::coprocessor::circom::non_wasm"],[696,"lurk::coprocessor::trie"],[914,"lurk::error"],[1009,"lurk::eval"],[1248,"lurk::eval::lang"],[1371,"lurk::expr"],[1456,"lurk::field"],[1559,"lurk::hash"],[1700,"lurk::hash_witness"],[2077,"lurk::lem"],[2348,"lurk::lem::circuit"],[2368,"lurk::lem::eval"],[2372,"lurk::lem::interpreter"],[2459,"lurk::lem::pointers"],[2537,"lurk::lem::store"],[2594,"lurk::lem::zstore"],[2622,"lurk::package"],[2650,"lurk::parser"],[2691,"lurk::parser::base"],[2738,"lurk::parser::error"],[2820,"lurk::parser::position"],[2852,"lurk::parser::position::Pos"],[2858,"lurk::parser::string"],[2896,"lurk::parser::syntax"],[2917,"lurk::proof"],[2939,"lurk::proof::groth16"],[3016,"lurk::proof::nova"],[3119,"lurk::proof::supernova"],[3278,"lurk::ptr"],[3384,"lurk::public_parameters"],[3388,"lurk::public_parameters::error"],[3419,"lurk::repl"],[3491,"lurk::state"],[3529,"lurk::store"],[3795,"lurk::symbol"],[3864,"lurk::syntax"],[3903,"lurk::tag"],[4139,"lurk::uint"],[4181,"lurk::writer"],[4184,"lurk::z_data"],[4232,"lurk::z_data::serde"],[4265,"lurk::z_data::serde::de"],[4317,"lurk::z_data::serde::ser"],[4462,"lurk::z_data::z_cont"],[4510,"lurk::z_data::z_cont::ZCont"],[4542,"lurk::z_data::z_expr"],[4591,"lurk::z_data::z_expr::ZExpr"],[4594,"lurk::z_data::z_ptr"],[4643,"lurk::z_data::z_store"],[4689,"core::clone"],[4690,"core::result"],[4691,"serde::de"],[4692,"rkyv::with"],[4693,"core::cmp"],[4694,"core::fmt"],[4695,"core::fmt"],[4696,"core::marker"],[4697,"core::hash"],[4698,"core::fmt"],[4699,"core::alloc::layout"],[4700,"serde::ser"],[4701,"alloc::string"],[4702,"core::any"],[4703,"alloc::alloc"],[4704,"alloc::boxed"],[4705,"core::any"],[4706,"std::collections::hash::map"],[4707,"core::cmp"],[4708,"stable_deref_trait"],[4709,"core::marker"],[4710,"alloc::vec"],[4711,"alloc::sync"],[4712,"bellpepper_core::gadgets::num"],[4713,"bellpepper_core::constraint_system"],[4714,"bellpepper_core::constraint_system"],[4715,"bellperson::groth16::verifying_key"],[4716,"bellperson::groth16::proof"],[4717,"blstrs::scalar"],[4718,"bellpepper_core::gadgets::boolean"],[4719,"ff"],[4720,"camino"],[4721,"anyhow"],[4722,"pasta_curves::pallas"],[4723,"camino"],[4724,"std::io"],[4725,"core::default"],[4726,"core::cell"],[4727,"alloc::rc"],[4728,"core::error"],[4729,"nova_snark::errors"],[4730,"core::fmt"],[4731,"core::convert"],[4732,"indexmap::map"],[4733,"serde::de"],[4734,"neptune::poseidon"],[4735,"typenum::generated::consts"],[4736,"nom::traits"],[4737,"nom::internal"],[4738,"bellpepper_core::util_cs::test_cs"],[4739,"pairing"],[4740,"pairing"],[4741,"bellperson::groth16::aggregate::srs"],[4742,"rand_core"],[4743,"bellperson::groth16::aggregate::srs"],[4744,"nova_snark::traits"],[4745,"nova_snark::traits::circuit_supernova"],[4746,"nova_snark::supernova"],[4747,"nova_snark::supernova::error"],[4748,"serde_json::error"],[4749,"std::io::error"],[4750,"std::path"],[4751,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","Global config for parallelism.","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","Returns the argument unchanged.","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","<code>CacheMap</code> is an adaptation of <code>FrozenMap</code>: …","Get mutable access to the underlying <code>HashMap</code>.","","","","","","","","","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns a copy of the value corresponding to the key.","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","Calls <code>U::from(self)</code>.","Examples","","","Examples","Applies a function to the owner of the value corresponding …","","","","","","","","","","","","","","","","","","","","","","","","","Return the circuit index assigned to this <code>MultiFrame</code>’s …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Precompute the witness blocks for all the named hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a.val != b.val</code>, or to <code>0</code> …","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>IfEq(x, y, eq_block, else_block)</code> runs <code>eq_block</code> if <code>x == y</code>, …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","LEM tags","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","LEM variables","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","Calls a <code>Func</code> on an input until the stop contidion is …","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","Lurk’s step function","","","","","","A <code>Frame</code> carries the data that results from interpreting a …","","<code>Preimages</code> hold the non-deterministic advices for hashes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","","","","<code>ZChildren</code> keeps track of the children of <code>ZPtr</code>s, in case …","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Recursively hashes the children of a <code>Ptr</code> in order to …","","","Hashes <code>Ptr</code> trees from the bottom to the top, avoiding deep …","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","Supertrait for <code>Prover</code> that also supports NIVC.","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","Evaluates and generates the <code>Frame</code>s of the computation …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","An adapter to a SuperNova proving system implementation.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Generates an outer Groth16 proof using the given …","","","","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","The number of reductions used in the proof.","","","","","","","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","The commitment engine type for the first curve in the …","The commitment engine type for the second curve in the …","Why the next 4 types?","The type of the commitment key used for points of the …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","A proof for the final step of a recursive computation","Folding configuration specifies <code>Lang</code> and can be either <code>IVC</code> …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","One step of an NIVC computation","All steps of an NIVC computation","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","","","","","","Return the circuit index assigned in this <code>FoldingConfig</code> to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Separate frames according to NIVC circuit requirements.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","","","","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","Number of NIVC steps contained.","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the claim, which (for now), …","","","","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","","","","",""],"i":[0,1,0,0,1,0,1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,0,259,259,0,0,44,46,44,46,44,46,44,44,44,46,44,46,44,44,46,44,46,44,46,44,0,46,44,46,44,44,44,46,44,46,44,44,46,44,46,44,46,44,46,44,44,46,44,46,44,46,44,44,44,44,46,44,44,44,44,44,44,46,44,46,44,46,44,46,44,46,44,46,44,46,44,44,46,44,46,0,0,0,0,0,94,94,94,0,0,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,0,0,51,59,51,59,59,51,59,51,59,51,51,51,51,51,59,51,75,51,59,51,51,59,51,59,51,59,51,59,51,59,51,59,59,51,51,51,51,51,59,59,51,51,51,59,51,59,51,59,51,59,51,59,59,51,51,59,51,59,51,59,59,59,59,51,59,51,51,59,51,59,51,51,51,51,51,51,51,51,51,51,51,59,51,59,51,51,59,51,51,59,51,59,51,59,51,59,51,59,51,59,51,59,51,59,51,59,51,0,0,0,0,0,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,0,85,0,85,85,0,85,86,87,88,85,86,87,88,85,85,86,87,88,85,86,87,88,85,86,87,88,85,86,87,88,85,86,87,88,85,86,87,88,85,86,87,88,85,86,87,88,85,86,87,88,85,85,85,86,87,88,85,88,85,86,87,88,86,87,86,86,85,86,87,88,85,86,87,88,85,86,87,88,85,86,87,88,85,86,87,88,85,86,87,88,85,86,87,88,88,78,78,78,78,78,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,260,261,262,263,264,265,266,267,268,269,270,260,261,271,269,264,267,268,269,262,263,264,265,266,268,260,261,263,268,270,260,261,0,0,272,0,45,45,45,45,272,45,0,0,0,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,0,0,0,95,0,0,95,0,0,101,95,0,0,0,0,95,101,95,96,97,98,100,102,103,101,95,96,97,98,100,102,103,95,96,97,98,95,96,97,98,273,96,97,98,100,101,95,96,97,98,100,102,103,101,95,96,97,98,100,102,103,101,95,96,96,97,97,98,98,100,102,103,101,95,96,97,98,100,102,103,100,95,96,97,98,95,101,95,96,97,98,100,102,103,101,95,95,95,95,96,97,98,100,102,103,95,101,95,96,97,98,100,102,103,100,0,101,95,96,97,98,100,102,103,101,95,96,97,98,100,102,103,100,100,100,100,101,95,96,97,98,100,102,103,100,100,100,100,96,97,98,95,96,97,98,95,95,96,97,98,101,95,96,97,98,100,102,103,101,95,96,97,98,100,102,103,101,95,96,97,98,100,102,103,101,95,96,97,98,100,102,103,101,95,96,97,98,100,102,103,101,95,96,97,98,100,102,103,102,103,101,95,96,97,98,100,102,103,109,110,0,109,111,0,111,0,109,111,111,109,110,111,109,110,111,109,110,109,110,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,111,109,109,110,110,111,111,111,111,111,109,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,111,109,110,49,114,0,0,0,0,0,114,49,0,0,114,0,57,114,55,49,57,114,117,56,115,55,49,57,114,117,56,115,55,49,57,114,56,55,49,57,114,56,55,49,114,55,49,57,114,117,56,115,55,49,57,114,117,56,115,55,49,57,114,114,117,56,115,55,49,57,114,117,56,115,0,55,55,49,57,114,56,55,55,55,49,49,49,57,57,57,114,114,114,56,56,56,115,0,55,55,55,55,49,57,114,117,56,115,55,49,57,114,114,117,56,115,115,49,115,55,57,55,49,57,114,117,56,115,115,57,55,55,49,57,114,117,56,115,117,274,55,57,114,49,274,55,114,114,49,274,55,114,115,0,55,49,57,114,117,56,115,274,55,57,55,57,115,117,57,55,49,57,114,117,56,115,57,274,55,114,57,274,55,114,55,55,49,57,114,56,55,55,55,49,57,114,117,56,115,55,49,57,114,117,56,115,55,49,57,114,117,56,115,55,49,57,114,117,56,115,55,49,57,114,117,56,115,55,49,57,114,117,56,115,55,49,57,114,117,56,115,57,0,0,123,0,0,106,106,123,124,123,106,120,124,123,106,120,124,123,106,124,123,106,106,106,106,124,123,106,120,124,123,106,120,124,124,123,123,106,106,120,124,123,106,120,124,123,123,124,123,106,120,124,123,123,106,120,120,106,106,106,106,123,106,124,123,106,120,124,123,106,120,106,106,124,123,106,120,106,106,106,120,106,124,123,106,120,124,123,106,124,123,123,124,123,106,124,123,106,120,124,123,106,120,124,123,106,120,124,123,106,120,124,123,106,120,124,123,106,120,124,123,106,120,129,129,129,129,0,129,129,129,129,129,129,129,129,0,129,129,128,128,128,129,128,129,128,129,128,129,128,128,129,128,129,128,129,128,129,128,129,128,129,129,129,128,128,128,129,129,128,129,128,128,128,128,129,128,129,128,129,129,129,129,129,129,129,129,129,128,129,128,129,128,129,128,129,128,129,128,129,128,129,128,129,128,128,129,128,130,130,3,0,130,0,0,3,130,130,130,131,130,131,130,131,130,131,130,131,131,130,131,130,131,130,130,131,131,130,131,130,131,130,130,130,131,131,131,130,130,131,130,131,3,3,3,3,3,3,3,3,3,3,131,131,130,3,130,131,130,131,3,130,131,3,3,131,130,131,130,131,3,3,3,3,3,3,130,131,130,3,3,3,3,3,3,3,3,130,131,130,131,130,131,130,131,130,131,130,131,130,131,147,146,147,146,147,146,147,146,0,0,0,0,0,0,147,146,140,107,148,147,146,140,107,148,140,140,140,140,146,147,140,107,148,147,140,107,148,107,140,107,148,140,107,148,147,146,140,107,148,147,146,140,107,148,147,146,140,107,148,147,146,140,107,148,147,146,140,107,148,147,147,146,140,107,148,148,107,107,107,107,147,146,140,107,148,148,147,146,140,107,148,73,147,146,140,107,148,147,146,140,107,148,147,140,107,148,147,146,140,107,148,147,146,140,107,148,147,146,140,107,148,147,146,140,107,148,147,146,140,107,148,147,146,140,107,148,147,146,140,107,148,77,76,76,151,161,153,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,151,161,153,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,0,0,0,0,76,76,76,77,77,0,0,77,76,77,76,76,77,77,0,0,0,0,157,0,76,76,76,76,151,161,153,0,149,149,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,152,158,151,153,154,149,154,149,152,158,155,60,61,155,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,159,151,153,152,158,154,149,159,160,160,76,77,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,153,152,160,76,77,149,155,153,153,153,152,152,152,160,160,160,76,76,76,77,77,77,149,149,149,154,149,161,153,162,149,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,155,149,76,77,76,77,60,61,155,150,76,77,153,152,158,159,160,76,77,149,155,161,153,162,149,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,149,155,60,61,155,149,149,149,153,152,158,159,160,76,77,149,155,275,157,152,158,159,160,154,162,149,151,153,154,149,149,149,157,152,160,153,152,158,159,160,76,77,149,155,157,153,152,160,149,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,153,152,158,159,160,76,77,149,155,0,175,0,175,175,175,175,175,171,0,175,175,175,175,175,175,175,175,171,0,175,174,0,175,175,174,174,175,175,172,0,171,171,175,174,172,175,172,0,175,0,164,164,164,164,170,171,172,173,174,175,164,170,171,172,173,174,175,164,164,164,164,0,164,170,171,172,173,174,175,164,170,171,172,173,174,175,173,164,170,171,172,173,174,175,164,170,171,172,173,174,175,164,170,171,171,172,173,174,175,164,170,171,172,173,174,175,164,170,171,172,173,174,175,164,164,164,170,170,170,171,171,171,172,172,172,173,173,173,174,174,174,175,175,175,0,164,170,170,171,171,172,173,174,175,164,164,170,171,172,173,174,175,171,172,170,171,172,170,171,172,170,171,164,170,171,172,173,174,175,164,164,0,164,170,171,172,173,174,175,164,170,171,172,173,174,175,170,164,164,164,164,164,164,170,171,172,173,174,175,0,171,164,0,164,164,171,171,164,170,171,172,173,174,175,172,172,170,171,164,170,171,171,172,173,174,175,164,170,171,172,173,174,175,164,170,171,172,173,174,175,164,164,170,171,172,173,174,175,164,170,171,172,173,174,175,164,170,171,172,173,174,175,164,170,171,172,173,174,175,0,0,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,0,0,0,0,177,177,0,0,0,177,168,169,169,177,168,169,177,168,169,168,177,168,169,177,168,169,168,168,169,177,168,169,177,168,169,177,168,169,177,168,169,177,168,169,177,168,169,168,168,168,177,168,169,169,177,168,169,177,168,169,168,168,169,177,168,169,169,177,168,169,177,168,169,177,168,169,177,168,169,177,168,169,177,168,169,177,168,169,177,168,169,167,178,0,167,178,167,178,167,178,0,0,167,178,167,178,167,167,167,167,167,167,167,178,167,178,167,167,178,178,167,178,167,167,167,167,167,178,167,167,178,167,167,167,167,167,167,167,178,167,178,167,167,167,178,167,167,167,167,178,167,178,167,167,167,178,167,178,167,178,167,167,178,167,178,167,178,167,178,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,0,0,183,183,183,183,183,183,183,183,0,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,187,0,0,182,187,0,0,182,182,0,182,182,182,182,182,182,182,182,0,181,182,182,182,182,182,182,182,182,182,0,0,0,182,182,182,182,182,182,182,182,182,186,186,186,0,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,0,186,0,0,0,0,0,0,0,186,186,186,186,186,186,186,186,186,186,193,193,193,193,193,193,193,0,0,193,193,189,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,193,193,193,189,189,189,189,189,193,193,189,189,193,189,189,193,189,193,189,189,193,189,193,193,189,0,189,189,189,193,189,189,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,193,189,195,0,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,276,276,276,276,276,276,196,196,196,0,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,0,0,0,0,0,0,0,0,196,196,196,196,196,196,196,196,196,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,277,277,277,277,0,277,277,277,277,277,0,277,278,278,278,277,0,0,0,0,0,0,0,201,198,202,201,198,202,198,198,202,201,198,202,201,198,202,201,198,198,202,201,198,202,198,202,201,198,202,201,198,202,201,198,202,202,201,198,202,202,202,201,198,202,198,198,202,202,198,198,198,201,198,202,201,198,202,201,198,202,201,198,202,201,198,202,201,198,202,202,202,201,198,202,0,0,209,209,209,209,210,0,0,0,0,209,0,209,0,0,0,0,210,0,0,208,210,211,208,210,211,212,208,208,210,212,208,210,211,208,210,211,208,208,210,210,211,208,210,211,208,211,208,208,211,212,212,208,210,211,208,210,211,212,208,210,211,211,208,210,211,212,211,212,208,210,211,211,210,0,211,208,210,212,208,208,210,211,208,210,211,208,210,211,208,210,211,208,210,211,208,210,211,210,208,210,211,215,0,47,47,0,0,0,0,215,0,0,213,217,214,215,216,47,213,217,214,215,216,47,213,47,213,214,47,213,214,47,213,217,214,215,216,47,213,217,214,215,216,47,213,217,214,214,215,215,216,47,213,217,214,215,216,47,213,214,216,214,214,216,47,213,217,214,215,216,47,213,217,217,217,214,215,216,47,213,217,214,215,216,47,213,216,47,217,214,215,216,47,213,216,47,47,47,213,217,217,214,215,216,47,213,213,216,215,216,47,214,215,213,214,47,213,217,214,215,216,47,213,217,214,215,216,47,213,217,214,215,216,47,213,217,214,215,216,47,213,217,214,215,216,47,213,217,214,215,216,47,213,215,217,214,215,216,47,213,0,0,225,225,225,0,0,0,67,72,224,67,224,224,224,225,224,225,224,224,225,224,225,224,225,225,224,225,224,225,224,225,224,225,224,225,225,225,224,224,224,67,72,225,224,67,225,224,225,224,225,224,225,224,225,224,225,224,224,224,72,224,279,67,224,224,225,225,224,279,67,279,67,225,224,72,225,224,224,224,225,225,225,224,67,72,224,67,72,224,225,224,225,224,225,224,225,224,225,224,225,224,225,224,225,224,0,0,0,0,227,0,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,0,0,0,230,232,230,232,230,230,233,230,230,230,232,230,232,230,232,230,232,230,230,230,232,230,232,233,233,233,233,230,233,230,230,232,230,232,230,230,232,230,233,230,233,230,230,232,230,232,233,230,233,230,0,0,0,232,230,230,232,230,232,230,232,230,232,230,232,230,232,230,232,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,90,90,90,90,90,0,0,90,90,90,90,90,90,90,90,90,90,90,90,0,90,0,0,0,0,113,43,236,236,43,43,43,113,235,236,43,113,235,236,43,43,43,43,236,43,43,236,236,113,235,236,113,235,236,236,43,43,236,43,236,43,43,43,236,43,43,43,43,113,235,236,43,113,235,236,43,113,235,236,236,43,113,235,236,236,236,43,236,236,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,113,113,235,236,43,113,235,236,43,43,43,43,43,43,43,43,43,43,43,43,236,236,43,43,43,43,113,43,43,236,43,236,43,113,43,113,235,236,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,113,235,236,43,43,236,43,113,235,236,236,236,236,43,236,43,43,43,43,236,43,236,43,236,43,236,236,43,43,43,43,236,43,43,113,235,236,43,236,235,43,236,236,43,43,43,43,236,43,43,43,43,236,43,236,43,43,43,236,43,43,113,235,236,113,43,43,43,43,113,235,236,43,113,235,236,43,113,235,236,236,43,43,43,113,235,236,43,113,235,236,43,113,235,236,43,235,43,113,235,236,43,43,43,43,235,0,0,0,0,0,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,180,180,180,180,180,180,180,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,135,136,89,89,89,89,89,135,135,134,135,134,135,135,134,136,0,136,89,89,135,136,89,135,136,0,134,136,136,136,89,134,136,136,89,89,89,136,134,134,135,136,0,0,0,135,89,136,136,135,134,136,136,134,0,89,89,134,134,135,89,280,135,136,280,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,134,134,89,89,135,135,136,136,134,89,135,136,134,89,135,136,134,134,134,89,89,89,135,135,135,136,136,136,134,134,89,89,135,135,136,136,134,89,135,136,226,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,134,136,134,134,134,89,135,136,135,136,134,89,135,136,134,89,135,136,280,135,136,280,135,136,226,134,89,135,136,226,134,89,135,136,134,89,135,136,134,89,135,136,134,134,89,89,135,135,136,136,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,134,89,135,136,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,281,281,242,242,0,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,0,242,242,242,242,242,242,0,242,242,242,242,242,242,242,0,242,242,242,242,242,242,242,0,0,0,0,243,0,243,243,243,243,243,243,0,243,243,243,243,243,243,243,0,243,243,243,243,243,243,0,243,0,243,243,243,243,243,243,243,0,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,0,244,244,244,244,244,244,244,244,244,244,244,244,244,0,0,0,0,0,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,246,246,246,247,248,249,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,250,246,247,248,249,250,246,247,248,249,250,250,250,246,246,250,250,246,248,249,249,250,250,250,250,247,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,247,0,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,0,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,282,283,284,285,286,287,288,289,290,291,292,282,283,293,291,286,289,290,291,284,285,286,287,288,290,282,283,285,290,292,282,283,239,239,239,239,239,239,239,239,239,239,239,239,239,239,0,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,294,294,294,0,0,0,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,70,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,0,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237],"f":[0,0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[1,[-1]]],[[1,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,0,[5,-1,[]],[5,-1,[]],[-1,[[6,[[1,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[[1,[-1]],[1,[-1]]],2,3],[5,2],[[[1,[-1]],[1,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,0,0,[[[1,[-1]],11],12,3],[[[1,[-1]],11],12,[13,3]],[14,[[1,[-1]]],3],[-1,-1,[]],[15,[[1,[-1]]],3],[-1,[[1,[-1]]],3],0,[[-1,-2],14,[16,17],18],0,[[[1,[-1]],-2],2,3,19],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],9,3],[[[1,[-1]]],9,3],0,[[],[[6,[24,25]]]],0,0,0,0,[[],[[1,[-1]]],3],[[],[[1,[-1]]],3],[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,[[[1,[-1]],[1,[-1]]],[[27,[26]]],3],[[]],0,0,0,0,[[[1,[-1]],-2],6,3,28],0,0,0,[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,[[[34,[-1,-2]]],[[36,[-1,-2,35]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[34,[-1,-2]]],[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[34,[-1,-2]],11],12,13,13],[-1,-1,[]],[[[34,[-2,-3]],-1],27,[16,37,17],[[38,[-1]],37,16],39],[[[34,[-2,-3]],-1],[[27,[-3]]],[16,37,17],[[38,[-1]],37,16],40],[[[34,[-1,-2]],-1,-2],-2,[37,16],40],[[[34,[-1,-2]],-1,-3],-2,[37,16],40,41],[[[34,[-1,-2]],-1,-3],-2,[37,16],40,41],[[],5],[[[34,[-1,-2]],-1,-2],[],[37,16],39],[[[34,[-1,-2]],-1,-3],[],[37,16],39,41],[[[34,[-1,-2]],-1,-3],[],[37,16],39,41],[-1,-2,[],[]],[[[34,[-1,-2]]],9,[37,16],39],[[[34,[-1,-2]]],[[42,[-1]]],4,[]],[[],[[6,[24,25]]]],[[[34,[-1,-2]]],5,[37,16],39],[[[34,[-2,-3]],-1,-4],[[27,[-5]]],[16,37,17],[[38,[-1]],37,16],39,41,[]],[[],[[34,[-1,-2]]],[],[]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[[],5],[[-1,[43,[-2]]],[[42,[-2]]],[],[]],0,0,[[[44,[-1,-2]]],5,3,[[45,[-1]]]],[[],[[46,[-1,-2]]],3,[[45,[-1]]]],[[[48,[[47,[-1,-2]]]],[49,[-1]]],[[44,[-1,-2]]],3,[[45,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[44,[-1,-2]]],5,3,[[45,[-1]]]],[[[46,[-1,-2]]],[[46,[-1,-2]]],[4,3],[4,[45,[-1]]]],[[[44,[-1,-2]]],[[44,[-1,-2]]],[4,3],[4,[45,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-2,[43,[-1]],[50,[-1]],5,[51,[-1]]],[[6,[[2,[[42,[[51,[-1]]]],[52,[-1]]]],53]]],3,[[54,[-1]]]],[5,2],[5,2],[[[46,[-1,-2]],11],12,[13,3],[13,[45,[-1]]]],[[[44,[-1,-2]],11],12,[13,3],[13,[45,[-1]]]],0,0,[-1,-1,[]],[-1,-1,[]],[[[57,[[55,[-1]],[56,[-1]],-1,-2]],[43,[-1]]],[[46,[-1,-2]]],3,[[45,[-1]]]],[[5,[58,[[57,[[55,[-1]],[56,[-1]],-1,-2]]]],[43,[-1]],[48,[[47,[-1,-2]]]]],[[42,[[44,[-1,-2]]]]],3,[[45,[-1]]]],[[[44,[-1,-2]]],[[43,[-1]]],3,[[45,[-1]]]],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,0,0,[[]],[[]],[[[46,[-1,-2]],[46,[-1,-2]]],9,3,[[45,[-1]]]],[[[44,[-1,-2]],[44,[-1,-2]]],9,3,[[45,[-1]]]],[[],5],[[[44,[-1,-2]]],[[42,[-1]]],3,[[45,[-1]]]],[[[44,[-1,-2]]],5,3,[[45,[-1]]]],0,0,[[[44,[-1,-2]],-3],[[6,[2,53]]],3,[[45,[-1]]],[[54,[-1]]]],[[[44,[-1,-2]],-3,[58,[[52,[-1]]]]],[[6,[[42,[[52,[-1]]]],53]]],3,[[45,[-1]]],[[54,[-1]]]],[[[44,[-1,-2]],-3,[43,[-1]],[51,[-1]],[51,[-1]],[59,[-1]],[58,[[46,[-1,-2]]]],[50,[-1]]],[[2,[[51,[-1]],[51,[-1]],[59,[-1]]]]],3,[[45,[-1]]],[[54,[-1]]]],[[[44,[-1,-2]],-3,[43,[-1]],[51,[-1]],[51,[-1]],[59,[-1]],[58,[[46,[-1,-2]]]],[50,[-1]]],[[2,[[51,[-1]],[51,[-1]],[59,[-1]]]]],3,[[45,[-1]]],[[54,[-1]]]],[[[44,[-1,-2]],-3,[43,[-1]],[51,[-1]],[51,[-1]],[59,[-1]],[58,[[46,[-1,-2]]]],[27,[[42,[[2,[[60,[-1]],[61,[-1]]]]]]]],[50,[-1]]],[[2,[[51,[-1]],[51,[-1]],[59,[-1]]]]],3,[[45,[-1]]],[[54,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[44,[-1]],[63,[62]],[64,[62]]],[[6,[9,53]]],[[45,[65]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,[58,[[51,[-2]]]]],[[42,[[2,[29,[42,[-2]]]]]]],[],[]],[-1,66,[]],[[-1,[43,[-2]],[58,[[67,[-2]]]]],[[67,[-2]]],[],[]],[[-2,[52,[-1]],[52,[-1]]],[[6,[68,53]]],69,[[54,[-1]]]],0,[[-2,-1],[[52,[-1]]],3,[[54,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[50,[-1]]],[[50,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,0,0,0,0,0,[[[50,[-1]],11],12,[13,3]],[-1,-1,[]],0,0,[[],5],[-1,-2,[],[]],0,[[],[[6,[24,25]]]],0,0,0,[[-2,[43,[-1]]],[[6,[[50,[-1]],53]]],3,[[54,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[[-2,-3],[[6,[[51,[-1]],53]]],3,[[54,[-1]]],41],[[-2,-3],[[6,[[59,[-1]],53]]],3,[[54,[-1]]],41],[[-2,[70,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,[71,[-1]]],[[6,[[59,[-1]],53]]],3,[[54,[-1]]]],[[-2,[43,[-1]],[72,[-1]]],[[6,[[59,[-1]],53]]],3,[[54,[-1]]]],[[-2,[43,[-1]],[67,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,[43,[-1]],-3],[[6,[[59,[-1]],53]]],3,[[54,[-1]]],41],[[[51,[-1]],-2,[51,[-1]]],[[6,[68,53]]],3,[[54,[-1]]]],[[[59,[-1]],-2,[59,[-1]]],[[6,[68,53]]],3,[[54,[-1]]]],[[-2,-3],[[6,[[51,[-1]],53]]],3,[[54,[-1]]],[[73,[-1]]]],[[[51,[-1]],-2,-1],[[6,[68,53]]],3,[[54,[-1]]]],[[-2,[43,[-1]],-3],[[6,[[51,[-1]],53]]],3,[[54,[-1]]],41],[[-2,-1,[52,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[[51,[-1]],-2,-1],[[6,[68,53]]],3,[[54,[-1]]]],[[[59,[-1]],-2,-1],[[6,[68,53]]],3,[[54,[-1]]]],[[[51,[-1]],-2,[43,[-1]]],[[6,[[2,[[52,[-1]],[51,[-1]],[59,[-1]]]],53]]],3,[[54,[-1]]]],[-1,[[74,[[52,[-2]]]]],[],[]],[[[51,[-1]]],[[74,[[52,[-1]]]]],3],[[[59,[-1]]],[[74,[[52,[-1]]]]],3],[[-2,[43,[-1]],68],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,[27,[[67,[-1]]]],[43,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,[27,[[72,[-1]]]],[43,[-1]]],[[6,[[59,[-1]],53]]],3,[[54,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[58,[[52,[-1]]]]],[[51,[-1]]],3],[[5,[58,[[52,[-1]]]]],[[59,[-1]]],3],[[[51,[-1]]],[[51,[-1]]],[4,69]],[[[59,[-1]]],[[59,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-2,[43,[-1]],[52,[-1]],[74,[75]]],[[6,[[59,[-1]],53]]],3,[[54,[-1]]]],[[-2,[50,[-1]],[43,[-1]],[52,[-1]],[51,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,[50,[-1]],[43,[-1]],[51,[-1]],[51,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,[50,[-1]],[51,[-1]],[51,[-1]],76,[0,[76,[0,[-1,[51,[-1]]]]]],68],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,[50,[-1]],[43,[-1]],[51,[-1]],[51,[-1]],[51,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,[50,[-1]],[43,[-1]],[58,[[51,[-1]]]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,77,[52,[-1]],[74,[75]],[0,[77,[0,[-1,[52,[-1]]]]]],68],[[6,[[59,[-1]],53]]],3,[[54,[-1]]]],[[-2,77,[52,[-1]],[74,[75]],[0,[77,[0,[-1,[52,[-1]]]]]]],[[6,[[2,[[59,[-1]],[52,[-1]]]],53]]],3,[[54,[-1]]]],[[-2,[50,[-1]],[43,[-1]],[51,[-1]],[51,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,[50,[-1]],[43,[-1]],[51,[-1]],[59,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[51,[-1]],-2,[51,[-1]]],2,3,[[54,[-1]]]],[[[59,[-1]],-2,[59,[-1]]],2,3,[[54,[-1]]]],[[[59,[-1]],[43,[-1]]],29,3],[[[51,[-1]],[43,[-1]]],29,3],[[[51,[-1]],11],12,3],[[[59,[-1]],11],12,3],[-1,-1,[]],[-1,-1,[]],[[[52,[-1]],[52,[-1]]],[[51,[-1]]],3],[[[52,[-1]],[52,[-1]]],[[59,[-1]]],3],[[[59,[-1]],[43,[-1]]],[[27,[[78,[-1]]]]],3],[[[59,[-1]],[43,[-1]]],[[27,[[72,[-1]]]]],3],[[[59,[-1]],[43,[-1]]],[[27,[[71,[-1]]]]],3],[[[51,[-1]]],[[52,[-1]]],3],[[[59,[-1]]],[[52,[-1]]],3],[[[51,[-1]],-2,68,[51,[-1]]],2,3,[[54,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1]],-2],[[6,[68,53]]],3,[[54,[-1]]]],[[[51,[-1]],-2],[[6,[68,53]]],3,[[54,[-1]]]],[[[51,[-1]],-2],[[6,[68,53]]],3,[[54,[-1]]]],[[[51,[-1]],-2],[[6,[68,53]]],3,[[54,[-1]]]],[[[51,[-1]],-2,[50,[-1]]],[[6,[68,53]]],3,[[54,[-1]]]],[[[51,[-1]],-2],[[6,[68,53]]],3,[[54,[-1]]]],[[[51,[-1]],-2],[[6,[68,53]]],3,[[54,[-1]]]],[[[51,[-1]],-2],[[6,[68,53]]],3,[[54,[-1]]]],[[[51,[-1]],-2],[[6,[68,53]]],3,[[54,[-1]]]],[[[51,[-1]],-2],[[6,[68,53]]],3,[[54,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[-2,68,[51,[-1]],[51,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[-2,68,[59,[-1]],[59,[-1]]],[[6,[[59,[-1]],53]]],3,[[54,[-1]]]],[[-2,68,[70,[-1]],[70,[-1]]],[[6,[[51,[-1]],53]]],3,[[54,[-1]]]],[[]],[[]],[[[51,[-1]],[43,[-1]]],[[27,[[67,[-1]]]]],3],[[[51,[-1]]],[[52,[-1]]],3],[[[59,[-1]]],[[52,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1]],[43,[-1]]],[[27,[[70,[-1]]]]],3],0,[[[27,[79]]],[[80,[[36,[29,29]]]]]],[[],[[80,[2]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[81,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[83,[82]],84],[[80,[2]]]],[[[43,[82]],5,5,81],[[83,[82]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[85,5,5],5],[[],85],[[],86],[[],87],[[],88],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[85,11],12],[[86,11],12],[[87,11],12],[[88,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[85,9],[85,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[85,5],0,[[]],[[]],[[]],[[]],0,0,0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[78,[-1]]],[[78,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[[78,[-1]]],89,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[78,[-1]],[78,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[78,[-1]],[43,[-1]],90,-2],[[91,[2]]],3,92],[[[78,[-1]],11],12,[13,3]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[[78,[-1]]],[[72,[-1]]],3],[[[78,[-1]],-2],2,[16,3],19],[[],5],[[[78,[-1]],[43,[-1]]],[[2,[5,9]]],3],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],0,[-1,5,[]],[[-1,[43,[-2]],[67,[-2]],[67,[-2]],[72,[-2]]],[[55,[-2]]],[],[]],[-1,9,[]],[[-1,[43,[-2]],[58,[[67,[-2]]]]],[[67,[-2]]],[],[]],[[-1,-3,[50,[-2]],[43,[-2]],[58,[[51,[-2]]]],[51,[-2]],[59,[-2]]],[[6,[[2,[[51,[-2]],[51,[-2]],[59,[-2]]]],53]]],[],[],[[54,[-2]]]],[[-1,-3,[43,[-2]],[50,[-2]],[51,[-2]],[51,[-2]],[59,[-2]]],[[6,[[2,[[51,[-2]],[51,[-2]],[59,[-2]]]],53]]],[],[],[[54,[-2]]]],0,0,0,[[[93,[-1,-2]]],5,3,[[94,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[93,[-1,-2]]],[[93,[-1,-2]]],3,[[94,[-1]]]],[[-1,-2],2,[],[]],[-2,[[80,[[93,[-1,-2]]]]],3,[[94,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[93,[-1,-2]]],5,3,[[94,[-1]],13]],[[[93,[-1,-2]],11],12,[13,3],[13,[94,[-1]]]],[-1,-1,[]],[[[93,[-1,-2]]],9,3,[[94,[-1]],13]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[93,[-1,-2]]],66,3,[[94,[-1]]]],[-2,[[93,[-1,-2]]],3,[[94,[-1]]]],[[]],[[[93,[-1,-2]],[43,[-1]],[58,[[67,[-1]]]]],[[67,[-1]]],3,[[94,[-1]],13]],[[[93,[-1,-2]],-3,[50,[-1]],[43,[-1]],[58,[[51,[-1]]]],[51,[-1]],[59,[-1]]],[[80,[[2,[[51,[-1]],[51,[-1]],[59,[-1]]]],53]]],3,[[94,[-1]]],[[54,[-1]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[95,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[95,[-1]]],[[95,[-1]]],[4,3]],[[[96,[-1]]],[[96,[-1]]],[4,3]],[[[97,[-1]]],[[97,[-1]]],[4,3]],[[[98,[-1]]],[[98,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[96,[-1]]],[99,3]],[[],[[97,[-1]]],[99,3]],[[],[[98,[-1]]],[99,3]],[[],[[100,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[96,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[97,[-2]]]]],7,3],[-1,[[6,[[98,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[100,[-1]]],-1,3],[[[95,[-1]]],5,3],[[[96,[-1]]],5,3],[[[97,[-1]]],5,3],[[[98,[-1]]],5,3],[[[95,[-1]],[43,[-1]],[67,[-1]],[67,[-1]],[72,[-1]]],[[55,[-1]]],3],[[[101,[-1]],11],12,13],[[[95,[-1]],11],12,[13,3]],[[[96,[-1]],11],12,[13,3]],[[[97,[-1]],11],12,[13,3]],[[[98,[-1]],11],12,[13,3]],[[[100,[-1]],11],12,[13,3]],[[[102,[-1]],11],12,[13,3]],[[[103,[-1]],11],12,[13,3]],[-1,-1,[]],[[[98,[-1]]],[[95,[-1]]],3],[[[96,[-1]]],[[95,[-1]]],3],[-1,-1,[]],[[[97,[-1]]],[[95,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[95,[-1]]],9,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[100,[-1]],-1,-1],[[6,[9,[101,[-1]]]]],3],[[[43,[-1]],[105,[[104,[90]]]],[106,[-1,[95,[-1]]]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[100,[-1]]],5,3],[[[100,[-1]],-1],[[6,[[27,[-1]],[101,[-1]]]]],3],[[[43,[-1]]],[[100,[-1]]],3],[[[43,[-1]],5],[[100,[-1]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[100,[-1]],-1,-1],[[6,[[2,[[103,[-1]],9]],[101,[-1]]]]],3],[[[100,[-1]],-1],[[6,[[102,[-1]],[101,[-1]]]]],3],[[[100,[-1]]],-1,3],[[[100,[-1]],5],5,3],[[[96,[-1]],-2],6,3,28],[[[97,[-1]],-2],6,3,28],[[[98,[-1]],-2],6,3,28],[[[95,[-1]],[43,[-1]],[58,[[67,[-1]]]]],[[67,[-1]]],3],[[[96,[-1]],[43,[-1]],[58,[[67,[-1]]]]],[[67,[-1]]],3],[[[97,[-1]],[43,[-1]],[58,[[67,[-1]]]]],[[67,[-1]]],3],[[[98,[-1]],[43,[-1]],[58,[[67,[-1]]]]],[[67,[-1]]],3],[[[95,[-1]],-2,[50,[-1]],[43,[-1]],[58,[[51,[-1]]]],[51,[-1]],[59,[-1]]],[[6,[[2,[[51,[-1]],[51,[-1]],[59,[-1]]]],53]]],3,[[54,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[102,[-1]],-1,-1,-1,[107,[-1]]],9,3],[[[103,[-1]],-1,-1,-1,[27,[-1]],-1,[107,[-1]]],9,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,108,[]],[-1,108,[]],[-1,108,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[109,109],[[[110,[-1]]],[[110,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[111,11],12],[[111,11],12],[[109,11],12],[[109,11],12],[[[110,[-1]],11],12,3],[[[110,[-1]],11],12,[13,3]],[-1,-1,[]],[53,111],[109,111],[112,111],[113,111],[113,109],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[111,[[27,[108]]]],[109,[[27,[108]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[55,[-1]]],[[55,[-1]]],[4,3]],[[[49,[-1]]],[[49,[-1]]],[4,3]],[[[57,[-1,-2,-3,-4]]],[[57,[-1,-2,-3,-4]]],[4,40],[4,40],[4,3],4],[114,114],[[[56,[-1]]],[[56,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[49,[-1]]],3],[[],114],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[114]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[43,[-1]]],[[67,[-1]]],3],0,[[[55,[-1]],[55,[-1]]],9,[10,3]],[[[49,[-1]],[49,[-1]]],9,[10,3]],[[[57,[-1,-2,-3,-4]],[57,[-1,-2,-3,-4]]],9,[10,40],[10,40],[10,3],10],[[114,114],9],[[[56,[-1]],[56,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[115,[-1,-2]]],[[6,[[2,[[55,[-1]],5,[42,[[67,[-1]]]]]],109]]],3,[[45,[-1]]]],[[[43,[-1]],66],[[6,[[67,[-1]],109]]],3],0,[[[55,[-1]],11],[[6,[2,116]]],3],[[[55,[-1]],11],12,[13,3]],[[[55,[-1]],[43,[-1]],90,-2],[[91,[2]]],3,92],[[[49,[-1]],11],12,[13,3]],[[[57,[-1,-2,-3,-4]],11],12,[13,40],[13,40],[13,3],13],[[114,11],12],[[[117,[-1,-2,-3]],11],12,[13,40],[13,3],[13,[45,[-2]]]],[[[56,[-1]],11],12,[13,3]],[[[115,[-1,-2]],11],12,[13,3],[13,[45,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[72,[-1]]],114,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[67,[-1]],[67,[-1]],[43,[-1]],5,-2,[106,[-1,-3]]],[[6,[[42,[[57,[[55,[-1]],[56,[-1]],-1,-3]]]],109]]],3,118,[[45,[-1]]]],[[[49,[-1]]],[[27,[[70,[-1]]]]],3],[[[115,[-1,-2]]],[[6,[[42,[[57,[[55,[-1]],[56,[-1]],-1,-2]]]],109]]],3,[[45,[-1]]]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[115,[-1,-2]]],[[55,[-1]]],3,[[45,[-1]]]],0,[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[[55,[-1]]],9,3],[[[57,[[55,[-1]],-2,-1,-3]]],9,3,40,[[45,[-1]]]],[114,9],[[[49,[-1]]],9,3],[-1,9,[]],[[[55,[-1]]],9,3],[114,9],[114,9],[[[49,[-1]]],9,3],[-1,9,[]],[[[55,[-1]]],9,3],[114,9],[[[115,[-1,-2]]],[[6,[[119,[[117,[[56,[-1]],-1,-2]]]],109]]],3,[[45,[-1]]]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[-1,[43,[-2]],5],2,[],[]],[[[55,[-1]],[43,[-1]],5],2,3],[[[57,[[55,[-1]],-2,-1,-3]],[43,[-1]]],2,3,40,[[45,[-1]]]],[[[55,[-1]],[43,[-1]]],[[27,[[67,[-1]]]]],3],0,[[[67,[-1]],[67,[-1]],[43,[-1]],5,[106,[-1,-2]]],[[115,[-1,-2]]],3,[[45,[-1]]]],[[[117,[[56,[-1]],-1,-2]]],27,3,[[45,[-1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[57,[[55,[-1]],-2,-1,-3]],[57,[[55,[-1]],-2,-1,-3]]],9,3,40,[[45,[-1]]]],[[-1,[43,[-2]],[106,[-2,-3]]],[[6,[[2,[-1,-4,[49,[-2]]]],109]]],17,[],[],[]],[[[55,[-1]],[43,[-1]],[106,[-1,-2]]],[[6,[[2,[[55,[-1]],[56,[-1]],[49,[-1]]]],109]]],3,[[45,[-1]]]],[[114,-1],6,28],[[[58,[[57,[[55,[-1]],-2,-1,-3]]]]],5,3,40,[[45,[-1]]]],[-1,114,[]],[[[55,[-1]]],114,3],[[114,[43,[-1]]],[[27,[[72,[-1]]]]],3],[[[55,[-1]],[43,[-1]]],[[42,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[55,[-1]],[43,[-1]]],[[6,[[42,[-1]],113]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[106,[-1,-2]],-3,[43,[-1]]],2,3,[[45,[-1]]],[[121,[[120,[-1,-2]]]]]],[[[106,[-1,-2]],-3,-4,[43,[-1]]],2,3,[[45,[-1]]],[[121,[122]]],[[121,[-2]]]],[[[123,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[124,[-1]]],[[124,[-1]]],[4,3]],[[[123,[-1]]],[[123,[-1]]],[4,3]],[[[106,[-1,-2]]],[[106,[-1,-2]]],[4,3],[4,[45,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[106,[-1,-2]]],5,3,[[45,[-1]]]],[[[106,[-1,-2]]],[[125,[122,[2,[-2,[70,[-1]]]]]]],3,[[45,[-1]]]],[[],[[106,[-1,-2]]],[99,3],[99,[45,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[124,[-2]]]]],7,3],[-1,[[6,[[123,[-2]]]]],7,[126,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[106,[-2,-3]]]]],7,[126,3],[126,[45,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[124,[-1]]],5,3],[[[123,[-1]]],5,3],[[[123,[-1]],[43,[-1]],[67,[-1]],[67,[-1]],[72,[-1]]],[[55,[-1]]],3],[[[124,[-1]],11],12,[13,3]],[[[123,[-1]],11],12,[13,3]],[[[106,[-1,-2]],11],12,[13,3],[13,[45,[-1]]]],[[[120,[-1,-2]],11],12,[13,3],[13,[45,[-1]]]],[-1,-1,[]],[[[124,[-1]]],[[123,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-3]]],[[120,[-2,-3]]],[[121,[122]]],3,[[45,[-2]]]],[[[106,[-1,-2]],5],[[27,[-2]]],3,[[45,[-1]]]],[[[106,[-1,-2]],[70,[-1]]],[[27,[-2]]],3,[[45,[-1]]]],[[[106,[-1,-2]],5],[[27,[[70,[-1]]]]],3,[[45,[-1]]]],[[[106,[-1,-2]],[70,[-1]]],[[27,[5]]],3,[[45,[-1]]]],[[[123,[-1]]],9,3],[[[106,[-1,-2]]],9,3,[[45,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[106,[-1,-2]]],9,3,[[45,[-1]]]],[[[106,[-1,-2]]],29,3,[[45,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[106,[-1,-2]],[43,[-1]],[67,[-1]]],[[27,[[2,[-2,[70,[-1]]]]]]],3,[[45,[-1]]]],[[[106,[-1,-2]]],5,3,[[45,[-1]]]],[[],[[106,[-1,-2]]],3,[[45,[-1]]]],[[-1,-4],[[120,[-2,-3]]],[[121,[122]]],3,[[45,[-2]]],[[121,[-3]]]],[[[43,[-1]],[42,[-3]]],[[106,[-1,-2]]],3,[[45,[-1]]],[[121,[[120,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[124,[-1]],-2],6,3,28],[[[123,[-1]],-2],6,[127,3],28],[[[106,[-1,-2]],-3],6,[127,3],[127,[45,[-1]]],28],[[[124,[-1]],[43,[-1]],[58,[[67,[-1]]]]],[[67,[-1]]],3],[[[123,[-1]],[43,[-1]],[58,[[67,[-1]]]]],[[67,[-1]]],3],[[[123,[-1]],-2,[50,[-1]],[43,[-1]],[58,[[51,[-1]]]],[51,[-1]],[59,[-1]]],[[6,[[2,[[51,[-1]],[51,[-1]],[59,[-1]]]],53]]],3,[[54,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[128,[-1]],-2,[43,[-1]]],[[6,[[2,[[52,[-1]],[51,[-1]],[59,[-1]]]],53]]],3,[[54,[-1]]]],[[-2,[43,[-1]]],[[6,[[2,[[52,[-1]],[51,[-1]],[59,[-1]]]],53]]],3,[[54,[-1]]]],[[-2,[27,[[128,[-1]]]],[43,[-1]]],[[6,[[2,[[52,[-1]],[51,[-1]],[59,[-1]]]],53]]],3,[[54,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-1]]],[[129,[-1]]],[4,3]],[[[128,[-1]]],[[128,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[129,[-1]],[129,[-1]]],9,[10,3]],[[[128,[-1]],[128,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[129,[-1]],[43,[-1]],90,-2],[[91,[2]]],3,92],[[[129,[-1]],11],12,[13,3]],[[[128,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[[128,[-1]],-2],2,3,19],[[-2,[43,[-1]],[51,[-1]],[59,[-1]]],[[6,[[52,[-1]],53]]],3,[[54,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[129,[-1]]],9,3],[[[129,[-1]]],9,3],[[[129,[-1]]],9,3],[[[129,[-1]]],9,3],[[[129,[-1]]],9,3],[[[129,[-1]]],9,3],[[[129,[-1]]],9,3],[[[129,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[130,130],[[[131,[-1]]],[[131,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[131,[-1]],[131,[-1]]],26,3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[130]]],7],[-1,[[6,[[131,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[130,130],9],[[[131,[-1]],[131,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[130,11],12],[[130,11],12],[[[131,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[58,[132]]],[[27,[-1]]],[]],[133,-1,[]],[89,-1,[]],[134,-1,[]],[135,-1,[]],[136,-1,[]],[137,-1,[]],[138,-1,[]],[14,-1,[]],[-1,130,[]],[[-1,-2],14,[16,17],18],[[[131,[-1]],-2],2,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,29,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],-1,[]],[[],-1,[]],[[[131,[-1]],[131,[-1]]],[[27,[26]]],3],[[]],[[]],[[130,-1],6,28],[[[131,[-1]],-2],6,3,28],[-1,[[42,[132]]],[]],[-1,[[27,[133]]],[]],[-1,[[27,[89]]],[]],[-1,[[27,[134]]],[]],[-1,[[27,[135]]],[]],[-1,[[27,[136]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[27,[139]]],[]],[-1,139,[]],[-1,[[27,[137]]],[]],[-1,[[27,[138]]],[]],[-1,138,[]],[-1,[[27,[14]]],[]],[-1,14,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[140,[-1]]],[[142,[-1,141]]],3],[[[140,[-1]]],[[142,[-1,143]]],3],[[[140,[-1]]],[[142,[-1,144]]],3],[[[140,[-1]]],[[142,[-1,145]]],3],[[[146,[-1]],[42,[-1]]],[[2,[[42,[-1]],-1]]],3],[147,147],[[[140,[-1]]],[[140,[-1]]],[4,3]],[[[107,[-1]]],[[107,[-1]]],[4,3]],[[[148,[-1]]],[[148,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[107,[-1]],[74,[-1]]],-1,3],[[[140,[-1]],147],[[146,[-1]]],3],0,0,[[],[[140,[-1]]],3],[[],[[107,[-1]]],[99,3]],[[],[[148,[-1]]],[99,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[147,11],12],[[[146,[-1]],11],12,[13,3]],[[[140,[-1]],11],12,[13,3]],[[[107,[-1]],11],12,[13,3]],[[[148,[-1]],11],12,[13,3]],[-1,-1,[]],[5,147],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[148,[-1]],[131,[-1]]],[[27,[[74,[-1]]]]],3],[[[107,[-1]],[74,[-1]]],-1,3],[[[107,[-1]],[74,[-1]]],-1,3],[[[107,[-1]],[74,[-1]]],-1,3],[[[107,[-1]],[74,[-1]]],-1,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[[148,[-1]],[131,[-1]],[74,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[74,[-2]]],[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[149,[-1,-2,-3]]],[[42,[-1]]],[150,99,40,37,13],40,3],[[[149,[-1,-2,-3]],[43,[-3]]],2,[150,99,40,37,13],40,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[151,[-1]],[43,[-1]],[67,[-1]]],[[80,[[2,[[67,[-1]],[67,[-1]]]],113]]],3],[[[153,[[152,[-1]]]],[43,[-1]],[67,[-1]]],[[80,[[2,[[67,[-1]],[67,[-1]]]],113]]],3],[[[154,[-1]],76,[43,[-1]],[67,[-1]]],[[80,[[2,[[67,[-1]],[67,[-1]]]],113]]],3],[[[149,[76,[152,[-1]],-1]],76,[43,[-1]],[67,[-1]]],[[80,[[2,[[67,[-1]],[67,[-1]]]],113]]],3],[[[154,[-1]],76,[43,[-1]],[67,[-1]]],[[80,[[2,[[67,[-1]],[67,[-1]]]],109]]],3],[[[149,[76,[152,[-1]],-1]],76,[43,[-1]],[67,[-1]]],[[80,[[2,[[67,[-1]],[67,[-1]]]],109]]],3],0,0,[[[155,[-1,-3,-2]],[43,[-2]],[146,[-2]]],[[156,[-2]]],150,3,[[157,[-2]]]],0,0,0,[[[153,[-1]]],[[153,[-1]]],4],[[[152,[-1]]],[[152,[-1]]],[4,3]],[[[158,[-1]]],[[158,[-1]]],[4,3]],[[[159,[-1]]],[[159,[-1]]],[4,3]],[[[160,[-1]]],[[160,[-1]]],[4,3]],[76,76],[77,77],[[[149,[-1,-2,-3]]],[[149,[-1,-2,-3]]],[4,150],4,[4,3]],[[[155,[-1,-3,-2]]],[[155,[-1,-3,-2]]],[4,150],[4,3],[4,[157,[-2]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[151,[-1]],[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[153,[[152,[-1]]]],[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],0,0,[[[154,[-1]],76,[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[149,[76,[152,[-1]],-1]],76,[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],0,0,0,[[],76],[[],77],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[153,[-1]],[153,[-1]]],9,10],[[[152,[-1]],[152,[-1]]],9,[10,3]],[[[160,[-1]],[160,[-1]]],9,[10,3]],[[76,76],9],[[77,77],9],[[[149,[-1,-2,-3]],[149,[-1,-2,-3]]],9,[10,150],10,[10,3]],[[[155,[-1,-3,-2]],[155,[-1,-3,-2]]],9,[10,150],[10,3],[10,[157,[-2]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[154,[-1]],76,[67,[-1]],[67,[-1]],[67,[-1]],[43,[-1]]],[[67,[-1]]],3],[[[149,[76,[152,[-1]],-1]],76,[67,[-1]],[67,[-1]],[67,[-1]],[43,[-1]]],[[67,[-1]]],3],[[[161,[-1]],[43,[-1]],[72,[-1]]],[[27,[[78,[-1]]]]],3],[[[153,[[160,[-1]]]],[43,[-1]],[72,[-1]]],[[27,[[78,[-1]]]]],3],[[[162,[-1]],77,[43,[-1]],[72,[-1]]],[[27,[[78,[-1]]]]],3],[[[149,[77,[160,[-1]],-1]],77,[43,[-1]],[72,[-1]]],[[27,[[78,[-1]]]]],3],[[[153,[-1]],11],12,13],[[[152,[-1]],11],12,[13,3]],[[[158,[-1]],11],12,[13,3]],[[[159,[-1]],11],12,[13,3]],[[[160,[-1]],11],12,[13,3]],[[76,11],12],[[77,11],12],[[[149,[-1,-2,-3]],11],12,[13,150],13,[13,3]],[[[155,[-1,-3,-2]],11],12,[13,150],[13,3],[13,[157,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[149,[-1,-3,-2]]],[[155,[-1,-3,-2]]],150,3,[[157,[-2]]]],[[[149,[-1,-2,-3]],-1],[[153,[-2]]],[150,99,40,37,13],40,3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[76,-1],2,19],[[77,-1],2,19],0,0,0,[-1,5,[]],[76,5],[77,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[161,[-1]],[43,[-1]],[78,[-1]]],[[72,[-1]]],3],[[[153,[[160,[-1]]]],[43,[-1]],[78,[-1]]],[[72,[-1]]],3],[[[162,[-1]],77,[43,[-1]],[78,[-1]]],[[72,[-1]]],3],[[[149,[77,[160,[-1]],-1]],77,[43,[-1]],[78,[-1]]],[[72,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],5],[[[155,[-1,-3,-2]],[43,[-2]]],[[42,[[2,[-1,27]]]]],150,3,[[157,[-2]]]],0,0,0,[[],[[149,[-1,-2,-3]]],[150,99,40,37,13],40,3],[[],[[149,[-1,-2,-3]]],[150,99,40,37,13],40,3],[[[153,[-1]]],[[149,[-2,-1,-3]]],40,[150,99,40,37,13],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[163,[-2]]],[],[]],[[-1,[43,[-2]]],[[80,[[163,[-2]]]]],[],[]],[[[152,[-1]],[43,[-1]]],[[80,[[163,[-1]]]]],3],[[[158,[-1]]],[[163,[-1]]],3],[[[159,[-1]]],[[163,[-1]]],3],[[[160,[-1]],[43,[-1]]],[[80,[[163,[-1]]]]],3],0,0,0,[[[151,[-1]],[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[153,[[152,[-1]]]],[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[154,[-1]],76,[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[149,[76,[152,[-1]],-1]],76,[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[149,[-1,-2,-3]]],[[42,[[153,[-2]]]]],[150,99,40,37,13],40,3],[[[149,[-1,-2,-3]]],5,[150,99,40,37,13],40,3],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[43,[-2]]],27,[],[]],[[[153,[-2]],[43,[-1]]],27,3,[[157,[-1]]]],[[[152,[-1]],[43,[-1]]],27,3],[[[160,[-1]],[43,[-1]]],27,3],[[[149,[-1,-2,-3]]],5,[150,99,40,37,13],40,3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[164,-2,[165,[-1]]],[[80,[[166,[-1]],53]]],3,[[54,[-1]]]],[[164,[58,[0]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[164,[58,[[167,[-1]]]],[165,[-1]],[168,[-1]],[42,[[167,[-1]]]]],[[80,[[2,[[169,[-1]],0]]]]],3],[[164,[58,[[167,[-1]]]],[165,[-1]],-2,5,-3],[[80,[[2,[[42,[[169,[-1]]]],5,[42,[0]]]]]]],3,118,118],[[164,[42,[[167,[-1]]]],[165,[-1]],-2,5],[[80,[[2,[[42,[[167,[-1]]]],5,[42,[[167,[-1]]]]]]]]],3,118],[164,[[80,[2]]]],0,[164,164],[170,170],[171,171],[172,172],[173,173],[174,174],[175,175],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[171]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[164,164],9],[[170,170],9],[[171,171],9],[[172,172],9],[[173,173],9],[[174,174],9],[[175,175],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[164,11],12],[[170,11],12],[[170,11],12],[[171,11],12],[[171,11],12],[[172,11],12],[[173,11],12],[[174,11],12],[[175,11],12],[-1,-1,[]],[[[106,[-1,-2]]],164,3,[[45,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[171]]],3],[[[167,[-1]],[165,[-1]]],[[27,[172]]],3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[170,-1],2,19],[[171,-1],2,19],[[172,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[164,[[165,[-1]]],3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[170,176],0,[[29,[42,[170]],5,173],[[80,[164]]]],[[164,[165,[-1]]],5,3],[164,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[171,-1],6,28],0,0,[[164,-2,[165,[-1]],[169,[-1]],[166,[-1]],[0,[[51,[-1]]]]],[[80,[[42,[[51,[-1]]]]]]],3,[[54,[-1]]]],[[164,-2,[165,[-1]],[169,[-1]]],[[80,[2]]],3,[[54,[-1]]]],[171,-1,3],[171,-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[172,[165,[-1]]],[[167,[-1]]],3],[[172,[165,[-1]]],[[167,[-1]]],3],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[137,[[80,[171]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[164,5],[[80,[164]]]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[166,[-1]]],[99,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[],164],[[[167,[-1]],[165,[-1]],5],[[80,[[2,[[42,[[169,[-1]]]],5]]]]],3],[[[167,[-1]],[165,[-1]],5],[[80,[[2,[[42,[[167,[-1]]]],5,[42,[[167,[-1]]]]]]]]],3],[[[167,[-1]],[167,[-1]],[167,[-1]],[165,[-1]],5],[[80,[[2,[[42,[[169,[-1]]]],5]]]]],3],0,0,0,0,0,0,[164,[[168,[-1]]],3],[164,[[169,[-1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[177,[-1]]],[[177,[-1]]],[4,3]],[[[168,[-1]]],[[168,[-1]]],[4,3]],[[[169,[-1]]],[[169,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[168,[-1]]],[99,3]],[[],[[169,[-1]]],[99,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[177,[-1]],11],12,[13,3]],[[[168,[-1]],11],12,[13,3]],[[[169,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[[],5],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[164,[[168,[-1]]],3],0,[[]],[[]],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[167,[-1]],171],[[167,[-1]]],3],[133,[[167,[-1]]],3],[[[167,[-1]]],[[167,[-1]]],[4,3]],[[-1,-2],2,[],[]],[-1,[[167,[-1]]],3],[[[167,[-1]],[165,[-1]]],29,3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[167,[-2]]]]],7,[126,3]],[-1,[[6,[[178,[-2]]]]],7,[126,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[167,[-1]],[167,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[167,[-1]],11],12,[13,3]],[[[178,[-1]],11],12,[13,3]],[[[167,[-1]],[165,[-1]],90],29,3],[-1,-1,[]],[-1,-1,[]],[[[167,[-1]]],[[27,[-1]]],3],[[-1,-2],14,[16,17],18],[[[167,[-1]]],[[27,[5]]],3],[[[167,[-1]]],[[27,[5]]],3],[[[167,[-1]]],[[27,[5]]],3],[[[167,[-1]],-2],2,3,19],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[167,[-1]]],9,3],[[[167,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[171,[[167,[-1]]],3],[-1,[[167,[-1]]],3],[14,[[167,[-1]]],3],[[]],[[]],[[[167,[-1]],-2],6,[127,3],28],[[[178,[-1]],-2],6,[127,3],28],[[[167,[-1]]],171,3],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[14,[[167,[-1]]],3],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[165,[-1]],[167,[-1]]],[[80,[[2,[[167,[-1]],[167,[-1]]]]]]],3],[[[165,[-1]],[167,[-1]]],[[80,[[167,[-1]]]]],3],[[],[[165,[-1]]],[99,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[165,[-1]],5],[[27,[[2,[[167,[-1]],[167,[-1]]]]]]],3],[[[165,[-1]],5],[[27,[[2,[[167,[-1]],[167,[-1]],[167,[-1]]]]]]],3],[[[165,[-1]],5],[[27,[[2,[[167,[-1]],[167,[-1]],[167,[-1]],[167,[-1]]]]]]],3],[[[165,[-1]],[167,[-1]]],[[27,[122]]],3],[[[165,[-1]],[167,[-1]]],[[27,[29]]],3],[[[165,[-1]],[167,[-1]]],[[27,[122]]],3],[[[165,[-1]],[167,[-1]]],[[27,[122]]],3],[[[165,[-1]],5],[[27,[[42,[29]]]]],3],[[[165,[-1]],11],12,[13,3]],[-1,-1,[]],[[[165,[-1]],[167,[-1]]],[[80,[[179,[-1]]]]],3],[[[165,[-1]],-1,[167,[-1]]],[[80,[[167,[-1]]]]],3],[[[165,[-1]],-1,[167,[-1]]],[[80,[[2,[-1,[179,[-1]]]]]]],3],[[[165,[-1]]],2,3],[[],5],[[[165,[-1]],171,[167,[-1]],[167,[-1]]],[[167,[-1]]],3],[[[165,[-1]],171,[167,[-1]],[167,[-1]],[179,[-1]]],[[167,[-1]]],3],[[[165,[-1]],171,[167,[-1]],[167,[-1]],[167,[-1]]],[[167,[-1]]],3],[[[165,[-1]],171,[167,[-1]],[167,[-1]],[167,[-1]],[179,[-1]]],[[167,[-1]]],3],[[[165,[-1]],171,[167,[-1]],[167,[-1]],[167,[-1]],[167,[-1]]],[[167,[-1]]],3],[[[165,[-1]],171,[167,[-1]],[167,[-1]],[167,[-1]],[167,[-1]],[179,[-1]]],[[167,[-1]]],3],[[[165,[-1]],66],[[167,[-1]]],3],[[[165,[-1]]],[[167,[-1]]],3],[[[165,[-1]],66],[[167,[-1]]],3],[[[165,[-1]],122],[[167,[-1]]],3],[[[165,[-1]],[58,[29]]],[[167,[-1]]],3],[[[165,[-1]],[180,[-1]]],[[167,[-1]]],3],[[[165,[-1]],66],[[27,[[167,[-1]]]]],3],[[[165,[-1]],122],[[27,[[167,[-1]]]]],3],[-1,-2,[],[]],[[[165,[-1]],66],[[167,[-1]]],3],[[],[[6,[24,25]]]],[[[165,[-1]],[42,[[167,[-1]]]]],[[167,[-1]]],3],[[[165,[-1]],-1],[[27,[[2,[-1,[167,[-1]]]]]]],3],[[]],0,[[[165,[-1]],[105,[[104,[90]]]],66],[[80,[[167,[-1]]]]],3],[[[165,[-1]],[105,[[104,[90]]]],66],[[80,[[2,[181,[167,[-1]],9]],182]]],3],[[[165,[-1]],66],[[80,[[167,[-1]]]]],3],[[[165,[-1]],[58,[[167,[-1]]]]],[[80,[[42,[-1]]]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[[[183,[-1]],-1,-1,[179,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[183,[-1]]],[99,3]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[183,[-2]]]]],7,[126,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[183,[-1]],11],12,[13,3]],[-1,-1,[]],[[[183,[-1]],[179,[-1]]],[[27,[[178,[-1]]]]],3],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[183,[-1]],-1],[[27,[[2,[-1,[179,[-1]]]]]]],3],[[]],[[[165,[-1]],[179,[-1]],[183,[-1]]],[[80,[[167,[-1]]]]],3],[[[183,[-1]],[167,[-1]],[165,[-1]]],[[80,[[179,[-1]]]]],3],[[[183,[-1]],-2],6,[127,3],28],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[184,11],12],[[184,185],29],[-1,-1,[]],[[184,[58,[185]]],[[80,[2]]]],[[],5],[[184,29],185],[-1,-2,[],[]],[[],[[6,[24,25]]]],[184,185],[185,184],[[]],[[184,66],[[27,[185]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[184,184],[[80,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,108,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[182,182],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,[[182,11],12],[[182,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[186,66],[-1,-2,[],[]],[-1,-2,[],[]],[186,186],[[-1,-2],2,[],[]],[186,133],[[186,181],[[187,[-1,[42,[132]]]]],3],[[],186],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[186,-1],29,[[188,[[58,[132]]]]]],[[186,186],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[186,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[186,133],9],[[],[[6,[24,25]]]],[[],[[0,[118]]]],[181,[[187,[-1,186]]],3],[[],[[0,[118]]]],[[],[[0,[118]]]],[186,[[0,[118]]]],[[],[[0,[118]]]],[186,[[32,[118]]]],[186,[[0,[118]]]],[[],[[0,[118]]]],[[]],[186,138],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,66,[189,[-1,-2]]],[[189,[-1,-2]]],[190,4,191],3],[[-1,192,[189,[-1,-2]]],[[189,[-1,-2]]],[190,4,191],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[193,[-1]]],[[193,[-1]]],[4,3]],[[[189,[-1,-2]]],[[189,[-1,-2]]],[4,191],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[193,[-1]],[193,[-1]]],9,[10,3]],[[[189,[-1,-2]],[189,[-1,-2]]],9,[10,191],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[[193,[-1]],11],12,[13,3]],[[[193,[-1]],11],12,3],[[[189,[181,-1]],11],12,3],[[[189,[-1,-2]],11],12,[13,191],[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,192],[[189,[-1,-2]]],[190,4,191],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[193,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[194,[-1,-2,[189,[-1,-3]]]],-4],[[194,[-1,-2,[189,[-1,-3]]]]],191,[],3,118],[[-1,[193,[-2]]],[[189,[-1,-2]]],191,3],[[[27,[-1]],-2,[193,[-3]]],[[194,[-2,-1,[189,[-2,-3]]]]],[],191,3],[[[189,[-1,-2]],[189,[-1,-2]]],[[189,[-1,-2]]],[190,4,191],3],[[]],[[]],[[[6,[-1,-2]],-3,-4],[[194,[-3,-1,[189,[-3,-5]]]]],[],[],191,118,3],[[-1,[193,[-2]]],[[194,[-1,-3,[189,[-1,-2]]]]],191,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[195,195],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[195,195],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[195,11],12],[-1,-1,[]],[[181,181],195],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[66,5,5,5,5],29],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[196,196],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[196,196],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[196,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[133,66],[[0,[118]]]],[[],[[0,[118]]]],[[133,9,66],[[0,[118]]]],[[133,9,66],[[0,[118]]]],[133,[[0,[118]]]],[[133,9,66],[[0,[118]]]],[[133,9,66],[[0,[118]]]],[[],[[0,[118]]]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[105,[[104,[90]]]],9],[[0,[118]]]],[[],[[0,[118]]]],[[],[[0,[118]]]],[181,[[187,[-1,181]]],3],[[[105,[[104,[90]]]],9,9],[[0,[118]]]],[[[105,[[104,[90]]]],9],[[0,[118]]]],[[],[[0,[118]]]],[186,[[0,[118]]]],[[[105,[[104,[90]]]],9],[[0,[118]]]],[[[105,[[104,[90]]]],9],[[0,[118]]]],[[[105,[[104,[90]]]],9],[[0,[118]]]],[[[105,[[104,[90]]]],9],[[0,[118]]]],[181,[[187,[-1,[42,[181]]]]],3],[181,[[187,[-1,[42,[181]]]]],3],[[],[[0,[118]]]],[[[105,[[104,[90]]]],9],[[0,[118]]]],[66,[[0,[118]]]],[66,[[0,[118]]]],[[],[[0,[118]]]],[[[105,[[104,[90]]]],9,9],[[0,[118]]]],[[],[[0,[118]]]],0,0,0,0,0,[[-1,5],5,[]],[[-1,5],5,[]],[[-1,[67,[-2]],[67,[-2]],[43,[-2]],5,[48,[[106,[-2,-3]]]]],[[6,[[42,[[57,[[55,[-2]],[56,[-2]],-2,-3]]]],111]]],[],[],[]],0,[-1,[[106,[-2,-3]]],[],[],[]],[[-1,5],5,[]],[[-1,5],9,[]],[[-1,5],9,[]],[[5,[106,[-1,-2]]],-3,[],[],[]],0,[[-1,[58,[[44,[-2,-3]]]]],[[6,[[42,[[2,[[44,[-2,-3]],[197,[-2]]]]]],53]]],[],[],[]],[[],5],[-1,[[42,[-2]]],[],[]],[-1,5,[]],[-1,5,[]],0,[[[42,[[2,[[44,[-1,-2]],[197,[-1]]]]]]],[[6,[9,53]]],[3,40],[[45,[-1]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[198,[-1]]],[[198,[-1]]],[4,199,200]],[[-1,-2],2,[],[]],[[5,[48,[[106,[65,-1]]]]],[[6,[[201,[62]],53]]],[[45,[65]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[198,[-2]]]]],7,[199,200]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[198,[-1]],11],12,[13,199,200]],[[[202,[-1,-3,-2]],11],12,[13,199,200],[13,3],[13,[45,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[202,[62,-1,65]]],[[106,[65,-1]]],[[45,[65]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[106,[65,-1]]],[[202,[62,-1,65]]],[[45,[65]]]],[[[202,[62,-1,65]],[203,[62]],[204,[62]],[67,[65]],[67,[65]],[43,[65]],5,-2,[48,[[106,[65,-1]]]]],[[6,[[2,[[198,[62]],[55,[65]],[55,[65]]]],111]]],[[45,[65]]],[205,4]],[[]],[[]],[[]],0,0,[[[202,[62,-1,65]],[44,[65,-1]],[203,[62]],-2],[[6,[[64,[62]],53]]],[[45,[65]]],205],[[[202,[62,-1,65]]],5,[[45,[65]]]],0,[[[198,[-1]],-2],6,[199,200],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[63,[62]],[206,[62]],[58,[65]],[58,[65]],[207,[62]],-1],[[6,[9,53]]],[205,22]],[[[44,[65,-1]],[63,[62]],[64,[62]]],[[6,[9,53]]],[[45,[65]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[208,[-1,-2]]],[[208,[-1,-2]]],[209,4],[4,[45,[-1]]]],[[-1,-2],2,[],[]],[[[210,[-1,-2]],[208,[-1,-2]]],[[6,[[210,[-1,-2]],111]]],209,[[45,[-1]]]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[208,[-2,-3]]]]],7,209,[[45,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[210,[-2,-3]]]]],7,[126,209],[126,[45,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[208,[-1,-2]],-3],[[91,[2]]],209,[[45,[-1]]],92],[[[211,[-1,-2]],[208,[-1,-2]],[67,[-1]],[67,[-1]],[43,[-1]],5,[48,[[106,[-1,-2]]]]],[[6,[[2,[[210,[-1,-2]],[42,[-1]],[42,[-1]],5]],111]]],209,[[45,[-1]]]],[[[208,[-1,-2]],[58,[132]]],[[27,[[58,[132]]]]],209,[[45,[-1]]]],[[[208,[-1,-2]]],5,209,[[45,[-1]]]],[[[211,[-1,-2]],11],12,[13,209],[13,[45,[-1]]]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[211,[-1,-2]]],[[106,[-1,-2]]],209,[[45,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[[5,[106,[-1,-2]]],[[211,[-1,-2]]],209,[[45,[-1]]]],0,[[]],[[]],[[]],[[[211,[-1,-2]],[208,[-1,-2]],[58,[[57,[[55,[-1]],[56,[-1]],-1,-2]]]],[43,[-1]],[48,[[106,[-1,-2]]]]],[[6,[[2,[[210,[-1,-2]],[42,[-1]],[42,[-1]],5]],111]]],209,[[45,[-1]]]],[[[208,[-1,-2]],[43,[-1]],[58,[[212,[-1,-2]]]],5,[42,[-1]],[48,[[106,[-1,-2]]]]],[[6,[[210,[-1,-2]],111]]],209,[[45,[-1]]]],[[5,[48,[[106,[-1,-2]]]]],[[208,[-1,-2]]],209,[[45,[-1]]]],[[[211,[-1,-2]]],5,209,[[45,[-1]]]],[[[208,[-1,-2]],-3],6,209,[[45,[-1]]],28],[[[210,[-1,-2]],-3],6,[127,209],[127,[45,[-1]]],28],0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[210,[-1,-2]],[208,[-1,-2]],5,[58,[-1]],[58,[-1]]],[[6,[9,112]]],209,[[45,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[[213,[-1,-2]]],5,3,[[45,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[47,[-1,-2]],[49,[-1]]],5,3,[[45,[-1]]]],[[[213,[-1,-2]]],5,3,[[45,[-1]]]],[[[214,[-1,-2]]],[[214,[-1,-2]]],[209,4],[4,[45,[-1]]]],[[[47,[-1,-2]]],[[47,[-1,-2]]],[4,3],[4,[45,[-1]]]],[[[213,[-1,-2]]],[[213,[-1,-2]]],[4,3],[4,[45,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[214,[-2,-3]]]]],7,209,[[45,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[215,[-2,-3]]]]],7,[126,209],[[45,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[214,[-1,-2]],-3],[[91,[2]]],209,[[45,[-1]]],92],[[[216,[-1,-2]],[27,[[214,[-1,-2]]]],[67,[-1]],[67,[-1]],[43,[-1]],5,[48,[[106,[-1,-2]]]]],[[6,[[2,[[215,[-1,-2]],[42,[-1]],[42,[-1]],5]],111]]],209,[[45,[-1]]]],[[[214,[-1,-2]],[58,[132]]],[[27,[[58,[132]]]]],209,[[45,[-1]]]],[[[214,[-1,-2]]],5,209,[[45,[-1]]]],[[[216,[-1,-2]],11],12,[13,209],[13,[45,[-1]]]],[[[47,[-1,-2]],11],12,[13,3],[13,[45,[-1]]]],[[[213,[-1,-2]],11],12,[13,3],[13,[45,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[5,[58,[[57,[[55,[-1]],[56,[-1]],-1,-2]]]],[43,[-1]],[48,[[47,[-1,-2]]]]],[[217,[-3,-2]]],3,[[45,[-1]]],218],[[[217,[-1,-3]],5],[],218,3,[[45,[-2]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[216,[-1,-2]]],[[106,[-1,-2]]],209,[[45,[-1]]]],[[[47,[-1,-2]]],[[48,[[106,[-1,-2]]]]],3,[[45,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[106,[-1,-2]]],[[216,[-1,-2]]],209,[[45,[-1]]]],[[[48,[[106,[-1,-2]]]],5],[[47,[-1,-2]]],3,[[45,[-1]]]],[[[48,[[106,[-1,-2]]]],5],[[47,[-1,-2]]],3,[[45,[-1]]]],[[[47,[-1,-2]]],5,3,[[45,[-1]]]],[[[213,[-1,-2]]],5,[209,3],[[45,[-1]]]],[[[217,[-1,-3]]],5,218,3,[[45,[-2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[213,[-1,-2]],5],[[213,[-1,-2]]],[209,3],[[45,[-1]]]],[[[216,[-1,-2]],[27,[[214,[-1,-2]]]],[58,[[57,[[55,[-1]],[56,[-1]],-1,-2]]]],[43,[-1]],[48,[[106,[-1,-2]]]]],[[6,[[2,[[215,[-1,-2]],[42,[-1]],[42,[-1]],5]],111]]],209,[[45,[-1]]]],[[[27,[[214,[-1,-2]]]],[43,[-1]],[217,[[219,[-1]],-2]],5,[42,[-1]],[48,[[106,[-1,-2]]]]],[[6,[[215,[-1,-2]],111]]],209,[[45,[-1]]]],[[[216,[-1,-2]]],5,209,[[45,[-1]]]],[[[47,[-1,-2]]],5,3,[[45,[-1]]]],[[[214,[-1,-2]],-3],6,209,[[45,[-1]]],28],[[[215,[-1,-2]],-3],6,[127,209],[[45,[-1]]],28],[[[213,[-1,-2]],-3,[27,[[52,[-1]]]],[58,[[52,[-1]]]]],[[6,[[2,[[27,[[52,[-1]]]],[42,[[52,[-1]]]]]],53]]],3,[[45,[-1]]],[[54,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[215,[-1,-2]],[222,[[219,[-1]],[220,[-1]],[213,[-1,-2]],221]],[27,[[214,[-1,-2]]]],5,[58,[-1]],[58,[-1]]],[[6,[9,223]]],209,[[45,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-2,[43,[-1]],[27,[[67,[-1]]]]],[[6,[[2,[[52,[-1]],[51,[-1]],[51,[-1]],[51,[-1]]]],53]]],3,[[54,[-1]]]],[[-2,[43,[-1]],[27,[[67,[-1]]]]],[[6,[[2,[[52,[-1]],[51,[-1]],[51,[-1]],[51,[-1]]]],53]]],3,[[54,[-1]]]],[[[224,[-1,134]]],[[27,[[224,[-1,134]]]]],3],[[[224,[-1,134]]],[[27,[[224,[-1,134]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[224,[-1,134]],134],[[224,[-1,134]]],3],[225,225],[[[224,[-1,-2]]],[[224,[-1,-2]]],[4,3],[4,226]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[225,225],26],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[225,225],9],[[[224,[-1,-2]],[224,[-1,-2]]],9,[10,3],[10,226]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[67,[-1]],[43,[-1]],90,-2],[[91,[2]]],3,92],[[[72,[-1]],[43,[-1]],90,-2],[[91,[2]]],3,92],[[225,11],12],[[[224,[-1,-2]],11],12,[13,3],[13,226]],[133,[[67,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[225,-1],2,19],[[[224,[-1,-2]],-3],2,3,226,19],[225,[[27,[5]]]],[[-1,5],[[224,[-2,-1]]],226,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[224,[-1,134]]],9,3],[[[224,[-1,134]]],9,3],[[[72,[-1]]],9,3],[[[224,[-1,89]]],9,3],[-1,9,[]],[[[67,[-1]]],9,3],[[[224,[-1,134]]],9,3],[[[224,[-1,134]]],9,3],[225,9],[225,9],[[[224,[-1,-2]]],9,3,226],[[-1,134],9,[]],[[[67,[-1]],134],9,3],[-1,9,[]],[[[67,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[89,225],[[72,[-1]]],3],[5,225],[[89,225],[[224,[-1,89]]],3],[-1,[[224,[-2,-1]]],226,3],[[-1,5],[[224,[-2,-1]]],226,3],[225,[[27,[5]]]],[[225,225],[[27,[26]]]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[5,9,[48,[[106,[-1,-2]]]],84],[[6,[[48,[[208,[-1,-2]]]],227]]],209,[[45,[-1]]]],[[],79],[[5,[48,[[106,[-1,-2]]]],-3],[[6,[-4,227]]],209,[[45,[-1]]],41,[]],0,0,0,0,[-1,108,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[227,11],12],[[227,11],12],[228,227],[-1,-1,[]],[229,227],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[227,[[27,[108]]]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[230,[-1,-2]]],[[230,[-1,-2]]],[4,3],[4,[45,[-1]]]],[[-1,-2],2,[],[]],[[],231],[[],231],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],0,[[[230,[-1,-2]],[67,[-1]],[43,[-1]]],[[80,[[2,[[67,[-1]],5,[72,[-1]],[42,[[67,[-1]]]]]]]]],3,[[45,[-1]]]],[[[230,[-1,-2]],11],12,[13,3],[13,[45,[-1]]]],[[[232,[-1,-3,-2]],11],12,[13,3],[13,[45,[-1]]],[13,[233,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[[-1,[43,[-2]],[105,[[104,[90]]]],-3],[[80,[2]]],[],[],[[188,[234]],40]],[[-1,[43,[-2]],[105,[[104,[90]]]],181,-3],[[80,[181]]],[],[],[[188,[234]],40]],[[-1,[43,[-2]],[105,[[104,[90]]]],-3],[[80,[2]]],[],[],[[188,[234]]]],[[-1,[43,[-2]],[105,[[104,[90]]]],[67,[-2]],-3],[[80,[2]]],[],[],[[188,[234]],40]],[[[230,[-1,-2]],[43,[-1]],[105,[[104,[90]]]],[67,[-1]],-3],[[80,[2]]],3,[[45,[-1]]],[[188,[234]],40]],[[-1,[43,[-2]],90,[67,[-2]]],[[80,[[2,[[55,[-2]],[55,[-2]],5]]]]],[],[]],[[[230,[-1,-2]],[43,[-1]],90,[67,[-1]]],[[80,[[2,[[55,[-1]],[55,[-1]],5]]]]],3,[[45,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[[],29],[[],29],[[[43,[-1]],5,[27,[231]],[106,[-1,-2]]],-3,[],[],[]],[[[43,[-1]],5,[27,[231]],[106,[-1,-2]]],[[230,[-1,-2]]],3,[[45,[-1]]]],[[[43,[-1]],5,[27,[231]],[106,[-1,-2]]],[[230,[-1,-2]]],3,[[45,[-1]]]],[[[43,[-1]],5,[27,[231]],[106,[-1,-2]]],[[80,[[232,[-1,-3,-2]]]]],3,[[45,[-1]]],[[233,[-1,-2]]]],[[]],[[]],[[-1,29],29,[]],[[[230,[-1,-2]],29],29,3,[[45,[-1]]]],[-1,29,[]],[[[230,[-1,-2]]],29,3,[[45,[-1]]]],[[[27,[-1]],[106,[-2,-3]]],[[80,[2]]],[[188,[234]]],[3,126],[[45,[-2]]]],[[[106,[-1,-2]]],[[80,[2]]],[3,126],[[45,[-1]]]],[[[43,[-1]],[232,[-1,-3,-2]],[27,[-4]]],[[80,[2]]],3,[[45,[-1]]],[[233,[-1,-2]]],[[188,[234]]]],[[[232,[-1,-3,-2]]],[[80,[2]]],3,[[45,[-1]]],[[233,[-1,-2]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[90,184],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],90],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[90,11],12],[[90,185],29],[-1,-1,[]],[90,185],[[90,[58,[185]]],[[80,[2]]]],[[],5],[[],90],[[],90],[[90,-1],185,[[188,[66]]]],[[90,[58,[-1]],9,9],[[80,[185]]],[[188,[66]]]],[[90,[58,[-1]],9],[[80,[185]]],[[188,[66]]]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[66,122],[[],122],[184,90],[[]],[90,[[105,[[104,[90]]]]]],[[90,66],[[27,[185]]]],[[90,185],[[80,[2]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[90,184],[[80,[2]]]],[66,122],[-1,-2,[],[]],0,0,0,0,[-1,108,[]],[[[43,[-1]],9],[[67,[-1]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[43,[-1]],[67,[-1]]],[[6,[[67,[-1]],113]]],3],0,[[[43,[-1]],[67,[-1]]],[[6,[[2,[[67,[-1]],[67,[-1]]]],113]]],3],[[[43,[-1]],[67,[-1]]],[[6,[[67,[-1]],113]]],3],0,0,[113,113],[[[235,[-1]]],[[235,[-1]]],[4,3]],[[[236,[-1]]],[[236,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[43,[-1]],[67,[-1]]],[[67,[-1]]],3],0,[[[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],0,[[[43,[-1]],[67,[-1]],[67,[-1]]],9,3],0,0,0,[[],[[43,[-1]]],3],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],0,[5,2],[5,2],[5,2],[5,2],0,0,0,0,0,[[[43,[-1]]],[[236,[-1]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[129,[-1]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[133]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[2,[[131,[-1]],[67,[-1]]]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[2,[[67,[-1]],[67,[-1]]]]]]],3],[[[43,[-1]],[72,[-1]]],[[27,[[78,[-1]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[2,[[67,[-1]],[67,[-1]],[67,[-1]]]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[122]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[42,[[67,[-1]]]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[122]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[1,[-1]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[2,[[67,[-1]],[67,[-1]]]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[29]]],3],[[[43,[-1]],[67,[-1]]],[[27,[122]]],3],[[[43,[-1]],[67,[-1]]],[[27,[122]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[2,[[67,[-1]],[67,[-1]]]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[128,[-1]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[15]]],3],[[[43,[-1]],[71,[-1]]],[[27,[[72,[-1]]]]],3],[[[43,[-1]],[70,[-1]]],[[27,[[67,[-1]]]]],3],[[[43,[-1]],11],12,[13,3]],[[113,11],12],[[113,11],12],[[[235,[-1]],11],12,[13,3]],[[[236,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[43,[-1]]],[[72,[-1]]],3],[[[43,[-1]]],[[72,[-1]]],3],[[[43,[-1]]],[[72,[-1]]],3],[[[43,[-1]]],[[72,[-1]]],3],[[[43,[-1]],[72,[-1]]],[[27,[[74,[-1]]]]],3],[[[43,[-1]],[128,[-1]]],[[27,[[74,[-1]]]]],3],[[[43,[-1]],134,-1],[[27,[[67,[-1]]]]],3],[[[43,[-1]],-2],[[27,[[67,[-1]]]]],3,[[121,[[1,[-1]]]]]],[[[43,[-1]],[67,[-1]]],[[27,[[70,[-1]]]]],3],[[[43,[-1]],[72,[-1]],[27,[[237,[-1]]]]],[[6,[[2,[[71,[-1]],[27,[[238,[-1]]]]]],113]]],3],[[[43,[-1]],[67,[-1]],[27,[[237,[-1]]]]],[[6,[[2,[[70,[-1]],[27,[[239,[-1]]]]]],113]]],3],0,0,[[[43,[-1]],[72,[-1]]],[[27,[[71,[-1]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[70,[-1]]]]],3],[[[43,[-1]],66],[[70,[-1]]],3],[[[43,[-1]],122],[[70,[-1]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[[43,[-1]],-1,[67,[-1]]],[[27,[[67,[-1]]]]],3],[[[43,[-1]],-1,[67,[-1]]],[[67,[-1]]],3],0,[[[43,[-1]]],2,3],0,0,[-1,[],[]],[[],5],[[],5],[[],5],[[],5],[[[43,[-1]],133],[[67,[-1]]],3],[[[43,[-1]],-1,[67,[-1]]],[[67,[-1]]],3],[[[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[43,[-1]]],[[72,[-1]]],3],[[[43,[-1]]],[[72,[-1]]],3],[[[43,[-1]]],[[72,[-1]]],3],[[[43,[-1]]],[[72,[-1]]],3],[[[43,[-1]],[67,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[43,[-1]],[58,[[67,[-1]]]]],[[67,[-1]]],3],[[[43,[-1]],134,-1],[[67,[-1]]],3],[[[43,[-1]],-1],[[67,[-1]]],3],[[[43,[-1]],-1],[[67,[-1]]],3],[[[43,[-1]],-1],[[67,[-1]]],3],[[[43,[-1]],-1],[[67,[-1]]],3],[[[43,[-1]],-2],[[67,[-1]]],3,[[121,[[1,[-1]]]]]],[[[43,[-1]],-1],[[67,[-1]]],3],[[[43,[-1]],-1],[[67,[-1]]],3],[[[43,[-1]],-1],[[67,[-1]]],3],[[[43,[-1]],-1],[[67,[-1]]],3],[[[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[43,[-1]],66],[[67,[-1]]],3],[[[43,[-1]],122],[[67,[-1]]],3],[[[43,[-1]],[58,[29]]],[[67,[-1]]],3],[[[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],[[[43,[-1]],9],[[67,[-1]]],3],[[[43,[-1]],[180,[-1]]],[[67,[-1]]],3],[[[43,[-1]],[128,[-1]]],[[67,[-1]]],3],[[[43,[-1]],14],[[67,[-1]]],3],[[[43,[-1]],15],[[67,[-1]]],3],[[[43,[-1]],[71,[-1]],[237,[-1]]],[[27,[[72,[-1]]]]],3],[[[43,[-1]],[70,[-1]],[237,[-1]]],[[27,[[67,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[43,[-1]],-2],[[67,[-1]]],3,[[188,[66]]]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,0,0,0,0,0,[[[43,[-1]],[58,[[67,[-1]]]]],[[67,[-1]]],3],0,[[[43,[-1]],[72,[-1]]],[[72,[-1]]],3],0,[[],[[43,[-1]]],3],[[[43,[-1]]],[[236,[-1]]],3],[[[43,[-1]]],[[67,[-1]]],3],0,[[[43,[-1]],-2],[[67,[-1]]],3,[[121,[[1,[-1]]]]]],0,0,0,0,0,[[[43,[-1]],[67,[-1]]],[[27,[[2,[-1,[67,[-1]]]]]]],3],0,[[[43,[-1]],[67,[-1]]],[[6,[[2,[-1,[67,[-1]]]],113]]],3],[[]],[[]],[[]],[[]],0,0,[[[235,[-1]]],[[67,[-1]]],3],[[[43,[-1]],[67,[-1]],[67,[-1]]],[[6,[9,113]]],3],0,0,[[[43,[-1]],66],[[6,[[67,[-1]],182]]],3],[[[43,[-1]],[105,[[104,[90]]]],181],[[6,[[2,[181,[67,[-1]],9]],182]]],3],[[[43,[-1]],[105,[[104,[90]]]],66],[[6,[[67,[-1]],182]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[67,[-1]]]]],3],0,[[[43,[-1]],[67,[-1]]],[[6,[[67,[-1]],113]]],3],[[[43,[-1]],66],[[67,[-1]]],3],0,[[[43,[-1]],[67,[-1]],[67,[-1]]],[[67,[-1]]],3],0,[[[43,[-1]]],[[67,[-1]]],3],0,[[[43,[-1]],-2],[[67,[-1]]],3,[[188,[66]]]],0,[[[43,[-1]]],[[67,[-1]]],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[43,[-1]],[72,[-1]]],[[27,[[238,[-1]]]]],3],[[[43,[-1]],[67,[-1]]],[[27,[[239,[-1]]]]],3],[[[43,[-1]],[67,[-1]]],[[6,[[2,[[237,[-1]],[70,[-1]]]],113]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[[[43,[-1]],14],[[67,[-1]]],3],0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[43,[-1]],66],[[67,[-1]]],3],[[[235,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]],-1,-1],[[6,[[71,[-1]],113]]],3],0,[[[43,[-1]],-1,-1],[[6,[[70,[-1]],113]]],3],0,[[[235,[-1]]],[[70,[-1]]],3],0,0,0,0,0,[[]],[[122,122],[[27,[122]]]],[-1,-2,[],[]],[-1,-2,[],[]],[122,122],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[122]]],7],[[122,66],122],[122,[[27,[122]]]],[5,2],[[122,122],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[122,[58,[-1]]],122,[[188,[66]]]],[[122,11],12],[[122,11],12],[66,29],[122,29],[122,29],[122,29],[-1,-1,[]],[66,122],[66,[[27,[122]]]],[[-1,-2],14,[16,17],18],[[122,122],9],[[122,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[122,9],[122,9],[122,9],[122,9],[133,9],[[[58,[-1]]],122,[[188,[66]]]],[[[42,[29]]],122],[[],[[6,[24,25]]]],[122,[[80,[66]]]],[[[58,[-1]],9],122,[[188,[66]]]],[[[42,[29]],9],122],[[122,122],[[27,[26]]]],[122,[[58,[29]]]],[[]],[122,9],[9,122],[[],122],[[],122],[[122,-1],6,28],[122,2],[[[58,[-1]]],122,[[188,[66]]]],[[[42,[29]]],122],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[180,[-1]]],[[180,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[180,[-1]],[180,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[180,[-1]],11],12,3],[[[180,[-1]],11],12,[13,3]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[42,[-1]]],[]],[[],[[42,[135]]]],[[],[[42,[136]]]],[[],[[42,[66]]]],[[134,-2],[[52,[-1]]],3,[[54,[-1]]]],[[89,-2],[[52,[-1]]],3,[[54,[-1]]]],[[135,-2],[[52,[-1]]],3,[[54,[-1]]]],[[136,-2],[[52,[-1]]],3,[[54,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[134,134],[89,89],[135,135],[136,136],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[134]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[89]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[135]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[136]]],7],[5,2],[5,2],[5,2],[5,2],[[134,134],9],[[89,89],9],[[135,135],9],[[136,136],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[134,11],12],[[134,11],12],[[89,11],12],[[89,11],12],[[135,11],12],[[135,11],12],[[136,11],12],[[136,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[-2]]],3,[]],[-1,[[27,[134]]],3],[-1,[[27,[89]]],3],[-1,[[27,[135]]],3],[-1,[[27,[136]]],3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[134,-1],2,19],[[89,-1],2,19],[[135,-1],2,19],[[136,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[134,9],[136,9],[[134,134],9],[134,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[135,135],[[27,[26]]]],[[136,136],[[27,[26]]]],[[]],[[]],[[]],[[]],[[134,-1],6,28],[[89,-1],6,28],[[135,-1],6,28],[[136,-1],6,28],[[-1,5],9,[]],[[135,5],9],[[136,5],9],[-1,66,[]],[135,66],[136,66],[-1,-2,[],3],[134,-1,3],[89,-1,3],[135,-1,3],[136,-1,[[240,[14]],241]],[-1,[],[]],[134],[89],[135],[136],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[137,[[6,[134]]]],[-1,[[6,[-2]]],[],[]],[137,[[6,[89]]]],[-1,[[6,[-2]]],[],[]],[137,[[6,[135]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[137,[[6,[136]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[15,15],15],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[15]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[15,15],15],[5,2],[[15,15],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[15,11],12],[[15,11],12],[-1,-1,[]],[14,15],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[15,9],[[],[[6,[24,25]]]],[[15,15],15],[[15,15],[[27,[26]]]],[[]],[[15,15],15],[[15,-1],6,28],[[15,15],15],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[[-1,[43,[-2]],90,-3],[[91,[2]]],[],[],92],[[-1,[43,[-2]],90],29,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,132],[242,242],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[242,242],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[242,11],12],[[242,11],12],[-1,-1,[]],[[[58,[132]]],[[80,[242]]]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[58,[132]]],[[27,[5]]]],0,[242,132],[132,9],[132,9],[242,[[42,[132]]]],[-1,-2,[],[]],[-1,29,[]],[5,[[42,[132]]]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,108,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,243,21],[-1,243,21],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[243,11],12],[[243,11],12],[-1,-1,[]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],0,[-1,29,[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,66,[58,[66]],-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,66,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,66,[58,[66]],-1],6,245],[[244,5,-1],6,245],[[244,66,5,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,-1],6,245],[[244,66,-1],6,245],[5,2],[[244,11],12],[-1,-1,[]],[242,[[6,[-1,243]]],126],[242,244],[[],5],[-1,-2,[],[]],[244,9],[[],[[6,[24,25]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[246,6],[246,6],[246,6],[247,6],[248,6],[249,6],[249,6],[[250,11],12],[[246,11],12],[[247,11],12],[[248,11],12],[[249,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[250,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[[250,9],6],[[250,[58,[132]]],6],[[250,133],6],[[246,-1],[[6,[2]]],[127,17]],[[246,-1],[[6,[2]]],[127,17]],[[250,251],6],[[250,252],6],[[246,-1],[[6,[2]]],[127,17]],[[248,-1],[[6,[2]]],[127,17]],[[249,66,-1],[[6,[2]]],[127,17]],[[249,66,-1],[[6,[2]]],[127,17]],[[250,253],6],[[250,254],6],[[250,255],6],[[250,256],6],[[247,-1],[[6,[2]]],[127,17]],[[250,[27,[5]]],6],[[250,66,-1],6,[127,17]],[[250,66,138,66,-1],6,[127,17]],[250,6],[[250,[27,[5]]],6],[[250,-1],6,[127,17]],[[250,66],6],[[250,66,5],6],[[250,66,138,66,5],6],[[250,5],6],[[250,66,5],6],[[250,66,138,66,5],6],[[250,137],6],[[250,138],6],[[250,14],6],[[250,132],6],[250,6],[[250,66],6],[[250,66,138,66],6],[[247,-1],[[6,[2]]],[127,17]],[-1,[[6,[242,243]]],127],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[238,[-1]]],[[238,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[238,[-2]]]]],7,[126,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[238,[-1]],[238,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[238,[-1]],11],12,[13,3]],[-1,-1,[]],[[[238,[-1]]],[[74,[-1]]],3],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[238,[-1]],-2],6,[127,3],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[238,[-1]],[107,[-1]]],[[71,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[239,[-1]]],[[239,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[239,[-2]]]]],7,[126,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[239,[-1]],[239,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[239,[-1]],11],12,3],[[[239,[-1]],11],12,[13,3]],[-1,-1,[]],[[[43,[-1]],[67,[-1]]],[[27,[[239,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[239,[-1]],-2],6,[127,3],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[239,[-1]],[107,[-1]]],[[70,[-1]]],3],0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[257,[-1,-2]]],[[257,[-1,-2]]],[4,226],[4,3]],[[-1,-2],2,[],[]],[[[257,[-1,-2]],[257,[-1,-2]]],26,226,3],[5,-1,[]],[5,-1,[]],[-1,[[6,[[257,[-2,-3]]]]],7,[126,226],[126,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[257,[-1,-2]],[257,[-1,-2]]],9,[10,226],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[257,[-1,-2]],11],12,[13,226],[13,3]],[[[257,[-1,-2]],11],12,[226,21],3],[-1,-1,[]],[66,[[6,[[257,[-1,-2]],258]]],226,3],[66,[[6,[[70,[-1]],113]]],3],[66,[[6,[[257,[134,-1]],113]]],3],[[-1,-2],[[257,[-1,-2]]],226,3],[[-1,-2],14,[16,17],18],[[[257,[-1,-2]],-3],2,226,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[257,[-1,-2]]],[[74,[-2]]],226,3],[[],[[6,[24,25]]]],[[[257,[-1,-2]],[257,[-1,-2]]],[[27,[26]]],226,3],[[[257,[-1,-2]]],[[2,[-2,-2]]],226,3],[[]],[[[257,[-1,-2]],-3],6,[127,226],[127,3],28],[[[257,[-1,-2]]],-1,226,3],[[[257,[-1,-2]]],-2,226,3],[[[257,[-1,-2]]],29,226,3],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[[257,[-1,-2]]],-2,226,3],[-1,-2,[],[]],0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[237,[-1]]],[[237,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,[[],[[237,[-1]]],[99,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[237,[-2]]]]],7,[126,3]],[5,2],[[[237,[-1]],[237,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[237,[-1]],11],12,[13,3]],[-1,-1,[]],[[[237,[-1]],[71,[-1]]],[[27,[[238,[-1]]]]],3],[[[237,[-1]],[70,[-1]]],[[27,[[239,[-1]]]]],3],[[[70,[-1]]],[[27,[[239,[-1]]]]],3],[[],5],[[[237,[-1]],[43,[-1]],[67,[-1]]],[[27,[[70,[-1]]]]],3],[[[237,[-1]],[70,[-1]],[27,[[239,[-1]]]]],[[27,[[27,[[239,[-1]]]]]]],3],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[237,[-1]]],3],[[[43,[-1]],[67,[-1]]],[[2,[[237,[-1]],[27,[[70,[-1]]]]]]],3],[[[237,[-1]],[107,[-1]]],[[70,[-1]]],3],[[]],[[[237,[-1]],66,[107,[-1]]],[[2,[[70,[-1]],[239,[-1]]]]],3],[[[237,[-1]],122,[107,[-1]]],[[2,[[70,[-1]],[239,[-1]]]]],3],[[[237,[-1]],-2],6,[127,3],28],[-1,-2,[],[]],[[[237,[-1]]],[[43,[-1]]],3],[[[237,[-1]],[70,[-1]]],[[6,[[2,[[43,[-1]],[67,[-1]]]],113]]],3],[[[43,[-1]]],[[237,[-1]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Num",0],[15,"tuple"],[8,"LurkField",1456],[8,"Clone",4689],[15,"usize"],[4,"Result",4690],[8,"Deserializer",4691],[3,"With",4692],[15,"bool"],[8,"PartialEq",4693],[3,"Formatter",4694],[6,"Result",4694],[8,"Debug",4694],[15,"u64"],[4,"UInt",4139],[8,"Hash",4695],[8,"Sized",4696],[8,"BuildHasher",4695],[8,"Hasher",4695],[3,"IndentedSection",4697],[8,"Display",4694],[8,"Send",4696],[8,"Sync",4696],[3,"Layout",4698],[3,"LayoutError",4698],[4,"Ordering",4693],[4,"Option",4699],[8,"Serializer",4700],[3,"String",4701],[3,"TypeId",4702],[3,"Global",4703],[3,"Box",4704],[8,"Any",4702],[3,"CacheMap",101],[3,"RandomState",4705],[3,"HashMap",4706],[8,"Eq",4693],[8,"Borrow",4707],[8,"StableDeref",4708],[8,"Copy",4696],[8,"FnOnce",4709],[3,"Vec",4710],[3,"Store",3529],[3,"MultiFrame",141],[8,"Coprocessor",653],[3,"CircuitFrame",141],[4,"FoldingConfig",3119],[3,"Arc",4711],[4,"Meta",1009],[3,"GlobalAllocations",227],[3,"AllocatedPtr",314],[3,"AllocatedNum",4712],[4,"SynthesisError",4713],[8,"ConstraintSystem",4713],[3,"IO",1009],[3,"Witness",1009],[3,"Frame",1009],[15,"slice"],[3,"AllocatedContPtr",314],[6,"ConsCircuitWitness",1700],[6,"ContCircuitWitness",1700],[3,"Bls12",4714],[3,"PreparedVerifyingKey",4715],[3,"Proof",4716],[3,"Scalar",4717],[15,"str"],[6,"Ptr",3278],[4,"Boolean",4718],[8,"PrimeField",4719],[6,"ZExprPtr",4594],[6,"ZContPtr",4594],[6,"ContPtr",3278],[8,"IntoHashComponents",1559],[15,"array"],[8,"AsAllocatedHashComponents",314],[4,"ConsName",1700],[4,"ContName",1700],[4,"Continuation",572],[3,"Utf8PathBuf",4720],[6,"Result",4721],[4,"Backend",429],[6,"Scalar",4722],[3,"Repl",453],[3,"Utf8Path",4720],[4,"Flow",474],[3,"ParallelConfig",474],[3,"WitnessGeneration",474],[3,"Config",474],[4,"ContTag",3903],[3,"State",3491],[6,"Result",4723],[8,"Write",4724],[3,"CircomCoprocessor",665],[8,"CircomGadget",222],[4,"TrieCoproc",696],[3,"NewCoprocessor",696],[3,"LookupCoprocessor",696],[3,"InsertCoprocessor",696],[8,"Default",4725],[3,"Trie",696],[4,"Error",696],[3,"LookupProof",696],[3,"InsertProof",696],[3,"RefCell",4726],[3,"Rc",4727],[3,"Lang",1248],[3,"PoseidonCache",1559],[8,"Error",4728],[4,"ReductionError",914],[4,"LurkError",914],[4,"ProofError",914],[4,"NovaError",4729],[3,"Error",3529],[4,"Status",1009],[3,"Evaluator",1009],[3,"Error",4694],[3,"FrameIt",1009],[8,"Fn",4709],[3,"Take",4730],[3,"Binding",1248],[8,"Into",4731],[3,"Symbol",3795],[4,"Coproc",1248],[3,"DummyCoprocessor",1248],[3,"IndexMap",4732],[8,"Deserialize",4691],[8,"Serialize",4700],[3,"Thunk",1371],[4,"Expression",1371],[4,"LanguageField",1456],[3,"FWrap",1456],[15,"u8"],[15,"char"],[4,"ExprTag",3903],[4,"Op1",3903],[4,"Op2",3903],[15,"u16"],[15,"u32"],[15,"u128"],[3,"HashConstants",1559],[6,"U3",4733],[3,"PoseidonConstants",4734],[6,"U4",4733],[6,"U6",4733],[6,"U8",4733],[4,"HashConst",1559],[4,"HashArity",1559],[3,"InversePoseidonCache",1559],[3,"HashWitness",1700],[8,"HashName",1700],[6,"ConsStub",1700],[3,"Cons",1700],[4,"Stub",1700],[6,"ConsWitness",1700],[3,"CircuitHashWitness",1700],[6,"HashCircuitWitnessBlocks",1700],[8,"ContentAddressed",1700],[3,"ScalarCons",1700],[3,"ScalarCont",1700],[3,"Cont",1700],[6,"ContStub",1700],[6,"ContWitness",1700],[6,"Preimage",1700],[3,"Func",2077],[3,"Store",2537],[3,"GlobalAllocator",2348],[4,"Ptr",2459],[3,"Preimages",2372],[3,"Frame",2372],[3,"Var",2077],[4,"Tag",2077],[4,"Lit",2077],[3,"Block",2077],[4,"Ctrl",2077],[4,"Op",2077],[6,"AString",2077],[4,"PreimageData",2372],[4,"ZChildren",2459],[6,"ZPtr",2459],[4,"Syntax",3864],[6,"Span",2650],[4,"Error",2650],[3,"ZStore",2594],[3,"Package",2622],[6,"SymbolRef",2622],[4,"LitBase",2691],[6,"ParseResult",2650],[8,"AsRef",4731],[3,"ParseError",2738],[8,"InputLength",4735],[8,"AsBytes",4735],[4,"ErrorKind",4736],[4,"ParseErrorKind",2738],[6,"IResult",4737],[4,"Pos",2820],[4,"StringFragment",2858],[3,"TestConstraintSystem",4738],[3,"Proof",2939],[8,"Engine",4739],[8,"MultiMillerLoop",4739],[3,"PublicParams",2939],[3,"Groth16Prover",2939],[3,"Parameters",4740],[3,"GenericSRS",4741],[8,"RngCore",4742],[3,"VerifierSRS",4741],[3,"AggregateProofAndInstance",4743],[3,"PublicParams",3016],[8,"CurveCycleEquipped",3016],[4,"Proof",3016],[3,"NovaProver",3016],[6,"C1",3016],[3,"NIVCStep",3119],[3,"PublicParams",3119],[4,"Proof",3119],[3,"SuperNovaProver",3119],[3,"NIVCSteps",3119],[8,"Group",4744],[6,"G1",3016],[6,"G2",3016],[3,"TrivialSecondaryCircuit",4745],[3,"RunningClaim",4746],[4,"SuperNovaError",4747],[3,"GPtr",3278],[4,"RawPtr",3278],[8,"Tag",3903],[4,"Error",3388],[3,"Error",4748],[3,"Error",4723],[3,"ReplState",3419],[3,"Command",4749],[3,"Repl",3419],[8,"ReplTrait",3419],[3,"Path",4750],[3,"ConstantPtrs",3529],[3,"NamedConstants",3529],[3,"ZStore",4643],[4,"ZCont",4462],[4,"ZExpr",4542],[8,"From",4731],[8,"Field",4719],[4,"ZData",4184],[4,"SerdeError",4232],[3,"Deserializer",4265],[8,"Visitor",4691],[3,"SerializeCell",4317],[3,"SerializeMap",4317],[3,"SerializeTupleVariant",4317],[3,"StructSerializer",4317],[3,"Serializer",4317],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"ZPtr",4594],[3,"Error",4721],[8,"ToInputs",136],[13,"Let",621],[13,"LetRec",621],[13,"Call0",621],[13,"Call",621],[13,"Call2",621],[13,"Tail",621],[13,"Lookup",621],[13,"Unop",621],[13,"Binop",621],[13,"Binop2",621],[13,"If",621],[13,"Emit",621],[8,"CoCircuit",653],[6,"ChildMap",696],[8,"Evaluable",1009],[8,"CAddr",1700],[13,"Pos",2852],[8,"Prover",2917],[8,"Provable",2917],[8,"TypePredicates",3278],[8,"Op",3903],[8,"Write",4181],[13,"Let",4510],[13,"LetRec",4510],[13,"Call0",4510],[13,"Call",4510],[13,"Call2",4510],[13,"Tail",4510],[13,"Lookup",4510],[13,"Unop",4510],[13,"Binop",4510],[13,"Binop2",4510],[13,"If",4510],[13,"Emit",4510],[13,"Fun",4591]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"MetricsSinkHandle",0],[15,"tuple"],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
