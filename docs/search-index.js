var searchIndex = JSON.parse('{\
"lurk":{"doc":"Lurk","t":"ENCNCLLOLLOAALLAAAOLLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCAAFAAAAIKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMLMLLLMMLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFAAENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHDMLLMFMLLLLLLMLLLLLLMLMMLLLLLLLFDLLLLLLLLLLLLLLLLLLLLLEHHNDNDNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLFFMMLLLLLMMFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLKALALLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDNEDMLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLMLLLMLLLLALLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDDDLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLMMLLLLLLMMMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNNNNNNENNNNNNNNNDNNNNNNENNNNNNNENNNNNNNNENNDNLLMLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLALMLLLLMLLLLLLLALMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNDNNDDMLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFFFFFFFFNDDNEMLLMLLLLLLMLLLLLLMMLLLLLLLLLLLLLLMLLLLLMMMMLLLLMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNENNNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLMLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFQIQQQQQIQIQIIIIQQQQQKKKKKKLKLKKKKKKKKKKLLLKALKKKKKKKKKKAKGGNIGQGQGQGQGDGEDNGGLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLGNENNEDNGDGLLLLLLLLFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAAAFFFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDEDNNNMMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLMMLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLLNNELLLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","circuit_frame","gadgets","destructure_list","circom","constraints","data","pointer","CircomGadget","evaluate_simple","into_circom_input","name","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","quote_ptr","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_equal","alloc_equal","alloc_infallible","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","construct_cons","construct_list","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fmt","fmt","from","from","from","from","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","config","parse_and_run","paths","repl","Backend","Nova","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_possible_value","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value_variants","vzip","CLI_CONFIG","CliSettings","backend","borrow","borrow_mut","circom_dir","cli_config","commits_dir","default","deref","deref_mut","deserialize","deserialize","drop","field","fmt","from","from_config","init","into","layout_raw","limit","pointer_metadata","proofs_dir","rc","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","lurk_default_dir","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","handle_non_meta","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Flow","LURK_CONFIG","LURK_CONFIG_FILE","Parallel","ParallelConfig","ParallelN","PerfConfig","Sequential","Settings","WitnessGeneration","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_config","home_dir","init","init","init","init","init","into","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lurk_config","lurk_config_file","parallelism","perf","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","public_params_default_dir","public_params_dir","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","evaluate_internal","evaluate_simple","gadgets","has_circuit","sha256","synthesize","synthesize_internal","synthesize_simple","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","evaluate_simple","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","synthesize_simple","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","a_ptr_as_z_ptr","car_cdr","chain_car_cdr","construct_cons","construct_list","construct_tuple2","construct_tuple3","construct_tuple4","deconstruct_tuple2","deconstruct_tuple3","deconstruct_tuple4","SC","Sha256Coproc","Sha256Coprocessor","arity","arity","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","fmt","fmt","from","from","from","has_circuit","has_circuit","init","init","into","into","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","serialize","serialize","synthesize","synthesize_internal","synthesize_simple","synthesize_simple","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","StandardTrie","Trie","TrieCoproc","arity","arity","arity","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","evaluate_simple","evaluate_simple","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","has_circuit","has_circuit","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","synthesize","synthesize_insert","synthesize_internal","synthesize_simple","synthesize_simple","synthesize_simple","synthesize_simple","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","header","header","in_current_span","in_current_span","init","init","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","source","source","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Coprocessor","Frame","Lurk","Meta","Witness","_p","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","empty_sym_env","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","i","init","init","init","input","into","into","into","is_coprocessor","lang","layout_raw","layout_raw","layout_raw","meta","output","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_index_by_symbol","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup_by_sym","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","synthesize","synthesize_internal","synthesize_simple","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compare","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_possible_value","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_variants","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","clone","clone","clone","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Copy","Cproc","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hash3Zeros","Hash4Zeros","Hash6Zeros","Hash8Zeros","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Num","Op","Op1","Op2","Open","Or","Return","String","Sub","Symbol","Tag","Trunc","Unit","Var","Zero","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_field","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","input_params","interpreter","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","multiframe","name","name","new","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slots_count","store","synthesize_frame","synthesize_frame_aux","to_field","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AllocatedVal","Bits","Boolean","GlobalAllocator","Number","Pointer","SlotWitness","SlotsAllocations","allocations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_slots_allocations","clone","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","get_allocated_ptr","get_allocated_ptr_from_ptr","get_const","get_const_cloned","get_tag","get_tag_cloned","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","new_const","new_const_from_tag","new_consts_from_z_ptr","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness","eval_step","evaluate","evaluate_simple","evaluate_simple_with_env","evaluate_with_env","evaluate_with_env_and_cont","make_cprocs_funcs_from_lang","make_eval_step_from_lang","Boolean","Frame","Hints","Pointer","Val","bit_decomp","blank","blank","blank","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone","clone_into","clone_into","clone_into","commitment","cproc_outputs","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","emitted","fmt","fmt","from","from","from","hash4","hash6","hash8","hints","init","init","init","input","input","into","into","into","layout_raw","layout_raw","layout_raw","new_from_func","output","output","pc","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","MultiFrame","arity","arity","blank","borrow","borrow_mut","cached_witness","circuit_index","clone","clone_into","compute_witness","deref","deref_mut","deserialize","drop","emitted","fmt","frames","from","from_frames","get_evaluation_frames","init","into","io_to_scalar_vector","layout_raw","make_dummy","num_circuits","output","pointer_metadata","precedes","primary_circuit","public_input_size","public_inputs","reduction_count","secondary_circuit","significant_frame_count","synthesize","synthesize","synthesize","synthesize_frames","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Ptr","Tuple2","Tuple3","Tuple4","ZPtr","borrow","borrow_mut","cast","char","clone","clone_into","comm","deref","deref_mut","deserialize","deserialize","drop","dummy","dummy","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt_to_string","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","into","is_nil","is_tuple","is_zero","layout_raw","num","num_u64","opaque","pointer_metadata","serialize","tag","to_owned","try_from","try_into","type_id","u64","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","zero","Store","add_comm","borrow","borrow_mut","car_cdr","commit","cons","cont_error","cont_outermost","cont_terminal","default","deref","deref_mut","deserialize","drop","expect_2_ptrs","expect_3_ptrs","expect_4_ptrs","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_list","fetch_string","fetch_sym","fetch_symbol","fmt","from","get_cont_terminal","hash3_cost","hash3zeros","hash4_cost","hash4zeros","hash6_cost","hash6zeros","hash8_cost","hash8zeros","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","hydrate_z_cache","improper_list","init","initial_empty_env","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_fun","intern_lurk_symbol","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","intern_user_symbol","into","inverse_poseidon_cache","key","layout_raw","list","open","pointer_metadata","poseidon_cache","ptr_eq","ptr_eq","read","read","read_maybe_meta","read_with_default_state","to_ptr","to_scalar_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from_upto","get_from_offset","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","AllocatedIO","CEKState","CircuitFrame","ContPtr","ContPtr","Error","EvalFrame","EvaluationStore","FrameIO","FrameLike","GlobalAllocation","MultiFrameTrait","NIVCProver","Provable","Prover","Ptr","Ptr","PublicParams","Store","StoreError","blank","cached_witness","compute_witness","cont","emitted","env","expected_total_iterations","expr","frame_padding_count","frames","from_frames","get_cont_terminal","get_evaluation_frames","hydrate_z_cache","initial_empty_env","input","io_to_scalar_vector","lang","make_dummy","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","output","output","precedes","ptr_eq","public_input_size","public_inputs","read","reduction_count","reduction_count","significant_frame_count","supernova","synthesize_frames","C1LEM","C2","Compressed","CurveCycleEquipped","EE1","EE1","EE2","EE2","G1","G1","G2","G2","NovaCircuitShape","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuits","clone","clone_into","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","reduction_count","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","C2","Compressed","FoldingConfig","IVC","NIVC","Proof","PublicParams","Recursive","SuperNovaAuxParams","SuperNovaProver","SuperNovaPublicParams","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuit_cache_keys","circuit_shapes","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","evaluate_and_prove","fmt","fmt","from","from","from","from","index","init","init","init","init","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pp","prove","prove_recursively","public_params","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","compare","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","disk_cache","error","instance","public_params","supernova_aux_params","supernova_circuit_params","supernova_public_params","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Instance","Kind","Metadata","NovaPublicParams","SuperNovaAuxParams","SuperNovaCircuitParams","_p","abomonated","abomonated","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_key","cache_key","circuit_param_instances","clone","clone","clone_into","clone_into","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","key","kind","kind","lang","lang","lang","layout_raw","layout_raw","layout_raw","new","open","pointer_metadata","pointer_metadata","pointer_metadata","rc","rc","reindex","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","quote","quotient","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","get_pos","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Cproc","Cproc","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","simple_fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","compare","deref","deref_mut","deserialize","deserialize","drop","dummy","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[99,"lurk::circuit"],[101,"lurk::circuit::circuit_frame"],[102,"lurk::circuit::gadgets"],[106,"lurk::circuit::gadgets::circom"],[110,"lurk::circuit::gadgets::constraints"],[111,"lurk::circuit::gadgets::data"],[198,"lurk::circuit::gadgets::pointer"],[289,"lurk::cli"],[294,"lurk::cli::backend"],[330,"lurk::cli::config"],[362,"lurk::cli::paths"],[363,"lurk::cli::repl"],[385,"lurk::config"],[537,"lurk::cont"],[587,"lurk::cont::Continuation"],[619,"lurk::coprocessor"],[634,"lurk::coprocessor::circom"],[635,"lurk::coprocessor::circom::non_wasm"],[666,"lurk::coprocessor::gadgets"],[677,"lurk::coprocessor::sha256"],[744,"lurk::coprocessor::trie"],[976,"lurk::error"],[1042,"lurk::eval"],[1138,"lurk::eval::lang"],[1260,"lurk::expr"],[1343,"lurk::field"],[1451,"lurk::hash"],[1586,"lurk::hash_witness"],[1962,"lurk::lem"],[2246,"lurk::lem::circuit"],[2342,"lurk::lem::eval"],[2350,"lurk::lem::interpreter"],[2440,"lurk::lem::multiframe"],[2488,"lurk::lem::pointers"],[2544,"lurk::lem::store"],[2626,"lurk::package"],[2654,"lurk::parser"],[2695,"lurk::parser::base"],[2743,"lurk::parser::error"],[2827,"lurk::parser::position"],[2861,"lurk::parser::position::Pos"],[2867,"lurk::parser::string"],[2906,"lurk::parser::syntax"],[2927,"lurk::proof"],[2984,"lurk::proof::nova"],[3080,"lurk::proof::supernova"],[3189,"lurk::ptr"],[3296,"lurk::public_parameters"],[3304,"lurk::public_parameters::error"],[3335,"lurk::public_parameters::instance"],[3436,"lurk::state"],[3474,"lurk::store"],[3736,"lurk::symbol"],[3805,"lurk::syntax"],[3846,"lurk::tag"],[4088,"lurk::uint"],[4131,"lurk::writer"],[4135,"lurk::z_data"],[4184,"lurk::z_data::serde"],[4217,"lurk::z_data::serde::de"],[4269,"lurk::z_data::serde::ser"],[4414,"lurk::z_data::z_cont"],[4463,"lurk::z_data::z_cont::ZCont"],[4495,"lurk::z_data::z_expr"],[4545,"lurk::z_data::z_expr::ZExpr"],[4548,"lurk::z_data::z_ptr"],[4599,"lurk::z_data::z_store"],[4644,"core::clone"],[4645,"core::result"],[4646,"serde::de"],[4647,"rkyv::with"],[4648,"core::cmp"],[4649,"core::fmt"],[4650,"core::fmt"],[4651,"core::marker"],[4652,"core::hash"],[4653,"core::fmt"],[4654,"core::alloc::layout"],[4655,"serde::ser"],[4656,"alloc::string"],[4657,"core::any"],[4658,"alloc::boxed"],[4659,"core::any"],[4660,"bellpepper_core::gadgets::num"],[4661,"bellpepper_core::constraint_system"],[4662,"bellpepper_core::constraint_system"],[4663,"ff"],[4664,"core::ops::function"],[4665,"anyhow"],[4666,"clap_builder::builder::possible_value"],[4667,"camino"],[4668,"std::collections::hash::map"],[4669,"config::error"],[4670,"pasta_curves::pallas"],[4671,"camino"],[4672,"std::io"],[4673,"serde::de"],[4674,"core::cell"],[4675,"alloc::rc"],[4676,"core::error"],[4677,"nova_snark::errors"],[4678,"core::marker"],[4679,"indexmap::map"],[4680,"typenum::generated::consts"],[4681,"neptune::poseidon"],[4682,"typenum::generated::consts"],[4683,"bellpepper::util_cs::witness_cs"],[4684,"core::ops::function"],[4685,"nom::traits"],[4686,"nom::internal"],[4687,"bellpepper_core::util_cs::test_cs"],[4688,"nova_snark::traits::circuit"],[4689,"nova_snark::supernova"],[4690,"nova_snark::traits::circuit_supernova"],[4691,"nova_snark::supernova::error"],[4692,"serde_json::error"],[4693,"std::io::error"],[4694,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","a small scalar field element in U64 representation for …","","","","","","","","","","","","Global config for Lurk Includes settings for cache …","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","","Returns the argument unchanged.","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","Global config for the CLI Includes settings for cache …","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Global config varable for <code>CliSettings</code>","Contains the CLI configuration settings","Proof generation and verification system","","","Cache directory for Circom files","Gets the <code>CLI_CONFIG</code> settings. If uninitialized, sets the …","Cache directory for commitments","","","","","","","Finite field used for evaluation and proving","","Returns the argument unchanged.","Loads config settings from a file or env var, or CLI arg …","","Calls <code>U::from(self)</code>.","","Iteration limit for the program, which is arbitrary to …","","Cache directory for proofs","Reduction count, which is the number of circuit reductions …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The level of parallelism used when synthesizing the Lurk …","Global config variable for <code>Settings</code>","Global path variable for configuration file","Try to be smart about thread management based on # of cpus …","Parallel configuration settings","How many threads to use? (Advisory, might be ignored.)","Performance-related configuration settings","Runs without parallelism","Contains the Lurk config settings The <code>public_params_dir</code> …","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads config settings from a file or env vars The public …","Returns the home directory used by <code>cargo`` and </code>rustup`","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> on <code>Flow::Parallel</code> or <code>Flow::ParallelN</code>","Returns <code>true</code> on <code>Flow::Sequential</code>","","","","","","Gets the <code>LURK_CONFIG</code> settings. If uninitialized, sets the …","Gets the <code>LURK_CONFIG_FILE</code> path. If uninitialized, sets the …","Parallelism settings","Parallelism &amp; witness gen configs","","","","","","The poseidon witness part of synthesis.","NOTE: Neptune itself <em>will</em> do this transparently at the …","","Public parameter disk cache location","Multiple <code>StepCircuit</code>s.","Synthesis (within one <code>StepCircuit</code>)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Witness generation settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","Function for internal plumbing. Reimplementing is not …","","Helper gadgets for synthesis","Returns true if this Coprocessor actually implements a …","","","Function for internal plumbing. Reimplementing is not …","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","Deconstructs <code>data</code> with <code>car_cdr</code> semantics.","Chains <code>car_cdr</code> calls <code>n</code> times, returning the accumulated <code>car</code>…","Constructs a <code>Cons</code> pointer","Constructs a cons-list with the provided <code>elts</code>. The …","Constructs an <code>AllocatedPtr</code> compound by two others","Constructs an <code>AllocatedPtr</code> compound by three others","Constructs an <code>AllocatedPtr</code> compound by four others","Deconstructs <code>tuple</code>, assumed to be a composition of two …","Deconstructs <code>tuple</code>, assumed to be a composition of three …","Deconstructs <code>tuple</code>, assumed to be a composition of four …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","Returns a value corresponding to the commitment associated …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","And does nothing but return nil. It should probably never …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","<code>Copy(x, y)</code> binds <code>x</code> to a copy of what <code>y</code> is bound to","<code>Cproc(ys, c, xs)</code> binds <code>ys</code> to the results of coprocessor <code>c</code> …","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hash3Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash4Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash6Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash8Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","The LEM <code>Tag</code> is a wrapper around other types that are used …","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","","LEM variables","<code>Zero(x, t)</code> binds <code>x</code> to a <code>Ptr::zero(t)</code>","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Checks if the allocation for a numeric variable has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cached version of Lurk’s default step function (IVC, no …","","","","","","Creates the <code>Func</code>s used to call coprocessors in the NIVC …","Creates a LEM <code>Func</code> corresponding to Lurk’s step function …","","A <code>Frame</code> carries the data that results from interpreting a …","<code>Hints</code> hold the non-deterministic hints for hashes and <code>Func</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Make a dummy instance, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Creates an atom pointer from a <code>ZPtr</code>, with its tag and …","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","","","","Fetches a cons list that was interned. If the list is …","","","","","Returns the argument unchanged.","","Cost of poseidon hash with arity 3, including the input","","Cost of poseidon hash with arity 4, including the input","","Cost of poseidon hash with arity 6, including the input","","Cost of poseidon hash with arity 8, including the input","","Safe version of <code>hash_ptr_unsafe</code> that doesn’t hit a stack …","","","Hashes enqueued <code>Ptr</code> trees from the bottom to the top, …","","Interns a sequence of pointers as an improper cons-list …","","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","","","Calls <code>U::from(self)</code>.","","","","Interns a sequence of pointers as a proper (<code>nil</code>…","","","","Equality of the content-addressed versions of two pointers","","","","","","Attempts to recover the <code>Ptr</code> that corresponds to <code>z_ptr</code> from …","Constructs a vector of scalars that correspond to tags and …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","Retrieves the <code>from_offset</code> attribute, if present","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","The associated type of allocated input and output to the …","The State of a CEK machine.","The associated <code>CircuitFrame</code> type","the type for the Store’s continuation poitners","The associated <code>ContPtr</code> type","the type for the Store’s errors","The associated <code>Frame</code> type","A trait for a store of expressions","the type for the Frame’s IO","A Frame of evaluation in a CEK machine.","The associated type which manages global allocations","Trait to support multiple <code>MultiFrame</code> implementations.","Supertrait for <code>Prover</code> that also supports NIVC.","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","the type for the Store’s pointers","The associated <code>Ptr</code> type","The associated public parameters type for the prover.","The associated <code>Store</code> type","The error type for the Store type","Synthesize a blank circuit.","Returns a reference to the cached witness values","Populates a WitnessCS with the witness values for the …","the continuation (K)","the emitted frames","the environment (E)","Returns the expected total number of iterations for the …","the expression, or control word (C)","Returns the number of padding frames needed for a given …","Iterates through the Self::CircuitFrame instances","Create an instance from some <code>Self::Frame</code>s.","getting the terminal continuation pointer","Evaluates and generates the frames of the computation …","cache hashes for pointers enqueued for hydration","getting a pointer to the initial, empty environment","the input of the frame","Returns a public IO vector when equipped with the local …","Returns a reference to the Prover’s Lang.","Make a dummy instance, duplicating <code>self</code>’s final …","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","the output of the frame","The output of the last frame","Returns true if the supplied instance directly precedes …","hash-equality of the expressions represented by Ptrs","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","interpreting a string representation of an expression","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Counting the number of non-trivial frames in the evaluation","An adapter to a SuperNova proving system implementation.","Synthesize some frames.","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Why the next 2 types?","Type alias for the Evaluation Engine using G2 group …","a concrete implementation of an …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","Type alias for Nova Circuit Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","Computes a cache key of the primary circuit. The point is …","Generates the circuits for the Nova proving system.","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Folding configuration specifies <code>Lang</code> and can be either <code>IVC</code> …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the SuperNova …","A proof for the intermediate steps of a recursive …","Type alias for SuperNova Aux Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","Computes a cache key of a supernova primary circuit. The …","Collects all the cache keys of supernova instance. We need …","The internal circuit shapes","","","","","","","","","","","","","","","","return the digest","","","","","Evaluates and proves the computation given the public …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","","","","Public params for SuperNova.","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the running claim params for the SuperNova …","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the claim, which (for now), …","","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","Instances","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Instances compute a cache-key for the objects they …","From ::nova, there are 3 “kinds” of public param …","What we put into the cache","Tag for nova::NovaPublicParams instances","Tag for supernova::SuperNovaAuxParams instances","Tag for [supernova::SuperNovaCircuitParams] instances","","","","","","","","","","","","If this Instance is of Kind::SuperNovaAuxParams, then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key (or cache_key) of this Instance used to retrieve …","","","The key (or cache_key) of this Instance used to retrieve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","A character literal: ‘A’, ‘λ’","An improper cons-list of expressions: (1 2 . 3)","A nil-terminated cons-list of expressions: (1 2 3)","An element of the finite field <code>F</code>","A quoted expression: ’a, ’(1 2)","A string literal: “foobar”, “foo\\\\nbar”","A hierarchical symbol: foo, foo.bar.baz or keyword :foo","Lurk’s syntax for parsing","A u64 integer: 1u64, 0xffu64","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Retrieves the <code>Pos</code> attribute","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","","","","","","",""],"i":[0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,76,76,0,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,35,47,35,47,47,35,35,47,35,35,35,35,47,35,47,35,47,35,47,35,47,35,47,35,35,35,47,35,47,35,47,35,47,35,47,35,47,35,35,47,47,35,47,47,47,35,47,35,35,47,35,47,35,35,35,35,35,35,35,35,35,35,35,47,35,47,35,35,47,35,35,47,35,47,35,47,35,47,35,47,35,47,35,47,35,47,35,47,35,0,0,0,0,0,0,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,0,0,60,60,60,60,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,69,0,69,0,69,0,0,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,65,66,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,65,65,65,66,66,66,66,67,67,67,67,68,68,68,68,69,69,69,69,65,66,67,68,69,65,66,67,68,69,65,0,65,66,67,68,69,65,66,67,68,69,69,69,65,66,67,68,69,0,0,66,65,65,66,67,68,69,67,68,0,65,67,67,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,65,66,67,68,69,66,53,53,53,53,53,0,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,235,236,237,238,239,240,241,242,243,244,245,235,236,246,244,239,242,243,244,237,238,239,240,241,243,235,236,238,243,245,235,236,0,0,247,0,105,105,105,105,0,105,0,247,247,247,0,0,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,0,0,0,0,0,0,0,0,0,0,78,0,0,77,78,77,78,77,78,77,78,77,78,77,78,77,78,77,77,78,78,77,78,77,78,78,78,77,78,77,78,77,78,78,77,78,77,78,77,78,77,78,77,77,78,77,78,78,78,77,78,77,78,77,78,77,78,77,78,77,78,77,78,77,78,77,78,0,0,0,81,0,0,81,0,0,87,81,0,0,0,0,0,81,82,83,84,87,81,82,83,84,86,88,89,87,81,82,83,84,86,88,89,81,82,83,84,81,82,83,84,248,82,83,84,86,87,81,82,83,84,86,88,89,87,81,82,83,84,86,88,89,87,81,82,82,83,83,84,84,86,88,89,87,81,82,83,84,86,88,89,86,81,82,83,84,81,81,81,82,83,84,87,81,82,83,84,86,88,89,87,81,81,81,81,82,83,84,86,88,89,81,82,83,84,87,81,82,83,84,86,88,89,86,0,87,81,82,83,84,86,88,89,87,81,82,83,84,86,88,89,86,86,86,86,87,81,82,83,84,86,88,89,86,86,86,86,82,83,84,81,86,81,81,82,83,84,81,82,83,84,87,81,82,83,84,86,88,89,87,81,82,83,84,86,88,89,87,81,82,83,84,86,88,89,87,81,82,83,84,86,88,89,87,81,82,83,84,86,88,89,87,81,82,83,84,86,88,89,88,89,87,81,82,83,84,86,88,89,97,97,98,0,98,0,97,98,98,97,98,97,98,97,97,97,98,97,98,97,98,97,98,97,98,98,97,97,98,98,98,98,98,97,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,98,97,101,0,101,0,0,102,101,102,104,101,102,104,101,102,104,101,102,104,101,101,102,104,101,102,104,101,102,104,101,102,104,0,101,102,104,101,101,101,101,102,102,102,102,104,104,104,104,101,102,104,101,102,104,102,101,102,104,102,101,102,104,101,0,101,102,104,102,102,101,102,104,101,102,104,101,102,104,101,102,104,101,102,104,101,102,104,101,102,104,101,102,104,101,102,104,102,0,0,109,0,0,92,92,109,110,109,92,106,110,109,92,106,110,109,92,110,109,92,92,92,92,110,109,92,106,110,109,92,106,110,110,109,109,92,92,106,110,109,92,106,110,109,109,109,110,109,110,109,92,106,110,109,109,92,106,106,92,109,92,110,109,92,106,110,109,92,106,92,92,110,109,92,106,92,92,106,92,110,109,92,106,110,109,92,109,109,109,110,109,92,110,109,92,106,110,109,92,106,110,109,92,106,110,109,92,106,110,109,92,106,110,109,92,106,110,109,92,106,112,112,112,112,0,112,112,112,112,112,112,112,112,0,112,112,112,113,112,113,112,113,112,113,113,112,113,112,113,112,113,112,113,112,113,112,112,112,112,113,113,113,113,112,112,113,112,113,113,113,112,113,112,113,112,112,112,112,112,112,112,112,112,113,112,113,112,113,112,113,112,113,112,113,112,113,112,113,112,113,113,112,113,114,3,0,114,0,0,3,114,114,114,115,114,115,114,115,114,115,114,115,115,115,114,114,115,114,115,114,114,115,115,114,115,114,115,114,114,114,114,115,115,115,115,114,114,115,114,115,3,3,3,3,3,3,3,3,3,3,115,115,114,3,114,115,114,115,3,114,115,3,3,115,114,115,114,115,3,3,3,3,3,3,114,115,114,114,3,3,3,3,3,3,3,3,114,115,114,115,114,115,114,115,114,115,114,115,114,114,115,129,131,129,131,129,131,129,131,0,0,0,0,0,129,131,95,93,94,129,131,95,93,94,95,95,95,95,129,95,93,129,95,93,93,95,93,94,95,93,94,129,131,95,93,94,129,131,95,93,94,129,131,95,93,94,129,131,95,93,94,129,131,95,93,94,129,129,131,95,93,94,94,93,93,93,93,129,131,95,93,94,94,129,131,95,93,94,129,131,95,93,94,129,131,95,93,94,129,95,93,129,131,95,93,94,129,131,95,93,94,129,131,95,93,94,129,131,95,93,94,129,131,95,93,94,129,131,95,93,94,129,131,95,93,94,143,139,139,135,146,137,0,0,139,0,0,0,0,0,0,0,0,0,0,0,0,135,146,137,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,0,0,0,0,139,139,139,143,143,0,0,143,139,143,139,139,143,143,0,0,0,0,145,0,139,139,139,139,135,146,137,0,132,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,136,140,135,137,138,132,138,132,136,140,249,250,144,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,141,135,137,136,140,138,132,141,142,142,139,143,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,137,136,142,139,143,132,144,137,137,137,137,136,136,136,136,142,142,142,142,139,139,139,139,143,143,143,143,132,132,132,132,138,132,146,137,147,132,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,144,132,139,143,139,143,249,250,144,133,139,143,137,136,140,141,142,139,143,132,144,146,137,147,132,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,249,250,144,132,132,137,136,140,141,142,139,143,132,144,251,145,136,140,141,142,138,147,132,135,137,138,132,132,145,136,142,137,136,140,141,142,139,143,132,144,145,137,136,142,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,137,136,140,141,142,139,143,132,144,0,157,157,0,157,157,157,157,157,153,157,157,0,157,157,157,157,157,157,157,157,153,0,157,157,157,157,157,156,0,157,157,156,156,157,157,154,0,153,153,157,157,156,154,157,154,0,157,157,0,157,149,149,149,149,152,153,154,155,156,157,149,152,153,154,155,156,157,149,149,149,0,149,152,153,154,155,156,157,149,152,153,154,155,156,157,155,149,152,153,154,155,156,157,149,152,153,154,155,156,157,149,152,153,153,154,155,156,157,149,152,153,154,155,156,157,149,152,153,154,155,156,157,149,149,149,149,152,152,152,152,153,153,153,153,154,154,154,154,155,155,155,155,156,156,156,156,157,157,157,157,0,149,152,152,153,153,154,155,156,157,149,152,153,154,155,156,157,153,152,153,154,152,153,154,152,153,149,152,153,154,155,156,157,149,0,149,152,153,154,155,156,157,149,152,153,154,155,156,157,0,152,149,149,152,149,149,149,149,152,153,154,155,156,157,0,153,149,0,149,149,153,153,149,152,153,154,155,156,157,154,152,153,149,152,153,153,154,155,156,157,149,152,153,154,155,156,157,149,152,153,154,155,156,157,149,149,152,153,154,155,156,157,149,152,153,154,155,156,157,149,152,153,154,155,156,157,149,152,153,154,155,156,157,0,159,159,0,159,159,0,0,160,162,160,159,74,162,160,159,74,0,159,159,74,162,160,159,74,162,160,159,74,162,160,159,74,162,160,159,74,162,160,159,74,74,74,74,74,74,74,162,160,159,74,162,160,159,74,162,160,159,74,74,74,74,162,160,159,74,159,162,160,159,74,162,160,159,74,162,160,159,74,162,160,159,74,162,160,159,74,162,160,159,74,162,160,159,74,160,0,0,0,0,0,0,0,0,164,0,0,164,0,150,150,151,151,164,150,151,164,150,151,150,164,150,151,164,150,151,150,150,150,151,164,150,151,164,150,151,164,150,151,164,150,151,151,150,151,164,150,151,150,150,150,151,164,150,151,151,151,164,150,151,164,150,151,150,151,151,151,164,150,151,164,150,151,164,150,151,164,150,151,164,150,151,164,150,151,164,150,151,164,150,151,164,150,151,0,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,41,0,41,41,41,0,41,41,41,41,41,41,41,41,41,41,41,41,163,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,177,0,0,173,177,0,0,173,173,0,173,173,173,173,173,173,173,173,0,172,173,173,173,173,173,173,173,173,173,0,0,0,173,173,173,173,173,173,173,173,173,176,176,176,0,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,0,176,0,0,0,0,0,0,0,176,176,176,176,176,176,176,176,176,176,183,183,183,183,183,183,183,0,0,183,183,179,179,183,179,183,179,183,179,183,179,183,179,183,179,183,179,183,179,183,179,183,183,183,183,179,179,179,179,179,179,183,183,179,179,183,179,179,183,179,183,179,179,183,179,183,183,179,0,179,179,179,183,179,179,179,183,179,183,179,183,179,183,179,183,179,183,179,183,179,183,179,183,179,185,0,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,252,252,252,252,252,252,186,186,186,0,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,0,0,0,0,0,0,0,0,186,186,186,186,186,186,186,186,186,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,189,0,189,253,189,253,189,0,254,0,189,0,0,0,0,253,189,255,189,189,189,189,189,256,189,256,255,256,255,189,189,253,189,253,253,254,189,255,189,255,255,255,255,0,255,254,189,189,253,257,257,253,257,255,189,0,189,0,0,192,0,0,169,0,169,0,169,0,169,0,0,0,0,0,192,0,0,190,192,193,190,192,193,0,0,190,190,192,190,192,193,190,192,193,190,190,192,192,193,190,192,193,190,193,190,190,193,190,192,193,190,192,193,190,192,193,193,190,192,193,193,190,192,193,193,192,0,193,190,192,190,190,192,193,190,192,193,190,192,193,190,192,193,190,192,193,190,192,193,192,190,192,193,0,196,0,166,166,0,0,196,0,0,0,197,196,199,166,197,196,199,166,0,0,258,166,166,197,196,199,166,197,196,199,166,197,196,196,199,166,197,197,196,199,166,199,199,166,197,196,199,166,197,197,196,199,166,197,196,199,166,199,166,197,196,199,166,199,166,166,166,197,196,199,166,197,199,196,0,199,166,196,166,197,196,199,166,197,196,199,166,197,196,199,166,197,196,199,166,197,196,199,166,197,196,199,166,196,197,196,199,166,0,0,202,202,202,0,0,0,52,51,201,201,201,202,201,202,201,201,202,201,202,201,202,202,202,201,202,201,202,201,202,201,202,201,202,202,202,202,201,201,201,201,52,51,202,201,52,202,201,202,201,202,201,202,201,202,201,202,201,201,201,51,201,259,52,201,201,202,202,201,259,52,259,52,202,201,51,202,201,201,201,202,202,202,201,52,51,201,52,51,201,202,201,202,201,202,201,202,201,202,201,202,201,202,201,202,201,0,0,0,0,0,0,0,0,204,0,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,0,0,0,209,209,209,203,203,210,203,209,210,203,209,210,203,210,203,209,210,209,210,203,203,209,210,203,209,210,203,209,209,210,210,203,209,210,209,210,209,209,209,209,210,210,210,210,203,209,210,203,209,210,203,209,210,203,209,210,203,203,210,203,203,210,203,209,210,203,203,203,209,210,203,210,203,209,210,209,210,203,209,210,203,209,210,203,209,210,203,209,210,203,209,210,203,209,210,203,209,210,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,71,71,71,71,71,0,0,71,71,71,71,71,71,71,71,71,71,71,71,0,71,0,0,0,0,100,213,213,33,33,33,100,212,213,33,100,212,213,33,33,33,33,213,33,33,213,213,100,212,213,100,212,213,213,33,33,213,33,213,33,33,213,33,33,33,33,100,212,213,33,100,212,213,33,100,212,213,213,33,100,212,213,213,213,33,213,213,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,100,100,212,213,33,100,212,213,33,33,33,33,33,33,33,33,33,33,33,33,213,213,33,33,100,33,33,213,33,213,33,100,33,100,212,213,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,100,212,213,33,33,213,33,100,212,213,213,213,213,33,213,33,33,33,33,213,33,213,33,213,33,213,213,33,33,33,33,213,33,33,100,212,213,33,213,212,33,213,213,33,33,33,33,213,33,33,33,33,213,33,213,33,33,33,213,33,33,100,212,213,100,33,33,33,33,100,212,213,33,100,212,213,33,100,212,213,213,33,33,33,100,212,213,33,100,212,213,33,100,212,213,33,212,33,100,212,213,33,33,33,33,212,0,0,0,0,0,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,171,171,171,171,171,171,171,0,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,119,120,70,70,70,70,70,119,119,118,119,118,119,119,118,120,0,118,70,120,70,70,119,120,70,119,120,0,118,120,120,120,70,118,120,120,70,70,70,120,118,118,119,120,0,0,0,119,70,120,120,119,118,120,120,118,0,70,70,118,118,119,70,260,119,120,260,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,118,118,70,70,119,119,120,120,118,70,119,120,118,70,119,120,118,118,118,118,70,70,70,70,119,119,119,119,120,120,120,120,118,118,70,70,119,119,120,120,118,70,119,120,49,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,118,120,118,118,118,70,119,120,119,120,118,70,119,120,118,70,119,120,260,119,120,260,119,120,49,118,70,119,120,49,118,70,119,120,118,70,119,120,118,70,119,120,118,118,70,70,119,119,120,120,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,118,70,119,120,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,261,261,261,219,219,0,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,0,219,219,219,219,219,219,0,219,219,219,219,219,219,219,0,219,219,219,219,219,219,219,0,0,0,0,220,0,220,220,220,220,220,220,0,220,220,220,220,220,220,220,0,220,220,220,220,220,220,0,220,0,220,220,220,220,220,220,220,0,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,0,221,221,221,221,221,221,221,221,221,221,221,221,221,0,0,0,0,0,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,223,223,223,224,225,226,226,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,227,227,223,224,225,226,227,223,224,225,226,227,227,227,223,223,227,227,223,225,226,226,227,227,227,227,224,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,224,0,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,227,223,224,225,226,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,0,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,262,263,264,265,266,267,268,269,270,271,272,262,263,273,271,266,269,270,271,264,265,266,267,268,270,262,263,265,270,272,262,263,216,216,216,216,216,216,216,216,216,216,216,216,216,216,0,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,274,274,274,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,54,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214],"f":[0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[1,[-1]]],[[1,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,0,[5,-1,[]],[5,-1,[]],[-1,[[6,[[1,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[[1,[-1]],[1,[-1]]],2,3],[5,2],[[[1,[-1]],[1,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,0,0,[[[1,[-1]],11],12,3],[[[1,[-1]],11],12,[13,3]],[14,[[1,[-1]]],3],[15,[[1,[-1]]],3],[-1,-1,[]],[-1,[[1,[-1]]],3],0,[[-1,-2],15,[16,17],18],0,[[[1,[-1]],-2],2,3,19],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],9,3],[[[1,[-1]]],9,3],0,[[],[[6,[24,25]]]],0,0,0,0,[[],[[1,[-1]]],3],[[],[[1,[-1]]],3],[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,[[[1,[-1]],[1,[-1]]],[[27,[26]]],3],[[]],0,0,0,[[[1,[-1]],-2],6,3,28],0,0,0,[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],0,0,[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[-2,[33,[-1]],[34,[-1]],5,[35,[-1]]],[[6,[[2,[[36,[[35,[-1]]]],[37,[-1]]]],38]]],3,[[39,[-1]]]],0,0,0,0,0,[[-1,[40,[-2]],[42,[[41,[-2]]]]],[[41,[-2]]],[],[]],[[-1,[42,[[35,[-2]]]]],[[36,[[2,[29,[36,[-2]]]]]]],[],[]],[-1,43,[]],[[-2,[37,[-1]],[37,[-1]]],[[6,[44,38]]],45,[[39,[-1]]]],0,[[-2,-1],[[37,[-1]]],3,[[39,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[34,[-1]]],[[34,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,0,0,0,0,0,[[[34,[-1]],11],12,[13,3]],[-1,-1,[]],0,0,[[],5],[-1,-2,[],[]],0,[[],[[6,[24,25]]]],0,0,0,[[-2,[33,[-1]]],[[6,[[34,[-1]],38]]],3,[[39,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],0,0,[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,[[-2,-3],[[6,[[35,[-1]],38]]],3,[[39,[-1]]],46],[[-2,-3],[[6,[[47,[-1]],38]]],3,[[39,[-1]]],46],[[-2,[48,[-3,-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]],49],[[-2,[50,[-1]]],[[6,[[47,[-1]],38]]],3,[[39,[-1]]]],[[-2,[33,[-1]],[51,[-1]]],[[6,[[47,[-1]],38]]],3,[[39,[-1]]]],[[-2,[33,[-1]],[52,[-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[[35,[-1]],-2,[35,[-1]]],[[6,[44,38]]],3,[[39,[-1]]]],[[[47,[-1]],-2,[47,[-1]]],[[6,[44,38]]],3,[[39,[-1]]]],[[-2,-3],[[35,[-1]]],3,[[39,[-1]]],46],[[-2,[33,[-1]],-3],[[6,[[35,[-1]],38]]],3,[[39,[-1]]],46],[[-2,-1,[37,[-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[[35,[-1]],-2,-1],[[6,[44,38]]],3,[[39,[-1]]]],[[[47,[-1]],-2,-1],[[6,[44,38]]],3,[[39,[-1]]]],[[-2,[27,[[52,[-1]]]],[33,[-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[-2,[27,[[51,[-1]]]],[33,[-1]]],[[6,[[47,[-1]],38]]],3,[[39,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1]]],[[35,[-1]]],[4,45]],[[[47,[-1]]],[[47,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-2,[34,[-1]],[33,[-1]],[35,[-1]],[35,[-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[-2,[34,[-1]],[33,[-1]],[42,[[35,[-1]]]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[35,[-1]],-2,[35,[-1]]],2,3,[[39,[-1]]]],[[[47,[-1]],-2,[47,[-1]]],2,3,[[39,[-1]]]],[[[35,[-1]],11],12,3],[[[47,[-1]],11],12,3],[-1,-1,[]],[[[47,[-1]]],[[35,[-1]]],3],[-1,-1,[]],[[[35,[-1]]],[[47,[-1]]],3],[[[37,[-1]],[37,[-1]]],[[35,[-1]]],3],[[[47,[-1]],[33,[-1]]],[[27,[[53,[-1]]]]],3],[[[47,[-1]],[33,[-1]]],[[27,[[51,[-1]]]]],3],[[[47,[-1]],[33,[-1]]],[[27,[[50,[-1]]]]],3],[[[35,[-1]]],[[37,[-1]]],3],[[[47,[-1]]],[[37,[-1]]],3],[[[35,[-1]],-2,44,[35,[-1]]],2,3,[[39,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1]],-2],[[6,[44,38]]],3,[[39,[-1]]]],[[[35,[-1]],-2],[[6,[44,38]]],3,[[39,[-1]]]],[[[35,[-1]],-2],[[6,[44,38]]],3,[[39,[-1]]]],[[[35,[-1]],-2],[[6,[44,38]]],3,[[39,[-1]]]],[[[35,[-1]],-2,[34,[-1]]],[[6,[44,38]]],3,[[39,[-1]]]],[[[35,[-1]],-2],[[6,[44,38]]],3,[[39,[-1]]]],[[[35,[-1]],-2],[[6,[44,38]]],3,[[39,[-1]]]],[[[35,[-1]],-2],[[6,[44,38]]],3,[[39,[-1]]]],[[[35,[-1]],-2],[[6,[44,38]]],3,[[39,[-1]]]],[[[35,[-1]],-2],[[6,[44,38]]],3,[[39,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[-2,44,[35,[-1]],[35,[-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[-2,44,[47,[-1]],[47,[-1]]],[[6,[[47,[-1]],38]]],3,[[39,[-1]]]],[[-2,44,[54,[-1]],[54,[-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[]],[[]],[[[35,[-1]],[33,[-1]]],[[27,[[52,[-1]]]]],3],[[[35,[-1]]],[[37,[-1]]],3],[[[47,[-1]]],[[37,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1]],[33,[-1]]],[[27,[[54,[-1]]]]],3],0,0,[[],[[55,[2]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[56,56],[[-1,-2],2,[],[]],[[],56],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[56]]],7],[5,2],[[56,56],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[56,11],12],[[56,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[56,[[27,[57]]]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[],[[42,[56]]]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[27,[58]],[27,[[59,[43,29]]]]],60],0,[[],60],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[60]]],7],[5,2],0,[[60,11],12],[-1,-1,[]],[[58,[27,[[59,[43,29]]]]],[[6,[60,61]]]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],0,[[]],0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[],58],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[[63,[62]],[41,[62]]],[[55,[2]]]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[63,[62]],64,9],[[55,[2]]]],[[[40,[62]],5,5,56],[[63,[62]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],65],[[],66],[[],67],[[],68],[[],69],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[65]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[66]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[65,65],9],[[66,66],9],[[67,67],9],[[68,68],9],[[69,69],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[65,11],12],[[66,11],12],[[67,11],12],[[68,11],12],[[69,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[58,[27,[[59,[43,29]]]]],[[6,[65,61]]]],[[],58],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[69,9],[69,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[27,[58]],[27,[[59,[43,29]]]]],65],[[[27,[58]]],58],0,0,[[]],[[]],[[]],[[]],[[]],0,0,[[],58],0,0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1]]],[[53,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[[53,[-1]]],70,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[53,[-1]],[53,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[53,[-1]],11],12,[13,3]],[[[53,[-1]],[33,[-1]],71,-2],[[72,[2]]],3,73],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[[53,[-1]]],[[51,[-1]]],3],[[[53,[-1]],-2],2,[16,3],19],[[],5],[[[53,[-1]],[33,[-1]]],[[2,[5,9]]],3],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],0,[-1,5,[]],[[-1,[40,[-2]],[42,[[41,[-2]]]],[41,[-2]],[41,[-2]]],[[36,[[41,[-2]]]]],[],[]],[[-1,[40,[-2]],[42,[[41,[-2]]]]],[[36,[[41,[-2]]]]],[],[]],[[-1,[40,[-2]],[42,[[41,[-2]]]]],[[41,[-2]]],[],[]],0,[-1,9,[]],0,[[-1,-3,[74,[-2]],[40,[-2]],44,[42,[[35,[-2]]]],[35,[-2]],[35,[-2]]],[[6,[[36,[[35,[-2]]]],38]]],[],[],[[39,[-2]]]],[[-1,-3,[74,[-2]],[40,[-2]],44,[42,[[35,[-2]]]]],[[6,[[36,[[35,[-2]]]],38]]],[],[],[[39,[-2]]]],[[-1,-3,[74,[-2]],[40,[-2]],44,[42,[[35,[-2]]]]],[[6,[[35,[-2]],38]]],[],[],[[39,[-2]]]],0,0,0,[[[75,[-1,-2]]],5,3,[[76,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[75,[-1,-2]]],[[75,[-1,-2]]],3,[[76,[-1]]]],[[-1,-2],2,[],[]],[-2,[[55,[[75,[-1,-2]]]]],3,[[76,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[75,[-1,-2]]],5,3,[[76,[-1]],13]],[[[75,[-1,-2]],[40,[-1]],[42,[[41,[-1]]]]],[[41,[-1]]],3,[[76,[-1]],13]],[[[75,[-1,-2]],11],12,[13,3],[13,[76,[-1]]]],[-1,-1,[]],[[[75,[-1,-2]]],9,3,[[76,[-1]],13]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[75,[-1,-2]]],43,3,[[76,[-1]]]],[-2,[[75,[-1,-2]]],3,[[76,[-1]]]],[[]],[[[75,[-1,-2]],-3,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[35,[-1]],38]]],3,[[76,[-1]]],[[39,[-1]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[35,[-1]]],[[27,[[48,[-2,-1]]]]],3,49],[[-2,[74,[-1]],[40,[-1]],44,[35,[-1]]],[[6,[[2,[[35,[-1]],[35,[-1]],44]],38]]],3,[[39,[-1]]]],[[-2,[74,[-1]],[40,[-1]],44,[35,[-1]],5],[[6,[[2,[[36,[[35,[-1]]]],[35,[-1]],[37,[-1]]]],38]]],3,[[39,[-1]]]],[[-2,[74,[-1]],[40,[-1]],[35,[-1]],[35,[-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[-2,[74,[-1]],[40,[-1]],[42,[[35,[-1]]]],[27,[[35,[-1]]]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[-2,[74,[-1]],[40,[-1]],-3,[35,[-1]],[35,[-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]],49],[[-2,[74,[-1]],[40,[-1]],-3,[35,[-1]],[35,[-1]],[35,[-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]],49],[[-2,[74,[-1]],[40,[-1]],-3,[35,[-1]],[35,[-1]],[35,[-1]],[35,[-1]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]],49],[[-2,[40,[-1]],44,[35,[-1]]],[[6,[[2,[[35,[-1]],[35,[-1]]]],38]]],3,[[39,[-1]]]],[[-2,[40,[-1]],44,[35,[-1]]],[[6,[[2,[[35,[-1]],[35,[-1]],[35,[-1]]]],38]]],3,[[39,[-1]]]],[[-2,[40,[-1]],44,[35,[-1]]],[[6,[[2,[[35,[-1]],[35,[-1]],[35,[-1]],[35,[-1]]]],38]]],3,[[39,[-1]]]],0,0,0,[[[77,[-1]]],5,3],[[[78,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[77,[-1]]],[[77,[-1]]],[4,3]],[[[78,[-1]]],[[78,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[77,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[78,[-2]]]]],7,[79,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[77,[-1]]],5,3],[[[78,[-1]]],5,3],[[[78,[-1]],[40,[-1]],[42,[[41,[-1]]]],[41,[-1]],[41,[-1]]],[[36,[[41,[-1]]]]],3],[[[78,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[36,[[41,[-1]]]]],3],[[[77,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[41,[-1]]],3],[[[78,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[41,[-1]]],3],[[[77,[-1]],11],12,[13,3]],[[[78,[-1]],11],12,[13,3]],[-1,-1,[]],[[[77,[-1]]],[[78,[-1]]],3],[-1,-1,[]],[[[77,[-1]]],9,3],[[[78,[-1]]],9,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[5,[[77,[-1]]],3],[[]],[[]],[[[77,[-1]],-2],6,3,28],[[[78,[-1]],-2],6,[80,3],28],[[[78,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]],[35,[-1]],[35,[-1]]],[[6,[[36,[[35,[-1]]]],38]]],3,[[39,[-1]]]],[[[78,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[36,[[35,[-1]]]],38]]],3,[[39,[-1]]]],[[[77,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[[78,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[81,[-1]]],5,3],[[[82,[-1]]],5,3],[[[83,[-1]]],5,3],[[[84,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[81,[-1]]],[[81,[-1]]],[4,3]],[[[82,[-1]]],[[82,[-1]]],[4,3]],[[[83,[-1]]],[[83,[-1]]],[4,3]],[[[84,[-1]]],[[84,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[82,[-1]]],[85,3]],[[],[[83,[-1]]],[85,3]],[[],[[84,[-1]]],[85,3]],[[],[[86,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[82,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[83,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[84,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[86,[-1]]],-1,3],[[[81,[-1]]],5,3],[[[82,[-1]]],5,3],[[[83,[-1]]],5,3],[[[84,[-1]]],5,3],[[[81,[-1]],[40,[-1]],[42,[[41,[-1]]]],[41,[-1]],[41,[-1]]],[[36,[[41,[-1]]]]],3],[[[81,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[36,[[41,[-1]]]]],3],[[[81,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[41,[-1]]],3],[[[82,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[41,[-1]]],3],[[[83,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[41,[-1]]],3],[[[84,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[41,[-1]]],3],[[[87,[-1]],11],12,13],[[[81,[-1]],11],12,[13,3]],[[[82,[-1]],11],12,[13,3]],[[[83,[-1]],11],12,[13,3]],[[[84,[-1]],11],12,[13,3]],[[[86,[-1]],11],12,[13,3]],[[[88,[-1]],11],12,[13,3]],[[[89,[-1]],11],12,[13,3]],[-1,-1,[]],[[[84,[-1]]],[[81,[-1]]],3],[[[82,[-1]]],[[81,[-1]]],3],[-1,-1,[]],[[[83,[-1]]],[[81,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[81,[-1]]],9,3],[[[82,[-1]]],9,3],[[[83,[-1]]],9,3],[[[84,[-1]]],9,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[86,[-1]],-1,-1],[[6,[9,[87,[-1]]]]],3],[[[91,[[90,[71]]]],[92,[-1,[81,[-1]]]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[86,[-1]]],5,3],[[[86,[-1]],-1],[[6,[[27,[-1]],[87,[-1]]]]],3],[[[93,[-1]],[94,[-1]]],[[86,[-1]]],3],[[[93,[-1]],[94,[-1]],5],[[86,[-1]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[86,[-1]],-1,-1],[[6,[[2,[[89,[-1]],9]],[87,[-1]]]]],3],[[[86,[-1]],-1],[[6,[[88,[-1]],[87,[-1]]]]],3],[[[86,[-1]]],-1,3],[[[86,[-1]],5],5,3],[[[82,[-1]],-2],6,3,28],[[[83,[-1]],-2],6,3,28],[[[84,[-1]],-2],6,3,28],[[[81,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]],[35,[-1]],[35,[-1]]],[[6,[[36,[[35,[-1]]]],38]]],3,[[39,[-1]]]],[[[86,[-1]],-2,[95,[-1]],[37,[-1]],[37,[-1]],[37,[-1]]],[[6,[[37,[-1]],38]]],3,[[39,[-1]]]],[[[81,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[36,[[35,[-1]]]],38]]],3,[[39,[-1]]]],[[[81,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[[82,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[[83,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[[[84,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[88,[-1]],-1,-1,-1,[93,[-1]]],9,3],[[[89,[-1]],-1,-1,-1,[27,[-1]],-1,[93,[-1]]],9,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,96,[]],[-1,96,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[97,97],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[98,11],12],[[98,11],12],[[97,11],12],[[97,11],12],[99,98],[97,98],[100,98],[-1,-1,[]],[38,98],[-1,-1,[]],[100,97],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[98,[[27,[96]]]],[97,[[27,[96]]]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[101,[-1]]],[[101,[-1]]],[4,3]],[[[102,[-1,-2,-3,-4]]],[[102,[-1,-2,-3,-4]]],[4,103],[4,103],[4,3],4],[[[104,[-1]]],[[104,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[],[[101,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[33,[-1]]],[[52,[-1]]],3],[[[101,[-1]],[101,[-1]]],9,[10,3]],[[[102,[-1,-2,-3,-4]],[102,[-1,-2,-3,-4]]],9,[10,103],[10,103],[10,3],10],[[[104,[-1]],[104,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[101,[-1]],11],12,[13,3]],[[[102,[-1,-2,-3,-4]],11],12,[13,103],[13,103],[13,3],13],[[[104,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[],5],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[101,[-1]]],9,3],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,0,[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[92,[-1,-2]],-3],2,3,[[105,[-1]]],[[107,[[106,[-1,-2]]]]]],[[[92,[-1,-2]],-3,-4],2,3,[[105,[-1]]],[[107,[108]]],[[107,[-2]]]],[[[109,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[110,[-1]]],[[110,[-1]]],[4,3]],[[[109,[-1]]],[[109,[-1]]],[4,3]],[[[92,[-1,-2]]],[[92,[-1,-2]]],[4,3],[4,[105,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[92,[-1,-2]]],5,3,[[105,[-1]]]],[[[92,[-1,-2]]],[[111,[108,-2]]],3,[[105,[-1]]]],[[],[[92,[-1,-2]]],[85,3],[85,[105,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[110,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[109,[-2]]]]],7,[79,3]],[-1,[[6,[[92,[-2,-3]]]]],7,3,[79,[105,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[110,[-1]]],5,3],[[[109,[-1]]],5,3],[[[109,[-1]],[40,[-1]],[42,[[41,[-1]]]],[41,[-1]],[41,[-1]]],[[36,[[41,[-1]]]]],3],[[[109,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[36,[[41,[-1]]]]],3],[[[110,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[41,[-1]]],3],[[[109,[-1]],[40,[-1]],[42,[[41,[-1]]]]],[[41,[-1]]],3],[[[110,[-1]],11],12,[13,3]],[[[109,[-1]],11],12,[13,3]],[[[92,[-1,-2]],11],12,[13,3],[13,[105,[-1]]]],[[[106,[-1,-2]],11],12,[13,3],[13,[105,[-1]]]],[-1,-1,[]],[-1,-1,[]],[[[110,[-1]]],[[109,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-3]]],[[106,[-2,-3]]],[[107,[108]]],3,[[105,[-2]]]],[[[92,[-1,-2]],108],[[27,[5]]],3,[[105,[-1]]]],[[[109,[-1]]],9,3],[[[92,[-1,-2]]],9,3,[[105,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[92,[-1,-2]]],9,3,[[105,[-1]]]],[[[92,[-1,-2]]],29,3,[[105,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[92,[-1,-2]],108],[[27,[-2]]],3,[[105,[-1]]]],[[],[[92,[-1,-2]]],3,[[105,[-1]]]],[[-1,-4],[[106,[-2,-3]]],[[107,[108]]],3,[[105,[-2]]],[[107,[-3]]]],[[[36,[-3]]],[[92,[-1,-2]]],3,[[105,[-1]]],[[107,[[106,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[110,[-1]],-2],6,3,28],[[[109,[-1]],-2],6,[80,3],28],[[[92,[-1,-2]],-3],6,3,[80,[105,[-1]]],28],[[[109,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]],[35,[-1]],[35,[-1]]],[[6,[[36,[[35,[-1]]]],38]]],3,[[39,[-1]]]],[[[109,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[36,[[35,[-1]]]],38]]],3,[[39,[-1]]]],[[[109,[-1]],-2,[74,[-1]],[40,[-1]],44,[42,[[35,[-1]]]]],[[6,[[35,[-1]],38]]],3,[[39,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[112,[-1]]],[[112,[-1]]],[4,3]],[[[113,[-1]]],[[113,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[112,[-1]],[112,[-1]]],9,[10,3]],[[[113,[-1]],[113,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[112,[-1]],[33,[-1]],71,-2],[[72,[2]]],3,73],[[[112,[-1]],11],12,[13,3]],[[[113,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[[113,[-1]],-2],2,3,19],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[112,[-1]]],9,3],[[[112,[-1]]],9,3],[[[112,[-1]]],9,3],[[[112,[-1]]],9,3],[[[112,[-1]]],9,3],[[[112,[-1]]],9,3],[[[112,[-1]]],9,3],[[[112,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[114,114],[[[115,[-1]]],[[115,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[115,[-1]],[115,[-1]]],26,3],[[-1,-2],26,[],[]],[[],114],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[114]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[115,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[114,114],9],[[[115,[-1]],[115,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[114,11],12],[[114,11],12],[[[115,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[42,[116]]],[[27,[-1]]],[]],[117,-1,[]],[70,-1,[]],[118,-1,[]],[119,-1,[]],[120,-1,[]],[121,-1,[]],[122,-1,[]],[15,-1,[]],[-1,114,[]],[[-1,-2],15,[16,17],18],[[[115,[-1]],-2],2,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,29,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],-1,[]],[[],-1,[]],[[[115,[-1]],[115,[-1]]],[[27,[26]]],3],[[]],[[]],[[114,-1],6,28],[[[115,[-1]],-2],6,3,28],[-1,[[36,[116]]],[]],[-1,[[27,[117]]],[]],[-1,[[27,[70]]],[]],[-1,[[27,[118]]],[]],[-1,[[27,[119]]],[]],[-1,[[27,[120]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[114,[[27,[57]]]],[-1,29,[]],[-1,[[27,[123]]],[]],[-1,123,[]],[-1,[[27,[121]]],[]],[-1,[[27,[122]]],[]],[-1,122,[]],[-1,[[27,[15]]],[]],[-1,15,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[],[[42,[114]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[95,[-1]]],[[125,[-1,124]]],3],[[[95,[-1]]],[[125,[-1,126]]],3],[[[95,[-1]]],[[125,[-1,127]]],3],[[[95,[-1]]],[[125,[-1,128]]],3],[129,129],[[[95,[-1]]],[[95,[-1]]],[4,3]],[[[93,[-1]]],[[93,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[93,[-1]],[130,[-1]]],-1,3],[[[95,[-1]],129],[[131,[-1]]],3],0,0,[[],[[95,[-1]]],3],[[],[[93,[-1]]],[85,3]],[[],[[94,[-1]]],[85,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[129,11],12],[[[131,[-1]],11],12,[13,3]],[[[95,[-1]],11],12,[13,3]],[[[93,[-1]],11],12,[13,3]],[[[94,[-1]],11],12,[13,3]],[-1,-1,[]],[5,129],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[94,[-1]],[115,[-1]]],[[27,[[130,[-1]]]]],3],[[[93,[-1]],[130,[-1]]],-1,3],[[[93,[-1]],[130,[-1]]],-1,3],[[[93,[-1]],[130,[-1]]],-1,3],[[[93,[-1]],[130,[-1]]],-1,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[[94,[-1]],[115,[-1]],[130,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[132,[-1,-2,-3]],[33,[-3]]],2,[133,85,103,134,13],103,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[135,[-1]],[33,[-1]],[52,[-1]]],[[55,[[2,[[52,[-1]],[52,[-1]]]],100]]],3],[[[137,[[136,[-1]]]],[33,[-1]],[52,[-1]]],[[55,[[2,[[52,[-1]],[52,[-1]]]],100]]],3],[[[138,[-1]],139,[33,[-1]],[52,[-1]]],[[55,[[2,[[52,[-1]],[52,[-1]]]],100]]],3],[[[132,[139,[136,[-1]],-1]],139,[33,[-1]],[52,[-1]]],[[55,[[2,[[52,[-1]],[52,[-1]]]],100]]],3],[[[138,[-1]],139,[33,[-1]],[52,[-1]]],[[55,[[2,[[52,[-1]],[52,[-1]]]],97]]],3],[[[132,[139,[136,[-1]],-1]],139,[33,[-1]],[52,[-1]]],[[55,[[2,[[52,[-1]],[52,[-1]]]],97]]],3],0,0,0,0,0,[[[137,[-1]]],[[137,[-1]]],4],[[[136,[-1]]],[[136,[-1]]],[4,3]],[[[140,[-1]]],[[140,[-1]]],[4,3]],[[[141,[-1]]],[[141,[-1]]],[4,3]],[[[142,[-1]]],[[142,[-1]]],[4,3]],[139,139],[143,143],[[[132,[-1,-2,-3]]],[[132,[-1,-2,-3]]],[4,133],4,[4,3]],[[[144,[-1,-3,-2]]],[[144,[-1,-3,-2]]],[4,133],[4,3],[4,[145,[-2]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[135,[-1]],[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[137,[[136,[-1]]]],[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],0,0,[[[138,[-1]],139,[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[132,[139,[136,[-1]],-1]],139,[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],0,0,0,[[],139],[[],143],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[137,[-1]],[137,[-1]]],9,10],[[[136,[-1]],[136,[-1]]],9,[10,3]],[[[142,[-1]],[142,[-1]]],9,[10,3]],[[139,139],9],[[143,143],9],[[[132,[-1,-2,-3]],[132,[-1,-2,-3]]],9,[10,133],10,[10,3]],[[[144,[-1,-3,-2]],[144,[-1,-3,-2]]],9,[10,133],[10,3],[10,[145,[-2]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[138,[-1]],139,[52,[-1]],[52,[-1]],[52,[-1]],[33,[-1]]],[[52,[-1]]],3],[[[132,[139,[136,[-1]],-1]],139,[52,[-1]],[52,[-1]],[52,[-1]],[33,[-1]]],[[52,[-1]]],3],[[[146,[-1]],[33,[-1]],[51,[-1]]],[[27,[[53,[-1]]]]],3],[[[137,[[142,[-1]]]],[33,[-1]],[51,[-1]]],[[27,[[53,[-1]]]]],3],[[[147,[-1]],143,[33,[-1]],[51,[-1]]],[[27,[[53,[-1]]]]],3],[[[132,[143,[142,[-1]],-1]],143,[33,[-1]],[51,[-1]]],[[27,[[53,[-1]]]]],3],[[[137,[-1]],11],12,13],[[[136,[-1]],11],12,[13,3]],[[[140,[-1]],11],12,[13,3]],[[[141,[-1]],11],12,[13,3]],[[[142,[-1]],11],12,[13,3]],[[139,11],12],[[143,11],12],[[[132,[-1,-2,-3]],11],12,[13,133],13,[13,3]],[[[144,[-1,-3,-2]],11],12,[13,133],[13,3],[13,[145,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[132,[-1,-3,-2]]],[[144,[-1,-3,-2]]],133,3,[[145,[-2]]]],[-1,-1,[]],[[[132,[-1,-2,-3]],-1],[[137,[-2]]],[133,85,103,134,13],103,3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[139,-1],2,19],[[143,-1],2,19],0,0,0,[-1,5,[]],[139,5],[143,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[146,[-1]],[33,[-1]],[53,[-1]]],[[51,[-1]]],3],[[[137,[[142,[-1]]]],[33,[-1]],[53,[-1]]],[[51,[-1]]],3],[[[147,[-1]],143,[33,[-1]],[53,[-1]]],[[51,[-1]]],3],[[[132,[143,[142,[-1]],-1]],143,[33,[-1]],[53,[-1]]],[[51,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,0,0,[[],[[132,[-1,-2,-3]]],[133,85,103,134,13],103,3],[[[137,[-1]]],[[132,[-2,-1,-3]]],103,[133,85,103,134,13],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[148,[-2]]],[],[]],[[-1,[33,[-2]]],[[55,[[148,[-2]]]]],[],[]],[[[136,[-1]],[33,[-1]]],[[55,[[148,[-1]]]]],3],[[[140,[-1]]],[[148,[-1]]],3],[[[141,[-1]]],[[148,[-1]]],3],[[[142,[-1]],[33,[-1]]],[[55,[[148,[-1]]]]],3],0,0,0,[[[135,[-1]],[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[137,[[136,[-1]]]],[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[138,[-1]],139,[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[132,[139,[136,[-1]],-1]],139,[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[132,[-1,-2,-3]]],5,[133,85,103,134,13],103,3],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[33,[-2]]],27,[],[]],[[[137,[-2]],[33,[-1]]],27,3,[[145,[-1]]]],[[[136,[-1]],[33,[-1]]],27,3],[[[142,[-1]],[33,[-1]]],27,3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[149,-2,[40,[-1]]],[[55,[[74,[-1]],38]]],3,[[39,[-1]]]],[[149,[42,[0]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[149,[42,[[41,[-1]]]],[40,[-1]],[150,[-1]],[36,[[41,[-1]]]],[92,[-1,-2]],5],[[55,[[2,[[151,[-1]],0]]]]],3,[[105,[-1]]]],[[149,[42,[[41,[-1]]]],[40,[-1]],[92,[-1,-2]],5],[[55,[[151,[-1]]]]],3,[[105,[-1]]]],[149,[[55,[2]]]],0,[149,149],[152,152],[153,153],[154,154],[155,155],[156,156],[157,157],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[153]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[149,149],9],[[152,152],9],[[153,153],9],[[154,154],9],[[155,155],9],[[156,156],9],[[157,157],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[149,11],12],[[152,11],12],[[152,11],12],[[153,11],12],[[153,11],12],[[154,11],12],[[155,11],12],[[156,11],12],[[157,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[153]]],3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[152,-1],2,19],[[153,-1],2,19],[[154,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[152,158],0,[[29,[36,[152]],5,155],[[55,[149]]]],[43,152],[[149,[40,[-1]]],5,3],[149,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[153,-1],6,28],0,0,[[149,-2,[40,[-1]],[151,[-1]],[74,[-1]],[0,[[159,[-1]]]],[92,[-1,-3]],[27,[[42,[[161,[[160,[-1]]]]]]]]],[[55,[[36,[[35,[-1]]]]]]],3,[[39,[-1]]],[[105,[-1]]]],[[149,-2,[40,[-1]],[151,[-1]],[92,[-1,-3]]],[[55,[2]]],3,[[39,[-1]]],[[105,[-1]]]],[153,-1,3],[153,-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[154,[40,[-1]]],[[41,[-1]]],3],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[121,[[55,[153]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[149,5],[[55,[149]]]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[159,[-1]]],[[159,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[],[[74,[-1]]],[85,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[74,[-1]],-2,-1],[[55,[[35,[-1]],38]]],3,49],[[[74,[-1]],[41,[-1]],[40,[-1]]],[[55,[[35,[-1]],38]]],3],[[[74,[-1]],-1],[[55,[[37,[-1]],38]]],3],[[[74,[-1]],-1],[[55,[[37,[-1]],38]]],3],[[[74,[-1]],-2],[[55,[[37,[-1]],38]]],3,49],[[[74,[-1]],-2],[[55,[[37,[-1]],38]]],3,49],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[74,[-1]],-2,-1],2,3,[[39,[-1]]]],[[[74,[-1]],-2,-3],2,3,[[39,[-1]]],49],[[[74,[-1]],-2,[163,[-1]]],2,3,[[39,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],149],[[[27,[[2,[149,[92,[-1,-2]]]]]],[41,[-1]],[40,[-1]],5],[[55,[[2,[[36,[[151,[-1]]]],5]]]]],3,[[105,[-1]]]],[[[27,[[2,[149,[92,[-1,-2]]]]]],[41,[-1]],[40,[-1]],5],[[55,[[2,[[36,[[41,[-1]]]],5,[36,[[41,[-1]]]]]]]]],3,[[105,[-1]]]],[[[27,[[2,[149,[92,[-1,-2]]]]]],[41,[-1]],[41,[-1]],[40,[-1]],5],[[55,[[2,[[36,[[41,[-1]]]],5,[36,[[41,[-1]]]]]]]]],3,[[105,[-1]]]],[[[27,[[2,[149,[92,[-1,-2]]]]]],[41,[-1]],[41,[-1]],[40,[-1]],5],[[55,[[2,[[36,[[151,[-1]]]],5]]]]],3,[[105,[-1]]]],[[[27,[[2,[149,[92,[-1,-2]]]]]],[41,[-1]],[41,[-1]],[41,[-1]],[40,[-1]],5],[[55,[[2,[[36,[[151,[-1]]]],5]]]]],3,[[105,[-1]]]],[[[92,[-1,-2]]],[[161,[[42,[149]]]]],3,[[105,[-1]]]],[[[92,[-1,-2]],9],149,3,[[105,[-1]]]],0,0,0,0,0,0,[149,[[150,[-1]]],3],[[149,5],[[151,[-1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[164,[-1]]],[[164,[-1]]],[4,3]],[[[150,[-1]]],[[150,[-1]]],[4,3]],[[[151,[-1]]],[[151,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[],[[150,[-1]]],[85,3]],[[],[[151,[-1]]],[85,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],0,[[[150,[-1]],11],12,[13,3]],[[[151,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[[],5],[[],5],[[[151,[-1]]],[],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[149,[[150,[-1]]],3],[[[151,[-1]]],[],3],0,0,[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[165,[-1,-2]]],5,3,[[105,[-1]]]],[[[165,[-1,-2]]],5,3,[[105,[-1]]]],[[[161,[[166,[-1,-2]]]],[101,[-1]],5],[[165,[-1,-2]]],3,[[105,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[165,[-1,-2]]],[[27,[[167,[-1]]]]],3,[[105,[-1]]]],[[[165,[-1,-2]]],5,3,[[105,[-1]]]],[[[165,[-1,-2]]],[[165,[-1,-2]]],[4,3],[4,[105,[-1]]]],[[-1,-2],2,[],[]],[[[165,[-1,-2]],[40,[-1]]],[[167,[-1]]],3,[[105,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[40,[-1]]],[[36,[[41,[-1]]]]],3],[[[165,[-1,-2]],11],12,[13,3],[13,[105,[-1]]]],[[[165,[-1,-2]]],[[27,[36]]],3,[[105,[-1]]]],[-1,-1,[]],[[5,[42,[[151,[-1]]]],[161,[[166,[-1,-2]]]]],[[36,[[165,[-1,-2]]]]],3,[[105,[-1]]]],[[-1,5,[92,[-2,-3]]],[[55,[36,98]]],168,3,[[105,[-2]]]],[[],5],[-1,-2,[],[]],[[],[[36,[-1]]],3],[[],[[6,[24,25]]]],[[5,27,[161,[[166,[-1,-2]]]],[101,[-1]]],[[165,[-1,-2]]],3,[[105,[-1]]]],[[[165,[-1,-2]]],5,[169,3],[[105,[-1]]]],[[[165,[-1,-2]]],27,3,[[105,[-1]]]],[[]],[[[165,[-1,-2]],[165,[-1,-2]]],9,3,[[105,[-1]]]],[[[165,[-1,-2]],5],[[165,[-1,-2]]],[169,3],[[105,[-1]]]],[[[165,[-1,-2]]],5,3,[[105,[-1]]]],[[[165,[-1,-2]]],[[36,[-1]]],3,[[105,[-1]]]],[[[165,[-1,-2]]],5,3,[[105,[-1]]]],[[[165,[-1,-2]]],[[170,[-1]]],[169,3],[[105,[-1]]]],[42,5],[[[165,[-1,-2]],-3],[[55,[2,38]]],3,[[105,[-1]]],[[39,[-1]]]],[[[165,[-1,-2]],-3,[42,[[37,[-1]]]]],[[55,[[36,[[37,[-1]]]],38]]],3,[[105,[-1]]],[[39,[-1]]]],[[[165,[-1,-2]],-3,[27,[[37,[-1]]]],[42,[[37,[-1]]]]],[[55,[[2,[[27,[[37,[-1]]]],[36,[[37,[-1]]]]]],38]]],3,[[105,[-1]]],[[39,[-1]]]],[[[165,[-1,-2]],-3,42],[[55,[38]]],3,[[105,[-1]]],[[39,[-1]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[41,[-1]],153],[[41,[-1]]],3],[117,[[41,[-1]]],3],[[[41,[-1]]],[[41,[-1]]],[4,3]],[[-1,-2],2,[],[]],[-1,[[41,[-1]]],3],[5,-1,[]],[5,-1,[]],[-1,[[6,[[41,[-2]]]]],7,[79,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[],[[163,[-1]]],3],[[],[[41,[-1]]],3],[[[41,[-1]],[41,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[41,[-1]],11],12,[13,3]],[[[41,[-1]],[40,[-1]],71],29,3],[-1,-1,[]],[[[41,[-1]]],[[27,[-1]]],3],[[-1,-2],15,[16,17],18],[[[41,[-1]]],[[27,[5]]],3],[[[41,[-1]]],[[27,[5]]],3],[[[41,[-1]]],[[27,[5]]],3],[[[41,[-1]],-2],2,3,19],[[],5],[-1,-2,[],[]],[[[41,[-1]]],9,3],[[[41,[-1]]],9,3],[[[41,[-1]]],9,3],[[],[[6,[24,25]]]],[-1,[[41,[-1]]],3],[15,[[41,[-1]]],3],[[[163,[-1]]],[[41,[-1]]],3],[[]],[[[41,[-1]],-2],6,[80,3],28],[[[41,[-1]]],153,3],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[15,[[41,[-1]]],3],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[153,[[41,[-1]]],3],0,[[[40,[-1]],-1,-1,[41,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1]],[41,[-1]]],[[55,[[2,[[41,[-1]],[41,[-1]]]]]]],3],[[[40,[-1]],[41,[-1]]],[[41,[-1]]],3],[[[40,[-1]],[41,[-1]],[41,[-1]]],[[41,[-1]]],3],[[[40,[-1]]],[[41,[-1]]],3],[[[40,[-1]]],[[41,[-1]]],3],[[[40,[-1]]],[[41,[-1]]],3],[[],[[40,[-1]]],3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[40,[-1]],5],[[2,[[41,[-1]],[41,[-1]]]]],3],[[[40,[-1]],5],[[2,[[41,[-1]],[41,[-1]],[41,[-1]]]]],3],[[[40,[-1]],5],[[2,[[41,[-1]],[41,[-1]],[41,[-1]],[41,[-1]]]]],3],[[[40,[-1]],5],[[27,[[2,[[41,[-1]],[41,[-1]]]]]]],3],[[[40,[-1]],5],[[27,[[2,[[41,[-1]],[41,[-1]],[41,[-1]]]]]]],3],[[[40,[-1]],5],[[27,[[2,[[41,[-1]],[41,[-1]],[41,[-1]],[41,[-1]]]]]]],3],[[[40,[-1]],[41,[-1]]],[[27,[108]]],3],[[[40,[-1]],[41,[-1]]],[[27,[[2,[[36,[[41,[-1]]]],[27,[[41,[-1]]]]]]]]],3],[[[40,[-1]],[41,[-1]]],[[27,[29]]],3],[[[40,[-1]],[41,[-1]]],[[27,[108]]],3],[[[40,[-1]],[41,[-1]]],[[27,[108]]],3],[[[40,[-1]],11],12,[13,3]],[-1,-1,[]],[[[40,[-1]]],[],3],[[[40,[-1]]],5,3],0,[[[40,[-1]]],5,3],0,[[[40,[-1]]],5,3],0,[[[40,[-1]]],5,3],0,[[[40,[-1]],[41,[-1]]],[[163,[-1]]],3],[[[40,[-1]],-1,[41,[-1]]],[[41,[-1]]],3],[[[40,[-1]],-1,[41,[-1]]],[[2,[-1,[163,[-1]]]]],3],[[[40,[-1]]],2,3],[[[40,[-1]]],2,3],[[[40,[-1]],[36,[[41,[-1]]]],[41,[-1]]],[[41,[-1]]],3],[[],5],[[[40,[-1]]],[],3],[[[40,[-1]],153,[41,[-1]],[41,[-1]]],[[41,[-1]]],3],[[[40,[-1]],153,[41,[-1]],[41,[-1]],[163,[-1]]],[[41,[-1]]],3],[[[40,[-1]],153,[41,[-1]],[41,[-1]],[41,[-1]]],[[41,[-1]]],3],[[[40,[-1]],153,[41,[-1]],[41,[-1]],[41,[-1]],[163,[-1]]],[[41,[-1]]],3],[[[40,[-1]],153,[41,[-1]],[41,[-1]],[41,[-1]],[41,[-1]]],[[41,[-1]]],3],[[[40,[-1]],153,[41,[-1]],[41,[-1]],[41,[-1]],[41,[-1]],[163,[-1]]],[[41,[-1]]],3],[[[40,[-1]],[41,[-1]],[41,[-1]],[41,[-1]]],[[41,[-1]]],3],[[[40,[-1]],43],[[41,[-1]]],3],[[[40,[-1]]],[[41,[-1]]],3],[[[40,[-1]],43],[[41,[-1]]],3],[[[40,[-1]],108],[[41,[-1]]],3],[[[40,[-1]],[42,[29]]],[[41,[-1]]],3],[[[40,[-1]],[171,[-1]]],[[41,[-1]]],3],[[[40,[-1]],43],[[41,[-1]]],3],[-1,-2,[],[]],0,[[[40,[-1]],43],[[41,[-1]]],3],[[],[[6,[24,25]]]],[[[40,[-1]],[36,[[41,[-1]]]]],[[41,[-1]]],3],[[[40,[-1]],-1],[[27,[[2,[-1,[41,[-1]]]]]]],3],[[]],0,[[[40,[-1]],[41,[-1]],[41,[-1]]],9,3],[[[40,[-1]]],9,3],[[[40,[-1]],[91,[[90,[71]]]],43],[[55,[[41,[-1]]]]],3],[[[40,[-1]],43],55,3],[[[40,[-1]],[91,[[90,[71]]]],43],[[55,[[2,[5,172,[41,[-1]],9]],173]]],3],[[[40,[-1]],43],[[55,[[41,[-1]]]]],3],[[[40,[-1]],[163,[-1]]],[[41,[-1]]],3],[[[40,[-1]],[42,[[41,[-1]]]]],[[36,[-1]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[174,11],12],[[174,175],29],[-1,-1,[]],[[174,[42,[175]]],[[55,[2]]]],[[],5],[[174,-1],175,[[107,[29]]]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[174,175],[175,174],[[]],[[174,43],[[27,[175]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[174,174],[[55,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,96,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[173,173],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,[[173,11],12],[[173,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,[176,43],[-1,-2,[],[]],[-1,-2,[],[]],[176,176],[[-1,-2],2,[],[]],[176,117],[[176,172],[[177,[-1,[36,[116]]]]],3],[[],176],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[176,-1],29,[[178,[[42,[116]]]]]],[[176,176],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[176,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[176,117],9],[[],[[6,[24,25]]]],[[],[[0,[168]]]],[172,[[177,[-1,176]]],3],[[],[[0,[168]]]],[[],[[0,[168]]]],[176,[[0,[168]]]],[[],[[0,[168]]]],[176,[[31,[168]]]],[176,[[0,[168]]]],[[],[[0,[168]]]],[[]],[176,122],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,43,[179,[-1,-2]]],[[179,[-1,-2]]],[180,4,181],3],[[-1,182,[179,[-1,-2]]],[[179,[-1,-2]]],[180,4,181],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[183,[-1]]],[[183,[-1]]],[4,3]],[[[179,[-1,-2]]],[[179,[-1,-2]]],[4,181],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[183,[-1]],[183,[-1]]],9,[10,3]],[[[179,[-1,-2]],[179,[-1,-2]]],9,[10,181],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[[183,[-1]],11],12,[13,3]],[[[183,[-1]],11],12,3],[[[179,[-1,-2]],11],12,[13,181],[13,3]],[[[179,[172,-1]],11],12,3],[-1,-1,[]],[-1,-1,[]],[[-1,182],[[179,[-1,-2]]],[180,4,181],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[183,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[184,[-1,-2,[179,[-1,-3]]]],-4],[[184,[-1,-2,[179,[-1,-3]]]]],181,[],3,168],[[-1,[183,[-2]]],[[179,[-1,-2]]],181,3],[[[27,[-1]],-2,[183,[-3]]],[[184,[-2,-1,[179,[-2,-3]]]]],[],181,3],[[[179,[-1,-2]],[179,[-1,-2]]],[[179,[-1,-2]]],[180,4,181],3],[[]],[[]],[[[6,[-1,-2]],-3,-4],[[184,[-3,-1,[179,[-3,-5]]]]],[],[],181,168,3],[[-1,[183,[-2]]],[[184,[-1,-3,[179,[-1,-2]]]]],181,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[185,185],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[185,185],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[185,11],12],[-1,-1,[]],[[172,172],185],[185,[[27,[5]]]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[43,5,5,5,5],29],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[186,186],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[186,186],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[186,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[117,43],[[0,[168]]]],[[],[[0,[168]]]],[[117,9,43],[[0,[168]]]],[[117,9,43],[[0,[168]]]],[117,[[0,[168]]]],[[117,9,43],[[0,[168]]]],[[117,9,43],[[0,[168]]]],[[],[[0,[168]]]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[91,[[90,[71]]]],9],[[0,[168]]]],[[],[[0,[168]]]],[[],[[0,[168]]]],[172,[[177,[-1,172]]],3],[[[91,[[90,[71]]]],9,9],[[0,[168]]]],[[[91,[[90,[71]]]],9],[[0,[168]]]],[[],[[0,[168]]]],[176,[[0,[168]]]],[[[91,[[90,[71]]]],9],[[0,[168]]]],[[[91,[[90,[71]]]],9],[[0,[168]]]],[[[91,[[90,[71]]]],9],[[0,[168]]]],[[[91,[[90,[71]]]],9],[[0,[168]]]],[172,[[177,[-1,[36,[172]]]]],3],[172,[[177,[-1,[36,[172]]]]],3],[[],[[0,[168]]]],[[[91,[[90,[71]]]],9],[[0,[168]]]],[43,[[0,[168]]]],[43,[[0,[168]]]],[[],[[0,[168]]]],[[[91,[[90,[71]]]],9,9],[[0,[168]]]],[[],[[0,[168]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[161,[[166,[-1,-2]]]],[101,[-1]],5],-3,[],[],[]],[-1,[[27,[[167,[-2]]]]],[],[]],[-1,[[167,[-2]]],[],[]],[-1,-2,[],[]],[[],36],[-1,-2,[],[]],[[-1,5],5,[]],[-1,-2,[],[]],[[-1,5],5,[]],[-1,[[27,[36]]],[]],[[5,42,[161,[[166,[-1,-2]]]]],[[36,[-3]]],[],[],[]],[-1,[],[]],[[-1,5,[92,[-2,-3]]],[[6,[36,98]]],168,[],[]],[-1,2,[]],[-1,[],[]],[-1,[],[]],[[],[[36,[-1]]],[]],[-1,[[92,[-2,-3]]],[],[],[]],[[5,27,[161,[[166,[-1,-2]]]],[101,[-1]]],-3,[],[],[]],[[-1,5],5,[]],[[-1,5],9,[]],[[-1,5],9,[]],[[5,[92,[-1,-2]]],-3,[],[],[]],0,[[-1,[42,[-2]]],[[6,[[36,[[2,[-2,[187,[-3]]]]]],38]]],[],[],[]],[-1,[],[]],[-1,27,[]],[[-1,-1],9,[]],[-1,9,[]],[-1,5,[]],[-1,[[36,[-2]]],[],[]],[[-1,43],6,[]],[-1,5,[]],[-1,5,[]],[42,5],0,[[-1,-3,42],[[6,[38]]],[],[],[[39,[-2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[161,[[92,[-1,-2]]]]],-1,169,[[105,[-1]]]],[[5,[161,[[92,[-1,-2]]]]],[[2,[-3,[188,[-1]]]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[[[190,[-1,-2]]],[[190,[-1,-2]]],[169,4],[4,[191,[-1]]]],[[-1,-2],2,[],[]],[[[192,[-1,-2,-3]],[190,[-1,-3]]],[[6,[[192,[-1,-2,-3]],98]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[190,[-2,-3]]]]],7,169,[[191,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[192,[-2,-3,-4]]]]],7,169,[[105,[-2]]],[[189,[-2,-3]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[190,[-1,-2]],-3],[[72,[2]]],169,[[191,[-1]]],73],[[[193,[-1,-2,-3]],[190,[-1,-3]],5,[161,[[92,[-1,-2]]]]],[[6,[[2,[[192,[-1,-2,-3]],[36,[-1]],[36,[-1]],5]],98]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[[[190,[-1,-2]],[42,[116]]],[[27,[[42,[116]]]]],169,[[191,[-1]]]],[[[190,[-1,-2]]],5,169,[[191,[-1]]]],[[[193,[-1,-2,-3]],11],12,[13,169],[13,[105,[-1]]],[13,[189,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[193,[-1,-2,-3]]],[[92,[-1,-2]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[92,[-1,-2]]],[[193,[-1,-2,-3]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[[]],[[]],[[]],[[[193,[-1,-2,-3]],[190,[-1,-3]],42,[161,[[92,[-1,-2]]]]],[[6,[[2,[[192,[-1,-2,-3]],[36,[-1]],[36,[-1]],5]],98]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[[[190,[-1,-3]],[42,[-3]],5,[36,[-1]],[161,[[92,[-1,-2]]]]],[[6,[[192,[-1,-2,-3]],98]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[[5,[161,[[92,[-1,-2]]]]],[[190,[-1,-3]]],169,[[105,[-1]]],[[191,[-1]],[189,[-1,-2]]]],[[[193,[-1,-2,-3]]],5,169,[[105,[-1]]],[[189,[-1,-2]]]],[[[190,[-1,-2]],-3],6,169,[[191,[-1]]],28],[[[192,[-1,-2,-3]],-4],6,169,[[105,[-1]]],[[189,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[192,[-1,-2,-3]],[190,[-1,-3]],5,[42,[-1]],[42,[-1]]],[[6,[9,99]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[161,[[92,[-1,-2]]]],5],-1,169,[[105,[-1]]]],[[5,[161,[[92,[-1,-2]]]]],[[195,[[194,[-1]]]]],169,[[105,[-1]]]],0,[[[166,[-1,-2]]],[[166,[-1,-2]]],[4,3],[4,[105,[-1]]]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[196,[-2,-3,-4]]]]],7,[79,169],[[105,[-2]]],[[189,[-2,-3]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[[197,[-1,-2]]],-1,169,[[198,[-1]]]],[5,2],[5,2],[5,2],[5,2],[[[199,[-1,-2,-3]],[197,[-1,-3]],5,[161,[[92,[-1,-2]]]]],[[6,[[2,[[196,[-1,-2,-3]],[36,[-1]],[36,[-1]],5,5]],98]]],169,[[105,[-1]]],[]],[[[199,[-1,-2,-3]],11],12,[13,169],[13,[105,[-1]]],[13,[189,[-1,-2]]]],[[[166,[-1,-2]],11],12,[13,3],[13,[105,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[197,[-1,-2]],5],[],169,[[198,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[199,[-1,-2,-3]]],[[92,[-1,-2]]],169,[[105,[-1]]],[[189,[-1,-2]],[198,[-1]]]],[[[166,[-1,-2]]],[[161,[[92,[-1,-2]]]]],3,[[105,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[92,[-1,-2]]],[[199,[-1,-2,-3]]],169,[[105,[-1]]],[[189,[-1,-2]],[198,[-1]]]],[[[161,[[92,[-1,-2]]]],5],[[166,[-1,-2]]],3,[[105,[-1]]]],[[[161,[[92,[-1,-2]]]],5],[[166,[-1,-2]]],3,[[105,[-1]]]],[[[166,[-1,-2]]],5,3,[[105,[-1]]]],[[]],[[]],[[]],[[]],0,[[[199,[-1,-2,-3]],[197,[-1,-3]],42,[161,[[92,[-1,-2]]]]],[[6,[[2,[[196,[-1,-2,-3]],[36,[-1]],[36,[-1]],5,5]],98]]],169,[[105,[-1]]],[]],[[[197,[-1,-3]],[42,[-3]],[36,[-1]]],[[6,[[2,[[196,[-1,-2,-3]],5]],98]]],169,[[105,[-1]]],[]],[[5,[161,[[92,[-1,-2]]]]],[[197,[-1,-3]]],169,[[105,[-1]]],[]],[[[199,[-1,-2,-3]]],5,169,[[105,[-1]]],[[189,[-1,-2]],[198,[-1]]]],[[[166,[-1,-2]]],5,3,[[105,[-1]]]],[[[196,[-1,-2,-3]],-4],6,[80,169],[[105,[-1]]],[[189,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[196,[-1,-2,-3]],[197,[-1,-3]],5,5,[42,[-1]],[42,[-1]]],[[6,[9,200]]],169,[[105,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[[201,[-1,118]]],[[27,[[201,[-1,118]]]]],3],[[[201,[-1,118]]],[[27,[[201,[-1,118]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[201,[-1,118]],118],[[201,[-1,118]]],3],[202,202],[[[201,[-1,-2]]],[[201,[-1,-2]]],[4,3],[4,49]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[202,202],26],[[-1,-2],26,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[202,202],9],[[[201,[-1,-2]],[201,[-1,-2]]],9,[10,3],[10,49]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[52,[-1]],[33,[-1]],71,-2],[[72,[2]]],3,73],[[[51,[-1]],[33,[-1]],71,-2],[[72,[2]]],3,73],[[202,11],12],[[[201,[-1,-2]],11],12,[13,3],[13,49]],[117,[[52,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[202,-1],2,19],[[[201,[-1,-2]],-3],2,3,49,19],[202,[[27,[5]]]],[[-1,5],[[201,[-2,-1]]],49,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[201,[-1,118]]],9,3],[[[201,[-1,118]]],9,3],[[[51,[-1]]],9,3],[[[201,[-1,70]]],9,3],[-1,9,[]],[[[52,[-1]]],9,3],[[[201,[-1,118]]],9,3],[[[201,[-1,118]]],9,3],[202,9],[202,9],[[[201,[-1,-2]]],9,3,49],[[-1,118],9,[]],[[[52,[-1]],118],9,3],[-1,9,[]],[[[52,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[70,202],[[51,[-1]]],3],[5,202],[[70,202],[[201,[-1,70]]],3],[-1,[[201,[-2,-1]]],49,3],[[-1,5],[[201,[-2,-1]]],49,3],[202,[[27,[5]]]],[[202,202],[[27,[26]]]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[203,[-1,-2,-3]]],[[6,[[161,[[190,[-1,-3]]]],204]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[[[203,[-1,-2,-3]]],[[6,[[205,[-1]],204]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[[[203,[-1,-2,-3]]],[[6,[[206,[-1]],204]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[[[203,[-1,-2,-3]]],[[6,[[197,[-1,-3]],204]]],169,[[105,[-1]]],[]],[[[203,[-1,-2,-3]],-4],[[6,[-5,204]]],169,[[105,[-1]]],[[189,[-1,-2]]],46,[]],0,0,0,0,[-1,96,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[204,11],12],[[204,11],12],[-1,-1,[]],[207,204],[208,204],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[204,[[27,[96]]]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[203,[-1,-2,-3]]],[[36,[[203,[-1,-2,-3]]]]],169,[[105,[-1]]],[]],[209,209],[210,210],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[203,[-1,-2,-3]],64],[[72,[211]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[209]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[210]]],7],[5,2],[5,2],[5,2],[[209,209],9],[[210,210],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[203,[-1,-2,-3]],11],12,[13,169],[13,[105,[-1]]],[13,[189,[-1,-2]]]],[[209,11],12],[[210,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[203,[-1,-2,-3]]],29,169,[[105,[-1]]],[[189,[-1,-2]]]],0,0,[[[203,[-1,-2,-3]]],[[161,[[92,[-1,-2]]]]],169,[[105,[-1]]],[[189,[-1,-2]]]],0,0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[161,[[92,[-1,-2]]]],9,209],[[203,[-1,-2,-3]]],169,[[105,[-1]]],[]],[[[203,[-1,-2,-3]],64],[[72,[211]]],169,[[105,[-1]]],[[189,[-1,-2]]]],[[]],[[]],[[]],0,0,[[[203,[-1,-2,-3]],5],[[203,[-1,-2,-3]]],169,[[105,[-1]]],[]],[[209,-1],6,28],[[210,-1],6,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[71,174],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],71],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[71,11],12],[[71,175],29],[-1,-1,[]],[71,175],[[71,[42,[175]]],[[55,[2]]]],[[],5],[[],71],[[],71],[[71,-1],175,[[178,[43]]]],[[71,[42,[-1]],9,9],[[55,[175]]],[[178,[43]]]],[[71,[42,[-1]],9],[[55,[175]]],[[178,[43]]]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[43,108],[[],108],[174,71],[[]],[71,[[91,[[90,[71]]]]]],[[71,43],[[27,[175]]]],[[71,175],[[55,[2]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[71,174],[[55,[2]]]],[43,108],[-1,-2,[],[]],0,0,0,0,[-1,96,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[33,[-1]],[52,[-1]]],[[6,[[52,[-1]],100]]],3],0,[[[33,[-1]],[52,[-1]]],[[6,[[2,[[52,[-1]],[52,[-1]]]],100]]],3],[[[33,[-1]],[52,[-1]]],[[6,[[52,[-1]],100]]],3],0,0,[100,100],[[[212,[-1]]],[[212,[-1]]],[4,3]],[[[213,[-1]]],[[213,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[33,[-1]],[52,[-1]]],[[52,[-1]]],3],0,[[[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],0,0,0,0,[[],[[33,[-1]]],3],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],0,[5,2],[5,2],[5,2],[5,2],0,0,0,0,0,[[[33,[-1]]],[[213,[-1]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[112,[-1]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[117]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[2,[[115,[-1]],[52,[-1]]]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[2,[[52,[-1]],[52,[-1]]]]]]],3],[[[33,[-1]],[51,[-1]]],[[27,[[53,[-1]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[2,[[52,[-1]],[52,[-1]],[52,[-1]]]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[108]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[36,[[52,[-1]]]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[108]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[1,[-1]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[2,[[52,[-1]],[52,[-1]]]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[29]]],3],[[[33,[-1]],[52,[-1]]],[[27,[108]]],3],[[[33,[-1]],[52,[-1]]],[[27,[108]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[2,[[52,[-1]],[52,[-1]]]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[113,[-1]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[14]]],3],[[[33,[-1]],[50,[-1]]],[[27,[[51,[-1]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[52,[-1]]]]],3],[[[33,[-1]],11],12,[13,3]],[[100,11],12],[[100,11],12],[[[212,[-1]],11],12,[13,3]],[[[213,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[33,[-1]]],[[51,[-1]]],3],[[[33,[-1]]],[[51,[-1]]],3],[[[33,[-1]]],[[51,[-1]]],3],[[[33,[-1]]],[[51,[-1]]],3],[[[33,[-1]],[51,[-1]]],[[27,[[130,[-1]]]]],3],[[[33,[-1]],[113,[-1]]],[[27,[[130,[-1]]]]],3],[[[33,[-1]],118,-1],[[27,[[52,[-1]]]]],3],[[[33,[-1]],-2],[[27,[[52,[-1]]]]],3,[[107,[[1,[-1]]]]]],[[[33,[-1]],[52,[-1]]],[[27,[[54,[-1]]]]],3],[[[33,[-1]],[51,[-1]],[27,[[214,[-1]]]]],[[6,[[2,[[50,[-1]],[27,[[215,[-1]]]]]],100]]],3],[[[33,[-1]],[52,[-1]],[27,[[214,[-1]]]]],[[6,[[2,[[54,[-1]],[27,[[216,[-1]]]]]],100]]],3],0,0,[[[33,[-1]],[51,[-1]]],[[27,[[50,[-1]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[54,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[[33,[-1]],-1,[52,[-1]]],[[27,[[52,[-1]]]]],3],[[[33,[-1]],-1,[52,[-1]]],[[52,[-1]]],3],0,[[[33,[-1]]],2,3],0,0,[-1,[],[]],[[],5],[[],5],[[],5],[[],5],[[[33,[-1]],117],[[52,[-1]]],3],[[[33,[-1]],-1,[52,[-1]]],[[52,[-1]]],3],[[[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[33,[-1]]],[[51,[-1]]],3],[[[33,[-1]]],[[51,[-1]]],3],[[[33,[-1]]],[[51,[-1]]],3],[[[33,[-1]]],[[51,[-1]]],3],[[[33,[-1]],[52,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[33,[-1]],[42,[[52,[-1]]]]],[[52,[-1]]],3],[[[33,[-1]],118,-1],[[52,[-1]]],3],[[[33,[-1]],-1],[[52,[-1]]],3],[[[33,[-1]],-1],[[52,[-1]]],3],[[[33,[-1]],-1],[[52,[-1]]],3],[[[33,[-1]],-1],[[52,[-1]]],3],[[[33,[-1]],-2],[[52,[-1]]],3,[[107,[[1,[-1]]]]]],[[[33,[-1]],-1],[[52,[-1]]],3],[[[33,[-1]],-1],[[52,[-1]]],3],[[[33,[-1]],-1],[[52,[-1]]],3],[[[33,[-1]],-1],[[52,[-1]]],3],[[[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[33,[-1]],43],[[52,[-1]]],3],[[[33,[-1]],108],[[52,[-1]]],3],[[[33,[-1]],[42,[29]]],[[52,[-1]]],3],[[[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],[[[33,[-1]],9],[[52,[-1]]],3],[[[33,[-1]],[171,[-1]]],[[52,[-1]]],3],[[[33,[-1]],[113,[-1]]],[[52,[-1]]],3],[[[33,[-1]],15],[[52,[-1]]],3],[[[33,[-1]],14],[[52,[-1]]],3],[[[33,[-1]],[50,[-1]],[214,[-1]]],[[27,[[51,[-1]]]]],3],[[[33,[-1]],[54,[-1]],[214,[-1]]],[[27,[[52,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[33,[-1]],-2],[[52,[-1]]],3,[[178,[43]]]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,0,0,0,0,0,[[[33,[-1]],[42,[[52,[-1]]]]],[[52,[-1]]],3],0,[[[33,[-1]],[51,[-1]]],[[51,[-1]]],3],0,[[],[[33,[-1]]],3],[[[33,[-1]]],[[213,[-1]]],3],[[[33,[-1]]],[[52,[-1]]],3],0,[[[33,[-1]],-2],[[52,[-1]]],3,[[107,[[1,[-1]]]]]],0,0,0,0,0,[[[33,[-1]],[52,[-1]]],[[27,[[2,[-1,[52,[-1]]]]]]],3],0,[[[33,[-1]],[52,[-1]]],[[6,[[2,[-1,[52,[-1]]]],100]]],3],[[]],[[]],[[]],[[]],0,0,[[[212,[-1]]],[[52,[-1]]],3],[[[33,[-1]],[52,[-1]],[52,[-1]]],[[6,[9,100]]],3],0,0,[[[33,[-1]],43],[[6,[[52,[-1]],173]]],3],[[[33,[-1]],[91,[[90,[71]]]],172],[[6,[[2,[172,[52,[-1]],9]],173]]],3],[[[33,[-1]],[91,[[90,[71]]]],43],[[6,[[52,[-1]],173]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[52,[-1]]]]],3],0,[[[33,[-1]],[52,[-1]]],[[6,[[52,[-1]],100]]],3],[[[33,[-1]],43],[[52,[-1]]],3],0,[[[33,[-1]],[52,[-1]],[52,[-1]]],[[52,[-1]]],3],0,[[[33,[-1]]],[[52,[-1]]],3],0,[[[33,[-1]],-2],[[52,[-1]]],3,[[178,[43]]]],0,[[[33,[-1]]],[[52,[-1]]],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[33,[-1]],[51,[-1]]],[[27,[[215,[-1]]]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[216,[-1]]]]],3],[[[33,[-1]],[52,[-1]]],[[6,[[2,[[214,[-1]],[54,[-1]]]],100]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[[[33,[-1]],15],[[52,[-1]]],3],0,[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[33,[-1]],43],[[52,[-1]]],3],[[[212,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1]],-1,-1],[[6,[[50,[-1]],100]]],3],0,[[[33,[-1]],-1,-1],[[6,[[54,[-1]],100]]],3],0,[[[212,[-1]]],[[54,[-1]]],3],0,0,0,0,0,[[]],[[108,108],[[27,[108]]]],[-1,-2,[],[]],[-1,-2,[],[]],[108,108],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[108]]],7],[[108,43],108],[108,[[27,[108]]]],[5,2],[[108,108],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[108,[42,[-1]]],108,[[178,[43]]]],[[108,11],12],[[108,11],12],[43,29],[108,29],[108,29],[43,108],[-1,-1,[]],[43,[[27,[108]]]],[[-1,-2],15,[16,17],18],[[108,108],9],[[108,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[108,9],[108,9],[108,9],[108,9],[117,9],[[[42,[-1]]],108,[[178,[43]]]],[[[36,[29]]],108],[[],[[6,[24,25]]]],[108,[[55,[43]]]],[[[42,[-1]],9],108,[[178,[43]]]],[[[36,[29]],9],108],[[108,108],[[27,[26]]]],[108,[[42,[29]]]],[[]],[108,9],[9,108],[[],108],[[],108],[[108,-1],6,28],[108,2],[[[42,[-1]]],108,[[178,[43]]]],[[[36,[29]]],108],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[171,[-1]]],[[171,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[171,[-1]],[171,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[171,[-1]],11],12,3],[[[171,[-1]],11],12,[13,3]],[-1,-1,[]],[[[171,[-1]]],185,3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[36,[-1]]],[]],[[],[[36,[119]]]],[[],[[36,[120]]]],[[],[[36,[43]]]],[[118,-2],[[37,[-1]]],3,[[39,[-1]]]],[[70,-2],[[37,[-1]]],3,[[39,[-1]]]],[[119,-2],[[37,[-1]]],3,[[39,[-1]]]],[[120,-2],[[37,[-1]]],3,[[39,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[118,118],[70,70],[119,119],[120,120],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[118]]],7],[-1,[[6,[70]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[119]]],7],[-1,[[6,[120]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[118,118],9],[[70,70],9],[[119,119],9],[[120,120],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[118,11],12],[[118,11],12],[[70,11],12],[[70,11],12],[[119,11],12],[[119,11],12],[[120,11],12],[[120,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[-2]]],3,[]],[-1,[[27,[118]]],3],[-1,[[27,[70]]],3],[-1,[[27,[119]]],3],[-1,[[27,[120]]],3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[118,-1],2,19],[[70,-1],2,19],[[119,-1],2,19],[[120,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[118,9],[120,9],[[118,118],9],[118,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[119,119],[[27,[26]]]],[[120,120],[[27,[26]]]],[[]],[[]],[[]],[[]],[[118,-1],6,28],[[70,-1],6,28],[[119,-1],6,28],[[120,-1],6,28],[[-1,5],9,[]],[[119,5],9],[[120,5],9],[-1,43,[]],[119,43],[120,43],[-1,-2,[],3],[118,-1,3],[70,-1,3],[119,-1,3],[120,-1,[[217,[15]],218]],[-1,[],[]],[118],[70],[119],[120],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[121,[[6,[118]]]],[-1,[[6,[-2]]],[],[]],[121,[[6,[70]]]],[121,[[6,[119]]]],[-1,[[6,[-2]]],[],[]],[121,[[6,[120]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[14,14],14],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[14]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[14,14],14],[5,2],[[14,14],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[14,11],12],[[14,11],12],[15,14],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[14,9],[[],[[6,[24,25]]]],[[14,14],14],[[14,14],[[27,[26]]]],[[]],[[14,14],14],[[14,-1],6,28],[[14,14],14],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,[[-1,[33,[-2]],71,-3],[[72,[2]]],[],[],73],[[-1,[33,[-2]],71],29,[],[]],[[-1,[33,[-2]]],29,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,116],[219,219],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[219,219],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[219,11],12],[[219,11],12],[-1,-1,[]],[[[42,[116]]],[[55,[219]]]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[42,[116]]],[[27,[5]]]],0,[219,116],[116,9],[116,9],[219,[[36,[116]]]],[-1,-2,[],[]],[-1,29,[]],[5,[[36,[116]]]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,96,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,220,21],[-1,220,21],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[220,11],12],[[220,11],12],[-1,-1,[]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],0,[-1,29,[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,43,[42,[43]],-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,43,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,43,[42,[43]],-1],6,222],[[221,5,-1],6,222],[[221,43,5,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,-1],6,222],[[221,43,-1],6,222],[5,2],[[221,11],12],[-1,-1,[]],[219,[[6,[-1,220]]],79],[219,221],[[],5],[-1,-2,[],[]],[221,9],[[],[[6,[24,25]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[223,6],[223,6],[223,6],[224,6],[225,6],[226,6],[226,6],[[227,11],12],[[223,11],12],[[224,11],12],[[225,11],12],[[226,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[227,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[[227,9],6],[[227,[42,[116]]],6],[[227,117],6],[[223,-1],[[6,[2]]],[80,17]],[[223,-1],[[6,[2]]],[80,17]],[[227,228],6],[[227,229],6],[[223,-1],[[6,[2]]],[80,17]],[[225,-1],[[6,[2]]],[80,17]],[[226,43,-1],[[6,[2]]],[80,17]],[[226,43,-1],[[6,[2]]],[80,17]],[[227,230],6],[[227,231],6],[[227,232],6],[[227,233],6],[[224,-1],[[6,[2]]],[80,17]],[[227,[27,[5]]],6],[[227,43,-1],6,[80,17]],[[227,43,122,43,-1],6,[80,17]],[227,6],[[227,[27,[5]]],6],[[227,-1],6,[80,17]],[[227,43],6],[[227,43,5],6],[[227,43,122,43,5],6],[[227,5],6],[[227,43,5],6],[[227,43,122,43,5],6],[[227,121],6],[[227,122],6],[[227,15],6],[[227,116],6],[227,6],[[227,43],6],[[227,43,122,43],6],[[224,-1],[[6,[2]]],[80,17]],[-1,[[6,[219,220]]],80],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[215,[-1]]],[[215,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[215,[-2]]]]],7,[79,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[215,[-1]],[215,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[215,[-1]],11],12,[13,3]],[-1,-1,[]],[[[215,[-1]]],[[130,[-1]]],3],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[215,[-1]],-2],6,[80,3],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[215,[-1]],[93,[-1]]],[[50,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[216,[-1]]],[[216,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[216,[-2]]]]],7,[79,3]],[5,2],[[[216,[-1]],[216,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[216,[-1]],11],12,3],[[[216,[-1]],11],12,[13,3]],[-1,-1,[]],[[[33,[-1]],[52,[-1]]],[[27,[[216,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[216,[-1]],-2],6,[80,3],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[216,[-1]],[93,[-1]]],[[54,[-1]]],3],0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[48,[-1,-2]]],[[48,[-1,-2]]],[4,49],[4,3]],[[-1,-2],2,[],[]],[[[48,[-1,-2]],[48,[-1,-2]]],26,49,3],[[-1,-2],26,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[48,[-2,-3]]]]],7,[79,49],[79,3]],[5,2],[[],[[48,[153,-1]]],3],[[[48,[-1,-2]],[48,[-1,-2]]],9,[10,49],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[48,[-1,-2]],11],12,[49,21],3],[[[48,[-1,-2]],11],12,[13,49],[13,3]],[-1,-1,[]],[43,[[6,[[48,[-1,-2]],234]]],49,3],[43,[[6,[[54,[-1]],100]]],3],[43,[[6,[[48,[118,-1]],100]]],3],[[-1,-2],[[48,[-1,-2]]],49,3],[[-1,-2],15,[16,17],18],[[[48,[-1,-2]],-3],2,49,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[48,[-1,-2]],[48,[-1,-2]]],[[27,[26]]],49,3],[[[48,[-1,-2]]],[[2,[-2,-2]]],49,3],[[]],[[[48,[-1,-2]],-3],6,[80,49],[80,3],28],[[[48,[-1,-2]]],-1,49,3],[[[48,[-1,-2]]],-2,49,3],[[[48,[-1,-2]]],29,49,3],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[[48,[-1,-2]]],-2,49,3],[-1,-2,[],[]],0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[214,[-1]]],[[214,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,[[],[[214,[-1]]],[85,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[214,[-2]]]]],7,[79,3]],[5,2],[[[214,[-1]],[214,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[214,[-1]],11],12,[13,3]],[-1,-1,[]],[[[214,[-1]],[50,[-1]]],[[27,[[215,[-1]]]]],3],[[[214,[-1]],[54,[-1]]],[[27,[[216,[-1]]]]],3],[[[54,[-1]]],[[27,[[216,[-1]]]]],3],[[],5],[[[214,[-1]],[54,[-1]],[27,[[216,[-1]]]]],[[27,[[27,[[216,[-1]]]]]]],3],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[214,[-1]]],3],[[[33,[-1]],[52,[-1]]],[[2,[[214,[-1]],[27,[[54,[-1]]]]]]],3],[[[214,[-1]],[93,[-1]]],[[54,[-1]]],3],[[]],[[[214,[-1]],43,[93,[-1]]],[[2,[[54,[-1]],[216,[-1]]]]],3],[[[214,[-1]],108,[93,[-1]]],[[2,[[54,[-1]],[216,[-1]]]]],3],[[[214,[-1]],-2],6,[80,3],28],[-1,-2,[],[]],[[[214,[-1]]],[[33,[-1]]],3],[[[214,[-1]],[54,[-1]]],[[6,[[2,[[33,[-1]],[52,[-1]]]],100]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Num",0],[15,"tuple"],[8,"LurkField",1343],[8,"Clone",4644],[15,"usize"],[4,"Result",4645],[8,"Deserializer",4646],[3,"With",4647],[15,"bool"],[8,"PartialEq",4648],[3,"Formatter",4649],[6,"Result",4649],[8,"Debug",4649],[4,"UInt",4088],[15,"u64"],[8,"Hash",4650],[8,"Sized",4651],[8,"BuildHasher",4650],[8,"Hasher",4650],[3,"IndentedSection",4652],[8,"Display",4649],[8,"Send",4651],[8,"Sync",4651],[3,"Layout",4653],[3,"LayoutError",4653],[4,"Ordering",4648],[4,"Option",4654],[8,"Serializer",4655],[3,"String",4656],[3,"TypeId",4657],[3,"Box",4658],[8,"Any",4657],[3,"Store",3474],[3,"GlobalAllocations",111],[3,"AllocatedPtr",198],[3,"Vec",4659],[3,"AllocatedNum",4660],[4,"SynthesisError",4661],[8,"ConstraintSystem",4661],[3,"Store",2544],[4,"Ptr",2488],[15,"slice"],[15,"str"],[4,"Boolean",4662],[8,"PrimeField",4663],[8,"FnOnce",4664],[3,"AllocatedContPtr",198],[3,"ZPtr",4548],[8,"Tag",3846],[6,"ZContPtr",4548],[6,"ContPtr",3189],[6,"Ptr",3189],[4,"Continuation",537],[6,"ZExprPtr",4548],[6,"Result",4665],[4,"Backend",294],[3,"PossibleValue",4666],[3,"Utf8PathBuf",4667],[3,"HashMap",4668],[3,"CliSettings",330],[4,"ConfigError",4669],[6,"Scalar",4670],[3,"Repl",363],[3,"Utf8Path",4667],[3,"Settings",385],[3,"PerfConfig",385],[3,"ParallelConfig",385],[3,"WitnessGeneration",385],[4,"Flow",385],[4,"ContTag",3846],[3,"State",3436],[6,"Result",4671],[8,"Write",4672],[3,"GlobalAllocator",2246],[3,"CircomCoprocessor",635],[8,"CircomGadget",106],[3,"Sha256Coprocessor",677],[4,"Sha256Coproc",677],[8,"Deserialize",4646],[8,"Serialize",4655],[4,"TrieCoproc",744],[3,"NewCoprocessor",744],[3,"LookupCoprocessor",744],[3,"InsertCoprocessor",744],[8,"Default",4673],[3,"Trie",744],[4,"Error",744],[3,"LookupProof",744],[3,"InsertProof",744],[3,"RefCell",4674],[3,"Rc",4675],[3,"Lang",1138],[3,"PoseidonCache",1451],[3,"InversePoseidonCache",1451],[3,"HashConstants",1451],[8,"Error",4676],[4,"ReductionError",976],[4,"ProofError",976],[4,"NovaError",4677],[3,"Error",3474],[4,"Meta",1042],[3,"Frame",1042],[8,"Copy",4651],[3,"Witness",1042],[8,"Coprocessor",619],[3,"Binding",1138],[8,"Into",4678],[3,"Symbol",3736],[4,"Coproc",1138],[3,"DummyCoprocessor",1138],[3,"IndexMap",4679],[4,"Expression",1260],[3,"Thunk",1260],[4,"LanguageField",1343],[3,"FWrap",1343],[15,"u8"],[15,"char"],[4,"ExprTag",3846],[4,"Op1",3846],[4,"Op2",3846],[15,"u16"],[15,"u32"],[15,"u128"],[6,"U3",4680],[3,"PoseidonConstants",4681],[6,"U4",4680],[6,"U6",4680],[6,"U8",4680],[4,"HashArity",1451],[15,"array"],[4,"HashConst",1451],[3,"HashWitness",1586],[8,"HashName",1586],[8,"Eq",4648],[6,"ConsStub",1586],[3,"Cons",1586],[4,"Stub",1586],[6,"ConsWitness",1586],[4,"ConsName",1586],[3,"ScalarCons",1586],[3,"ScalarCont",1586],[3,"Cont",1586],[4,"ContName",1586],[3,"CircuitHashWitness",1586],[8,"ContentAddressed",1586],[6,"ContStub",1586],[6,"ContWitness",1586],[6,"Preimage",1586],[3,"Func",1962],[3,"Hints",2350],[3,"Frame",2350],[3,"Var",1962],[4,"Tag",1962],[4,"Lit",1962],[3,"Block",1962],[4,"Ctrl",1962],[4,"Op",1962],[6,"AString",1962],[4,"AllocatedVal",2246],[3,"SlotWitness",2246],[3,"Arc",4682],[3,"SlotsAllocations",2246],[6,"ZPtr",2488],[4,"Val",2350],[3,"MultiFrame",2440],[4,"FoldingConfig",3080],[3,"WitnessCS",4683],[8,"Fn",4664],[8,"CurveCycleEquipped",2984],[6,"C2",3080],[4,"Syntax",3805],[6,"Span",2654],[4,"Error",2654],[3,"Package",2626],[6,"SymbolRef",2626],[4,"LitBase",2695],[6,"ParseResult",2654],[8,"AsRef",4678],[3,"ParseError",2743],[8,"InputLength",4684],[8,"AsBytes",4684],[4,"ErrorKind",4685],[4,"ParseErrorKind",2743],[6,"IResult",4686],[4,"Pos",2827],[4,"StringFragment",2867],[3,"TestConstraintSystem",4687],[6,"C2",2984],[8,"MultiFrameTrait",2927],[3,"PublicParams",2984],[8,"StepCircuit",4688],[4,"Proof",2984],[3,"NovaProver",2984],[6,"G1",2984],[3,"CircuitDigests",4689],[4,"Proof",3080],[3,"PublicParams",3080],[8,"StepCircuit",4690],[3,"SuperNovaProver",3080],[4,"SuperNovaError",4691],[3,"GPtr",3189],[4,"RawPtr",3189],[3,"Instance",3335],[4,"Error",3304],[6,"SuperNovaAuxParams",3080],[6,"NovaCircuitShape",2984],[3,"Error",4692],[3,"Error",4671],[4,"Kind",3335],[3,"Metadata",3335],[3,"File",4693],[3,"ConstantPtrs",3474],[3,"NamedConstants",3474],[3,"ZStore",4599],[4,"ZCont",4414],[4,"ZExpr",4495],[8,"From",4678],[8,"Field",4663],[4,"ZData",4135],[4,"SerdeError",4184],[3,"Deserializer",4217],[8,"Visitor",4646],[3,"SerializeCell",4269],[3,"SerializeMap",4269],[3,"SerializeTupleVariant",4269],[3,"StructSerializer",4269],[3,"Serializer",4269],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"Error",4665],[13,"Let",587],[13,"LetRec",587],[13,"Call0",587],[13,"Call",587],[13,"Call2",587],[13,"Tail",587],[13,"Lookup",587],[13,"Unop",587],[13,"Binop",587],[13,"Binop2",587],[13,"If",587],[13,"Emit",587],[8,"CoCircuit",619],[6,"ChildMap",744],[6,"ConsCircuitWitness",1586],[6,"ContCircuitWitness",1586],[8,"CAddr",1586],[13,"Pos",2861],[8,"EvaluationStore",2927],[8,"FrameLike",2927],[8,"Prover",2927],[8,"CEKState",2927],[8,"Provable",2927],[6,"SuperNovaPublicParams",3080],[8,"TypePredicates",3189],[8,"Op",3846],[8,"Write",4131],[13,"Let",4463],[13,"LetRec",4463],[13,"Call0",4463],[13,"Call",4463],[13,"Call2",4463],[13,"Tail",4463],[13,"Lookup",4463],[13,"Unop",4463],[13,"Binop",4463],[13,"Binop2",4463],[13,"If",4463],[13,"Emit",4463],[13,"Fun",4545]],"b":[[34,"impl-Display-for-Num%3CF%3E"],[35,"impl-Debug-for-Num%3CF%3E"],[36,"impl-From%3CUInt%3E-for-Num%3CF%3E"],[37,"impl-From%3Cu64%3E-for-Num%3CF%3E"],[311,"impl-Debug-for-Backend"],[312,"impl-Display-for-Backend"],[568,"impl-Debug-for-Continuation%3CF%3E"],[569,"impl-Write%3CF%3E-for-Continuation%3CF%3E"],[848,"impl-From%3CInsertCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[849,"impl-From%3CNewCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[851,"impl-From%3CLookupCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[1000,"impl-Display-for-ProofError"],[1001,"impl-Debug-for-ProofError"],[1002,"impl-Display-for-ReductionError"],[1003,"impl-Debug-for-ReductionError"],[1004,"impl-From%3CNovaError%3E-for-ProofError"],[1005,"impl-From%3CReductionError%3E-for-ProofError"],[1006,"impl-From%3CError%3E-for-ProofError"],[1008,"impl-From%3CSynthesisError%3E-for-ProofError"],[1303,"impl-Write%3CF%3E-for-Expression%3CF%3E"],[1304,"impl-Debug-for-Expression%3CF%3E"],[1385,"impl-Display-for-LanguageField"],[1386,"impl-Debug-for-LanguageField"],[2115,"impl-Display-for-Var"],[2116,"impl-Debug-for-Var"],[2117,"impl-Display-for-Tag"],[2118,"impl-Debug-for-Tag"],[2183,"impl-Tag"],[2184,"impl-Tag-for-Tag"],[2441,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2442,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2476,"impl-Circuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2477,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2478,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2584,"impl-Store%3CF%3E"],[2585,"impl-EvaluationStore-for-Store%3CF%3E"],[2611,"impl-Store%3CF%3E"],[2612,"impl-EvaluationStore-for-Store%3CF%3E"],[2613,"impl-Store%3CF%3E"],[2614,"impl-EvaluationStore-for-Store%3CF%3E"],[2674,"impl-Debug-for-Error"],[2675,"impl-Display-for-Error"],[2784,"impl-Debug-for-ParseErrorKind%3CF%3E"],[2785,"impl-Display-for-ParseErrorKind%3CF%3E"],[2786,"impl-Debug-for-ParseError%3CI,+F%3E"],[2787,"impl-Display-for-ParseError%3CLocatedSpan%3C%26str%3E,+F%3E"],[3315,"impl-Display-for-Error"],[3316,"impl-Debug-for-Error"],[3318,"impl-From%3CError%3E-for-Error"],[3319,"impl-From%3CError%3E-for-Error"],[3561,"impl-Debug-for-Error"],[3562,"impl-Display-for-Error"],[3760,"impl-Display-for-Symbol"],[3761,"impl-Debug-for-Symbol"],[3828,"impl-Display-for-Syntax%3CF%3E"],[3829,"impl-Debug-for-Syntax%3CF%3E"],[3977,"impl-Debug-for-ExprTag"],[3978,"impl-Display-for-ExprTag"],[3979,"impl-Display-for-ContTag"],[3980,"impl-Debug-for-ContTag"],[3981,"impl-Debug-for-Op1"],[3982,"impl-Display-for-Op1"],[3983,"impl-Display-for-Op2"],[3984,"impl-Debug-for-Op2"],[4107,"impl-Debug-for-UInt"],[4108,"impl-Display-for-UInt"],[4153,"impl-Debug-for-ZData"],[4154,"impl-Display-for-ZData"],[4190,"impl-Error-for-SerdeError"],[4191,"impl-Error-for-SerdeError"],[4197,"impl-Display-for-SerdeError"],[4198,"impl-Debug-for-SerdeError"],[4304,"impl-SerializeSeq-for-SerializeCell"],[4305,"impl-SerializeTupleStruct-for-SerializeCell"],[4306,"impl-SerializeTuple-for-SerializeCell"],[4309,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4310,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4345,"impl-SerializeTuple-for-SerializeCell"],[4346,"impl-SerializeSeq-for-SerializeCell"],[4351,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4352,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4525,"impl-Display-for-ZExpr%3CF%3E"],[4526,"impl-Debug-for-ZExpr%3CF%3E"],[4569,"impl-Display-for-ZPtr%3CE,+F%3E"],[4570,"impl-Debug-for-ZPtr%3CE,+F%3E"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"MetricsSinkHandle",0],[15,"tuple"],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
