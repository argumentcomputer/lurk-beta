var searchIndex = JSON.parse('{\
"lurk":{"doc":"Lurk","t":"ENCNCLLOLLOAALLAAAOLLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCIAAKKDLLLLLLLLFLLLLMLLMLMLLLLLLLLMAAAAIKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFAAENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHDMLLMFMLLLLLLMLLLLLLMLMMLLLLLLLFDLLLLLLLLLLLLLLLLLLLLLEHHNDNDNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLFFMMLLLLLMMFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLKALALLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNDDNNEENDMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLALLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLMMLLLLLLMMMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNNNNNNENNNNNNNNNDNNNNNNENNNNNNNENNNNNNNNENDNLLMLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLALMLLLLMLLLLLLLALMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNDNNDDMLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFFFFFFFFNDDNEMLLMLLLLLLMLLLLLLMMLLLLLLLLLLLLLLMLLLLLMMMMLLLLMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNENNNGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLMLMLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFQIQQQQQIQIQIIIIQQQQQKKKKKKLKLKKKKKKKKKKLLLKALKKKKKKKKKKAKGGNIGQGQGQGQGDGEDNGGLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLGNENNEDNGDGLLLLLLLLFFMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAAAFFFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDEDNNNMMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLMMLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLLNNELLLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","blank","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","destructure_list","drop","fmt","from","init","input","into","layout_raw","output","pointer_metadata","store","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","witness","circom","constraints","data","pointer","CircomGadget","evaluate_simple","into_circom_input","name","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","quote_ptr","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_infallible","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from","from","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","config","parse_and_run","paths","repl","Backend","Nova","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_possible_value","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value_variants","vzip","CLI_CONFIG","CliSettings","backend","borrow","borrow_mut","circom_dir","cli_config","commits_dir","default","deref","deref_mut","deserialize","deserialize","drop","field","fmt","from","from_config","init","into","layout_raw","limit","pointer_metadata","proofs_dir","rc","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","lurk_default_dir","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","handle_non_meta","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Flow","LURK_CONFIG","LURK_CONFIG_FILE","Parallel","ParallelConfig","ParallelN","PerfConfig","Sequential","Settings","WitnessGeneration","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_config","home_dir","init","init","init","init","init","into","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lurk_config","lurk_config_file","parallelism","perf","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","public_params_default_dir","public_params_dir","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","evaluate_internal","evaluate_simple","gadgets","has_circuit","sha256","synthesize","synthesize_internal","synthesize_simple","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","evaluate_simple","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","synthesize_simple","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","a_ptr_as_z_ptr","car_cdr","chain_car_cdr","construct_cons","construct_list","construct_tuple2","construct_tuple3","construct_tuple4","deconstruct_tuple2","deconstruct_tuple3","deconstruct_tuple4","SC","Sha256Coproc","Sha256Coprocessor","arity","arity","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","fmt","fmt","from","from","from","has_circuit","has_circuit","init","init","into","into","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","serialize","serialize","synthesize","synthesize_internal","synthesize_simple","synthesize_simple","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","StandardTrie","Trie","TrieCoproc","arity","arity","arity","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","evaluate_simple","evaluate_simple","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","has_circuit","has_circuit","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","synthesize","synthesize_insert","synthesize_internal","synthesize_simple","synthesize_simple","synthesize_simple","synthesize_simple","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Coprocessor","Error","Frame","IO","Incomplete","Lurk","Meta","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","header","i","init","init","init","init","init","input","input_size","into","into","into","into","into","is_complete","is_coprocessor","is_error","is_terminal","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","maybe_emitted_expression","meta","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","serialize","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_index_by_symbol","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup_by_sym","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","synthesize","synthesize_internal","synthesize_simple","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compare","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_possible_value","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_variants","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Copy","Cproc","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hash3Zeros","Hash4Zeros","Hash6Zeros","Hash8Zeros","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Num","Op","Op1","Op2","Open","Or","Return","String","Sub","Symbol","Tag","Trunc","Var","Zero","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_field","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","input_params","interpreter","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","multiframe","name","name","new","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slots_count","store","synthesize_frame","synthesize_frame_aux","to_field","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AllocatedVal","Bits","Boolean","GlobalAllocator","Number","Pointer","SlotWitness","SlotsAllocations","allocations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_slots_allocations","clone","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","get_allocated_ptr","get_allocated_ptr_from_ptr","get_const","get_const_cloned","get_tag","get_tag_cloned","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","new_const","new_const_from_tag","new_consts_from_z_ptr","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness","eval_step","evaluate","evaluate_simple","evaluate_simple_with_env","evaluate_with_env","evaluate_with_env_and_cont","make_cprocs_funcs_from_lang","make_eval_step_from_lang","Boolean","Frame","Hints","Pointer","Val","bit_decomp","blank","blank","blank","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone","clone_into","clone_into","clone_into","commitment","cproc_outputs","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","emitted","fmt","fmt","from","from","from","hash4","hash6","hash8","hints","init","init","init","input","input","into","into","into","layout_raw","layout_raw","layout_raw","new_from_func","output","output","pc","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","MultiFrame","arity","arity","blank","borrow","borrow_mut","cached_witness","circuit_index","clone","clone_into","compute_witness","deref","deref_mut","deserialize","drop","emitted","fmt","frames","from","from_frames","get_evaluation_frames","init","into","io_to_scalar_vector","layout_raw","make_dummy","num_circuits","output","pointer_metadata","precedes","primary_circuit","public_input_size","public_inputs","reduction_count","secondary_circuit","significant_frame_count","synthesize","synthesize","synthesize","synthesize_frames","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Ptr","Tuple2","Tuple3","Tuple4","ZPtr","borrow","borrow_mut","cast","char","clone","clone_into","comm","deref","deref_mut","deserialize","deserialize","drop","dummy","dummy","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt_to_string","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","into","is_nil","is_tuple","is_zero","layout_raw","num","num_u64","opaque","pointer_metadata","serialize","tag","to_owned","try_from","try_into","type_id","u64","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","zero","Store","add_comm","borrow","borrow_mut","car_cdr","commit","cons","cont_error","cont_outermost","cont_terminal","default","deref","deref_mut","deserialize","drop","expect_2_ptrs","expect_3_ptrs","expect_4_ptrs","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_list","fetch_string","fetch_sym","fetch_symbol","fmt","from","get_cont_terminal","hash3_cost","hash3zeros","hash4_cost","hash4zeros","hash6_cost","hash6zeros","hash8_cost","hash8zeros","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","hydrate_z_cache","improper_list","init","initial_empty_env","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_fun","intern_lurk_symbol","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","intern_user_symbol","into","inverse_poseidon_cache","key","layout_raw","list","open","pointer_metadata","poseidon_cache","ptr_eq","ptr_eq","read","read","read_maybe_meta","read_with_default_state","to_ptr","to_scalar_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","from_upto","get_from_offset","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","AllocatedIO","CEKState","CircuitFrame","ContPtr","ContPtr","Error","EvalFrame","EvaluationStore","FrameIO","FrameLike","GlobalAllocation","MultiFrameTrait","NIVCProver","Provable","Prover","Ptr","Ptr","PublicParams","Store","StoreError","blank","cached_witness","compute_witness","cont","emitted","env","expected_total_iterations","expr","frame_padding_count","frames","from_frames","get_cont_terminal","get_evaluation_frames","hydrate_z_cache","initial_empty_env","input","io_to_scalar_vector","lang","make_dummy","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","output","output","precedes","ptr_eq","public_input_size","public_inputs","read","reduction_count","reduction_count","significant_frame_count","supernova","synthesize_frames","C1LEM","C2","Compressed","CurveCycleEquipped","EE1","EE1","EE2","EE2","G1","G1","G2","G2","NovaCircuitShape","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuits","clone","clone_into","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","reduction_count","serialize","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","C2","Compressed","FoldingConfig","IVC","NIVC","Proof","PublicParams","Recursive","SuperNovaAuxParams","SuperNovaProver","SuperNovaPublicParams","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuit_cache_keys","circuit_shapes","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","evaluate_and_prove","fmt","fmt","from","from","from","from","index","init","init","init","init","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pp","prove","prove_recursively","public_params","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","allocate_maybe_fun_unconstrained","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","compare","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","disk_cache","error","instance","public_params","supernova_aux_params","supernova_circuit_params","supernova_public_params","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Instance","Kind","Metadata","NovaPublicParams","SuperNovaAuxParams","SuperNovaCircuitParams","_p","abomonated","abomonated","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_key","cache_key","circuit_param_instances","clone","clone","clone_into","clone_into","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","key","kind","kind","lang","lang","lang","layout_raw","layout_raw","layout_raw","new","open","pointer_metadata","pointer_metadata","pointer_metadata","rc","rc","reindex","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","quote","quotient","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","get_pos","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Cproc","Cproc","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","simple_fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","compare","deref","deref_mut","deserialize","deserialize","drop","dummy","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[99,"lurk::circuit"],[104,"lurk::circuit::circuit_frame"],[133,"lurk::circuit::gadgets"],[137,"lurk::circuit::gadgets::circom"],[141,"lurk::circuit::gadgets::constraints"],[142,"lurk::circuit::gadgets::data"],[229,"lurk::circuit::gadgets::pointer"],[341,"lurk::cli"],[346,"lurk::cli::backend"],[382,"lurk::cli::config"],[414,"lurk::cli::paths"],[415,"lurk::cli::repl"],[437,"lurk::config"],[589,"lurk::cont"],[639,"lurk::cont::Continuation"],[671,"lurk::coprocessor"],[686,"lurk::coprocessor::circom"],[687,"lurk::coprocessor::circom::non_wasm"],[718,"lurk::coprocessor::gadgets"],[729,"lurk::coprocessor::sha256"],[796,"lurk::coprocessor::trie"],[1028,"lurk::error"],[1123,"lurk::eval"],[1299,"lurk::eval::lang"],[1421,"lurk::expr"],[1508,"lurk::field"],[1616,"lurk::hash"],[1754,"lurk::hash_witness"],[2130,"lurk::lem"],[2413,"lurk::lem::circuit"],[2509,"lurk::lem::eval"],[2517,"lurk::lem::interpreter"],[2607,"lurk::lem::multiframe"],[2655,"lurk::lem::pointers"],[2711,"lurk::lem::store"],[2793,"lurk::package"],[2821,"lurk::parser"],[2862,"lurk::parser::base"],[2910,"lurk::parser::error"],[2994,"lurk::parser::position"],[3028,"lurk::parser::position::Pos"],[3034,"lurk::parser::string"],[3073,"lurk::parser::syntax"],[3094,"lurk::proof"],[3151,"lurk::proof::nova"],[3247,"lurk::proof::supernova"],[3356,"lurk::ptr"],[3465,"lurk::public_parameters"],[3473,"lurk::public_parameters::error"],[3504,"lurk::public_parameters::instance"],[3605,"lurk::state"],[3643,"lurk::store"],[3905,"lurk::symbol"],[3974,"lurk::syntax"],[4015,"lurk::tag"],[4257,"lurk::uint"],[4300,"lurk::writer"],[4304,"lurk::z_data"],[4353,"lurk::z_data::serde"],[4386,"lurk::z_data::serde::de"],[4438,"lurk::z_data::serde::ser"],[4583,"lurk::z_data::z_cont"],[4632,"lurk::z_data::z_cont::ZCont"],[4664,"lurk::z_data::z_expr"],[4714,"lurk::z_data::z_expr::ZExpr"],[4717,"lurk::z_data::z_ptr"],[4769,"lurk::z_data::z_store"],[4814,"core::clone"],[4815,"rkyv::with"],[4816,"core::result"],[4817,"serde::de"],[4818,"core::cmp"],[4819,"core::fmt"],[4820,"core::fmt"],[4821,"core::marker"],[4822,"core::hash"],[4823,"core::fmt"],[4824,"core::alloc::layout"],[4825,"serde::ser"],[4826,"alloc::string"],[4827,"core::any"],[4828,"alloc::boxed"],[4829,"core::any"],[4830,"bellpepper_core::gadgets::num"],[4831,"bellpepper_core::constraint_system"],[4832,"bellpepper_core::constraint_system"],[4833,"ff"],[4834,"core::ops::function"],[4835,"anyhow"],[4836,"clap_builder::builder::possible_value"],[4837,"camino"],[4838,"std::collections::hash::map"],[4839,"config::error"],[4840,"pasta_curves::pallas"],[4841,"camino"],[4842,"std::io"],[4843,"serde::de"],[4844,"core::cell"],[4845,"alloc::rc"],[4846,"core::error"],[4847,"nova_snark::errors"],[4848,"core::marker"],[4849,"indexmap::map"],[4850,"typenum::generated::consts"],[4851,"neptune::poseidon"],[4852,"typenum::generated::consts"],[4853,"bellpepper::util_cs::witness_cs"],[4854,"core::ops::function"],[4855,"nom::traits"],[4856,"nom::internal"],[4857,"bellpepper_core::util_cs::test_cs"],[4858,"nova_snark::traits::circuit"],[4859,"nova_snark::supernova"],[4860,"nova_snark::traits::circuit_supernova"],[4861,"nova_snark::supernova::error"],[4862,"serde_json::error"],[4863,"std::io::error"],[4864,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","a small scalar field element in U64 representation for …","","","","","","","","","","","","Global config for Lurk Includes settings for cache …","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","","Returns the argument unchanged.","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","Global config for the CLI Includes settings for cache …","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Global config varable for <code>CliSettings</code>","Contains the CLI configuration settings","Proof generation and verification system","","","Cache directory for Circom files","Gets the <code>CLI_CONFIG</code> settings. If uninitialized, sets the …","Cache directory for commitments","","","","","","","Finite field used for evaluation and proving","","Returns the argument unchanged.","Loads config settings from a file or env var, or CLI arg …","","Calls <code>U::from(self)</code>.","","Iteration limit for the program, which is arbitrary to …","","Cache directory for proofs","Reduction count, which is the number of circuit reductions …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The level of parallelism used when synthesizing the Lurk …","Global config variable for <code>Settings</code>","Global path variable for configuration file","Try to be smart about thread management based on # of cpus","Parallel configuration settings","How many threads to use? (Advisory, might be ignored.)","Performance-related configuration settings","Runs without parallelism (default)","Contains the Lurk config settings The <code>public_params_dir</code> …","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads config settings from a file or env vars The public …","Returns the home directory used by <code>cargo`` and </code>rustup`","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> on <code>Flow::Parallel</code> or <code>Flow::ParallelN</code>","Returns <code>true</code> on <code>Flow::Sequential</code>","","","","","","Gets the <code>LURK_CONFIG</code> settings. If uninitialized, sets the …","Gets the <code>LURK_CONFIG_FILE</code> path. If uninitialized, sets the …","Parallelism settings","Parallelism &amp; witness gen configs","","","","","","The poseidon witness part of synthesis.","NOTE: Neptune itself <em>will</em> do this transparently at the …","","Public parameter disk cache location","Multiple <code>StepCircuit</code>s.","Synthesis (within one <code>StepCircuit</code>)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Witness generation settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","Function for internal plumbing. Reimplementing is not …","","Helper gadgets for synthesis","Returns true if this Coprocessor actually implements a …","","","Function for internal plumbing. Reimplementing is not …","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","Deconstructs <code>data</code> with <code>car_cdr</code> semantics.","Chains <code>car_cdr</code> calls <code>n</code> times, returning the accumulated <code>car</code>…","Constructs a <code>Cons</code> pointer","Constructs a cons-list with the provided <code>elts</code>. The …","Constructs an <code>AllocatedPtr</code> compound by two others","Constructs an <code>AllocatedPtr</code> compound by three others","Constructs an <code>AllocatedPtr</code> compound by four others","Deconstructs <code>tuple</code>, assumed to be a composition of two …","Deconstructs <code>tuple</code>, assumed to be a composition of three …","Deconstructs <code>tuple</code>, assumed to be a composition of four …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","Returns a value corresponding to the commitment associated …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","And does nothing but return nil. It should probably never …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","<code>Copy(x, y)</code> binds <code>x</code> to a copy of what <code>y</code> is bound to","<code>Cproc(ys, c, xs)</code> binds <code>ys</code> to the results of coprocessor <code>c</code> …","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hash3Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash4Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash6Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash8Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","The LEM <code>Tag</code> is a wrapper around other types that are used …","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","LEM variables","<code>Zero(x, t)</code> binds <code>x</code> to a <code>Ptr::zero(t)</code>","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Checks if the allocation for a numeric variable has …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cached version of Lurk’s default step function (IVC, no …","","","","","","Creates the <code>Func</code>s used to call coprocessors in the NIVC …","Creates a LEM <code>Func</code> corresponding to Lurk’s step function …","","A <code>Frame</code> carries the data that results from interpreting a …","<code>Hints</code> hold the non-deterministic hints for hashes and <code>Func</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Make a dummy instance, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","Creates an atom pointer from a <code>ZPtr</code>, with its tag and …","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","","","","Fetches a cons list that was interned. If the list is …","","","","","Returns the argument unchanged.","","Cost of poseidon hash with arity 3, including the input","","Cost of poseidon hash with arity 4, including the input","","Cost of poseidon hash with arity 6, including the input","","Cost of poseidon hash with arity 8, including the input","","Safe version of <code>hash_ptr_unsafe</code> that doesn’t hit a stack …","","","","Hashes enqueued <code>Ptr</code> trees from the bottom to the top, …","Interns a sequence of pointers as an improper cons-list …","","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","","","Calls <code>U::from(self)</code>.","","","","Interns a sequence of pointers as a proper (<code>nil</code>…","","","","Equality of the content-addressed versions of two pointers","","","","","","Attempts to recover the <code>Ptr</code> that corresponds to <code>z_ptr</code> from …","Constructs a vector of scalars that correspond to tags and …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","Retrieves the <code>from_offset</code> attribute, if present","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","The associated type of allocated input and output to the …","The State of a CEK machine.","The associated <code>CircuitFrame</code> type","the type for the Store’s continuation poitners","The associated <code>ContPtr</code> type","the type for the Store’s errors","The associated <code>Frame</code> type","A trait for a store of expressions","the type for the Frame’s IO","A Frame of evaluation in a CEK machine.","The associated type which manages global allocations","Trait to support multiple <code>MultiFrame</code> implementations.","Supertrait for <code>Prover</code> that also supports NIVC.","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","the type for the Store’s pointers","The associated <code>Ptr</code> type","The associated public parameters type for the prover.","The associated <code>Store</code> type","The error type for the Store type","Synthesize a blank circuit.","Returns a reference to the cached witness values","Populates a WitnessCS with the witness values for the …","the continuation (K)","the emitted frames","the environment (E)","Returns the expected total number of iterations for the …","the expression, or control word (C)","Returns the number of padding frames needed for a given …","Iterates through the Self::CircuitFrame instances","Create an instance from some <code>Self::Frame</code>s.","getting the terminal continuation pointer","Evaluates and generates the frames of the computation …","cache hashes for pointers enqueued for hydration","getting a pointer to the initial, empty environment","the input of the frame","Returns a public IO vector when equipped with the local …","Returns a reference to the Prover’s Lang.","Make a dummy instance, duplicating <code>self</code>’s final …","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","the output of the frame","The output of the last frame","Returns true if the supplied instance directly precedes …","hash-equality of the expressions represented by Ptrs","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","interpreting a string representation of an expression","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Counting the number of non-trivial frames in the evaluation","An adapter to a SuperNova proving system implementation.","Synthesize some frames.","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Why the next 2 types?","Type alias for the Evaluation Engine using G2 group …","a concrete implementation of an …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","Type alias for Nova Circuit Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","Computes a cache key of the primary circuit. The point is …","Generates the circuits for the Nova proving system.","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Folding configuration specifies <code>Lang</code> and can be either <code>IVC</code> …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the SuperNova …","A proof for the intermediate steps of a recursive …","Type alias for SuperNova Aux Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","Computes a cache key of a supernova primary circuit. The …","Collects all the cache keys of supernova instance. We need …","The internal circuit shapes","","","","","","","","","","","","","","","","return the digest","","","","","Evaluates and proves the computation given the public …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","","","","Public params for SuperNova.","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the running claim params for the SuperNova …","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the claim, which (for now), …","","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","Instances","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Instances compute a cache-key for the objects they …","From ::nova, there are 3 “kinds” of public param …","What we put into the cache","Tag for nova::NovaPublicParams instances","Tag for supernova::SuperNovaAuxParams instances","Tag for [supernova::SuperNovaCircuitParams] instances","","","","","","","","","","","","If this Instance is of Kind::SuperNovaAuxParams, then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key (or cache_key) of this Instance used to retrieve …","","","The key (or cache_key) of this Instance used to retrieve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","A character literal: ‘A’, ‘λ’","An improper cons-list of expressions: (1 2 . 3)","A nil-terminated cons-list of expressions: (1 2 3)","An element of the finite field <code>F</code>","A quoted expression: ’a, ’(1 2)","A string literal: “foobar”, “foo\\\\nbar”","A hierarchical symbol: foo, foo.bar.baz or keyword :foo","Lurk’s syntax for parsing","A u64 integer: 1u64, 0xffu64","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Retrieves the <code>Pos</code> attribute","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","","","","","","",""],"i":[0,1,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,242,242,0,35,35,35,35,35,35,35,35,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,0,0,83,83,83,0,0,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,0,0,38,49,38,49,49,38,49,38,49,38,38,38,38,38,38,49,38,57,38,49,38,38,49,38,49,38,49,38,49,38,49,38,49,49,38,38,38,38,38,49,49,38,38,38,49,38,49,38,49,38,49,38,49,49,38,38,49,38,38,49,49,38,49,49,49,38,49,38,38,49,38,49,38,38,38,38,38,38,38,38,38,38,38,49,38,49,38,38,49,38,38,49,38,49,38,49,38,49,38,49,38,49,38,49,38,49,38,49,38,0,0,0,0,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,67,67,67,67,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,0,0,76,0,76,0,76,0,0,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,72,73,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,72,72,72,73,73,73,73,74,74,74,74,75,75,75,75,76,76,76,76,72,73,74,75,76,72,73,74,75,76,72,0,72,73,74,75,76,72,73,74,75,76,76,76,72,73,74,75,76,0,0,73,72,72,73,74,75,76,74,75,0,72,74,74,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,72,73,74,75,76,73,60,60,60,60,60,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,243,244,245,246,247,248,249,250,251,252,253,243,244,254,252,247,250,251,252,245,246,247,248,249,251,243,244,246,251,253,243,244,0,0,255,0,36,36,36,36,0,36,0,255,255,255,0,0,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,0,0,0,0,0,0,0,0,0,0,85,0,0,84,85,84,85,84,85,84,85,84,85,84,85,84,85,84,84,85,85,84,85,84,85,85,85,84,85,84,85,84,85,85,84,85,84,85,84,85,84,85,84,84,85,84,85,85,85,84,85,84,85,84,85,84,85,84,85,84,85,84,85,84,85,84,85,0,0,0,88,0,0,88,0,0,94,88,0,0,0,0,0,88,89,90,91,94,88,89,90,91,93,95,96,94,88,89,90,91,93,95,96,88,89,90,91,88,89,90,91,256,89,90,91,93,94,88,89,90,91,93,95,96,94,88,89,90,91,93,95,96,94,88,89,89,90,90,91,91,93,95,96,94,88,89,90,91,93,95,96,93,88,89,90,91,88,88,88,89,90,91,94,88,89,90,91,93,95,96,94,88,88,88,88,89,90,91,93,95,96,88,89,90,91,94,88,89,90,91,93,95,96,93,0,94,88,89,90,91,93,95,96,94,88,89,90,91,93,95,96,93,93,93,93,94,88,89,90,91,93,95,96,93,93,93,93,89,90,91,88,93,88,88,89,90,91,88,89,90,91,94,88,89,90,91,93,95,96,94,88,89,90,91,93,95,96,94,88,89,90,91,93,95,96,94,88,89,90,91,93,95,96,94,88,89,90,91,93,95,96,94,88,89,90,91,93,95,96,95,96,94,88,89,90,91,93,95,96,104,105,0,104,106,0,106,0,104,106,106,104,105,106,104,105,106,104,105,104,105,104,105,106,104,105,106,104,105,106,104,105,106,104,105,106,106,104,104,105,105,106,106,106,106,106,104,104,105,106,104,105,106,104,105,106,104,105,106,104,105,106,104,105,106,104,105,106,104,104,105,106,104,105,106,104,105,106,104,105,106,104,105,106,104,105,106,104,105,106,104,105,106,104,105,110,113,0,0,113,110,0,0,113,0,111,113,109,110,111,113,114,109,110,111,113,114,109,110,111,113,114,109,110,111,113,114,109,110,113,109,110,111,113,114,109,110,111,113,114,109,110,111,113,113,114,109,110,111,113,114,0,109,109,110,111,113,114,109,109,109,109,110,110,110,110,111,111,111,111,113,113,113,113,114,114,114,114,109,109,109,109,110,111,113,114,109,110,111,113,113,114,109,111,109,110,111,113,114,111,109,109,110,111,113,114,113,110,113,113,0,109,110,111,113,114,109,111,111,109,110,111,113,114,111,113,113,109,109,110,111,113,114,109,109,109,110,111,113,114,109,110,111,113,114,109,110,111,113,114,109,110,111,113,114,109,110,111,113,114,109,110,111,113,114,109,110,111,113,114,111,0,0,119,0,0,99,99,119,120,119,99,116,120,119,99,116,120,119,99,120,119,99,99,99,99,120,119,99,116,120,119,99,116,120,120,119,119,99,99,116,120,119,99,116,120,119,119,119,120,119,120,119,99,116,120,119,119,99,116,116,99,119,99,120,119,99,116,120,119,99,116,99,99,120,119,99,116,99,99,116,99,120,119,99,116,120,119,99,119,119,119,120,119,99,120,119,99,116,120,119,99,116,120,119,99,116,120,119,99,116,120,119,99,116,120,119,99,116,120,119,99,116,123,123,123,123,0,123,123,123,123,123,123,123,123,0,123,123,122,122,122,123,122,123,122,123,122,123,122,122,123,122,123,122,123,122,123,122,123,122,123,123,123,123,122,122,122,122,123,123,122,123,122,122,122,122,123,122,123,122,123,123,123,123,123,123,123,123,123,122,123,122,123,122,123,122,123,122,123,122,123,122,123,122,123,122,122,123,122,124,3,0,124,0,0,3,124,124,124,125,124,125,124,125,124,125,124,125,125,125,124,124,125,124,125,124,124,125,125,124,125,124,125,124,124,124,124,125,125,125,125,124,124,125,124,125,3,3,3,3,3,3,3,3,3,3,125,125,124,3,124,125,124,125,3,124,125,3,3,125,124,125,124,125,3,3,3,3,3,3,124,125,124,124,3,3,3,3,3,3,3,3,124,125,124,125,124,125,124,125,124,125,124,125,124,124,125,140,139,140,139,140,139,140,139,0,0,0,0,0,0,140,139,102,100,101,140,139,102,100,101,102,102,102,102,139,140,102,100,140,102,100,100,102,100,101,102,100,101,140,139,102,100,101,140,139,102,100,101,140,139,102,100,101,140,139,102,100,101,140,139,102,100,101,140,140,139,102,100,101,101,100,100,100,100,140,139,102,100,101,101,140,139,102,100,101,55,140,139,102,100,101,140,139,102,100,101,140,102,100,140,139,102,100,101,140,139,102,100,101,140,139,102,100,101,140,139,102,100,101,140,139,102,100,101,140,139,102,100,101,140,139,102,100,101,59,58,58,144,153,146,0,0,58,0,0,0,0,0,0,0,0,0,0,0,0,144,153,146,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,0,0,0,0,58,58,58,59,59,0,0,59,58,59,58,58,59,59,0,0,0,0,152,0,58,58,58,58,144,153,146,0,141,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,145,148,144,146,147,141,147,141,145,148,257,258,151,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,149,144,146,145,148,147,141,149,150,150,58,59,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,146,145,150,58,59,141,151,146,146,146,146,145,145,145,145,150,150,150,150,58,58,58,58,59,59,59,59,141,141,141,141,147,141,153,146,154,141,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,151,141,58,59,58,59,257,258,151,142,58,59,146,145,148,149,150,58,59,141,151,153,146,154,141,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,257,258,151,141,141,146,145,148,149,150,58,59,141,151,259,152,145,148,149,150,147,154,141,144,146,147,141,141,152,145,150,146,145,148,149,150,58,59,141,151,152,146,145,150,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,146,145,148,149,150,58,59,141,151,0,164,164,0,164,164,164,164,164,160,164,164,0,164,164,164,164,164,164,164,164,160,0,164,164,164,164,164,163,0,164,164,163,163,164,164,161,0,160,160,164,164,163,161,164,161,0,164,0,164,156,156,156,156,159,160,161,162,163,164,156,159,160,161,162,163,164,156,156,156,0,156,159,160,161,162,163,164,156,159,160,161,162,163,164,162,156,159,160,161,162,163,164,156,159,160,161,162,163,164,156,159,160,160,161,162,163,164,156,159,160,161,162,163,164,156,159,160,161,162,163,164,156,156,156,156,159,159,159,159,160,160,160,160,161,161,161,161,162,162,162,162,163,163,163,163,164,164,164,164,0,156,159,159,160,160,161,162,163,164,156,159,160,161,162,163,164,160,159,160,161,159,160,161,159,160,156,159,160,161,162,163,164,156,0,156,159,160,161,162,163,164,156,159,160,161,162,163,164,0,159,156,156,159,156,156,156,156,159,160,161,162,163,164,0,160,156,0,156,156,160,160,156,159,160,161,162,163,164,161,159,160,156,159,160,160,161,162,163,164,156,159,160,161,162,163,164,156,159,160,161,162,163,164,156,156,159,160,161,162,163,164,156,159,160,161,162,163,164,156,159,160,161,162,163,164,156,159,160,161,162,163,164,0,166,166,0,166,166,0,0,167,169,167,166,81,169,167,166,81,0,166,166,81,169,167,166,81,169,167,166,81,169,167,166,81,169,167,166,81,169,167,166,81,81,81,81,81,81,81,169,167,166,81,169,167,166,81,169,167,166,81,81,81,81,169,167,166,81,166,169,167,166,81,169,167,166,81,169,167,166,81,169,167,166,81,169,167,166,81,169,167,166,81,169,167,166,81,167,0,0,0,0,0,0,0,0,171,0,0,171,0,157,157,158,158,171,157,158,171,157,158,157,171,157,158,171,157,158,157,157,157,158,171,157,158,171,157,158,171,157,158,171,157,158,158,157,158,171,157,158,157,157,157,158,171,157,158,158,158,171,157,158,171,157,158,157,158,158,158,171,157,158,171,157,158,171,157,158,171,157,158,171,157,158,171,157,158,171,157,158,171,157,158,171,157,158,0,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,43,0,43,43,43,0,43,43,43,43,43,43,43,43,43,43,43,43,170,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,184,0,0,180,184,0,0,180,180,0,180,180,180,180,180,180,180,180,0,179,180,180,180,180,180,180,180,180,180,0,0,0,180,180,180,180,180,180,180,180,180,183,183,183,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,0,183,0,0,0,0,0,0,0,183,183,183,183,183,183,183,183,183,183,190,190,190,190,190,190,190,0,0,190,190,186,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,190,190,190,190,186,186,186,186,186,186,190,190,186,186,190,186,186,190,186,190,186,186,190,186,190,190,186,0,186,186,186,190,186,186,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,192,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,260,260,260,260,260,260,193,193,193,0,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,0,0,0,0,0,0,0,0,193,193,193,193,193,193,193,193,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,0,196,261,196,261,196,0,262,0,196,0,0,0,0,261,196,263,196,196,196,196,196,264,196,264,263,264,263,196,196,261,196,261,261,262,196,263,196,263,263,263,263,0,263,262,196,196,261,265,265,261,265,263,196,0,196,0,0,199,0,0,176,0,176,0,176,0,176,0,0,0,0,0,199,0,0,197,199,200,197,199,200,0,0,197,197,199,197,199,200,197,199,200,197,197,199,199,200,197,199,200,197,200,197,197,200,197,199,200,197,199,200,197,199,200,200,197,199,200,200,197,199,200,200,199,0,200,197,199,197,197,199,200,197,199,200,197,199,200,197,199,200,197,199,200,197,199,200,199,197,199,200,0,203,0,173,173,0,0,203,0,0,0,204,203,206,173,204,203,206,173,0,0,266,173,173,204,203,206,173,204,203,206,173,204,203,203,206,173,204,204,203,206,173,206,206,173,204,203,206,173,204,204,203,206,173,204,203,206,173,206,173,204,203,206,173,206,173,173,173,204,203,206,173,204,206,203,0,206,173,203,173,204,203,206,173,204,203,206,173,204,203,206,173,204,203,206,173,204,203,206,173,204,203,206,173,203,204,203,206,173,0,0,209,209,209,0,0,0,54,53,208,54,208,208,208,209,208,209,208,208,209,208,209,208,209,209,209,208,209,208,209,208,209,208,209,208,209,209,209,209,208,208,208,208,54,53,209,208,54,209,208,209,208,209,208,209,208,209,208,209,208,208,208,53,208,267,54,208,208,209,209,208,267,54,267,54,209,208,53,209,208,208,208,209,209,209,208,54,53,208,54,53,208,209,208,209,208,209,208,209,208,209,208,209,208,209,208,209,208,0,0,0,0,0,0,0,0,211,0,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,0,0,0,216,216,216,210,210,217,210,216,217,210,216,217,210,217,210,216,217,216,217,210,210,216,217,210,216,217,210,216,216,217,217,210,216,217,216,217,216,216,216,216,217,217,217,217,210,216,217,210,216,217,210,216,217,210,216,217,210,210,217,210,210,217,210,216,217,210,210,210,216,217,210,217,210,216,217,216,217,210,216,217,210,216,217,210,216,217,210,216,217,210,216,217,210,216,217,210,216,217,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,78,78,78,78,78,0,0,78,78,78,78,78,78,78,78,78,78,78,78,0,78,0,0,0,0,108,220,220,33,33,33,108,219,220,33,108,219,220,33,33,33,33,220,33,33,220,220,108,219,220,108,219,220,220,33,33,220,33,220,33,33,220,33,33,33,33,108,219,220,33,108,219,220,33,108,219,220,220,33,108,219,220,220,220,33,220,220,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,108,108,219,220,33,108,219,220,33,33,33,33,33,33,33,33,33,33,33,33,220,220,33,33,108,33,33,220,33,220,33,108,33,108,219,220,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,108,219,220,33,33,220,33,108,219,220,220,220,220,33,220,33,33,33,33,220,33,220,33,220,33,220,220,33,33,33,33,220,33,33,108,219,220,33,220,219,33,220,220,33,33,33,33,220,33,33,33,33,220,33,220,33,33,33,220,33,33,108,219,220,108,33,33,33,33,108,219,220,33,108,219,220,33,108,219,220,220,33,33,33,108,219,220,33,108,219,220,33,108,219,220,33,219,33,108,219,220,33,33,33,33,219,0,0,0,0,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,178,178,178,178,178,178,178,0,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,129,130,77,77,77,77,77,129,129,128,129,128,129,129,128,130,0,128,77,130,77,77,129,130,77,129,130,0,128,130,130,130,77,128,130,130,77,77,77,130,128,128,129,130,0,0,0,129,77,130,130,129,128,130,130,128,0,77,77,128,128,129,77,268,129,130,268,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,128,128,77,77,129,129,130,130,128,77,129,130,128,77,129,130,128,128,128,128,77,77,77,77,129,129,129,129,130,130,130,130,128,128,77,77,129,129,130,130,128,77,129,130,51,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,128,130,128,128,128,77,129,130,129,130,128,77,129,130,128,77,129,130,268,129,130,268,129,130,51,128,77,129,130,51,128,77,129,130,128,77,129,130,128,77,129,130,128,128,77,77,129,129,130,130,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,128,77,129,130,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,269,269,269,226,226,0,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,0,226,226,226,226,226,226,0,226,226,226,226,226,226,226,0,226,226,226,226,226,226,226,0,0,0,0,227,0,227,227,227,227,227,227,0,227,227,227,227,227,227,227,0,227,227,227,227,227,227,0,227,0,227,227,227,227,227,227,227,0,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,0,228,228,228,228,228,228,228,228,228,228,228,228,228,0,0,0,0,0,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,230,230,230,231,232,233,233,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,234,234,230,231,232,233,234,230,231,232,233,234,234,234,230,230,234,234,230,232,233,233,234,234,234,234,231,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,231,0,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,234,230,231,232,233,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,0,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,270,271,272,273,274,275,276,277,278,279,280,270,271,281,279,274,277,278,279,272,273,274,275,276,278,270,271,273,278,280,270,271,223,223,223,223,223,223,223,223,223,223,223,223,223,223,0,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,282,282,282,0,0,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,61,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221],"f":[0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[1,[-1]]],[[1,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[1,[-2]]]]],8,3],[[[1,[-1]],[1,[-1]]],2,3],[5,2],[[[1,[-1]],[1,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,0,0,[[[1,[-1]],11],12,3],[[[1,[-1]],11],12,[13,3]],[14,[[1,[-1]]],3],[15,[[1,[-1]]],3],[-1,-1,[]],[-1,[[1,[-1]]],3],0,[[-1,-2],14,[16,17],18],0,[[[1,[-1]],-2],2,3,19],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],9,3],[[[1,[-1]]],9,3],0,[[],[[7,[24,25]]]],0,0,0,0,[[],[[1,[-1]]],3],[[],[[1,[-1]]],3],[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,[[[1,[-1]],[1,[-1]]],[[27,[26]]],3],[[]],0,0,0,[[[1,[-1]],-2],7,3,28],0,0,0,[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],0,0,[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[],5],[[-1,[33,[-2]]],[[34,[-2]]],[],[]],0,[[],[[35,[-1,-2]]],3,[[36,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],[[35,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-2,[33,[-1]],[37,[-1]],5,[38,[-1]]],[[7,[[2,[[34,[[38,[-1]]]],[39,[-1]]]],40]]],3,[[41,[-1]]]],[5,2],[[[35,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[-1,-1,[]],[[],5],0,[-1,-2,[],[]],[[],[[7,[24,25]]]],0,[[]],0,[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,[42,[-2]],[44,[[43,[-2]]]]],[[43,[-2]]],[],[]],[[-1,[44,[[38,[-2]]]]],[[34,[[2,[29,[34,[-2]]]]]]],[],[]],[-1,45,[]],[[-2,[39,[-1]],[39,[-1]]],[[7,[46,40]]],47,[[41,[-1]]]],0,[[-2,-1],[[39,[-1]]],3,[[41,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[37,[-1]]],[[37,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,0,0,0,0,0,[[[37,[-1]],11],12,[13,3]],[-1,-1,[]],0,0,[[],5],[-1,-2,[],[]],0,[[],[[7,[24,25]]]],0,0,0,[[-2,[33,[-1]]],[[7,[[37,[-1]],40]]],3,[[41,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],0,0,[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,[[-2,-3],[[7,[[38,[-1]],40]]],3,[[41,[-1]]],48],[[-2,-3],[[7,[[49,[-1]],40]]],3,[[41,[-1]]],48],[[-2,[50,[-3,-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]],51],[[-2,[52,[-1]]],[[7,[[49,[-1]],40]]],3,[[41,[-1]]]],[[-2,[33,[-1]],[53,[-1]]],[[7,[[49,[-1]],40]]],3,[[41,[-1]]]],[[-2,[33,[-1]],[54,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[33,[-1]],-3],[[7,[[49,[-1]],40]]],3,[[41,[-1]]],48],[[[38,[-1]],-2,[38,[-1]]],[[7,[46,40]]],3,[[41,[-1]]]],[[[49,[-1]],-2,[49,[-1]]],[[7,[46,40]]],3,[[41,[-1]]]],[[-2,-3],[[7,[[38,[-1]],40]]],3,[[41,[-1]]],[[55,[-1]]]],[[[38,[-1]],-2,-1],[[7,[46,40]]],3,[[41,[-1]]]],[[-2,-3],[[38,[-1]]],3,[[41,[-1]]],48],[[-2,[33,[-1]],-3],[[7,[[38,[-1]],40]]],3,[[41,[-1]]],48],[[-2,-1,[39,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[[38,[-1]],-2,-1],[[7,[46,40]]],3,[[41,[-1]]]],[[[49,[-1]],-2,-1],[[7,[46,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2,[33,[-1]]],[[7,[[2,[[39,[-1]],[38,[-1]],[49,[-1]]]],40]]],3,[[41,[-1]]]],[-1,[[56,[[39,[-2]]]]],[],[]],[[[38,[-1]]],[[56,[[39,[-1]]]]],3],[[[49,[-1]]],[[56,[[39,[-1]]]]],3],[[-2,[33,[-1]],46],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[27,[[54,[-1]]]],[33,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[27,[[53,[-1]]]],[33,[-1]]],[[7,[[49,[-1]],40]]],3,[[41,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[44,[[39,[-1]]]]],[[38,[-1]]],3],[[5,[44,[[39,[-1]]]]],[[49,[-1]]],3],[[[38,[-1]]],[[38,[-1]]],[4,47]],[[[49,[-1]]],[[49,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-2,[33,[-1]],[39,[-1]],[56,[57]]],[[7,[[49,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[39,[-1]],[38,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[38,[-1]],[38,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[38,[-1]],[38,[-1]],58,[0,[58,[0,[-1,[38,[-1]]]]]],46],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[38,[-1]],[38,[-1]],[38,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[44,[[38,[-1]]]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,59,[39,[-1]],[56,[57]],[0,[59,[0,[-1,[39,[-1]]]]]],46],[[7,[[49,[-1]],40]]],3,[[41,[-1]]]],[[-2,59,[39,[-1]],[56,[57]],[0,[59,[0,[-1,[39,[-1]]]]]]],[[7,[[2,[[49,[-1]],[39,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[38,[-1]],[38,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[37,[-1]],[33,[-1]],[38,[-1]],[49,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[38,[-1]],-2,[38,[-1]]],2,3,[[41,[-1]]]],[[[49,[-1]],-2,[49,[-1]]],2,3,[[41,[-1]]]],[[[49,[-1]],[33,[-1]]],29,3],[[[38,[-1]],[33,[-1]]],29,3],[[[38,[-1]],11],12,3],[[[49,[-1]],11],12,3],[-1,-1,[]],[[[49,[-1]]],[[38,[-1]]],3],[[[38,[-1]]],[[49,[-1]]],3],[-1,-1,[]],[[[39,[-1]],[39,[-1]]],[[38,[-1]]],3],[[[49,[-1]],[33,[-1]]],[[27,[[60,[-1]]]]],3],[[[49,[-1]],[33,[-1]]],[[27,[[53,[-1]]]]],3],[[[49,[-1]],[33,[-1]]],[[27,[[52,[-1]]]]],3],[[[38,[-1]]],[[39,[-1]]],3],[[[49,[-1]]],[[39,[-1]]],3],[[[38,[-1]],-2,46,[38,[-1]]],2,3,[[41,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1]],-2],[[7,[46,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[7,[46,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[7,[46,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[7,[46,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2,[37,[-1]]],[[7,[46,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[7,[46,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[7,[46,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[7,[46,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[7,[46,40]]],3,[[41,[-1]]]],[[[38,[-1]],-2],[[7,[46,40]]],3,[[41,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[-2,46,[38,[-1]],[38,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,46,[49,[-1]],[49,[-1]]],[[7,[[49,[-1]],40]]],3,[[41,[-1]]]],[[-2,46,[61,[-1]],[61,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[]],[[]],[[[38,[-1]],[33,[-1]]],[[27,[[54,[-1]]]]],3],[[[38,[-1]]],[[39,[-1]]],3],[[[49,[-1]]],[[39,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[38,[-1]],[33,[-1]]],[[27,[[61,[-1]]]]],3],0,0,[[],[[62,[2]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[63,63],[[-1,-2],2,[],[]],[[],63],[5,-1,[]],[5,-1,[]],[-1,[[7,[63]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[63,63],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[63,11],12],[[63,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[63,[[27,[64]]]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[],[[44,[63]]]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[27,[65]],[27,[[66,[45,29]]]]],67],0,[[],67],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[67]]],8],[5,2],0,[[67,11],12],[-1,-1,[]],[[65,[27,[[66,[45,29]]]]],[[7,[67,68]]]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],0,[[]],0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[],65],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[[70,[69]],[43,[69]]],[[62,[2]]]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[70,[69]],71,9],[[62,[2]]]],[[[42,[69]],5,5,63],[[70,[69]]]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],72],[[],73],[[],74],[[],75],[[],76],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[72]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[73]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[72,72],9],[[73,73],9],[[74,74],9],[[75,75],9],[[76,76],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[72,11],12],[[73,11],12],[[74,11],12],[[75,11],12],[[76,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[65,[27,[[66,[45,29]]]]],[[7,[72,68]]]],[[],65],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[76,9],[76,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[27,[65]],[27,[[66,[45,29]]]]],72],[[[27,[65]]],65],0,0,[[]],[[]],[[]],[[]],[[]],0,0,[[],65],0,0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[60,[-1]]],[[60,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[[60,[-1]]],77,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[60,[-1]],[60,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[60,[-1]],[33,[-1]],78,-2],[[79,[2]]],3,80],[[[60,[-1]],11],12,[13,3]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[[60,[-1]]],[[53,[-1]]],3],[[[60,[-1]],-2],2,[16,3],19],[[],5],[[[60,[-1]],[33,[-1]]],[[2,[5,9]]],3],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],0,[-1,5,[]],[[-1,[42,[-2]],[44,[[43,[-2]]]],[43,[-2]],[43,[-2]]],[[34,[[43,[-2]]]]],[],[]],[[-1,[42,[-2]],[44,[[43,[-2]]]]],[[34,[[43,[-2]]]]],[],[]],[[-1,[42,[-2]],[44,[[43,[-2]]]]],[[43,[-2]]],[],[]],0,[-1,9,[]],0,[[-1,-3,[81,[-2]],[42,[-2]],46,[44,[[38,[-2]]]],[38,[-2]],[38,[-2]]],[[7,[[34,[[38,[-2]]]],40]]],[],[],[[41,[-2]]]],[[-1,-3,[81,[-2]],[42,[-2]],46,[44,[[38,[-2]]]]],[[7,[[34,[[38,[-2]]]],40]]],[],[],[[41,[-2]]]],[[-1,-3,[81,[-2]],[42,[-2]],46,[44,[[38,[-2]]]]],[[7,[[38,[-2]],40]]],[],[],[[41,[-2]]]],0,0,0,[[[82,[-1,-2]]],5,3,[[83,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[82,[-1,-2]]],[[82,[-1,-2]]],3,[[83,[-1]]]],[[-1,-2],2,[],[]],[-2,[[62,[[82,[-1,-2]]]]],3,[[83,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[82,[-1,-2]]],5,3,[[83,[-1]],13]],[[[82,[-1,-2]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3,[[83,[-1]],13]],[[[82,[-1,-2]],11],12,[13,3],[13,[83,[-1]]]],[-1,-1,[]],[[[82,[-1,-2]]],9,3,[[83,[-1]],13]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[82,[-1,-2]]],45,3,[[83,[-1]]]],[-2,[[82,[-1,-2]]],3,[[83,[-1]]]],[[]],[[[82,[-1,-2]],-3,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[38,[-1]],40]]],3,[[83,[-1]]],[[41,[-1]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[38,[-1]]],[[27,[[50,[-2,-1]]]]],3,51],[[-2,[81,[-1]],[42,[-1]],46,[38,[-1]]],[[7,[[2,[[38,[-1]],[38,[-1]],46]],40]]],3,[[41,[-1]]]],[[-2,[81,[-1]],[42,[-1]],46,[38,[-1]],5],[[7,[[2,[[34,[[38,[-1]]]],[38,[-1]],[39,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[81,[-1]],[42,[-1]],[38,[-1]],[38,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[81,[-1]],[42,[-1]],[44,[[38,[-1]]]],[27,[[38,[-1]]]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[-2,[81,[-1]],[42,[-1]],-3,[38,[-1]],[38,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]],51],[[-2,[81,[-1]],[42,[-1]],-3,[38,[-1]],[38,[-1]],[38,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]],51],[[-2,[81,[-1]],[42,[-1]],-3,[38,[-1]],[38,[-1]],[38,[-1]],[38,[-1]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]],51],[[-2,[42,[-1]],46,[38,[-1]]],[[7,[[2,[[38,[-1]],[38,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[42,[-1]],46,[38,[-1]]],[[7,[[2,[[38,[-1]],[38,[-1]],[38,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[42,[-1]],46,[38,[-1]]],[[7,[[2,[[38,[-1]],[38,[-1]],[38,[-1]],[38,[-1]]]],40]]],3,[[41,[-1]]]],0,0,0,[[[84,[-1]]],5,3],[[[85,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[84,[-1]]],[[84,[-1]]],[4,3]],[[[85,[-1]]],[[85,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[84,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[85,[-2]]]]],8,[86,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[84,[-1]]],5,3],[[[85,[-1]]],5,3],[[[85,[-1]],[42,[-1]],[44,[[43,[-1]]]],[43,[-1]],[43,[-1]]],[[34,[[43,[-1]]]]],3],[[[85,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[34,[[43,[-1]]]]],3],[[[84,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[85,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[84,[-1]],11],12,[13,3]],[[[85,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[84,[-1]]],[[85,[-1]]],3],[[[84,[-1]]],9,3],[[[85,[-1]]],9,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[5,[[84,[-1]]],3],[[]],[[]],[[[84,[-1]],-2],7,3,28],[[[85,[-1]],-2],7,[87,3],28],[[[85,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]],[38,[-1]],[38,[-1]]],[[7,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[85,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[84,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[[85,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[88,[-1]]],5,3],[[[89,[-1]]],5,3],[[[90,[-1]]],5,3],[[[91,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[88,[-1]]],[[88,[-1]]],[4,3]],[[[89,[-1]]],[[89,[-1]]],[4,3]],[[[90,[-1]]],[[90,[-1]]],[4,3]],[[[91,[-1]]],[[91,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[89,[-1]]],[92,3]],[[],[[90,[-1]]],[92,3]],[[],[[91,[-1]]],[92,3]],[[],[[93,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[89,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[90,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[91,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[93,[-1]]],-1,3],[[[88,[-1]]],5,3],[[[89,[-1]]],5,3],[[[90,[-1]]],5,3],[[[91,[-1]]],5,3],[[[88,[-1]],[42,[-1]],[44,[[43,[-1]]]],[43,[-1]],[43,[-1]]],[[34,[[43,[-1]]]]],3],[[[88,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[34,[[43,[-1]]]]],3],[[[88,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[89,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[90,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[91,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[94,[-1]],11],12,13],[[[88,[-1]],11],12,[13,3]],[[[89,[-1]],11],12,[13,3]],[[[90,[-1]],11],12,[13,3]],[[[91,[-1]],11],12,[13,3]],[[[93,[-1]],11],12,[13,3]],[[[95,[-1]],11],12,[13,3]],[[[96,[-1]],11],12,[13,3]],[-1,-1,[]],[[[91,[-1]]],[[88,[-1]]],3],[[[89,[-1]]],[[88,[-1]]],3],[-1,-1,[]],[[[90,[-1]]],[[88,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[88,[-1]]],9,3],[[[89,[-1]]],9,3],[[[90,[-1]]],9,3],[[[91,[-1]]],9,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[93,[-1]],-1,-1],[[7,[9,[94,[-1]]]]],3],[[[98,[[97,[78]]]],[99,[-1,[88,[-1]]]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[93,[-1]]],5,3],[[[93,[-1]],-1],[[7,[[27,[-1]],[94,[-1]]]]],3],[[[100,[-1]],[101,[-1]]],[[93,[-1]]],3],[[[100,[-1]],[101,[-1]],5],[[93,[-1]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[93,[-1]],-1,-1],[[7,[[2,[[96,[-1]],9]],[94,[-1]]]]],3],[[[93,[-1]],-1],[[7,[[95,[-1]],[94,[-1]]]]],3],[[[93,[-1]]],-1,3],[[[93,[-1]],5],5,3],[[[89,[-1]],-2],7,3,28],[[[90,[-1]],-2],7,3,28],[[[91,[-1]],-2],7,3,28],[[[88,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]],[38,[-1]],[38,[-1]]],[[7,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[93,[-1]],-2,[102,[-1]],[39,[-1]],[39,[-1]],[39,[-1]]],[[7,[[39,[-1]],40]]],3,[[41,[-1]]]],[[[88,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[88,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[[89,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[[90,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[[[91,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[95,[-1]],-1,-1,-1,[100,[-1]]],9,3],[[[96,[-1]],-1,-1,-1,[27,[-1]],-1,[100,[-1]]],9,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,103,[]],[-1,103,[]],[-1,103,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[104,104],[[[105,[-1]]],[[105,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[106,11],12],[[106,11],12],[[104,11],12],[[104,11],12],[[[105,[-1]],11],12,[13,3]],[[[105,[-1]],11],12,3],[40,106],[104,106],[107,106],[108,106],[-1,-1,[]],[108,104],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[106,[[27,[103]]]],[104,[[27,[103]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[109,[-1]]],[[109,[-1]]],[4,3]],[[[110,[-1]]],[[110,[-1]]],[4,3]],[[[111,[-1,-2,-3,-4]]],[[111,[-1,-2,-3,-4]]],[4,112],[4,112],[4,3],4],[113,113],[[[114,[-1]]],[[114,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[110,[-1]]],3],[[],113],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[113]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[[33,[-1]]],[[54,[-1]]],3],0,[[[109,[-1]],[109,[-1]]],9,[10,3]],[[[110,[-1]],[110,[-1]]],9,[10,3]],[[[111,[-1,-2,-3,-4]],[111,[-1,-2,-3,-4]]],9,[10,112],[10,112],[10,3],10],[[113,113],9],[[[114,[-1]],[114,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[109,[-1]],11],[[7,[2,115]]],3],[[[109,[-1]],11],12,[13,3]],[[[109,[-1]],[33,[-1]],78,-2],[[79,[2]]],3,80],[[[110,[-1]],11],12,[13,3]],[[[111,[-1,-2,-3,-4]],11],12,[13,112],[13,112],[13,3],13],[[113,11],12],[[[114,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[53,[-1]]],113,3],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],0,[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[113,9],[[[110,[-1]]],9,3],[113,9],[113,9],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[109,[-1]],[33,[-1]]],[[27,[[54,[-1]]]]],3],0,0,[[]],[[]],[[]],[[]],[[]],[[[111,[[109,[-1]],-2,-1,-3]],[111,[[109,[-1]],-2,-1,-3]]],9,3,112,[[36,[-1]]]],[[113,-1],7,28],[[113,[33,[-1]]],[[27,[[53,[-1]]]]],3],[[[109,[-1]],[33,[-1]]],[[34,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[109,[-1]],[33,[-1]]],[[7,[[34,[-1]],108]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[99,[-1,-2]],-3],2,3,[[36,[-1]]],[[117,[[116,[-1,-2]]]]]],[[[99,[-1,-2]],-3,-4],2,3,[[36,[-1]]],[[117,[118]]],[[117,[-2]]]],[[[119,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[120,[-1]]],[[120,[-1]]],[4,3]],[[[119,[-1]]],[[119,[-1]]],[4,3]],[[[99,[-1,-2]]],[[99,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[99,[-1,-2]]],5,3,[[36,[-1]]]],[[[99,[-1,-2]]],[[121,[118,-2]]],3,[[36,[-1]]]],[[],[[99,[-1,-2]]],[92,3],[92,[36,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[120,[-2]]]]],8,3],[-1,[[7,[[119,[-2]]]]],8,[86,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[99,[-2,-3]]]]],8,3,[86,[36,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[120,[-1]]],5,3],[[[119,[-1]]],5,3],[[[119,[-1]],[42,[-1]],[44,[[43,[-1]]]],[43,[-1]],[43,[-1]]],[[34,[[43,[-1]]]]],3],[[[119,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[34,[[43,[-1]]]]],3],[[[120,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[119,[-1]],[42,[-1]],[44,[[43,[-1]]]]],[[43,[-1]]],3],[[[120,[-1]],11],12,[13,3]],[[[119,[-1]],11],12,[13,3]],[[[99,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[[[116,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[-1,-1,[]],[-1,-1,[]],[[[120,[-1]]],[[119,[-1]]],3],[-1,-1,[]],[[[2,[-1,-3]]],[[116,[-2,-3]]],[[117,[118]]],3,[[36,[-2]]]],[-1,-1,[]],[[[99,[-1,-2]],118],[[27,[5]]],3,[[36,[-1]]]],[[[119,[-1]]],9,3],[[[99,[-1,-2]]],9,3,[[36,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[99,[-1,-2]]],9,3,[[36,[-1]]]],[[[99,[-1,-2]]],29,3,[[36,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[99,[-1,-2]],118],[[27,[-2]]],3,[[36,[-1]]]],[[],[[99,[-1,-2]]],3,[[36,[-1]]]],[[-1,-4],[[116,[-2,-3]]],[[117,[118]]],3,[[36,[-2]]],[[117,[-3]]]],[[[34,[-3]]],[[99,[-1,-2]]],3,[[36,[-1]]],[[117,[[116,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[120,[-1]],-2],7,3,28],[[[119,[-1]],-2],7,[87,3],28],[[[99,[-1,-2]],-3],7,3,[87,[36,[-1]]],28],[[[119,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]],[38,[-1]],[38,[-1]]],[[7,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[119,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[34,[[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[119,[-1]],-2,[81,[-1]],[42,[-1]],46,[44,[[38,[-1]]]]],[[7,[[38,[-1]],40]]],3,[[41,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[122,[-1]],-2,[33,[-1]]],[[7,[[2,[[39,[-1]],[38,[-1]],[49,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[33,[-1]]],[[7,[[2,[[39,[-1]],[38,[-1]],[49,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[27,[[122,[-1]]]],[33,[-1]]],[[7,[[2,[[39,[-1]],[38,[-1]],[49,[-1]]]],40]]],3,[[41,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[123,[-1]]],[[123,[-1]]],[4,3]],[[[122,[-1]]],[[122,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[123,[-1]],[123,[-1]]],9,[10,3]],[[[122,[-1]],[122,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[123,[-1]],[33,[-1]],78,-2],[[79,[2]]],3,80],[[[123,[-1]],11],12,[13,3]],[[[122,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[[122,[-1]],-2],2,3,19],[[-2,[33,[-1]],[38,[-1]],[49,[-1]]],[[7,[[39,[-1]],40]]],3,[[41,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[123,[-1]]],9,3],[[[123,[-1]]],9,3],[[[123,[-1]]],9,3],[[[123,[-1]]],9,3],[[[123,[-1]]],9,3],[[[123,[-1]]],9,3],[[[123,[-1]]],9,3],[[[123,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[124,124],[[[125,[-1]]],[[125,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[125,[-1]],[125,[-1]]],26,3],[[-1,-2],26,[],[]],[[],124],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[124]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[125,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[124,124],9],[[[125,[-1]],[125,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[124,11],12],[[124,11],12],[[[125,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[44,[126]]],[[27,[-1]]],[]],[127,-1,[]],[77,-1,[]],[128,-1,[]],[129,-1,[]],[130,-1,[]],[131,-1,[]],[132,-1,[]],[14,-1,[]],[-1,124,[]],[[-1,-2],14,[16,17],18],[[[125,[-1]],-2],2,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,29,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],-1,[]],[[],-1,[]],[[[125,[-1]],[125,[-1]]],[[27,[26]]],3],[[]],[[]],[[124,-1],7,28],[[[125,[-1]],-2],7,3,28],[-1,[[34,[126]]],[]],[-1,[[27,[127]]],[]],[-1,[[27,[77]]],[]],[-1,[[27,[128]]],[]],[-1,[[27,[129]]],[]],[-1,[[27,[130]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[124,[[27,[64]]]],[-1,29,[]],[-1,[[27,[133]]],[]],[-1,133,[]],[-1,[[27,[131]]],[]],[-1,[[27,[132]]],[]],[-1,132,[]],[-1,[[27,[14]]],[]],[-1,14,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[],[[44,[124]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[102,[-1]]],[[135,[-1,134]]],3],[[[102,[-1]]],[[135,[-1,136]]],3],[[[102,[-1]]],[[135,[-1,137]]],3],[[[102,[-1]]],[[135,[-1,138]]],3],[[[139,[-1]],[44,[-1]]],[[2,[[34,[-1]],-1]]],3],[140,140],[[[102,[-1]]],[[102,[-1]]],[4,3]],[[[100,[-1]]],[[100,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[100,[-1]],[56,[-1]]],-1,3],[[[102,[-1]],140],[[139,[-1]]],3],0,0,[[],[[102,[-1]]],3],[[],[[100,[-1]]],[92,3]],[[],[[101,[-1]]],[92,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[140,11],12],[[[139,[-1]],11],12,[13,3]],[[[102,[-1]],11],12,[13,3]],[[[100,[-1]],11],12,[13,3]],[[[101,[-1]],11],12,[13,3]],[-1,-1,[]],[5,140],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[101,[-1]],[125,[-1]]],[[27,[[56,[-1]]]]],3],[[[100,[-1]],[56,[-1]]],-1,3],[[[100,[-1]],[56,[-1]]],-1,3],[[[100,[-1]],[56,[-1]]],-1,3],[[[100,[-1]],[56,[-1]]],-1,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[[101,[-1]],[125,[-1]],[56,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[56,[-2]]],[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[141,[-1,-2,-3]],[33,[-3]]],2,[142,92,112,143,13],112,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[144,[-1]],[33,[-1]],[54,[-1]]],[[62,[[2,[[54,[-1]],[54,[-1]]]],108]]],3],[[[146,[[145,[-1]]]],[33,[-1]],[54,[-1]]],[[62,[[2,[[54,[-1]],[54,[-1]]]],108]]],3],[[[147,[-1]],58,[33,[-1]],[54,[-1]]],[[62,[[2,[[54,[-1]],[54,[-1]]]],108]]],3],[[[141,[58,[145,[-1]],-1]],58,[33,[-1]],[54,[-1]]],[[62,[[2,[[54,[-1]],[54,[-1]]]],108]]],3],[[[147,[-1]],58,[33,[-1]],[54,[-1]]],[[62,[[2,[[54,[-1]],[54,[-1]]]],104]]],3],[[[141,[58,[145,[-1]],-1]],58,[33,[-1]],[54,[-1]]],[[62,[[2,[[54,[-1]],[54,[-1]]]],104]]],3],0,0,0,0,0,[[[146,[-1]]],[[146,[-1]]],4],[[[145,[-1]]],[[145,[-1]]],[4,3]],[[[148,[-1]]],[[148,[-1]]],[4,3]],[[[149,[-1]]],[[149,[-1]]],[4,3]],[[[150,[-1]]],[[150,[-1]]],[4,3]],[58,58],[59,59],[[[141,[-1,-2,-3]]],[[141,[-1,-2,-3]]],[4,142],4,[4,3]],[[[151,[-1,-3,-2]]],[[151,[-1,-3,-2]]],[4,142],[4,3],[4,[152,[-2]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[144,[-1]],[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[146,[[145,[-1]]]],[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],0,0,[[[147,[-1]],58,[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[141,[58,[145,[-1]],-1]],58,[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],0,0,0,[[],58],[[],59],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[146,[-1]],[146,[-1]]],9,10],[[[145,[-1]],[145,[-1]]],9,[10,3]],[[[150,[-1]],[150,[-1]]],9,[10,3]],[[58,58],9],[[59,59],9],[[[141,[-1,-2,-3]],[141,[-1,-2,-3]]],9,[10,142],10,[10,3]],[[[151,[-1,-3,-2]],[151,[-1,-3,-2]]],9,[10,142],[10,3],[10,[152,[-2]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[147,[-1]],58,[54,[-1]],[54,[-1]],[54,[-1]],[33,[-1]]],[[54,[-1]]],3],[[[141,[58,[145,[-1]],-1]],58,[54,[-1]],[54,[-1]],[54,[-1]],[33,[-1]]],[[54,[-1]]],3],[[[153,[-1]],[33,[-1]],[53,[-1]]],[[27,[[60,[-1]]]]],3],[[[146,[[150,[-1]]]],[33,[-1]],[53,[-1]]],[[27,[[60,[-1]]]]],3],[[[154,[-1]],59,[33,[-1]],[53,[-1]]],[[27,[[60,[-1]]]]],3],[[[141,[59,[150,[-1]],-1]],59,[33,[-1]],[53,[-1]]],[[27,[[60,[-1]]]]],3],[[[146,[-1]],11],12,13],[[[145,[-1]],11],12,[13,3]],[[[148,[-1]],11],12,[13,3]],[[[149,[-1]],11],12,[13,3]],[[[150,[-1]],11],12,[13,3]],[[58,11],12],[[59,11],12],[[[141,[-1,-2,-3]],11],12,[13,142],13,[13,3]],[[[151,[-1,-3,-2]],11],12,[13,142],[13,3],[13,[152,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[141,[-1,-3,-2]]],[[151,[-1,-3,-2]]],142,3,[[152,[-2]]]],[[[141,[-1,-2,-3]],-1],[[146,[-2]]],[142,92,112,143,13],112,3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[58,-1],2,19],[[59,-1],2,19],0,0,0,[-1,5,[]],[58,5],[59,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[153,[-1]],[33,[-1]],[60,[-1]]],[[53,[-1]]],3],[[[146,[[150,[-1]]]],[33,[-1]],[60,[-1]]],[[53,[-1]]],3],[[[154,[-1]],59,[33,[-1]],[60,[-1]]],[[53,[-1]]],3],[[[141,[59,[150,[-1]],-1]],59,[33,[-1]],[60,[-1]]],[[53,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,0,0,[[],[[141,[-1,-2,-3]]],[142,92,112,143,13],112,3],[[[146,[-1]]],[[141,[-2,-1,-3]]],112,[142,92,112,143,13],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[155,[-2]]],[],[]],[[-1,[33,[-2]]],[[62,[[155,[-2]]]]],[],[]],[[[145,[-1]],[33,[-1]]],[[62,[[155,[-1]]]]],3],[[[148,[-1]]],[[155,[-1]]],3],[[[149,[-1]]],[[155,[-1]]],3],[[[150,[-1]],[33,[-1]]],[[62,[[155,[-1]]]]],3],0,0,0,[[[144,[-1]],[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[146,[[145,[-1]]]],[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[147,[-1]],58,[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[141,[58,[145,[-1]],-1]],58,[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[141,[-1,-2,-3]]],5,[142,92,112,143,13],112,3],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[33,[-2]]],27,[],[]],[[[146,[-2]],[33,[-1]]],27,3,[[152,[-1]]]],[[[145,[-1]],[33,[-1]]],27,3],[[[150,[-1]],[33,[-1]]],27,3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[156,-2,[42,[-1]]],[[62,[[81,[-1]],40]]],3,[[41,[-1]]]],[[156,[44,[0]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[156,[44,[[43,[-1]]]],[42,[-1]],[157,[-1]],[34,[[43,[-1]]]],[99,[-1,-2]],5],[[62,[[2,[[158,[-1]],0]]]]],3,[[36,[-1]]]],[[156,[44,[[43,[-1]]]],[42,[-1]],[99,[-1,-2]],5],[[62,[[158,[-1]]]]],3,[[36,[-1]]]],[156,[[62,[2]]]],0,[156,156],[159,159],[160,160],[161,161],[162,162],[163,163],[164,164],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[160]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[156,156],9],[[159,159],9],[[160,160],9],[[161,161],9],[[162,162],9],[[163,163],9],[[164,164],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[156,11],12],[[159,11],12],[[159,11],12],[[160,11],12],[[160,11],12],[[161,11],12],[[162,11],12],[[163,11],12],[[164,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[160]]],3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[159,-1],2,19],[[160,-1],2,19],[[161,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[159,165],0,[[29,[34,[159]],5,162],[[62,[156]]]],[45,159],[[156,[42,[-1]]],5,3],[156,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[160,-1],7,28],0,0,[[156,-2,[42,[-1]],[158,[-1]],[81,[-1]],[0,[[166,[-1]]]],[99,[-1,-3]],[27,[[44,[[168,[[167,[-1]]]]]]]]],[[62,[[34,[[38,[-1]]]]]]],3,[[41,[-1]]],[[36,[-1]]]],[[156,-2,[42,[-1]],[158,[-1]],[99,[-1,-3]]],[[62,[2]]],3,[[41,[-1]]],[[36,[-1]]]],[160,-1,3],[160,-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[161,[42,[-1]]],[[43,[-1]]],3],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[131,[[62,[160]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[156,5],[[62,[156]]]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[166,[-1]]],[[166,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[],[[81,[-1]]],[92,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[81,[-1]],-2,-1],[[62,[[38,[-1]],40]]],3,51],[[[81,[-1]],[43,[-1]],[42,[-1]]],[[62,[[38,[-1]],40]]],3],[[[81,[-1]],-1],[[62,[[39,[-1]],40]]],3],[[[81,[-1]],-1],[[62,[[39,[-1]],40]]],3],[[[81,[-1]],-2],[[62,[[39,[-1]],40]]],3,51],[[[81,[-1]],-2],[[62,[[39,[-1]],40]]],3,51],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[81,[-1]],-2,-1],2,3,[[41,[-1]]]],[[[81,[-1]],-2,-3],2,3,[[41,[-1]]],51],[[[81,[-1]],-2,[170,[-1]]],2,3,[[41,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],156],[[[27,[[2,[156,[99,[-1,-2]]]]]],[43,[-1]],[42,[-1]],5],[[62,[[2,[[34,[[158,[-1]]]],5]]]]],3,[[36,[-1]]]],[[[27,[[2,[156,[99,[-1,-2]]]]]],[43,[-1]],[42,[-1]],5],[[62,[[2,[[34,[[43,[-1]]]],5,[34,[[43,[-1]]]]]]]]],3,[[36,[-1]]]],[[[27,[[2,[156,[99,[-1,-2]]]]]],[43,[-1]],[43,[-1]],[42,[-1]],5],[[62,[[2,[[34,[[43,[-1]]]],5,[34,[[43,[-1]]]]]]]]],3,[[36,[-1]]]],[[[27,[[2,[156,[99,[-1,-2]]]]]],[43,[-1]],[43,[-1]],[42,[-1]],5],[[62,[[2,[[34,[[158,[-1]]]],5]]]]],3,[[36,[-1]]]],[[[27,[[2,[156,[99,[-1,-2]]]]]],[43,[-1]],[43,[-1]],[43,[-1]],[42,[-1]],5],[[62,[[2,[[34,[[158,[-1]]]],5]]]]],3,[[36,[-1]]]],[[[99,[-1,-2]]],[[168,[[44,[156]]]]],3,[[36,[-1]]]],[[[99,[-1,-2]],9],156,3,[[36,[-1]]]],0,0,0,0,0,0,[156,[[157,[-1]]],3],[[156,5],[[158,[-1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[171,[-1]]],[[171,[-1]]],[4,3]],[[[157,[-1]]],[[157,[-1]]],[4,3]],[[[158,[-1]]],[[158,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[],[[157,[-1]]],[92,3]],[[],[[158,[-1]]],[92,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],0,[[[157,[-1]],11],12,[13,3]],[[[158,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[[],5],[[],5],[[[158,[-1]]],[],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[156,[[157,[-1]]],3],[[[158,[-1]]],[],3],0,0,[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[172,[-1,-2]]],5,3,[[36,[-1]]]],[[[172,[-1,-2]]],5,3,[[36,[-1]]]],[[[168,[[173,[-1,-2]]]],[110,[-1]],5],[[172,[-1,-2]]],3,[[36,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[172,[-1,-2]]],[[27,[[174,[-1]]]]],3,[[36,[-1]]]],[[[172,[-1,-2]]],5,3,[[36,[-1]]]],[[[172,[-1,-2]]],[[172,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[[[172,[-1,-2]],[42,[-1]]],[[174,[-1]]],3,[[36,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[42,[-1]]],[[34,[[43,[-1]]]]],3],[[[172,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[[[172,[-1,-2]]],[[27,[34]]],3,[[36,[-1]]]],[-1,-1,[]],[[5,[44,[[158,[-1]]]],[168,[[173,[-1,-2]]]]],[[34,[[172,[-1,-2]]]]],3,[[36,[-1]]]],[[-1,5,[99,[-2,-3]]],[[62,[34,106]]],175,3,[[36,[-2]]]],[[],5],[-1,-2,[],[]],[[],[[34,[-1]]],3],[[],[[7,[24,25]]]],[[5,27,[168,[[173,[-1,-2]]]],[110,[-1]]],[[172,[-1,-2]]],3,[[36,[-1]]]],[[[172,[-1,-2]]],5,[176,3],[[36,[-1]]]],[[[172,[-1,-2]]],27,3,[[36,[-1]]]],[[]],[[[172,[-1,-2]],[172,[-1,-2]]],9,3,[[36,[-1]]]],[[[172,[-1,-2]],5],[[172,[-1,-2]]],[176,3],[[36,[-1]]]],[[[172,[-1,-2]]],5,3,[[36,[-1]]]],[[[172,[-1,-2]]],[[34,[-1]]],3,[[36,[-1]]]],[[[172,[-1,-2]]],5,3,[[36,[-1]]]],[[[172,[-1,-2]]],[[177,[-1]]],[176,3],[[36,[-1]]]],[44,5],[[[172,[-1,-2]],-3],[[62,[2,40]]],3,[[36,[-1]]],[[41,[-1]]]],[[[172,[-1,-2]],-3,[44,[[39,[-1]]]]],[[62,[[34,[[39,[-1]]]],40]]],3,[[36,[-1]]],[[41,[-1]]]],[[[172,[-1,-2]],-3,[27,[[39,[-1]]]],[44,[[39,[-1]]]]],[[62,[[2,[[27,[[39,[-1]]]],[34,[[39,[-1]]]]]],40]]],3,[[36,[-1]]],[[41,[-1]]]],[[[172,[-1,-2]],-3,44],[[62,[40]]],3,[[36,[-1]]],[[41,[-1]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]],160],[[43,[-1]]],3],[127,[[43,[-1]]],3],[[[43,[-1]]],[[43,[-1]]],[4,3]],[[-1,-2],2,[],[]],[-1,[[43,[-1]]],3],[5,-1,[]],[5,-1,[]],[-1,[[7,[[43,[-2]]]]],8,[86,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[],[[170,[-1]]],3],[[],[[43,[-1]]],3],[[[43,[-1]],[43,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[43,[-1]],11],12,[13,3]],[[[43,[-1]],[42,[-1]],78],29,3],[-1,-1,[]],[[[43,[-1]]],[[27,[-1]]],3],[[-1,-2],14,[16,17],18],[[[43,[-1]]],[[27,[5]]],3],[[[43,[-1]]],[[27,[5]]],3],[[[43,[-1]]],[[27,[5]]],3],[[[43,[-1]],-2],2,3,19],[[],5],[-1,-2,[],[]],[[[43,[-1]]],9,3],[[[43,[-1]]],9,3],[[[43,[-1]]],9,3],[[],[[7,[24,25]]]],[-1,[[43,[-1]]],3],[14,[[43,[-1]]],3],[[[170,[-1]]],[[43,[-1]]],3],[[]],[[[43,[-1]],-2],7,[87,3],28],[[[43,[-1]]],160,3],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[14,[[43,[-1]]],3],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[160,[[43,[-1]]],3],0,[[[42,[-1]],-1,-1,[43,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[[[42,[-1]],[43,[-1]]],[[62,[[2,[[43,[-1]],[43,[-1]]]]]]],3],[[[42,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],[43,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]]],[[43,[-1]]],3],[[[42,[-1]]],[[43,[-1]]],3],[[[42,[-1]]],[[43,[-1]]],3],[[],[[42,[-1]]],3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[42,[-1]],5],[[2,[[43,[-1]],[43,[-1]]]]],3],[[[42,[-1]],5],[[2,[[43,[-1]],[43,[-1]],[43,[-1]]]]],3],[[[42,[-1]],5],[[2,[[43,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]]]],3],[[[42,[-1]],5],[[27,[[2,[[43,[-1]],[43,[-1]]]]]]],3],[[[42,[-1]],5],[[27,[[2,[[43,[-1]],[43,[-1]],[43,[-1]]]]]]],3],[[[42,[-1]],5],[[27,[[2,[[43,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]]]]]],3],[[[42,[-1]],[43,[-1]]],[[27,[118]]],3],[[[42,[-1]],[43,[-1]]],[[27,[[2,[[34,[[43,[-1]]]],[27,[[43,[-1]]]]]]]]],3],[[[42,[-1]],[43,[-1]]],[[27,[29]]],3],[[[42,[-1]],[43,[-1]]],[[27,[118]]],3],[[[42,[-1]],[43,[-1]]],[[27,[118]]],3],[[[42,[-1]],11],12,[13,3]],[-1,-1,[]],[[[42,[-1]]],[],3],[[[42,[-1]]],5,3],0,[[[42,[-1]]],5,3],0,[[[42,[-1]]],5,3],0,[[[42,[-1]]],5,3],0,[[[42,[-1]],[43,[-1]]],[[170,[-1]]],3],[[[42,[-1]],-1,[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],-1,[43,[-1]]],[[2,[-1,[170,[-1]]]]],3],[[[42,[-1]]],2,3],[[[42,[-1]]],2,3],[[[42,[-1]],[34,[[43,[-1]]]],[43,[-1]]],[[43,[-1]]],3],[[],5],[[[42,[-1]]],[],3],[[[42,[-1]],160,[43,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],160,[43,[-1]],[43,[-1]],[170,[-1]]],[[43,[-1]]],3],[[[42,[-1]],160,[43,[-1]],[43,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],160,[43,[-1]],[43,[-1]],[43,[-1]],[170,[-1]]],[[43,[-1]]],3],[[[42,[-1]],160,[43,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],160,[43,[-1]],[43,[-1]],[43,[-1]],[43,[-1]],[170,[-1]]],[[43,[-1]]],3],[[[42,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]],[[43,[-1]]],3],[[[42,[-1]],45],[[43,[-1]]],3],[[[42,[-1]]],[[43,[-1]]],3],[[[42,[-1]],45],[[43,[-1]]],3],[[[42,[-1]],118],[[43,[-1]]],3],[[[42,[-1]],[44,[29]]],[[43,[-1]]],3],[[[42,[-1]],[178,[-1]]],[[43,[-1]]],3],[[[42,[-1]],45],[[43,[-1]]],3],[-1,-2,[],[]],0,[[[42,[-1]],45],[[43,[-1]]],3],[[],[[7,[24,25]]]],[[[42,[-1]],[34,[[43,[-1]]]]],[[43,[-1]]],3],[[[42,[-1]],-1],[[27,[[2,[-1,[43,[-1]]]]]]],3],[[]],0,[[[42,[-1]],[43,[-1]],[43,[-1]]],9,3],[[[42,[-1]]],9,3],[[[42,[-1]],[98,[[97,[78]]]],45],[[62,[[43,[-1]]]]],3],[[[42,[-1]],45],62,3],[[[42,[-1]],[98,[[97,[78]]]],45],[[62,[[2,[5,179,[43,[-1]],9]],180]]],3],[[[42,[-1]],45],[[62,[[43,[-1]]]]],3],[[[42,[-1]],[170,[-1]]],[[43,[-1]]],3],[[[42,[-1]],[44,[[43,[-1]]]]],[[34,[-1]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[181,11],12],[[181,182],29],[-1,-1,[]],[[181,[44,[182]]],[[62,[2]]]],[[],5],[[181,-1],182,[[117,[29]]]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[181,182],[182,181],[[]],[[181,45],[[27,[182]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[181,181],[[62,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,103,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[180,180],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,[[180,11],12],[[180,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,[183,45],[-1,-2,[],[]],[-1,-2,[],[]],[183,183],[[-1,-2],2,[],[]],[183,127],[[183,179],[[184,[-1,[34,[126]]]]],3],[[],183],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[183,-1],29,[[185,[[44,[126]]]]]],[[183,183],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[183,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[183,127],9],[[],[[7,[24,25]]]],[[],[[0,[175]]]],[179,[[184,[-1,183]]],3],[[],[[0,[175]]]],[[],[[0,[175]]]],[183,[[0,[175]]]],[[],[[0,[175]]]],[183,[[31,[175]]]],[183,[[0,[175]]]],[[],[[0,[175]]]],[[]],[183,132],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,45,[186,[-1,-2]]],[[186,[-1,-2]]],[187,4,188],3],[[-1,189,[186,[-1,-2]]],[[186,[-1,-2]]],[187,4,188],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[190,[-1]]],[[190,[-1]]],[4,3]],[[[186,[-1,-2]]],[[186,[-1,-2]]],[4,188],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[190,[-1]],[190,[-1]]],9,[10,3]],[[[186,[-1,-2]],[186,[-1,-2]]],9,[10,188],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[[190,[-1]],11],12,[13,3]],[[[190,[-1]],11],12,3],[[[186,[-1,-2]],11],12,[13,188],[13,3]],[[[186,[179,-1]],11],12,3],[-1,-1,[]],[-1,-1,[]],[[-1,189],[[186,[-1,-2]]],[187,4,188],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[190,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[191,[-1,-2,[186,[-1,-3]]]],-4],[[191,[-1,-2,[186,[-1,-3]]]]],188,[],3,175],[[-1,[190,[-2]]],[[186,[-1,-2]]],188,3],[[[27,[-1]],-2,[190,[-3]]],[[191,[-2,-1,[186,[-2,-3]]]]],[],188,3],[[[186,[-1,-2]],[186,[-1,-2]]],[[186,[-1,-2]]],[187,4,188],3],[[]],[[]],[[[7,[-1,-2]],-3,-4],[[191,[-3,-1,[186,[-3,-5]]]]],[],[],188,175,3],[[-1,[190,[-2]]],[[191,[-1,-3,[186,[-1,-2]]]]],188,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[192,192],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[192,192],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[192,11],12],[-1,-1,[]],[[179,179],192],[192,[[27,[5]]]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[45,5,5,5,5],29],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[193,193],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[193,193],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[193,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[127,45],[[0,[175]]]],[[],[[0,[175]]]],[[127,9,45],[[0,[175]]]],[[127,9,45],[[0,[175]]]],[127,[[0,[175]]]],[[127,9,45],[[0,[175]]]],[[127,9,45],[[0,[175]]]],[[],[[0,[175]]]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[98,[[97,[78]]]],9],[[0,[175]]]],[[],[[0,[175]]]],[[],[[0,[175]]]],[179,[[184,[-1,179]]],3],[[[98,[[97,[78]]]],9,9],[[0,[175]]]],[[[98,[[97,[78]]]],9],[[0,[175]]]],[[],[[0,[175]]]],[183,[[0,[175]]]],[[[98,[[97,[78]]]],9],[[0,[175]]]],[[[98,[[97,[78]]]],9],[[0,[175]]]],[[[98,[[97,[78]]]],9],[[0,[175]]]],[[[98,[[97,[78]]]],9],[[0,[175]]]],[179,[[184,[-1,[34,[179]]]]],3],[179,[[184,[-1,[34,[179]]]]],3],[[],[[0,[175]]]],[[[98,[[97,[78]]]],9],[[0,[175]]]],[45,[[0,[175]]]],[45,[[0,[175]]]],[[],[[0,[175]]]],[[[98,[[97,[78]]]],9,9],[[0,[175]]]],[[],[[0,[175]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[168,[[173,[-1,-2]]]],[110,[-1]],5],-3,[],[],[]],[-1,[[27,[[174,[-2]]]]],[],[]],[-1,[[174,[-2]]],[],[]],[-1,-2,[],[]],[[],34],[-1,-2,[],[]],[[-1,5],5,[]],[-1,-2,[],[]],[[-1,5],5,[]],[-1,[[27,[34]]],[]],[[5,44,[168,[[173,[-1,-2]]]]],[[34,[-3]]],[],[],[]],[-1,[],[]],[[-1,5,[99,[-2,-3]]],[[7,[34,106]]],175,[],[]],[-1,2,[]],[-1,[],[]],[-1,[],[]],[[],[[34,[-1]]],[]],[-1,[[99,[-2,-3]]],[],[],[]],[[5,27,[168,[[173,[-1,-2]]]],[110,[-1]]],-3,[],[],[]],[[-1,5],5,[]],[[-1,5],9,[]],[[-1,5],9,[]],[[5,[99,[-1,-2]]],-3,[],[],[]],0,[[-1,[44,[-2]]],[[7,[[34,[[2,[-2,[194,[-3]]]]]],40]]],[],[],[]],[-1,[],[]],[-1,27,[]],[[-1,-1],9,[]],[-1,9,[]],[-1,5,[]],[-1,[[34,[-2]]],[],[]],[[-1,45],7,[]],[-1,5,[]],[-1,5,[]],[44,5],0,[[-1,-3,44],[[7,[40]]],[],[],[[41,[-2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[168,[[99,[-1,-2]]]]],-1,176,[[36,[-1]]]],[[5,[168,[[99,[-1,-2]]]]],[[2,[-3,[195,[-1]]]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[[[197,[-1,-2]]],[[197,[-1,-2]]],[176,4],[4,[198,[-1]]]],[[-1,-2],2,[],[]],[[[199,[-1,-2,-3]],[197,[-1,-3]]],[[7,[[199,[-1,-2,-3]],106]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[197,[-2,-3]]]]],8,176,[[198,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[199,[-2,-3,-4]]]]],8,176,[[36,[-2]]],[[196,[-2,-3]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[197,[-1,-2]],-3],[[79,[2]]],176,[[198,[-1]]],80],[[[200,[-1,-2,-3]],[197,[-1,-3]],5,[168,[[99,[-1,-2]]]]],[[7,[[2,[[199,[-1,-2,-3]],[34,[-1]],[34,[-1]],5]],106]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[[[197,[-1,-2]],[44,[126]]],[[27,[[44,[126]]]]],176,[[198,[-1]]]],[[[197,[-1,-2]]],5,176,[[198,[-1]]]],[[[200,[-1,-2,-3]],11],12,[13,176],[13,[36,[-1]]],[13,[196,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[200,[-1,-2,-3]]],[[99,[-1,-2]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[99,[-1,-2]]],[[200,[-1,-2,-3]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[[]],[[]],[[]],[[[200,[-1,-2,-3]],[197,[-1,-3]],44,[168,[[99,[-1,-2]]]]],[[7,[[2,[[199,[-1,-2,-3]],[34,[-1]],[34,[-1]],5]],106]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[[[197,[-1,-3]],[44,[-3]],5,[34,[-1]],[168,[[99,[-1,-2]]]]],[[7,[[199,[-1,-2,-3]],106]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[[5,[168,[[99,[-1,-2]]]]],[[197,[-1,-3]]],176,[[36,[-1]]],[[198,[-1]],[196,[-1,-2]]]],[[[200,[-1,-2,-3]]],5,176,[[36,[-1]]],[[196,[-1,-2]]]],[[[197,[-1,-2]],-3],7,176,[[198,[-1]]],28],[[[199,[-1,-2,-3]],-4],7,176,[[36,[-1]]],[[196,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[199,[-1,-2,-3]],[197,[-1,-3]],5,[44,[-1]],[44,[-1]]],[[7,[9,107]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[168,[[99,[-1,-2]]]],5],-1,176,[[36,[-1]]]],[[5,[168,[[99,[-1,-2]]]]],[[202,[[201,[-1]]]]],176,[[36,[-1]]]],0,[[[173,[-1,-2]]],[[173,[-1,-2]]],[4,3],[4,[36,[-1]]]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[203,[-2,-3,-4]]]]],8,[86,176],[[36,[-2]]],[[196,[-2,-3]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[[204,[-1,-2]]],-1,176,[[205,[-1]]]],[5,2],[5,2],[5,2],[5,2],[[[206,[-1,-2,-3]],[204,[-1,-3]],5,[168,[[99,[-1,-2]]]]],[[7,[[2,[[203,[-1,-2,-3]],[34,[-1]],[34,[-1]],5,5]],106]]],176,[[36,[-1]]],[]],[[[206,[-1,-2,-3]],11],12,[13,176],[13,[36,[-1]]],[13,[196,[-1,-2]]]],[[[173,[-1,-2]],11],12,[13,3],[13,[36,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[204,[-1,-2]],5],[],176,[[205,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[206,[-1,-2,-3]]],[[99,[-1,-2]]],176,[[36,[-1]]],[[196,[-1,-2]],[205,[-1]]]],[[[173,[-1,-2]]],[[168,[[99,[-1,-2]]]]],3,[[36,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[99,[-1,-2]]],[[206,[-1,-2,-3]]],176,[[36,[-1]]],[[196,[-1,-2]],[205,[-1]]]],[[[168,[[99,[-1,-2]]]],5],[[173,[-1,-2]]],3,[[36,[-1]]]],[[[168,[[99,[-1,-2]]]],5],[[173,[-1,-2]]],3,[[36,[-1]]]],[[[173,[-1,-2]]],5,3,[[36,[-1]]]],[[]],[[]],[[]],[[]],0,[[[206,[-1,-2,-3]],[204,[-1,-3]],44,[168,[[99,[-1,-2]]]]],[[7,[[2,[[203,[-1,-2,-3]],[34,[-1]],[34,[-1]],5,5]],106]]],176,[[36,[-1]]],[]],[[[204,[-1,-3]],[44,[-3]],[34,[-1]]],[[7,[[2,[[203,[-1,-2,-3]],5]],106]]],176,[[36,[-1]]],[]],[[5,[168,[[99,[-1,-2]]]]],[[204,[-1,-3]]],176,[[36,[-1]]],[]],[[[206,[-1,-2,-3]]],5,176,[[36,[-1]]],[[196,[-1,-2]],[205,[-1]]]],[[[173,[-1,-2]]],5,3,[[36,[-1]]]],[[[203,[-1,-2,-3]],-4],7,[87,176],[[36,[-1]]],[[196,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[203,[-1,-2,-3]],[204,[-1,-3]],5,5,[44,[-1]],[44,[-1]]],[[7,[9,207]]],176,[[36,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-2,[33,[-1]],[27,[[54,[-1]]]]],[[7,[[2,[[39,[-1]],[38,[-1]],[38,[-1]],[38,[-1]]]],40]]],3,[[41,[-1]]]],[[-2,[33,[-1]],[27,[[54,[-1]]]]],[[7,[[2,[[39,[-1]],[38,[-1]],[38,[-1]],[38,[-1]]]],40]]],3,[[41,[-1]]]],[[[208,[-1,128]]],[[27,[[208,[-1,128]]]]],3],[[[208,[-1,128]]],[[27,[[208,[-1,128]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[208,[-1,128]],128],[[208,[-1,128]]],3],[209,209],[[[208,[-1,-2]]],[[208,[-1,-2]]],[4,3],[4,51]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[209,209],26],[[-1,-2],26,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[209,209],9],[[[208,[-1,-2]],[208,[-1,-2]]],9,[10,3],[10,51]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[54,[-1]],[33,[-1]],78,-2],[[79,[2]]],3,80],[[[53,[-1]],[33,[-1]],78,-2],[[79,[2]]],3,80],[[209,11],12],[[[208,[-1,-2]],11],12,[13,3],[13,51]],[127,[[54,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[209,-1],2,19],[[[208,[-1,-2]],-3],2,3,51,19],[209,[[27,[5]]]],[[-1,5],[[208,[-2,-1]]],51,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[208,[-1,128]]],9,3],[[[208,[-1,128]]],9,3],[[[53,[-1]]],9,3],[[[208,[-1,77]]],9,3],[-1,9,[]],[[[54,[-1]]],9,3],[[[208,[-1,128]]],9,3],[[[208,[-1,128]]],9,3],[209,9],[209,9],[[[208,[-1,-2]]],9,3,51],[[-1,128],9,[]],[[[54,[-1]],128],9,3],[-1,9,[]],[[[54,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[77,209],[[53,[-1]]],3],[5,209],[[77,209],[[208,[-1,77]]],3],[-1,[[208,[-2,-1]]],51,3],[[-1,5],[[208,[-2,-1]]],51,3],[209,[[27,[5]]]],[[209,209],[[27,[26]]]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[210,[-1,-2,-3]]],[[7,[[168,[[197,[-1,-3]]]],211]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[[[210,[-1,-2,-3]]],[[7,[[212,[-1]],211]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[[[210,[-1,-2,-3]]],[[7,[[213,[-1]],211]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[[[210,[-1,-2,-3]]],[[7,[[204,[-1,-3]],211]]],176,[[36,[-1]]],[]],[[[210,[-1,-2,-3]],-4],[[7,[-5,211]]],176,[[36,[-1]]],[[196,[-1,-2]]],48,[]],0,0,0,0,[-1,103,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[211,11],12],[[211,11],12],[214,211],[215,211],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[211,[[27,[103]]]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[210,[-1,-2,-3]]],[[34,[[210,[-1,-2,-3]]]]],176,[[36,[-1]]],[]],[216,216],[217,217],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[210,[-1,-2,-3]],71],[[79,[218]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[216]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[217]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[216,216],9],[[217,217],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[210,[-1,-2,-3]],11],12,[13,176],[13,[36,[-1]]],[13,[196,[-1,-2]]]],[[216,11],12],[[217,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[210,[-1,-2,-3]]],29,176,[[36,[-1]]],[[196,[-1,-2]]]],0,0,[[[210,[-1,-2,-3]]],[[168,[[99,[-1,-2]]]]],176,[[36,[-1]]],[[196,[-1,-2]]]],0,0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[168,[[99,[-1,-2]]]],9,216],[[210,[-1,-2,-3]]],176,[[36,[-1]]],[]],[[[210,[-1,-2,-3]],71],[[79,[218]]],176,[[36,[-1]]],[[196,[-1,-2]]]],[[]],[[]],[[]],0,0,[[[210,[-1,-2,-3]],5],[[210,[-1,-2,-3]]],176,[[36,[-1]]],[]],[[216,-1],7,28],[[217,-1],7,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[78,181],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],78],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[78,11],12],[[78,182],29],[-1,-1,[]],[78,182],[[78,[44,[182]]],[[62,[2]]]],[[],5],[[],78],[[],78],[[78,-1],182,[[185,[45]]]],[[78,[44,[-1]],9,9],[[62,[182]]],[[185,[45]]]],[[78,[44,[-1]],9],[[62,[182]]],[[185,[45]]]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[45,118],[[],118],[181,78],[[]],[78,[[98,[[97,[78]]]]]],[[78,45],[[27,[182]]]],[[78,182],[[62,[2]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[78,181],[[62,[2]]]],[45,118],[-1,-2,[],[]],0,0,0,0,[-1,103,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[33,[-1]],[54,[-1]]],[[7,[[54,[-1]],108]]],3],0,[[[33,[-1]],[54,[-1]]],[[7,[[2,[[54,[-1]],[54,[-1]]]],108]]],3],[[[33,[-1]],[54,[-1]]],[[7,[[54,[-1]],108]]],3],0,0,[108,108],[[[219,[-1]]],[[219,[-1]]],[4,3]],[[[220,[-1]]],[[220,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[33,[-1]],[54,[-1]]],[[54,[-1]]],3],0,[[[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],0,0,0,0,[[],[[33,[-1]]],3],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],0,[5,2],[5,2],[5,2],[5,2],0,0,0,0,0,[[[33,[-1]]],[[220,[-1]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[123,[-1]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[127]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[2,[[125,[-1]],[54,[-1]]]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[2,[[54,[-1]],[54,[-1]]]]]]],3],[[[33,[-1]],[53,[-1]]],[[27,[[60,[-1]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[2,[[54,[-1]],[54,[-1]],[54,[-1]]]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[118]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[34,[[54,[-1]]]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[118]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[1,[-1]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[2,[[54,[-1]],[54,[-1]]]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[29]]],3],[[[33,[-1]],[54,[-1]]],[[27,[118]]],3],[[[33,[-1]],[54,[-1]]],[[27,[118]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[2,[[54,[-1]],[54,[-1]]]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[122,[-1]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[15]]],3],[[[33,[-1]],[52,[-1]]],[[27,[[53,[-1]]]]],3],[[[33,[-1]],[61,[-1]]],[[27,[[54,[-1]]]]],3],[[[33,[-1]],11],12,[13,3]],[[108,11],12],[[108,11],12],[[[219,[-1]],11],12,[13,3]],[[[220,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[33,[-1]]],[[53,[-1]]],3],[[[33,[-1]]],[[53,[-1]]],3],[[[33,[-1]]],[[53,[-1]]],3],[[[33,[-1]]],[[53,[-1]]],3],[[[33,[-1]],[53,[-1]]],[[27,[[56,[-1]]]]],3],[[[33,[-1]],[122,[-1]]],[[27,[[56,[-1]]]]],3],[[[33,[-1]],128,-1],[[27,[[54,[-1]]]]],3],[[[33,[-1]],-2],[[27,[[54,[-1]]]]],3,[[117,[[1,[-1]]]]]],[[[33,[-1]],[54,[-1]]],[[27,[[61,[-1]]]]],3],[[[33,[-1]],[53,[-1]],[27,[[221,[-1]]]]],[[7,[[2,[[52,[-1]],[27,[[222,[-1]]]]]],108]]],3],[[[33,[-1]],[54,[-1]],[27,[[221,[-1]]]]],[[7,[[2,[[61,[-1]],[27,[[223,[-1]]]]]],108]]],3],0,0,[[[33,[-1]],[53,[-1]]],[[27,[[52,[-1]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[61,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[[33,[-1]],-1,[54,[-1]]],[[27,[[54,[-1]]]]],3],[[[33,[-1]],-1,[54,[-1]]],[[54,[-1]]],3],0,[[[33,[-1]]],2,3],0,0,[-1,[],[]],[[],5],[[],5],[[],5],[[],5],[[[33,[-1]],127],[[54,[-1]]],3],[[[33,[-1]],-1,[54,[-1]]],[[54,[-1]]],3],[[[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[33,[-1]]],[[53,[-1]]],3],[[[33,[-1]]],[[53,[-1]]],3],[[[33,[-1]]],[[53,[-1]]],3],[[[33,[-1]]],[[53,[-1]]],3],[[[33,[-1]],[54,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[33,[-1]],[44,[[54,[-1]]]]],[[54,[-1]]],3],[[[33,[-1]],128,-1],[[54,[-1]]],3],[[[33,[-1]],-1],[[54,[-1]]],3],[[[33,[-1]],-1],[[54,[-1]]],3],[[[33,[-1]],-1],[[54,[-1]]],3],[[[33,[-1]],-1],[[54,[-1]]],3],[[[33,[-1]],-2],[[54,[-1]]],3,[[117,[[1,[-1]]]]]],[[[33,[-1]],-1],[[54,[-1]]],3],[[[33,[-1]],-1],[[54,[-1]]],3],[[[33,[-1]],-1],[[54,[-1]]],3],[[[33,[-1]],-1],[[54,[-1]]],3],[[[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[33,[-1]],45],[[54,[-1]]],3],[[[33,[-1]],118],[[54,[-1]]],3],[[[33,[-1]],[44,[29]]],[[54,[-1]]],3],[[[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],[[[33,[-1]],9],[[54,[-1]]],3],[[[33,[-1]],[178,[-1]]],[[54,[-1]]],3],[[[33,[-1]],[122,[-1]]],[[54,[-1]]],3],[[[33,[-1]],14],[[54,[-1]]],3],[[[33,[-1]],15],[[54,[-1]]],3],[[[33,[-1]],[52,[-1]],[221,[-1]]],[[27,[[53,[-1]]]]],3],[[[33,[-1]],[61,[-1]],[221,[-1]]],[[27,[[54,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[33,[-1]],-2],[[54,[-1]]],3,[[185,[45]]]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,0,0,0,0,0,[[[33,[-1]],[44,[[54,[-1]]]]],[[54,[-1]]],3],0,[[[33,[-1]],[53,[-1]]],[[53,[-1]]],3],0,[[],[[33,[-1]]],3],[[[33,[-1]]],[[220,[-1]]],3],[[[33,[-1]]],[[54,[-1]]],3],0,[[[33,[-1]],-2],[[54,[-1]]],3,[[117,[[1,[-1]]]]]],0,0,0,0,0,[[[33,[-1]],[54,[-1]]],[[27,[[2,[-1,[54,[-1]]]]]]],3],0,[[[33,[-1]],[54,[-1]]],[[7,[[2,[-1,[54,[-1]]]],108]]],3],[[]],[[]],[[]],[[]],0,0,[[[219,[-1]]],[[54,[-1]]],3],[[[33,[-1]],[54,[-1]],[54,[-1]]],[[7,[9,108]]],3],0,0,[[[33,[-1]],45],[[7,[[54,[-1]],180]]],3],[[[33,[-1]],[98,[[97,[78]]]],179],[[7,[[2,[179,[54,[-1]],9]],180]]],3],[[[33,[-1]],[98,[[97,[78]]]],45],[[7,[[54,[-1]],180]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[54,[-1]]]]],3],0,[[[33,[-1]],[54,[-1]]],[[7,[[54,[-1]],108]]],3],[[[33,[-1]],45],[[54,[-1]]],3],0,[[[33,[-1]],[54,[-1]],[54,[-1]]],[[54,[-1]]],3],0,[[[33,[-1]]],[[54,[-1]]],3],0,[[[33,[-1]],-2],[[54,[-1]]],3,[[185,[45]]]],0,[[[33,[-1]]],[[54,[-1]]],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[33,[-1]],[53,[-1]]],[[27,[[222,[-1]]]]],3],[[[33,[-1]],[54,[-1]]],[[27,[[223,[-1]]]]],3],[[[33,[-1]],[54,[-1]]],[[7,[[2,[[221,[-1]],[61,[-1]]]],108]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[[[33,[-1]],14],[[54,[-1]]],3],0,[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[33,[-1]],45],[[54,[-1]]],3],[[[219,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1]],-1,-1],[[7,[[52,[-1]],108]]],3],0,[[[33,[-1]],-1,-1],[[7,[[61,[-1]],108]]],3],0,[[[219,[-1]]],[[61,[-1]]],3],0,0,0,0,0,[[]],[[118,118],[[27,[118]]]],[-1,-2,[],[]],[-1,-2,[],[]],[118,118],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[118]]],8],[[118,45],118],[118,[[27,[118]]]],[5,2],[[118,118],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[118,[44,[-1]]],118,[[185,[45]]]],[[118,11],12],[[118,11],12],[45,29],[118,29],[118,29],[45,118],[-1,-1,[]],[45,[[27,[118]]]],[[-1,-2],14,[16,17],18],[[118,118],9],[[118,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[118,9],[118,9],[118,9],[118,9],[127,9],[[[44,[-1]]],118,[[185,[45]]]],[[[34,[29]]],118],[[],[[7,[24,25]]]],[118,[[62,[45]]]],[[[44,[-1]],9],118,[[185,[45]]]],[[[34,[29]],9],118],[[118,118],[[27,[26]]]],[118,[[44,[29]]]],[[]],[118,9],[9,118],[[],118],[[],118],[[118,-1],7,28],[118,2],[[[44,[-1]]],118,[[185,[45]]]],[[[34,[29]]],118],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[178,[-1]]],[[178,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[178,[-1]],[178,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[178,[-1]],11],12,[13,3]],[[[178,[-1]],11],12,3],[-1,-1,[]],[[[178,[-1]]],192,3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[34,[-1]]],[]],[[],[[34,[129]]]],[[],[[34,[130]]]],[[],[[34,[45]]]],[[128,-2],[[39,[-1]]],3,[[41,[-1]]]],[[77,-2],[[39,[-1]]],3,[[41,[-1]]]],[[129,-2],[[39,[-1]]],3,[[41,[-1]]]],[[130,-2],[[39,[-1]]],3,[[41,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[128,128],[77,77],[129,129],[130,130],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[128]]],8],[-1,[[7,[77]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[129]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[130]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[128,128],9],[[77,77],9],[[129,129],9],[[130,130],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[128,11],12],[[128,11],12],[[77,11],12],[[77,11],12],[[129,11],12],[[129,11],12],[[130,11],12],[[130,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[-2]]],3,[]],[-1,[[27,[128]]],3],[-1,[[27,[77]]],3],[-1,[[27,[129]]],3],[-1,[[27,[130]]],3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[128,-1],2,19],[[77,-1],2,19],[[129,-1],2,19],[[130,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[128,9],[130,9],[[128,128],9],[128,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[129,129],[[27,[26]]]],[[130,130],[[27,[26]]]],[[]],[[]],[[]],[[]],[[128,-1],7,28],[[77,-1],7,28],[[129,-1],7,28],[[130,-1],7,28],[[-1,5],9,[]],[[129,5],9],[[130,5],9],[-1,45,[]],[129,45],[130,45],[-1,-2,[],3],[128,-1,3],[77,-1,3],[129,-1,3],[130,-1,[[224,[14]],225]],[-1,[],[]],[128],[77],[129],[130],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[131,[[7,[128]]]],[-1,[[7,[-2]]],[],[]],[131,[[7,[77]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[131,[[7,[129]]]],[131,[[7,[130]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[15,15],15],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[15]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[15,15],15],[5,2],[[15,15],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[15,11],12],[[15,11],12],[14,15],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[15,9],[[],[[7,[24,25]]]],[[15,15],15],[[15,15],[[27,[26]]]],[[]],[[15,15],15],[[15,-1],7,28],[[15,15],15],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,[[-1,[33,[-2]],78,-3],[[79,[2]]],[],[],80],[[-1,[33,[-2]],78],29,[],[]],[[-1,[33,[-2]]],29,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,126],[226,226],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[226,226],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[226,11],12],[[226,11],12],[-1,-1,[]],[[[44,[126]]],[[62,[226]]]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[44,[126]]],[[27,[5]]]],0,[226,126],[126,9],[126,9],[226,[[34,[126]]]],[-1,-2,[],[]],[-1,29,[]],[5,[[34,[126]]]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,103,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,227,21],[-1,227,21],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[227,11],12],[[227,11],12],[-1,-1,[]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],0,[-1,29,[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,45,[44,[45]],-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,45,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,45,[44,[45]],-1],7,229],[[228,5,-1],7,229],[[228,45,5,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,-1],7,229],[[228,45,-1],7,229],[5,2],[[228,11],12],[-1,-1,[]],[226,[[7,[-1,227]]],86],[226,228],[[],5],[-1,-2,[],[]],[228,9],[[],[[7,[24,25]]]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[230,7],[230,7],[230,7],[231,7],[232,7],[233,7],[233,7],[[234,11],12],[[230,11],12],[[231,11],12],[[232,11],12],[[233,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[234,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[[234,9],7],[[234,[44,[126]]],7],[[234,127],7],[[230,-1],[[7,[2]]],[87,17]],[[230,-1],[[7,[2]]],[87,17]],[[234,235],7],[[234,236],7],[[230,-1],[[7,[2]]],[87,17]],[[232,-1],[[7,[2]]],[87,17]],[[233,45,-1],[[7,[2]]],[87,17]],[[233,45,-1],[[7,[2]]],[87,17]],[[234,237],7],[[234,238],7],[[234,239],7],[[234,240],7],[[231,-1],[[7,[2]]],[87,17]],[[234,[27,[5]]],7],[[234,45,-1],7,[87,17]],[[234,45,132,45,-1],7,[87,17]],[234,7],[[234,[27,[5]]],7],[[234,-1],7,[87,17]],[[234,45],7],[[234,45,5],7],[[234,45,132,45,5],7],[[234,5],7],[[234,45,5],7],[[234,45,132,45,5],7],[[234,131],7],[[234,132],7],[[234,14],7],[[234,126],7],[234,7],[[234,45],7],[[234,45,132,45],7],[[231,-1],[[7,[2]]],[87,17]],[-1,[[7,[226,227]]],87],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[222,[-1]]],[[222,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[222,[-2]]]]],8,[86,3]],[5,2],[[[222,[-1]],[222,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[222,[-1]],11],12,[13,3]],[-1,-1,[]],[[[222,[-1]]],[[56,[-1]]],3],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[222,[-1]],-2],7,[87,3],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[222,[-1]],[100,[-1]]],[[52,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[223,[-1]]],[[223,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[223,[-2]]]]],8,[86,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[223,[-1]],[223,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[223,[-1]],11],12,[13,3]],[[[223,[-1]],11],12,3],[-1,-1,[]],[[[33,[-1]],[54,[-1]]],[[27,[[223,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[223,[-1]],-2],7,[87,3],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[223,[-1]],[100,[-1]]],[[61,[-1]]],3],0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[50,[-1,-2]]],[[50,[-1,-2]]],[4,51],[4,3]],[[-1,-2],2,[],[]],[[[50,[-1,-2]],[50,[-1,-2]]],26,51,3],[[-1,-2],26,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[50,[-2,-3]]]]],8,[86,51],[86,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[],[[50,[160,-1]]],3],[[[50,[-1,-2]],[50,[-1,-2]]],9,[10,51],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[50,[-1,-2]],11],12,[51,21],3],[[[50,[-1,-2]],11],12,[13,51],[13,3]],[-1,-1,[]],[45,[[7,[[50,[-1,-2]],241]]],51,3],[45,[[7,[[61,[-1]],108]]],3],[45,[[7,[[50,[128,-1]],108]]],3],[[-1,-2],[[50,[-1,-2]]],51,3],[[-1,-2],14,[16,17],18],[[[50,[-1,-2]],-3],2,51,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[50,[-1,-2]]],[[56,[-2]]],51,3],[[],[[7,[24,25]]]],[[[50,[-1,-2]],[50,[-1,-2]]],[[27,[26]]],51,3],[[[50,[-1,-2]]],[[2,[-2,-2]]],51,3],[[]],[[[50,[-1,-2]],-3],7,[87,51],[87,3],28],[[[50,[-1,-2]]],-1,51,3],[[[50,[-1,-2]]],-2,51,3],[[[50,[-1,-2]]],29,51,3],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[[50,[-1,-2]]],-2,51,3],[-1,-2,[],[]],0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[221,[-1]]],[[221,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,[[],[[221,[-1]]],[92,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[221,[-2]]]]],8,[86,3]],[5,2],[[[221,[-1]],[221,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[221,[-1]],11],12,[13,3]],[-1,-1,[]],[[[221,[-1]],[52,[-1]]],[[27,[[222,[-1]]]]],3],[[[221,[-1]],[61,[-1]]],[[27,[[223,[-1]]]]],3],[[[61,[-1]]],[[27,[[223,[-1]]]]],3],[[],5],[[[221,[-1]],[61,[-1]],[27,[[223,[-1]]]]],[[27,[[27,[[223,[-1]]]]]]],3],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[221,[-1]]],3],[[[33,[-1]],[54,[-1]]],[[2,[[221,[-1]],[27,[[61,[-1]]]]]]],3],[[[221,[-1]],[100,[-1]]],[[61,[-1]]],3],[[]],[[[221,[-1]],45,[100,[-1]]],[[2,[[61,[-1]],[223,[-1]]]]],3],[[[221,[-1]],118,[100,[-1]]],[[2,[[61,[-1]],[223,[-1]]]]],3],[[[221,[-1]],-2],7,[87,3],28],[-1,-2,[],[]],[[[221,[-1]]],[[33,[-1]]],3],[[[221,[-1]],[61,[-1]]],[[7,[[2,[[33,[-1]],[54,[-1]]]],108]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Num",0],[15,"tuple"],[8,"LurkField",1508],[8,"Clone",4814],[15,"usize"],[3,"With",4815],[4,"Result",4816],[8,"Deserializer",4817],[15,"bool"],[8,"PartialEq",4818],[3,"Formatter",4819],[6,"Result",4819],[8,"Debug",4819],[15,"u64"],[4,"UInt",4257],[8,"Hash",4820],[8,"Sized",4821],[8,"BuildHasher",4820],[8,"Hasher",4820],[3,"IndentedSection",4822],[8,"Display",4819],[8,"Send",4821],[8,"Sync",4821],[3,"Layout",4823],[3,"LayoutError",4823],[4,"Ordering",4818],[4,"Option",4824],[8,"Serializer",4825],[3,"String",4826],[3,"TypeId",4827],[3,"Box",4828],[8,"Any",4827],[3,"Store",3643],[3,"Vec",4829],[3,"CircuitFrame",104],[8,"Coprocessor",671],[3,"GlobalAllocations",142],[3,"AllocatedPtr",229],[3,"AllocatedNum",4830],[4,"SynthesisError",4831],[8,"ConstraintSystem",4831],[3,"Store",2711],[4,"Ptr",2655],[15,"slice"],[15,"str"],[4,"Boolean",4832],[8,"PrimeField",4833],[8,"FnOnce",4834],[3,"AllocatedContPtr",229],[3,"ZPtr",4717],[8,"Tag",4015],[6,"ZContPtr",4717],[6,"ContPtr",3356],[6,"Ptr",3356],[8,"IntoHashComponents",1616],[15,"array"],[8,"AsAllocatedHashComponents",229],[4,"ConsName",1754],[4,"ContName",1754],[4,"Continuation",589],[6,"ZExprPtr",4717],[6,"Result",4835],[4,"Backend",346],[3,"PossibleValue",4836],[3,"Utf8PathBuf",4837],[3,"HashMap",4838],[3,"CliSettings",382],[4,"ConfigError",4839],[6,"Scalar",4840],[3,"Repl",415],[3,"Utf8Path",4837],[3,"Settings",437],[3,"PerfConfig",437],[3,"ParallelConfig",437],[3,"WitnessGeneration",437],[4,"Flow",437],[4,"ContTag",4015],[3,"State",3605],[6,"Result",4841],[8,"Write",4842],[3,"GlobalAllocator",2413],[3,"CircomCoprocessor",687],[8,"CircomGadget",137],[3,"Sha256Coprocessor",729],[4,"Sha256Coproc",729],[8,"Deserialize",4817],[8,"Serialize",4825],[4,"TrieCoproc",796],[3,"NewCoprocessor",796],[3,"LookupCoprocessor",796],[3,"InsertCoprocessor",796],[8,"Default",4843],[3,"Trie",796],[4,"Error",796],[3,"LookupProof",796],[3,"InsertProof",796],[3,"RefCell",4844],[3,"Rc",4845],[3,"Lang",1299],[3,"PoseidonCache",1616],[3,"InversePoseidonCache",1616],[3,"HashConstants",1616],[8,"Error",4846],[4,"ReductionError",1028],[4,"LurkError",1028],[4,"ProofError",1028],[4,"NovaError",4847],[3,"Error",3643],[3,"IO",1123],[4,"Meta",1123],[3,"Frame",1123],[8,"Copy",4821],[4,"Status",1123],[3,"Witness",1123],[3,"Error",4819],[3,"Binding",1299],[8,"Into",4848],[3,"Symbol",3905],[4,"Coproc",1299],[3,"DummyCoprocessor",1299],[3,"IndexMap",4849],[3,"Thunk",1421],[4,"Expression",1421],[4,"LanguageField",1508],[3,"FWrap",1508],[15,"u8"],[15,"char"],[4,"ExprTag",4015],[4,"Op1",4015],[4,"Op2",4015],[15,"u16"],[15,"u32"],[15,"u128"],[6,"U3",4850],[3,"PoseidonConstants",4851],[6,"U4",4850],[6,"U6",4850],[6,"U8",4850],[4,"HashConst",1616],[4,"HashArity",1616],[3,"HashWitness",1754],[8,"HashName",1754],[8,"Eq",4818],[6,"ConsStub",1754],[3,"Cons",1754],[4,"Stub",1754],[6,"ConsWitness",1754],[3,"ScalarCons",1754],[3,"ScalarCont",1754],[3,"Cont",1754],[3,"CircuitHashWitness",1754],[8,"ContentAddressed",1754],[6,"ContStub",1754],[6,"ContWitness",1754],[6,"Preimage",1754],[3,"Func",2130],[3,"Hints",2517],[3,"Frame",2517],[3,"Var",2130],[4,"Tag",2130],[4,"Lit",2130],[3,"Block",2130],[4,"Ctrl",2130],[4,"Op",2130],[6,"AString",2130],[4,"AllocatedVal",2413],[3,"SlotWitness",2413],[3,"Arc",4852],[3,"SlotsAllocations",2413],[6,"ZPtr",2655],[4,"Val",2517],[3,"MultiFrame",2607],[4,"FoldingConfig",3247],[3,"WitnessCS",4853],[8,"Fn",4834],[8,"CurveCycleEquipped",3151],[6,"C2",3247],[4,"Syntax",3974],[6,"Span",2821],[4,"Error",2821],[3,"Package",2793],[6,"SymbolRef",2793],[4,"LitBase",2862],[6,"ParseResult",2821],[8,"AsRef",4848],[3,"ParseError",2910],[8,"InputLength",4854],[8,"AsBytes",4854],[4,"ErrorKind",4855],[4,"ParseErrorKind",2910],[6,"IResult",4856],[4,"Pos",2994],[4,"StringFragment",3034],[3,"TestConstraintSystem",4857],[6,"C2",3151],[8,"MultiFrameTrait",3094],[3,"PublicParams",3151],[8,"StepCircuit",4858],[4,"Proof",3151],[3,"NovaProver",3151],[6,"G1",3151],[3,"CircuitDigests",4859],[4,"Proof",3247],[3,"PublicParams",3247],[8,"StepCircuit",4860],[3,"SuperNovaProver",3247],[4,"SuperNovaError",4861],[3,"GPtr",3356],[4,"RawPtr",3356],[3,"Instance",3504],[4,"Error",3473],[6,"SuperNovaAuxParams",3247],[6,"NovaCircuitShape",3151],[3,"Error",4862],[3,"Error",4841],[4,"Kind",3504],[3,"Metadata",3504],[3,"File",4863],[3,"ConstantPtrs",3643],[3,"NamedConstants",3643],[3,"ZStore",4769],[4,"ZCont",4583],[4,"ZExpr",4664],[8,"From",4848],[8,"Field",4833],[4,"ZData",4304],[4,"SerdeError",4353],[3,"Deserializer",4386],[8,"Visitor",4817],[3,"SerializeCell",4438],[3,"SerializeMap",4438],[3,"SerializeTupleVariant",4438],[3,"StructSerializer",4438],[3,"Serializer",4438],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"Error",4835],[8,"ToInputs",99],[13,"Let",639],[13,"LetRec",639],[13,"Call0",639],[13,"Call",639],[13,"Call2",639],[13,"Tail",639],[13,"Lookup",639],[13,"Unop",639],[13,"Binop",639],[13,"Binop2",639],[13,"If",639],[13,"Emit",639],[8,"CoCircuit",671],[6,"ChildMap",796],[6,"ConsCircuitWitness",1754],[6,"ContCircuitWitness",1754],[8,"CAddr",1754],[13,"Pos",3028],[8,"EvaluationStore",3094],[8,"FrameLike",3094],[8,"Prover",3094],[8,"CEKState",3094],[8,"Provable",3094],[6,"SuperNovaPublicParams",3247],[8,"TypePredicates",3356],[8,"Op",4015],[8,"Write",4300],[13,"Let",4632],[13,"LetRec",4632],[13,"Call0",4632],[13,"Call",4632],[13,"Call2",4632],[13,"Tail",4632],[13,"Lookup",4632],[13,"Unop",4632],[13,"Binop",4632],[13,"Binop2",4632],[13,"If",4632],[13,"Emit",4632],[13,"Fun",4714]],"b":[[34,"impl-Display-for-Num%3CF%3E"],[35,"impl-Debug-for-Num%3CF%3E"],[36,"impl-From%3Cu64%3E-for-Num%3CF%3E"],[37,"impl-From%3CUInt%3E-for-Num%3CF%3E"],[363,"impl-Display-for-Backend"],[364,"impl-Debug-for-Backend"],[620,"impl-Write%3CF%3E-for-Continuation%3CF%3E"],[621,"impl-Debug-for-Continuation%3CF%3E"],[900,"impl-From%3CInsertCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[901,"impl-From%3CNewCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[903,"impl-From%3CLookupCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[1063,"impl-Debug-for-ProofError"],[1064,"impl-Display-for-ProofError"],[1065,"impl-Display-for-ReductionError"],[1066,"impl-Debug-for-ReductionError"],[1067,"impl-Debug-for-LurkError%3CF%3E"],[1068,"impl-Display-for-LurkError%3CF%3E"],[1069,"impl-From%3CSynthesisError%3E-for-ProofError"],[1070,"impl-From%3CReductionError%3E-for-ProofError"],[1071,"impl-From%3CNovaError%3E-for-ProofError"],[1072,"impl-From%3CError%3E-for-ProofError"],[1207,"impl-Display-for-IO%3CF%3E"],[1208,"impl-Debug-for-IO%3CF%3E"],[1209,"impl-Write%3CF%3E-for-IO%3CF%3E"],[1467,"impl-Write%3CF%3E-for-Expression%3CF%3E"],[1468,"impl-Debug-for-Expression%3CF%3E"],[1550,"impl-Display-for-LanguageField"],[1551,"impl-Debug-for-LanguageField"],[2282,"impl-Debug-for-Var"],[2283,"impl-Display-for-Var"],[2284,"impl-Debug-for-Tag"],[2285,"impl-Display-for-Tag"],[2350,"impl-Tag-for-Tag"],[2351,"impl-Tag"],[2608,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2609,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2643,"impl-Circuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2644,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2645,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2751,"impl-EvaluationStore-for-Store%3CF%3E"],[2752,"impl-Store%3CF%3E"],[2778,"impl-Store%3CF%3E"],[2779,"impl-EvaluationStore-for-Store%3CF%3E"],[2780,"impl-Store%3CF%3E"],[2781,"impl-EvaluationStore-for-Store%3CF%3E"],[2841,"impl-Display-for-Error"],[2842,"impl-Debug-for-Error"],[2951,"impl-Debug-for-ParseErrorKind%3CF%3E"],[2952,"impl-Display-for-ParseErrorKind%3CF%3E"],[2953,"impl-Debug-for-ParseError%3CI,+F%3E"],[2954,"impl-Display-for-ParseError%3CLocatedSpan%3C%26str%3E,+F%3E"],[3484,"impl-Display-for-Error"],[3485,"impl-Debug-for-Error"],[3486,"impl-From%3CError%3E-for-Error"],[3487,"impl-From%3CError%3E-for-Error"],[3730,"impl-Display-for-Error"],[3731,"impl-Debug-for-Error"],[3929,"impl-Display-for-Symbol"],[3930,"impl-Debug-for-Symbol"],[3997,"impl-Debug-for-Syntax%3CF%3E"],[3998,"impl-Display-for-Syntax%3CF%3E"],[4146,"impl-Display-for-ExprTag"],[4147,"impl-Debug-for-ExprTag"],[4148,"impl-Display-for-ContTag"],[4149,"impl-Debug-for-ContTag"],[4150,"impl-Display-for-Op1"],[4151,"impl-Debug-for-Op1"],[4152,"impl-Display-for-Op2"],[4153,"impl-Debug-for-Op2"],[4276,"impl-Debug-for-UInt"],[4277,"impl-Display-for-UInt"],[4322,"impl-Debug-for-ZData"],[4323,"impl-Display-for-ZData"],[4359,"impl-Error-for-SerdeError"],[4360,"impl-Error-for-SerdeError"],[4366,"impl-Debug-for-SerdeError"],[4367,"impl-Display-for-SerdeError"],[4473,"impl-SerializeTupleStruct-for-SerializeCell"],[4474,"impl-SerializeTuple-for-SerializeCell"],[4475,"impl-SerializeSeq-for-SerializeCell"],[4478,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4479,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4514,"impl-SerializeSeq-for-SerializeCell"],[4515,"impl-SerializeTuple-for-SerializeCell"],[4520,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4521,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4694,"impl-Debug-for-ZExpr%3CF%3E"],[4695,"impl-Display-for-ZExpr%3CF%3E"],[4738,"impl-Display-for-ZPtr%3CE,+F%3E"],[4739,"impl-Debug-for-ZPtr%3CE,+F%3E"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"MetricsSinkHandle",0],[15,"tuple"],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
