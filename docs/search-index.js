var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","drop","from","handle_meta","handle_non_meta","init","into","name","new","process_line","prompt","try_from","try_into","type_id","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[0,[[]],[[]],[[],1],[2],[2],[2],[[]],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]],[0,[[9,[8]],10]]],11],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]]],11],[[],2],[[]],[[],12],[[[6,[3]],2,[13,[1]],[14,[3,[4,[3]]]]],[[5,[3,[4,[3]]]]]],[[[5,[3,[4,[3]]]],12],12],[[[5,[3,[4,[3]]]]],12],[[],15],[[],15],[[],16],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[6,"Scalar"],[4,"Coproc"],[3,"ClutchState"],[3,"Store"],[3,"Ptr"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[3,"String"],[4,"Option"],[3,"Lang"],[4,"Result"],[3,"TypeId"]]},\
"fcomm":{"doc":"","t":"DEDNDNDNDNDNFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMLLLLLLLLLLLLLLLLLLLLLMLMFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLFMLLLLLLLLLMMMMMFLFFMMMLMFFFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLL","n":["Cli","Command","Commit","Commit","Eval","Eval","Open","Open","Prove","Prove","Verify","Verify","_lurk_function","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim","command","commit","commitment","commitment","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","error","eval","eval_input","expression","expression","expression","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","function","function","has_subcommand","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into_app","into_app_for_update","limit","lurk","lurk","lurk","lurk","main","open","opening_request","proof","proof","proof","proof","prove","quote_input","read_eval_from_path","read_from_path","read_no_eval_from_path","reduction_count","reduction_count","request","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"fcomm"]],"d":["Functional commitments","","","Creates a hiding commitment to a function","","Evaluates an expression","","Creates an opening","","Generates a proof for the given expression","","Verifies a proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Chain commitment openings. Opening includes commitment to …","Wrap evaluation result in a claim","Path to claim to prove","","","Path to functional commitment","Optional commitment value (hex string). Function will be …","","","","","","","","","","","","","","","","","","","","","","Exit with error on failed verification","","Evaluate inputs before passing to function (outside the …","","Path to expression source","Path to expression source","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Path to function","Optional path to function used if commitment is not …","","","","","","","","","","Path to function input","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Iteration limit","","Function is lurk source.","","","","","","","Path to proof output if prove requested","Path to proof output","Path to proof input","","Quote input before passing to function when opening. …","","","","Number of circuit reductions per step","Number of circuit reductions per step","Optional path to OpeningRequest – which subsumes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Be verbose","","","","","","","",""],"i":[0,0,0,21,0,21,0,21,0,21,0,21,0,18,12,22,14,23,24,18,12,22,14,23,24,21,21,18,21,12,22,14,23,24,18,21,12,22,14,23,24,22,14,23,18,12,12,22,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,14,18,0,14,23,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,12,22,21,18,21,12,22,14,23,24,0,22,18,21,12,22,14,23,24,18,18,18,12,22,14,23,0,22,0,0,22,23,24,23,22,0,0,0,22,23,22,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,24,18,21,12,22,14,23,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]],[5,[4]],6,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[9]]]],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[12,6,[8,[13,[7,[13]]]]]],0,0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],0,[[14,6,[8,[13,[7,[13]]]]]],0,[[[3,[[0,[1,2,15]]]],[5,[4]],16,6,[8,[[0,[1,2,15]],[7,[[0,[1,2,15]]]]]]],[[10,[[17,[[0,[1,2,15]]]],9]]]],0,0,[[18,19],20],[[21,19],20],[[12,19],20],[[22,19],20],[[14,19],20],[[23,19],20],[[24,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,[[10,[18,26]]]],[25,[[10,[21,26]]]],[25,[[10,[12,26]]]],[25,[[10,[22,26]]]],[25,[[10,[14,26]]]],[25,[[10,[23,26]]]],[25,[[10,[24,26]]]],[25,[[10,[18,26]]]],[25,[[10,[21,26]]]],[25,[[10,[12,26]]]],[25,[[10,[22,26]]]],[25,[[10,[14,26]]]],[25,[[10,[23,26]]]],[25,[[10,[24,26]]]],0,0,[27,16],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[3,[[0,[1,2]]]],[5,[4]],16,6,16,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[[17,[[0,[1,2]]]],9]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],0,0,0,0,0,[[]],[[22,6,16,[8,[13,[7,[13]]]]]],[[[5,[4]]],[[10,[[28,[[0,[1,2,15]]]],9]]]],[[[29,[[5,[4]]]]],[[10,[[31,[[0,[2,30,1]]]],9]]]],0,0,0,[[23,6,[8,[13,[7,[13]]]]]],0,[[[3,[[0,[1,2]]]],[5,[4]],6,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[9]]]],[[[3,[[0,[1,2]]]],[5,[4]]],[[10,[[17,[[0,[1,2]]]],9]]]],[[[3,[[0,[1,2]]]],[5,[4]]],[[10,[9]]]],0,0,0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[18,25],[[10,[26]]]],[[21,25],[[10,[26]]]],[[12,25],[[10,[26]]]],[[22,25],[[10,[26]]]],[[14,25],[[10,[26]]]],[[23,25],[[10,[26]]]],[[24,25],[[10,[26]]]],[[18,25],[[10,[26]]]],[[21,25],[[10,[26]]]],[[12,25],[[10,[26]]]],[[22,25],[[10,[26]]]],[[14,25],[[10,[26]]]],[[23,25],[[10,[26]]]],[[24,25],[[10,[26]]]],0,[[24,16,[8,[13,[7,[13]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[8,"LurkField"],[8,"Serialize"],[3,"Store"],[3,"Path"],[8,"AsRef"],[15,"usize"],[4,"Coproc"],[3,"Lang"],[4,"Error"],[4,"Result"],[6,"Command"],[3,"Commit"],[6,"S1"],[3,"Eval"],[8,"DeserializeOwned"],[15,"bool"],[3,"Ptr"],[3,"Cli"],[3,"Formatter"],[6,"Result"],[4,"Command"],[3,"Open"],[3,"Prove"],[3,"Verify"],[3,"ArgMatches"],[3,"Error"],[15,"str"],[3,"OpeningRequest"],[4,"Option"],[8,"Deserialize"],[3,"Proof"],[3,"TypeId"]]},\
"lurk":{"doc":"","t":"ENCRNCLLLLAOALLAALLLLLLLLAAAALLLLLLLALALLLLLOAOOOOOLLLOALAAALLALAOLOAOAALLLLLAOOOLLACACCCDLLLLLLLLLLLLLLLLLLLLLLLLLLLLIAAKKDDLLLLLLLLLLLMLLLLLLLMLLLLLLLMMLLMLMMLLLLLMMLLLLLLLLLLLLLLMAADMMLLMMMMLLMMMLLLMMMMMMMLMMLLMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMLLLMMLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILKLLKLAGEGNDDNDDNNDGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIDDDDNENDMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLFMLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLKLLLKLLLKLLLAKLLLLLMLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNDNNLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNSDEINNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLNNNNNDEGGDEGGNNNNNNNNNNNNNNNNNNIDNNNNNRRNNNNNNNENNNNNLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGNNNNDEENNNNNNNNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLEHNGGNALLLLLLLALLLLLALAALLLLLLNNNENLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLNNNNNNDENNLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMLLLFLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLFFFFFFFFLLLLLFFFFFFFFFFFFFFFFFFFIIIQLLAKLLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLMLLLLLLLLLLLLLLLLLGGNGGGGDGEDNGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLDNNNDEIMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLMMMMLLLLLLLLLLLLLLLDEDDGRNDNDINEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMMFMLLLLMMMLLLLLLFKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLNNNENNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLMLLLLLLKLKLLLLLMMKLKLLLKLKLFFFLLLLLLLLLLDDDDMMMMLLLLLLLLMMMLMLLMMLLLLLLMMMLMLMMMLMMLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLMMLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMMMMMMMLMLLMLLLLMLMMMMMLMLMMLLLMMLLLMLLMLMLMLMLLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLMLMLNNNNNNNNNNRNNNNNRRNNNENNNNNNNNNNNNNNRRNNDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLNNNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLNNELLLLLLLLLLLLLLLLCLLLALLLLLLLCLLLLAAAANENLLLLALLLLLLCLLLALCLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","borrow","borrow_mut","cache_map","char","circuit","clone","clone_into","cont","coprocessor","deref","deref_mut","deserialize","div_assign","drop","eq","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","get_hash","hash","hash","hash_witness","init","into","into_scalar","is_negative","is_zero","keyword","lem","lem","lem_code","lemop","list","lurksym","most_negative","most_positive","mul_assign","num","parser","partial_cmp","proof","ptr","public_parameters","read_from_path","read_from_stdin","repl","serialize","store","str","sub_assign","sym","symbol","symbol","syntax","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","var","vars","vzip","write_to_path","writer","z_cont","z_data","z_expr","z_ptr","z_store","CacheMap","as_mut","borrow","borrow_mut","default","deref","deref_mut","drop","fmt","from","get","get_copy","get_copy_or_insert","get_copy_or_insert_with","get_copy_or_insert_with_key","init","insert","insert_with","insert_with_key","into","is_empty","keys_cloned","len","map_get","new","try_from","try_into","type_id","vzip","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","blank","blank","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","deref","deref","deref_mut","deref_mut","drop","drop","fmt","frames","from","from","from_frame","from_frames","get_store","init","init","input","input","into","into","lang","output","output","output","precedes","precedes","public_input_size","public_inputs","reduction_count","store","store","synthesize","synthesize","synthesize_frames","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_groth16_proof","vzip","vzip","witness","data","pointer","GlobalAllocations","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","from","fun_tag","if_cont_tag","init","into","lambda_sym","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","power2_32_num","power2_64_num","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","pick","pick","pick_const","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","z_ptr","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","to_owned","try_from","try_into","type_id","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","eval_arity","evaluate","has_circuit","simple_evaluate","synthesize","trie","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","Trie","TrieCoproc","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","leaves","lookup","new","new_with_capacity","prove_insert","prove_lookup","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","into","into","into","provide","provide","provide","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_frames","get_frames","i","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_terminal","is_terminal","is_terminal","iter","lang","log","log","log","maybe_emitted_expression","new","next","output","precedes","read_from_path","read_from_stdin","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","witness","write_to_path","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","from","from","from","from","from","from","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","lookup","max_coprocessor_arity","new","new","new_with_bindings","read_from_path","read_from_path","read_from_stdin","read_from_stdin","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_path","write_to_path","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","as_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_keyword_sym","is_list","is_null","is_num","is_str","is_sym","is_thunk","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","BLS12_381","FIELD","FWrap","LanguageField","LurkField","Pallas","Vesta","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","equivalent","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","hex_digits","init","init","into","into","is_negative","most_negative","most_positive","partial_cmp","read_from_path","read_from_stdin","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_path","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","clone","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","ClosedEnv","Cons","ConsName","ConsStub","ConsWitness","Cont","ContName","ContStub","ContWitness","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cons","cons","cons","cons_named","cons_named","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","index","index","index","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","length","new_blank","new_dummy","new_from_stub","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","AString","AVec","Hash2","Hash3","Hash4","Hide","LEM","LEMCTL","LEMOP","MatchSymbol","MatchTag","Null","Open","Return","Seq","Unhash2","Unhash3","Unhash4","Var","assert_all_paths_taken","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone_into","clone_into","clone_into","count_slots","deconflict","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","from","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","init","init","init","init","intern_matched_symbols","intern_matched_symbols","into","into","into","into","name","new","num_constraints","num_paths","num_paths_taken","synthesize","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Error","LURK_WHITESPACE","NoInput","ParseResult","Span","Syntax","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","error","fmt","fmt","from","init","into","position","provide","string","syntax","to_owned","to_string","try_from","try_into","type_id","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","drop","encode","eq","equivalent","equivalent","fmt","from","init","into","is_digit","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","radix","to_owned","try_from","try_into","type_id","vzip","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","init","init","input","into","into","is_nom_err","map_parse_err","new","opt","or","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","from","from_upto","init","into","range","to_owned","try_from","try_into","type_id","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","from","init","into","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","to_owned","try_from","try_into","type_id","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limbs","parse_syntax","parse_uint","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","lang","new","outer_prove","proof","proof_count","prove","read_from_path","read_from_stdin","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_groth16_proof","vzip","vzip","vzip","write_to_path","C1","C2","Compressed","EE1","EE2","G1","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","S1","S2","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","evaluate_and_prove","fmt","from","from","from","get_evaluation_frames","init","init","init","into","into","into","lang","new","prove","prove_recursively","public_params","read_from_path","read_from_path","read_from_stdin","read_from_stdin","reduction_count","serialize","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","write_to_path","write_to_path","ContPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_hash","get_hash","get_hash","hash","hash","hash","idx","index","index","init","init","init","into","into","into","is_atom","is_cons","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","new","new","null","null","opaque","opaque","opaque_idx","partial_cmp","raw","raw","tag","tag","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","FileStore","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_params","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","JsonError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","from","from","init","into","provide","source","to_string","try_from","try_into","type_id","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","drop","drop","env","eval_expr","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","limit","name","name","new","new","new","new","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ConstantPtrs","Error","NamedConstants","Store","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_syntax","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_begin","get_constants","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_lurk_sym","get_maybe_opaque","get_nil","get_num","get_opaque_ptr","get_quote","get_sym","get_t","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_strnil","intern_symbol","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","lurk_sym","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","poseidon_cache","product","provide","ptr","ptr_eq","quote","quotient","read","read_maybe_meta","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","Atom","Begin","Car","Cdr","Char","Comm","Commit","Cons","CurrentEnv","Dummy","ESCAPE_CHARS","Emit","Eq","Eval","Hide","If","KEYWORD_MARKER","LURK_SYMBOLS","Lambda","Let","Letrec","LurkSym","Nil","Num","OpAdd","OpDiv","OpEql","OpGte","OpGth","OpLte","OpLth","OpMod","OpMul","OpSub","Open","Quote","SYM_MARKER","SYM_SEPARATOR","Secret","Strcons","Symbol","T","U64","arbitrary_with","arbitrary_with","as_child","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","direct_child","direct_parent","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","escape_symbol_element","extend","fmt","fmt","fmt","fmt","from","from","from","from","get_hash","has_parent","hash","init","init","into","into","is_keyword","is_lurk_sym","is_root","is_whitespace","keyword","lurk_sym","lurk_syms","new","nil","partial_cmp","path","print_path","print_raw","prints_as_absolute","read_from_path","read_from_stdin","root","serialize","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_path","Char","Improper","Keyword","List","LurkSym","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","fmt","from","init","into","nil","to_owned","to_string","try_from","try_into","type_id","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","partial_cmp","partial_cmp","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","equivalent","equivalent","fmt","fmt","from","from","init","into","is_zero","mul","partial_cmp","read_from_path","read_from_stdin","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","vzip","write_to_path","Write","fmt","fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","init","into","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","borrow","borrow_mut","custom","custom","de","deref","deref_mut","drop","fmt","fmt","from","from_z_data","init","into","provide","ser","to_string","to_z_data","try_from","try_into","type_id","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","try_from","try_into","type_id","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","fmt","from","hash_components","init","into","read_from_path","read_from_stdin","serialize","to_owned","try_from","try_into","type_id","vzip","write_to_path","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","fmt","fmt","from","from_ptr","init","into","read_from_path","read_from_stdin","serialize","to_owned","to_string","try_from","try_into","type_id","vzip","write_to_path","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","init","into","into_hash_components","partial_cmp","read_from_path","read_from_stdin","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","value","vzip","write_to_path","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","drop","eq","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","new","new_with_expr","nil_z_ptr","put_string","put_symbol","read_from_path","read_from_stdin","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","vzip","write_to_path"],"q":[[0,"lurk"],[89,"lurk::cache_map"],[118,"lurk::circuit"],[123,"lurk::circuit::circuit_frame"],[182,"lurk::circuit::gadgets"],[184,"lurk::circuit::gadgets::data"],[262,"lurk::circuit::gadgets::pointer"],[358,"lurk::cont"],[400,"lurk::cont::Continuation"],[432,"lurk::coprocessor"],[441,"lurk::coprocessor::trie"],[616,"lurk::error"],[687,"lurk::eval"],[851,"lurk::eval::lang"],[948,"lurk::expr"],[1020,"lurk::field"],[1094,"lurk::hash"],[1194,"lurk::hash_witness"],[1410,"lurk::lem"],[1519,"lurk::parser"],[1549,"lurk::parser::base"],[1589,"lurk::parser::error"],[1650,"lurk::parser::position"],[1675,"lurk::parser::position::Pos"],[1681,"lurk::parser::string"],[1712,"lurk::parser::syntax"],[1731,"lurk::proof"],[1750,"lurk::proof::groth16"],[1810,"lurk::proof::nova"],[1883,"lurk::ptr"],[1991,"lurk::public_parameters"],[2480,"lurk::public_parameters::error"],[2518,"lurk::repl"],[2576,"lurk::store"],[2822,"lurk::symbol"],[2939,"lurk::syntax"],[2973,"lurk::tag"],[3189,"lurk::uint"],[3226,"lurk::writer"],[3229,"lurk::z_data"],[3269,"lurk::z_data::serde"],[3294,"lurk::z_data::serde::de"],[3340,"lurk::z_data::serde::ser"],[3450,"lurk::z_data::z_cont"],[3494,"lurk::z_data::z_cont::ZCont"],[3526,"lurk::z_data::z_expr"],[3569,"lurk::z_data::z_expr::ZExpr"],[3572,"lurk::z_data::z_ptr"],[3615,"lurk::z_data::z_store"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","","Returns the argument unchanged.","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","Lurk Evaluation Model (LEM)","","","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","This module offers a connection the the backend proving …","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","<code>CacheMap</code> is an adaptation of <code>FrozenMap</code>: …","Get mutable access to the underlying <code>HashMap</code>.","","","","","","","","Returns the argument unchanged.","Returns a reference to the value corresponding to the key.","Returns a copy of the value corresponding to the key.","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","If the key exists in the map, returns a reference to the …","Calls <code>U::from(self)</code>.","Examples","","Examples","Applies a function to the owner of the value corresponding …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","The <code>trie</code> module implements a Trie with the following …","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","Returns a slice of preimages, corresponding to the path. …","","","","","","","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Hash2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Hash3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Hash4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","A <code>LEM</code> has the name for the inputs and its characteristic …","The basic control nodes for LEM logical paths.","The atomic operations of LEMs.","<code>MatchSymbol(x, cases, def)</code> checks whether <code>x</code> matches some …","<code>MatchTag(x, cases)</code> performs a match on the tag of <code>x</code>, …","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Return(rets)</code> sets the output to <code>rets</code>","<code>Seq(ops, lem)</code> executes <code>ops: Vec&lt;LEMOP&gt;</code> then <code>lem: LEM</code> …","<code>Unhash2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Unhash3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Unhash4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","Named references to be bound to <code>Ptr</code>s.","Asserts that all paths were visited by a set of frames. …","","","","","","","","","Performs the static checks described in <code>LEM</code>’s docstring.","","","","","","","","Removes conflicting names in parallel logical LEM paths. …","","","","","","","","","","","","","","","","","","","","","","Calls <code>run</code> until the stop contidion is satisfied, using the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Intern all symbols that are matched on <code>MatchSymbol</code>s","Intern all symbol paths that are matched on <code>MatchSymPath</code>s","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Instantiates a <code>LEM</code> with the appropriate transformations to …","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>LEMOP</code>","Computes the number of paths taken within a <code>LEMOP</code> given a …","Create R1CS constraints for LEM given an evaluation frame. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Generates an outer Groth16 proof using the given …","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","","","The number of reductions used in the proof.","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","","Type alias for a MultiFrame with S1 field elements.","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Type alias for G1 group elements using the Pallas curve.","Type alias for G2 group elements using the Vesta curve.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for scalar field elements on the Pallas curve.","Type alias for scalar field elements on the Vesta curve.","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","Evaluates and proves the computation given the public …","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Evaluates and generates the frames of the computation …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","","","A pointer to a continuation. Logically this is the same a …","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","A <code>Store</code> pointer","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","","Construct a Ptr from an opaque index","","get the index of an Opaque RawPtr","","The underlying pointer, which can be null, opaque, or an …","","An expression tageturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Returns the ZPtr corresponding to the claimeturns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","Intern a string into the Store, which generates the cons’…","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns true if the <code>Symbol</code> is the root symbol, i.e. if it …","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","Calls <code>U::from(self)</code>.","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","Calls <code>U::from(self)</code>.","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","Calls <code>U::from(self)</code>.","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","Returns the value","","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","","",""],"i":[0,2,0,0,2,0,2,2,2,2,0,0,0,2,2,0,0,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,0,0,0,0,0,0,0,2,2,2,0,0,2,0,0,0,2,2,0,2,0,0,2,0,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,0,0,0,0,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,0,221,221,0,0,39,40,39,40,39,40,39,40,39,40,39,39,40,39,40,39,40,39,40,39,40,39,40,39,39,40,39,40,39,40,39,39,39,40,39,40,39,39,39,39,40,39,39,39,39,40,39,40,39,40,39,40,39,39,40,39,40,0,0,0,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,0,0,0,48,49,48,49,49,48,49,48,49,48,48,48,48,48,49,48,66,48,49,48,49,48,49,48,49,48,49,48,49,48,49,48,48,48,48,48,49,49,48,48,48,49,48,49,48,49,48,49,49,48,48,49,48,49,48,49,49,49,49,48,49,48,48,49,48,49,48,48,48,48,48,48,48,48,48,48,48,49,48,48,48,49,48,49,48,49,48,49,48,49,48,49,48,68,68,68,68,68,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,222,223,224,225,226,227,228,229,230,231,232,222,223,233,231,226,229,230,231,224,225,226,227,228,230,222,223,225,230,232,222,223,0,0,234,38,38,38,38,234,0,0,0,0,72,0,0,72,0,0,78,72,0,0,0,0,72,76,79,81,78,72,73,74,75,76,79,81,78,72,73,74,75,72,73,74,75,72,73,74,75,76,73,74,75,76,79,81,78,72,73,74,75,76,79,81,78,72,73,74,75,73,74,75,76,79,81,78,72,73,74,75,76,72,73,74,75,72,78,72,73,74,75,76,79,81,78,72,72,72,72,73,74,75,72,76,79,81,78,72,73,74,75,76,0,76,79,81,78,72,73,74,75,76,76,76,76,76,76,73,74,75,73,74,75,76,76,73,74,75,72,73,74,75,72,72,73,74,75,76,79,81,78,72,73,74,75,76,79,81,78,72,73,74,75,76,79,81,78,72,73,74,75,79,81,76,79,81,78,72,73,74,75,73,74,75,82,83,0,82,84,0,84,0,82,84,84,82,83,84,82,83,82,83,82,83,84,82,83,84,82,83,84,82,83,84,84,82,82,83,83,84,84,84,84,84,82,82,83,84,82,83,84,82,83,84,82,83,84,82,82,83,84,82,83,84,82,83,84,82,83,84,82,83,84,82,83,89,0,0,0,0,0,89,0,89,0,43,89,90,36,43,89,93,37,90,36,43,89,93,37,36,43,89,37,36,43,89,37,36,89,90,36,43,89,93,37,90,36,43,89,93,37,89,90,36,43,89,93,37,0,36,36,43,89,37,36,36,43,43,89,89,90,0,36,36,36,36,43,89,93,37,90,36,43,89,89,93,37,90,90,43,90,36,43,89,93,37,90,43,36,90,36,43,89,93,37,93,235,36,43,89,235,36,89,89,235,36,89,90,0,235,36,43,36,90,93,43,43,89,89,235,36,89,43,235,36,89,36,36,43,89,37,36,36,90,36,43,89,93,37,90,36,43,89,93,37,90,36,43,89,93,37,90,36,43,89,93,37,43,89,0,0,99,0,0,41,41,99,96,100,99,41,96,100,99,41,100,99,41,100,99,41,41,41,96,100,99,41,96,100,99,41,100,99,96,100,99,41,100,99,99,100,99,41,96,96,100,99,99,41,99,41,96,100,99,41,96,100,99,41,41,41,41,41,96,41,41,100,99,100,99,100,99,100,99,99,100,99,41,96,100,99,41,96,100,99,41,96,100,99,41,96,100,99,41,100,99,104,104,104,104,0,104,104,104,104,104,104,104,0,104,104,103,103,103,104,104,103,104,103,104,103,104,103,103,104,103,104,103,104,103,104,103,104,104,103,103,104,104,103,104,103,103,103,103,104,103,104,103,104,104,104,104,104,104,104,104,104,104,103,104,103,104,103,104,103,103,104,103,113,1,0,0,0,113,113,105,113,105,113,105,105,105,105,113,105,113,105,105,113,105,105,105,105,105,113,105,1,1,1,1,1,1,1,1,1,1,105,105,1,113,105,113,105,1,1,1,105,105,105,105,1,1,1,1,1,1,105,1,1,1,1,1,1,113,105,113,105,113,105,113,105,105,121,120,121,120,121,120,121,120,0,0,0,0,0,0,121,120,114,80,122,121,120,114,80,122,114,114,114,114,120,120,80,114,80,122,114,80,122,121,120,114,80,122,121,120,114,80,122,121,120,114,80,122,120,114,80,122,121,120,120,114,80,122,122,80,80,80,80,121,120,114,80,122,122,121,120,114,80,122,60,120,121,120,114,80,122,121,120,114,80,122,121,120,114,80,122,121,120,114,80,122,65,63,63,127,63,0,0,0,0,0,0,0,0,127,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,63,63,63,65,65,0,0,65,63,65,63,63,65,65,0,63,63,63,63,127,124,124,127,126,128,63,65,124,127,126,128,63,65,124,126,125,127,125,127,64,124,64,124,126,127,126,128,63,65,124,127,126,128,63,65,124,125,127,126,64,124,128,128,63,65,127,126,128,63,65,124,127,126,128,63,65,124,127,126,128,63,65,124,127,126,128,63,65,124,127,127,126,126,128,128,63,63,65,65,64,124,129,127,67,124,127,126,128,63,65,124,127,126,128,63,65,124,124,63,65,63,65,123,63,65,127,126,128,63,65,124,129,127,67,124,127,126,128,63,65,124,124,124,124,124,124,125,127,64,124,124,124,127,126,128,63,65,124,124,127,126,128,63,65,124,127,126,128,63,65,124,127,126,128,63,65,124,127,126,128,63,65,124,0,0,133,133,133,133,0,0,0,132,132,133,133,132,132,133,133,133,0,130,130,131,132,133,130,131,132,133,130,131,132,133,131,132,133,132,132,130,131,132,133,130,131,132,133,130,131,132,133,131,132,133,131,131,132,132,133,133,130,131,131,132,133,130,131,132,133,131,132,133,131,132,133,130,131,132,133,130,132,130,131,132,133,131,130,130,132,132,130,131,132,133,131,130,131,132,133,130,131,132,133,130,131,132,133,130,131,132,133,0,0,136,0,0,136,0,136,136,136,136,136,136,136,0,136,136,136,136,136,0,136,0,0,136,136,136,136,136,136,137,137,137,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,137,0,0,0,0,0,0,0,137,137,137,137,137,137,145,145,145,145,145,145,0,0,145,145,143,143,145,143,145,143,145,143,145,143,145,143,145,143,145,143,145,143,143,143,145,145,143,143,145,143,143,145,143,143,145,143,145,0,143,143,143,143,143,145,143,145,143,145,143,145,143,145,143,145,143,147,0,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,236,236,236,236,236,236,148,148,148,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,0,0,0,0,0,0,0,148,148,148,148,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,237,237,0,237,237,237,237,237,0,237,238,238,238,237,0,0,0,0,0,0,153,152,151,153,152,151,151,151,153,153,152,151,153,152,151,151,153,152,151,153,152,151,153,152,151,153,152,151,153,153,153,151,151,153,151,151,153,151,151,151,153,152,151,153,152,151,153,152,151,153,153,153,152,151,151,0,0,161,0,0,0,0,0,0,0,0,161,0,0,0,0,162,161,163,162,161,163,161,162,161,163,162,161,163,162,161,162,161,163,163,163,162,161,163,163,162,161,163,162,161,163,163,163,163,161,0,162,161,162,161,163,162,161,162,161,163,162,161,163,162,161,163,161,162,161,163,162,161,0,165,165,165,0,0,0,58,57,58,58,58,165,58,57,165,58,57,165,58,57,165,58,57,165,165,58,57,165,58,57,165,58,57,165,58,57,165,165,58,58,57,57,165,58,58,57,57,165,58,58,57,165,58,57,165,58,57,165,58,57,165,58,57,165,58,57,58,58,57,239,58,58,58,165,165,58,239,58,239,58,165,57,58,57,58,57,165,165,58,57,58,57,165,58,57,165,58,57,165,58,57,165,58,57,165,58,57,0,0,0,0,0,0,180,0,168,0,0,170,0,0,0,170,170,0,168,0,180,0,0,168,0,0,179,170,180,0,0,0,0,179,176,176,171,172,173,176,177,178,179,180,167,168,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,174,169,181,170,171,172,173,174,175,176,177,178,179,180,167,168,181,170,171,172,173,174,175,176,177,178,179,180,167,168,181,173,174,176,167,0,171,172,171,172,180,170,171,172,179,180,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,171,172,171,172,170,171,172,173,174,175,176,177,178,179,180,167,168,181,170,170,171,171,172,172,173,173,176,176,177,177,179,179,180,180,168,168,0,171,175,169,0,168,169,171,172,175,167,171,172,167,171,172,173,174,175,176,177,178,179,180,167,184,168,181,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,173,180,173,179,173,173,170,170,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,174,176,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,169,168,168,171,172,176,0,169,176,176,168,169,176,169,181,168,169,173,179,168,169,0,240,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,240,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,169,167,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,181,171,172,176,170,171,172,173,174,175,176,177,178,179,180,167,168,181,173,170,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,184,181,181,169,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,240,170,171,172,173,174,175,176,177,178,179,180,167,184,169,168,181,22,22,22,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,194,191,194,191,191,191,193,191,191,194,191,194,191,194,191,191,191,194,191,193,193,193,193,191,193,191,194,191,194,191,191,191,193,191,193,194,191,191,193,191,193,191,0,0,0,194,191,194,191,194,191,194,191,194,191,0,0,0,0,196,196,35,35,35,85,195,196,35,85,195,196,35,35,35,35,196,35,35,196,196,85,195,196,85,195,196,196,35,196,35,196,35,35,35,196,35,35,35,35,85,195,196,35,85,195,196,196,35,85,195,196,196,196,35,196,196,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,85,85,195,196,35,85,195,196,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,196,196,35,35,35,35,35,35,196,35,196,35,35,85,195,196,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,85,195,196,35,35,196,196,196,196,35,196,35,35,35,35,35,196,35,196,35,35,196,35,196,196,35,35,35,35,196,35,35,196,85,195,35,196,196,35,35,35,196,35,35,35,35,196,35,196,35,35,35,35,196,35,35,85,195,196,85,35,35,35,35,85,195,196,35,85,195,196,35,85,195,196,196,35,35,195,35,85,195,196,35,35,35,35,195,201,201,201,201,201,201,201,201,201,201,0,201,201,201,201,201,0,0,201,201,201,0,201,201,201,201,201,201,201,201,201,201,201,201,201,201,0,0,201,201,0,201,201,98,201,98,98,201,98,201,98,201,98,201,98,201,98,201,98,98,98,98,201,98,201,98,98,201,201,98,98,98,98,201,201,98,98,98,201,98,98,98,98,201,98,201,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,201,98,201,98,201,98,201,98,201,98,201,98,197,197,197,197,197,197,197,197,197,0,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,109,110,69,69,69,69,69,109,109,108,109,108,109,109,108,110,0,110,69,69,109,110,69,109,110,0,108,110,110,110,69,108,110,110,69,69,69,110,108,108,109,110,0,0,0,109,69,110,110,109,108,110,110,108,0,69,69,108,108,109,69,241,109,110,241,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,108,108,69,69,109,109,110,110,108,108,69,69,109,109,110,110,108,69,109,110,219,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,108,110,108,108,109,110,108,69,109,110,108,69,109,110,108,69,109,110,241,109,110,241,109,110,219,108,69,109,110,219,108,69,109,110,108,69,109,110,108,69,109,110,108,108,69,69,109,109,110,110,108,69,109,110,108,69,109,110,108,69,109,110,108,69,109,110,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,242,242,204,204,0,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,0,204,204,204,0,204,204,204,204,204,204,204,0,204,204,204,204,0,0,0,0,189,0,189,189,189,189,189,0,189,189,189,189,189,189,0,189,189,189,0,189,0,189,189,189,189,0,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,0,206,206,206,206,206,206,206,206,0,0,0,0,0,212,208,209,210,211,212,208,209,210,211,212,208,209,210,211,212,208,209,210,211,212,208,209,210,211,208,208,208,209,210,211,211,212,208,209,210,211,212,208,209,210,211,212,208,209,210,211,212,212,212,212,208,208,212,212,208,210,211,211,212,212,212,212,209,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,209,0,212,208,209,210,211,212,208,209,210,211,212,208,209,210,211,212,208,209,210,211,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,0,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,243,244,245,246,247,248,249,250,251,252,253,243,244,254,252,247,250,251,252,245,246,247,248,249,251,243,244,246,251,253,243,244,200,200,200,200,200,200,200,200,200,200,200,200,200,0,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,255,255,255,0,0,0,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,55,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,0,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198],"f":[0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],[[]],[[]],0,0,0,[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],0,0,[4],[4],[5,[[6,[[2,[1]]]]]],[[[2,[1]],[2,[1]]]],[4],[[[2,[[0,[7,1]]]],[2,[[0,[7,1]]]]],8],[[],8],[[],8],0,0,0,0,[[[2,[[0,[9,1]]]],10],11],[[[2,[1]],10],11],[12,[[2,[1]]]],[13,[[2,[1]]]],[[]],[1,[[2,[1]]]],[[[0,[14,15]],16],12],0,[[[2,[1]],17]],0,[[],4],[[]],[[[2,[1]]],1],[[[2,[1]]],8],[[[2,[1]]],8],0,0,0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,[[[2,[1]],[2,[1]]],[[19,[18]]]],0,0,0,[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],0,[[[2,[1]],23],6],0,0,[[[2,[1]],[2,[1]]]],0,0,0,0,0,[[]],[[],24],[[],6],[[],6],[[],25],0,0,0,0,[[]],[[[21,[20]]]],0,0,0,0,0,0,0,[26,[[28,[27]]]],[[]],[[]],[[],26],[4],[4],[4],[[[26,[9,9]],10],11],[[]],[[[26,[[30,[[0,[14,29,15]]]],[0,[29,14]],31]],[0,[14,29,15]]],19],[[[26,[[30,[[0,[14,29,15]]]],[0,[29,14]],32]],[0,[14,29,15]]],[[19,[32]]]],[[[26,[[0,[29,14]],32]],[0,[29,14]],32],32],[[[26,[[0,[29,14]],32]],[0,[29,14]],33],32],[[[26,[[0,[29,14]],32]],[0,[29,14]],33],32],[[],4],[[[26,[[0,[29,14]],31]],[0,[29,14]],31]],[[[26,[[0,[29,14]],31]],[0,[29,14]],33]],[[[26,[[0,[29,14]],31]],[0,[29,14]],33]],[[]],[[[26,[[0,[29,14]],31]]],8],[[[26,[3]]],[[34,[3]]]],[[[26,[[0,[29,14]],31]]],4],[[[26,[[30,[[0,[14,29,15]]]],[0,[29,14]],31]],[0,[14,29,15]],33],19],[[],26],[[],6],[[],6],[[],25],[[]],0,0,0,[[],4],[35,34],0,0,[[[39,[1,[36,[1]],[37,[1]],[38,[1]]]]],4],[[],[[40,[1,[0,[3,32]],32,[38,[1]]]]]],[[4,[42,[[41,[1,[38,[1]]]]]]],[[39,[1,[0,[3,32,7]],32,[38,[1]]]]]],[[]],[[]],[[]],[[]],[[[40,[[0,[3,1]],3,3,[0,[3,[38,[[0,[3,1]]]]]]]]],[[40,[[0,[3,1]],3,3,[0,[3,[38,[[0,[3,1]]]]]]]]]],[[[39,[[0,[3,1]],[0,[3,32]],3,[0,[3,[38,[[0,[3,1]]]]]]]]],[[39,[[0,[3,1]],[0,[3,32]],3,[0,[3,[38,[[0,[3,1]]]]]]]]]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[[[40,[[0,[9,1]],9,9,[0,[9,[38,[[0,[9,1]]]]]]]],10],11],0,[[]],[[]],[[[43,[[0,[3,32]],32,[38,[1]]]],[35,[1]]],[[40,[1,[0,[3,32]],32,[38,[1]]]]]],[[4,[44,[[43,[[0,[3,32,7]],32,[38,[1]]]]]],[35,[1]],[42,[[41,[1,[38,[1]]]]]]],[[34,[[39,[1,[0,[3,32,7]],32,[38,[1]]]]]]]],[[[39,[1,[0,[3,32,7]],32,[38,[1]]]]],[[35,[1]]]],[[],4],[[],4],0,0,[[]],[[]],0,[[[39,[1,[36,[1]],[37,[1]],[38,[1]]]],[44,[1]]],[[34,[1]]]],0,0,[[[40,[1,[0,[7,9]],[38,[1]]]],[40,[1,[0,[7,9]],[38,[1]]]]],8],[[[39,[1,[0,[7,9,32]],[38,[1]]]],[39,[1,[0,[7,9,32]],[38,[1]]]]],8],[[],4],[[[39,[1,[36,[1]],32,[38,[1]]]]],[[34,[1]]]],[[[39,[1,[36,[1]],32,[38,[1]]]]],4],0,0,[[[39,[1,[36,[1]],[37,[1]],[38,[1]]]],[45,[1]],[44,[[46,[1]]]]],[[6,[[34,[[46,[1]]]],47]]]],[[[39,[1,[36,[1]],[37,[1]],[38,[1]]]],[45,[1]]],[[6,[47]]]],[[[39,[1,[0,[3,32,7]],32,[38,[1]]]],[45,[1]],[35,[1]],[48,[1]],[48,[1]],[49,[1]],[44,[[40,[1,[36,[1]],[37,[1]],[38,[1]]]]]],[50,[1]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[[39,[36,37,[38,[51]]]],[53,[52]],[54,[52]]],[[6,[8,47]]]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],0,0,0,0,[[[50,[[0,[3,1]]]]],[[50,[[0,[3,1]]]]]],[[]],0,0,0,[4],[4],[4],0,0,0,0,0,0,0,[[]],0,0,[[],4],[[]],0,0,0,0,[[[45,[1]],[35,[1]]],[[6,[[50,[1]],47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,[[],6],[[],6],[[],25],0,0,[[]],0,0,0,[[[45,[1]],33],[[6,[[48,[1]],47]]]],[[[45,[1]],33],[[6,[[49,[1]],47]]]],[[[45,[1]],[55,[1]]],[[6,[[48,[1]],47]]]],[[[45,[1]],[56,[1]]],[[6,[[49,[1]],47]]]],[[[45,[1]],[35,[1]],[57,[1]]],[[6,[[49,[1]],47]]]],[[[45,[1]],[35,[1]],[58,[1]]],[[6,[[48,[1]],47]]]],[[[45,[1]],[35,[1]],33],[[6,[[49,[1]],47]]]],[[[48,[1]],[45,[1]],[48,[1]]],[[6,[59,47]]]],[[[49,[1]],[45,[1]],[49,[1]]],[[6,[59,47]]]],[[[45,[1]],[60,[1]]],[[6,[[48,[1]],47]]]],[[[48,[1]],[45,[1]],1],[[6,[59,47]]]],[[[45,[1]],[35,[1]],33],[[6,[[48,[1]],47]]]],[[[45,[1]],1,[46,[1]]],[[6,[[48,[1]],47]]]],[[[48,[1]],[45,[1]],1],[[6,[59,47]]]],[[[49,[1]],[45,[1]],1],[[6,[59,47]]]],[[[48,[1]],[45,[1]],[35,[1]]],[[6,[47]]]],[[],[[61,[46]]]],[[[48,[1]]],[[61,[[46,[1]]]]]],[[[49,[1]]],[[61,[[46,[1]]]]]],[[[45,[1]],[19,[[58,[1]]]],[35,[1]]],[[6,[[48,[1]],47]]]],[[[45,[1]],[19,[[57,[1]]]],[35,[1]]],[[6,[[49,[1]],47]]]],[[]],[[]],[[]],[[]],[[4,[44,[[46,[1]]]]],[[48,[1]]]],[[4,[44,[[46,[1]]]]],[[49,[1]]]],[[[48,[[0,[3,62]]]]],[[48,[[0,[3,62]]]]]],[[[49,[[0,[3,1]]]]],[[49,[[0,[3,1]]]]]],[[]],[[]],[[[45,[1]],[50,[1]],[35,[1]],[46,[1]],[48,[1]]],[[6,[[48,[1]],47]]]],[[[45,[1]],[50,[1]],[35,[1]],[48,[1]],[48,[1]]],[[6,[[48,[1]],47]]]],[[[45,[1]],[50,[1]],[48,[1]],[48,[1]],63,[0,[[64,[1]],63,[0,[1,[48,[1]]]]]],59],[[6,[[48,[1]],47]]]],[[[45,[1]],[50,[1]],[35,[1]],[48,[1]],[48,[1]],[48,[1]]],[[6,[[48,[1]],47]]]],[[[45,[1]],[50,[1]],[35,[1]],[44,[[48,[1]]]]],[[6,[[48,[1]],47]]]],[[[45,[1]],65,[46,[1]],[61,[66]],[0,[[67,[1]],65,[0,[1,[46,[1]]]]]],59],[[6,[[49,[1]],47]]]],[[[45,[1]],65,[46,[1]],[61,[66]],[0,[[67,[1]],65,[0,[1,[46,[1]]]]]]],[[6,[47]]]],[[[45,[1]],[50,[1]],[35,[1]],[48,[1]],[48,[1]]],[[6,[[48,[1]],47]]]],[[[45,[1]],[50,[1]],[35,[1]],[48,[1]],[49,[1]]],[[6,[[48,[1]],47]]]],[4],[4],[4],[4],[4],[4],[[[48,[1]],[45,[1]],[48,[1]]]],[[[49,[1]],[45,[1]],[49,[1]]]],[[[49,[1]],[35,[1]]],24],[[[48,[1]],[35,[1]]],24],[[[48,[1]],10],11],[[[49,[1]],10],11],[[]],[[]],[[[46,[1]],[46,[1]]],[[48,[1]]]],[[[46,[1]],[46,[1]]],[[49,[1]]]],[[[49,[1]],[35,[1]]],[[19,[[68,[1]]]]]],[[[49,[1]],[35,[1]]],[[19,[[57,[1]]]]]],[[[49,[1]],[35,[1]]],[[19,[[56,[1]]]]]],[[[48,[1]]],[[46,[1]]]],[[[49,[1]]],[[46,[1]]]],[[[48,[1]],[45,[1]],59,[48,[1]]],[[6,[47]]]],[[],4],[[],4],[[]],[[]],[[[48,[1]],[45,[1]]],[[6,[59,47]]]],[[[48,[1]],[45,[1]]],[[6,[59,47]]]],[[[48,[1]],[45,[1]]],[[6,[59,47]]]],[[[48,[1]],[45,[1]]],[[6,[59,47]]]],[[[48,[1]],[45,[1]],[50,[1]]],[[6,[59,47]]]],[[[48,[1]],[45,[1]]],[[6,[59,47]]]],[[[48,[1]],[45,[1]]],[[6,[59,47]]]],[[[48,[1]],[45,[1]]],[[6,[59,47]]]],[[[48,[1]],[45,[1]]],[[6,[59,47]]]],[[[48,[1]],[45,[1]]],[[6,[59,47]]]],[[[45,[1]],59,[48,[1]],[48,[1]]],[[6,[[48,[1]],47]]]],[[[45,[1]],59,[49,[1]],[49,[1]]],[[6,[[49,[1]],47]]]],[[[45,[1]],59,[55,[1]],[55,[1]]],[[6,[[48,[1]],47]]]],[[[48,[1]],[35,[1]]],[[19,[[58,[1]]]]]],[[[48,[1]]],[[46,[1]]]],[[[49,[1]]],[[46,[1]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[]],[[]],[[[48,[1]],[35,[1]]],[[19,[[55,[1]]]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[68,[[0,[3,1]]]]],[[68,[[0,[3,1]]]]]],[[]],[[[68,[1]]],69],[4],[4],[4],[[[68,[[0,[7,1]]]],[68,[[0,[7,1]]]]],8],[[],8],[[],8],[[[68,[1]],[35,[1]],70],71],[[[68,[[0,[9,1]]]],10],11],[[]],[[[0,[14,15]],16],12],[[[68,[1]]],[[57,[1]]]],[[[68,[[0,[14,1]]]],17]],[[],4],[[[68,[1]],[35,[1]]]],[[]],[[]],[[],6],[[],6],[[],25],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[],4],[[35,58,58,57],36],[[],8],[[35,[44,[58]]],58],[[45,50,35,[44,[48]],48,49],[[6,[47]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[72,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[72,[[0,[3,1]]]]],[[72,[[0,[3,1]]]]]],[[[73,[[0,[3,1]]]]],[[73,[[0,[3,1]]]]]],[[[74,[[0,[3,1]]]]],[[74,[[0,[3,1]]]]]],[[[75,[[0,[3,1]]]]],[[75,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[],[[76,[1]]]],[[],[[73,[[0,[77,1]]]]]],[[],[[74,[[0,[77,1]]]]]],[[],[[75,[[0,[77,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[73,[1]]]]]],[5,[[6,[[74,[1]]]]]],[5,[[6,[[75,[1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[[[76,[1]]],1],[[[72,[1]]],4],[[[73,[1]]],4],[[[74,[1]]],4],[[[75,[1]]],4],[[[72,[1]],[35,[1]],[58,[1]],[58,[1]],[57,[1]]],[[36,[1]]]],[[[78,[9]],10],11],[[[72,[[0,[9,1]]]],10],11],[[[73,[[0,[9,1]]]],10],11],[[[74,[[0,[9,1]]]],10],11],[[[75,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[[75,[1]]],[[72,[1]]]],[[[74,[1]]],[[72,[1]]]],[[[73,[1]]],[[72,[1]]]],[[]],[[]],[[]],[[[72,[1]]],8],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[76,[1]],1,1],[[6,[8,[78,[1]]]]]],[[[35,[1]],[41,[1,[72,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[76,[1]]],4],[[[76,[1]],1],[[6,[[19,[1]],[78,[1]]]]]],[[[35,[1]]],[[76,[1]]]],[[[35,[1]],4],[[76,[1]]]],[[[76,[1]],1,1],[[6,[[78,[1]]]]]],[[[76,[1]],1],[[6,[[79,[1]],[78,[1]]]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[[76,[1]]],1],[[[76,[1]],4],4],[[[73,[1]],23],6],[[[74,[1]],23],6],[[[75,[1]],23],6],[[[72,[1]],[35,[1]],[44,[[58,[1]]]]],[[58,[1]]]],[[[73,[1]],[35,[1]],[44,[[58,[1]]]]],[[58,[1]]]],[[[74,[1]],[35,[1]],[44,[[58,[1]]]]],[[58,[1]]]],[[[75,[1]],[35,[1]],[44,[[58,[1]]]]],[[58,[1]]]],[[[72,[1]],[45,[1]],[50,[1]],[35,[1]],[44,[[48,[1]]]],[48,[1]],[49,[1]]],[[6,[47]]]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[[79,[1]],1,1,1,[80,[1]]],8],[[[81,[1]],1,1,1,[19,[1]],1,[80,[1]]],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[82,82],[[[83,[[0,[3,1]]]]],[[83,[[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[84,10],11],[[84,10],11],[[82,10],11],[[82,10],11],[[[83,[1]],10],11],[[[83,[[0,[9,1]]]],10],11],[[]],[85,84],[47,84],[82,84],[86,84],[[]],[85,82],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[87],[87],[87],[84,[[19,[88]]]],[82,[[19,[88]]]],[[]],[[]],[[],24],[[],24],[[],24],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[[0,[3,1]]]]],[[36,[[0,[3,1]]]]]],[[[43,[[0,[3,32]],[0,[3,32]],3]]],[[43,[[0,[3,32]],[0,[3,32]],3]]]],[89,89],[[[37,[[0,[3,1]]]]],[[37,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],0,[[],89],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[89]]]],[4],[4],[4],[4],[4],[4],[[[35,[1]]],[[58,[1]]]],0,[[[36,[[0,[7,1]]]],[36,[[0,[7,1]]]]],8],[[[43,[[0,[7,32]],[0,[7,32]],7]],[43,[[0,[7,32]],[0,[7,32]],7]]],8],[[89,89],8],[[[37,[[0,[7,1]]]],[37,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[90,[1,[38,[1]]]]],[[6,[82]]]],[[[35,[1]],91],[[6,[[58,[1]],82]]]],0,[[[36,[1]],[35,[1]],70],71],[[[36,[1]],10],[[6,[92]]]],[[[36,[[0,[9,1]]]],10],11],[[[43,[[0,[9,32]],[0,[9,32]],9]],10],11],[[89,10],11],[[[93,[[0,[9,32]],[0,[9,1]],[0,[9,[38,[[0,[9,1]]]]]]]],10],11],[[[37,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[[57,[1]]],89],[[]],[[]],[[]],[[[58,[1]],[58,[1]],[35,[1]],4,94,[41,[1,[38,[1]]]]],[[6,[[34,[[43,[[36,[1]],[37,[1]],[38,[1]]]]]],82]]]],[[[90,[1,[38,[1]]]]],[[6,[[34,[[43,[[36,[1]],[37,[1]],[38,[1]]]]]],82]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[90,[1,[38,[1]]]]],[[36,[1]]]],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[[36,[1]]],8],[[[43,[[36,[1]],32,[38,[1]]]]],8],[89,8],[[],8],[[[36,[1]]],8],[89,8],[89,8],[[],8],[[[36,[1]]],8],[89,8],[[[90,[1,[38,[1]]]]],[[6,[[95,[[93,[[37,[1]],1,[38,[1]]]]]],82]]]],0,[[35,4]],[[[36,[1]],[35,[1]],4]],[[[43,[[36,[1]],32,[38,[1]]]],[35,[1]]]],[[[36,[1]],[35,[1]]],[[19,[[58,[1]]]]]],[[[58,[1]],[58,[1]],[35,[1]],4,[41,[1,[38,[1]]]]],[[90,[1,[38,[1]]]]]],[[[93,[[37,[1]],1,[38,[1]]]]],19],0,[[[43,[[36,[1]],32,[38,[1]]]],[43,[[36,[1]],32,[38,[1]]]]],8],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[15,35,41],[[6,[82]]]],[[[36,[1]],[35,[1]],[41,[1,[38,[1]]]]],[[6,[82]]]],[[89,23],6],[[[44,[[43,[[36,[1]],32,[38,[1]]]]]]],4],[[],89],[[[36,[1]]],89],[[89,[35,[1]]],[[19,[[57,[1]]]]]],[[[36,[1]],[35,[1]]],[[34,[1]]]],[[]],[[]],[[]],[[]],[[],24],[[[36,[1]],[35,[1]]],[[6,[[34,[1]],85]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[21,[20]]]],0,0,0,0,0,[[[41,[1,[38,[1]]]],[97,[[96,[1,[38,[1]]]]]],[35,[1]]]],[[[41,[1,[38,[1]]]],[97,[98]],[97,[[38,[1]]]],[35,[1]]]],[[[99,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[100,[[0,[3,1]]]]],[[100,[[0,[3,1]]]]]],[[[99,[[0,[3,1]]]]],[[99,[[0,[3,1]]]]]],[[[41,[[0,[3,1]],[0,[3,[38,[[0,[3,1]]]]]]]]],[[41,[[0,[3,1]],[0,[3,[38,[[0,[3,1]]]]]]]]]],[[]],[[]],[[]],[[[41,[1,[38,[1]]]]],[[28,[98]]]],[[],[[41,[[0,[77,1]],[0,[77,[38,[[0,[77,1]]]]]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[100,[1]]]]]],[5,[[6,[[99,[[0,[101,1]]]]]]]],[4],[4],[4],[4],[[[100,[1]]],4],[[[99,[1]]],4],[[[99,[1]],[35,[1]],[58,[1]],[58,[1]],[57,[1]]],[[36,[1]]]],[[[100,[[0,[9,1]]]],10],11],[[[99,[[0,[9,1]]]],10],11],[[[41,[[0,[9,1]],[0,[9,[38,[[0,[9,1]]]]]]]],10],11],[[]],[[],[[96,[1,[38,[1]]]]]],[[]],[[]],[[[100,[1]]],[[99,[1]]]],[[]],[[[99,[1]]],8],[[[41,[1,[38,[1]]]]],8],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[41,[1,[38,[1]]]]],8],[[[41,[1,[38,[1]]]]],24],[[[41,[1,[38,[1]]]],[35,[1]],[58,[1]]],19],[[[41,[1,[38,[1]]]]],4],[[[97,[98]],[97,[[38,[1]]]]],[[96,[1,[38,[1]]]]]],[[],[[41,[1,[38,[1]]]]]],[[[35,[1]],[34,[[97,[[96,[1,[38,[1]]]]]]]]],[[41,[1,[38,[1]]]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[[100,[1]],23],6],[[[99,[[0,[102,1]]]],23],6],[[[100,[1]],[35,[1]],[44,[[58,[1]]]]],[[58,[1]]]],[[[99,[1]],[35,[1]],[44,[[58,[1]]]]],[[58,[1]]]],[[[99,[1]],[45,[1]],[50,[1]],[35,[1]],[44,[[48,[1]]]],[48,[1]],[49,[1]]],[[6,[47]]]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[[21,[20]]]],[[[21,[20]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[103,[1]],[45,[1]],[35,[1]]],[[6,[47]]]],[[[45,[1]],[35,[1]]],[[6,[47]]]],[[[45,[1]],[19,[[103,[1]]]],[35,[1]]],[[6,[47]]]],[[[104,[1]]],[[19,[91]]]],[[]],[[]],[[]],[[]],[[[104,[[0,[3,1]]]]],[[104,[[0,[3,1]]]]]],[[[103,[[0,[3,1]]]]],[[103,[[0,[3,1]]]]]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[[[104,[[0,[7,1]]]],[104,[[0,[7,1]]]]],8],[[[103,[[0,[7,1]]]],[103,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[[104,[1]],[35,[1]],70],71],[[[104,[[0,[9,1]]]],10],11],[[[103,[[0,[9,1]]]],10],11],[[]],[[]],[[[0,[14,15]],16],12],[[[103,[1]],17]],[[[45,[1]],[35,[1]],[48,[1]],[49,[1]]],[[6,[[46,[1]],47]]]],[[],4],[[],4],[[]],[[]],[[[104,[1]]],8],[[[104,[1]]],8],[[[104,[1]]],8],[[[104,[1]]],8],[[[104,[1]]],8],[[[104,[1]]],8],[[[104,[1]]],8],[[[104,[1]]],8],[[[104,[1]]],8],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[[105,[[0,[3,1]]]]],[[105,[[0,[3,1]]]]]],[[]],[[[105,[1]],[105,[1]]],18],[4],[4],[4],[4],[5,[[6,[[105,[1]]]]]],[4],[4],[[[105,[[0,[7,1]]]],[105,[[0,[7,1]]]]],8],[[],8],[[],8],[[[105,[[0,[9,1]]]],10],11],[[]],[[]],[[[44,[106]]],19],[107],[69],[108],[109],[110],[111],[112],[12],[[],113],[[[0,[14,15]],16],12],[[[105,[1]],17]],[[],24],[[],4],[[],4],[[]],[[]],[[],8],[[]],[[]],[[[105,[1]],[105,[1]]],[[19,[18]]]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[[105,[1]],23],6],[[],[[34,[106]]]],[[],[[19,[107]]]],[[],[[19,[69]]]],[[],[[19,[108]]]],[[],[[19,[109]]]],[[],[[19,[110]]]],[[]],[[],[[19,[111]]]],[[],[[19,[112]]]],[[],112],[[],[[19,[12]]]],[[],12],[[],24],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[]],[[]],[[[21,[20]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[114,[1]]],[[116,[1,115]]]],[[[114,[1]]],[[116,[1,117]]]],[[[114,[1]]],[[116,[1,118]]]],[[[114,[1]]],[[116,[1,119]]]],[120,120],[[]],[[[80,[1]],[61,[1]]],1],[[[114,[1]],120],[[121,[1]]]],0,0,[[],[[114,[1]]]],[[],[[80,[[0,[77,1]]]]]],[[],[[122,[[0,[77,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[120,10],11],[[[114,[[0,[9,1]]]],10],11],[[[80,[[0,[9,1]]]],10],11],[[[122,[[0,[9,1]]]],10],11],[[]],[4,120],[[]],[[]],[[]],[[]],[[[122,[1]],[105,[1]]],[[19,[[61,[1]]]]]],[[[80,[1]],[61,[1]]],1],[[[80,[1]],[61,[1]]],1],[[[80,[1]],[61,[1]]],1],[[[80,[1]],[61,[1]]],1],[[],4],[[],4],[[],4],[[],4],[[],4],[[[122,[1]],[105,[1]],[61,[1]]]],[[]],[[]],[[]],[[]],[[]],[[],61],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[124,[[0,[123,77,32,29,9]],32,1]]],[[34,[[0,[123,77,32,29,9]]]]]],[[[124,[[0,[123,77,32,29,9]],32,1]],[35,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[125,[1]],[35,[1]],[58,[1]]],[[6,[85]]]],[[[127,[[126,[1]]]],[35,[1]],[58,[1]]],[[6,[85]]]],[[[125,[1]],[35,[1]],[58,[1]]],[[6,[85]]]],[[[127,[[126,[1]]]],[35,[1]],[58,[1]]],[[6,[85]]]],[[[64,[1]],63,[35,[1]],[58,[1]]],[[6,[85]]]],[[[124,[63,[126,[1]],1]],63,[35,[1]],[58,[1]]],[[6,[85]]]],[[[64,[1]],63,[35,[1]],[58,[1]]],[[6,[82]]]],[[[124,[63,[126,[1]],1]],63,[35,[1]],[58,[1]]],[[6,[82]]]],0,[[[127,[3]]],[[127,[3]]]],[[[126,[[0,[3,1]]]]],[[126,[[0,[3,1]]]]]],[[[128,[[0,[3,1]]]]],[[128,[[0,[3,1]]]]]],[63,63],[65,65],[[[124,[[0,[3,123]],3,[0,[3,1]]]]],[[124,[[0,[3,123]],3,[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[125,[1]],[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[127,[[126,[1]]]],[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],0,[[[64,[1]],63,[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[124,[63,[126,[1]],1]],63,[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],0,0,[[],63],[[],65],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[127,[7]],[127,[7]]],8],[[[126,[[0,[7,1]]]],[126,[[0,[7,1]]]]],8],[[[128,[[0,[7,1]]]],[128,[[0,[7,1]]]]],8],[[63,63],8],[[65,65],8],[[[124,[[0,[7,123]],7,[0,[7,1]]]],[124,[[0,[7,123]],7,[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[64,[1]],63,[58,[1]],[58,[1]],[58,[1]],[35,[1]]],[[58,[1]]]],[[[124,[63,[126,[1]],1]],63,[58,[1]],[58,[1]],[58,[1]],[35,[1]]],[[58,[1]]]],[[[129,[1]],[35,[1]],[57,[1]]],[[19,[[68,[1]]]]]],[[[127,[[128,[1]]]],[35,[1]],[57,[1]]],[[19,[[68,[1]]]]]],[[[67,[1]],65,[35,[1]],[57,[1]]],[[19,[[68,[1]]]]]],[[[124,[65,[128,[1]],1]],65,[35,[1]],[57,[1]]],[[19,[[68,[1]]]]]],[[[127,[9]],10],11],[[[126,[[0,[9,1]]]],10],11],[[[128,[[0,[9,1]]]],10],11],[[63,10],11],[[65,10],11],[[[124,[[0,[9,123]],9,[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[[124,[[0,[123,77,32,29,9]],32,1]],[0,[123,77,32,29,9]]],[[127,[32]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[63,17]],[[65,17]],[[],4],[63,4],[65,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[129,[1]],[35,[1]],[68,[1]]],[[57,[1]]]],[[[127,[[128,[1]]]],[35,[1]],[68,[1]]],[[57,[1]]]],[[[67,[1]],65,[35,[1]],[68,[1]]],[[57,[1]]]],[[[124,[65,[128,[1]],1]],65,[35,[1]],[68,[1]]],[[57,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],[[124,[[0,[123,77,32,29,9]],32,1]]]],[[],[[124,[[0,[123,77,32,29,9]],32,1]]]],[[[127,[32]]],[[124,[[0,[123,77,32,29,9]],32,1]]]],0,[[[125,[1]],[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[127,[[126,[1]]]],[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[64,[1]],63,[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[124,[63,[126,[1]],1]],63,[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[124,[[0,[123,77,32,29,9]],32,1]]],[[34,[[127,[32]]]]]],[[[124,[[0,[123,77,32,29,9]],32,1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[124,[[0,[123,77,32,29,9]],32,1]]],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[130,[44,[0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[130],[131,131],[132,132],[133,133],[[]],[[]],[[]],0,0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[131,131],8],[[132,132],8],[[133,133],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[130,[0,[1]],[0,[1]]],134],[[131,10],11],[[131,10],11],[[132,10],11],[[133,10],11],[[]],[[]],[[]],[[]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[131,17]],[[132,17]],[[133,17]],[[],4],[[],4],[[],4],[[],4],[[130,[0,[1]]]],[[132,[0,[1]]]],[[]],[[]],[[]],[[]],[131,135],[[[61,[131]],132],[[134,[130]]]],0,[132,4],[[132,[44,[0]]],[[134,[4]]]],0,[[]],[[]],[[]],[[],24],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[136,136],[[]],[4],[4],[4],0,[[136,10],11],[[136,10],11],[[]],[[],4],[[]],0,[87],0,0,[[]],[[],24],[[],6],[[],6],[[],25],[[]],0,0,0,0,0,[137,91],[[]],[[]],[137,137],[[]],[137,107],[[137,138],[[139,[1,[34,[106]]]]]],[[],137],[4],[4],[4],[[137,[21,[[44,[106]]]]],24],[[137,137],8],[[],8],[[],8],[[137,10],11],[[]],[[],4],[[]],[[137,107],8],[[],94],[138,[[139,[1,137]]]],[[],94],[[],94],[137,94],[[],94],[137,[[140,[94]]]],[137,94],[[],94],[137,112],[[]],[[],6],[[],6],[[],25],[[]],0,0,0,0,0,0,0,0,0,0,[[[0,[141,3,142]],91,[143,[[0,[141,3,142]],1]]],[[143,[[0,[141,3,142]],1]]]],[[[0,[141,3,142]],144,[143,[[0,[141,3,142]],1]]],[[143,[[0,[141,3,142]],1]]]],[[]],[[]],[[]],[[]],[[[145,[[0,[3,1]]]]],[[145,[[0,[3,1]]]]]],[[[143,[[0,[3,142]],[0,[3,1]]]]],[[143,[[0,[3,142]],[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[[[145,[[0,[7,1]]]],[145,[[0,[7,1]]]]],8],[[[143,[[0,[7,142]],[0,[7,1]]]],[143,[[0,[7,142]],[0,[7,1]]]]],8],0,0,[[[145,[[0,[9,1]]]],10],11],[[[145,[1]],10],11],[[[143,[138,1]],10],11],[[[143,[[0,[9,142]],[0,[9,1]]]],10],11],[[]],[[]],[[[0,[141,3,142]],144],[[143,[[0,[141,3,142]],1]]]],[[],4],[[],4],0,[[]],[[]],[[[145,[1]]],8],[[[146,[142,[143,[142,1]]]],94],[[146,[142,[143,[142,1]]]]]],[[142,[145,[1]]],[[143,[142,1]]]],[[19,142,[145,[1]]],[[146,[142,[143,[142,1]]]]]],[[[143,[[0,[141,3,142]],1]],[143,[[0,[141,3,142]],1]]],[[143,[[0,[141,3,142]],1]]]],[[6,142,94],[[146,[142,[143,[142,1]]]]]],[[142,[145,[1]]],[[146,[142,[143,[142,1]]]]]],[[]],[[]],[[],24],[[],24],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[]],[[]],0,0,0,[[]],[[]],[[]],[147,147],[[]],[4],[4],[4],[[147,147],8],[[],8],[[],8],[[147,10],11],[[]],[[138,138],147],[[],4],[[]],[[24,4,4,4,4],24],[[]],[[],6],[[],6],[[],25],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[148,148],[[]],[4],[4],[4],[[148,148],8],[[],8],[[],8],[[148,10],11],[[]],[[],4],[[]],[[107,91],94],[[],94],[[107,8,91],94],[[107,8,91],94],[107,94],[[107,8,91],94],[[107,8,91],94],[[],94],[[]],[[],6],[[],6],[[],25],[[]],[[],94],[[],94],[[],94],[138,[[139,[1,138]]]],[[],94],[[],94],[[],94],[137,94],[[],94],[[],94],[98,94],[138,[[139,[1,[34,[138]]]]]],[138,[[139,[1,[34,[138]]]]]],[[],94],[[],94],[91,94],[[],94],[[],94],[[],94],0,0,0,0,[4,4],[4,4],0,[[],41],[4,4],[4,8],[4,8],[[4,41]],0,[[[44,[[39,[36,37]]]]],[[6,[34,47]]]],[[],4],[[],34],[[],4],[[],4],[34,[[6,[8,47]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[151,[[0,[3,149,150]]]]],[[151,[[0,[3,149,150]]]]]],[[]],[[4,[42,[[41,[51,[38,[51]]]]]]],[[6,[[152,[52]],47]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[151,[[0,[149,150]]]]]]]],[4],[4],[4],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[153,[52,[38,[51]],51]]],[[41,[51,[38,[51]]]]]],[[4,[41,[51,[38,[51]]]]],[[153,[52,[38,[51]],51]]]],[[[153,[52,[38,[51]],51]],[154,[52]],[155,[52]],[58,[51]],[58,[51]],[35,[51]],4,[0,[156,3]],[42,[[41,[51,[38,[51]]]]]]],[[6,[84]]]],0,0,[[[153,[52,[38,[51]],51]],[39,[51,[36,[51]],[37,[51]],[38,[51]]]],[154,[52]],156],[[6,[[54,[52]],47]]]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[[153,[52,[38,[51]],51]]],4],0,[[[151,[[0,[149,150]]]],23],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[[53,[52]],[157,[52]],[44,[51]],[44,[51]],[158,[52]],[0,[156,159]]],[[6,[8,47]]]],[[[39,[51,[36,[51]],[37,[51]],[38,[51]]]],[53,[52]],[54,[52]]],[[6,[8,47]]]],[[]],[[]],[[]],[[[21,[20]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[161,[[38,[160]]]],[162,[[38,[160]]]]],[[6,[[161,[[38,[160]]]],84]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[162,[[0,[101,[38,[160]]]]]]]]]],[5,[[6,[[161,[[0,[101,[38,[160]]]]]]]]]],[4],[4],[4],[[[163,[160,[38,[160]]]],[162,[[38,[160]]]],[58,[160]],[58,[160]],[35,[160]],4,[42,[[41,[160,[38,[160]]]]]]],[[6,[84]]]],[[[163,[[0,[9,1]],[0,[9,[38,[[0,[9,1]]]]]]]],10],11],[[]],[[]],[[]],[[[163,[160,[38,[160]]]],[58,[160]],[58,[160]],[35,[160]],4,[41,[160,[38,[160]]]]],[[6,[[34,[[43,[[36,[160]],[37,[160]],[38,[160]]]]]],84]]]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[163,[160,[38,[160]]]]],[[41,[160,[38,[160]]]]]],[[4,[41,[160,[38,[160]]]]],[[163,[160,[38,[160]]]]]],[[[163,[160,[38,[160]]]],[162,[[38,[160]]]],[34,[[43,[[36,[160]],[37,[160]],[38,[160]]]]]],[35,[160]],[42,[[41,[160,[38,[160]]]]]]],[[6,[84]]]],[[[162,[[38,[160]]]],[35,[160]],[44,[[164,[[38,[160]]]]]],4,[34,[160]],[42,[[41,[160,[38,[160]]]]]]],[[6,[[161,[[38,[160]]]],84]]]],[[4,[42,[[41,[160,[38,[160]]]]]]],[[162,[[38,[160]]]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[[163,[160,[38,[160]]]]],4],[[[162,[[0,[102,[38,[160]]]]]],23],6],[[[161,[[0,[102,[38,[160]]]]]],23],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[[161,[[38,[160]]]],[162,[[38,[160]]]],4,[34,[160]],[44,[160]]],[[6,[8,86]]]],[[]],[[]],[[]],[[[21,[20]]]],[[[21,[20]]]],0,0,0,0,0,0,0,0,0,[[[45,[1]],[35,[1]],[19,[[58,[1]]]]],[[6,[47]]]],[[[58,[1]]],[[19,[[58,[1]]]]]],[[[58,[1]]],[[19,[[58,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[165,165],[[[58,[[0,[3,1]]]]],[[58,[[0,[3,1]]]]]],[[[57,[[0,[3,1]]]]],[[57,[[0,[3,1]]]]]],[[]],[[]],[[]],[[165,165],18],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[165,165],8],[[[58,[[0,[7,1]]]],[58,[[0,[7,1]]]]],8],[[[57,[[0,[7,1]]]],[57,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[165,10],11],[[[58,[1]],[35,[1]],70],71],[[[58,[[0,[9,1]]]],10],11],[[[57,[1]],[35,[1]],70],71],[[[57,[[0,[9,1]]]],10],11],[[]],[107,[[58,[1]]]],[[]],[[]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[165,17]],[[[58,[1]],17]],[[[57,[1]],17]],[165,[[19,[4]]]],[[108,4],[[58,[1]]]],[[69,4],[[57,[1]]]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[58,[1]]],8],[[[58,[1]]],8],[[[57,[1]]],8],[[],8],[[[58,[1]]],8],[[[58,[1]]],8],[[[58,[1]]],8],[165,8],[165,8],[[[58,[1]]],8],[108,8],[[[58,[1]],108],8],[[],8],[[[58,[1]]],8],[4,165],[[69,165],[[57,[1]]]],[108,[[58,[1]]]],[69,[[57,[1]]]],[[108,4],[[58,[1]]]],[[69,4],[[57,[1]]]],[165,[[19,[4]]]],[[165,165],[[19,[18]]]],0,0,0,0,[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[35,[166]],[58,[166]],[167,[166]],4,8,[41,[166,[99,[166]]]]],[[6,[[168,[166]],22]]]],[[[35,[166]],[58,[166]],[167,[166]],4,8,8,[163,[166,[99,[166]]]],[162,[[99,[166]]]],[42,[[41,[166,[99,[166]]]]]]],[[6,[[169,[166]],22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[170,170],[171,171],[[[172,[[0,[3,1]]]]],[[172,[[0,[3,1]]]]]],[[[173,[[0,[3,1]]]]],[[173,[[0,[3,1]]]]]],[[[174,[[0,[3,1]]]]],[[174,[[0,[3,1]]]]]],[[[175,[[0,[3,1]]]]],[[175,[[0,[3,1]]]]]],[[[176,[[0,[3,1]]]]],[[176,[[0,[3,1]]]]]],[177,177],[[[178,[[0,[3,1]]]]],[[178,[[0,[3,1]]]]]],[[[179,[[0,[3,1]]]]],[[179,[[0,[3,1]]]]]],[180,180],[[[167,[[0,[3,1,102]]]]],[[167,[[0,[3,1,102]]]]]],[[[168,[[0,[3,1]]]]],[[168,[[0,[3,1]]]]]],[[[181,[[0,[3,1]]]]],[[181,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],182],0,0,0,0,[[180,[35,[[0,[1,102,183]]]]],[[57,[[0,[1,102,183]]]]]],[170,4],[[],171],[[],[[172,[[0,[77,1]]]]]],[[],[[179,[1]]]],[[],180],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[170]]]],[5,[[6,[171]]]],[5,[[6,[[172,[[0,[101,1]]]]]]]],[5,[[6,[[173,[1]]]]]],[5,[[6,[[174,[[0,[101,1]]]]]]]],[5,[[6,[[175,[[0,[101,1]]]]]]]],[5,[[6,[[176,[[0,[101,1]]]]]]]],[5,[[6,[177]]]],[5,[[6,[[178,[[0,[101,1]]]]]]]],[5,[[6,[[179,[[0,[101,1]]]]]]]],[5,[[6,[180]]]],[5,[[6,[[167,[[0,[101,1,102]]]]]]]],[5,[[6,[184]]]],[5,[[6,[[169,[[0,[101,1]]]]]]]],[5,[[6,[[168,[[0,[101,1]]]]]]]],[5,[[6,[[181,[[0,[101,1]]]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,0,0,0,[[170,170],8],[[171,171],8],[[[172,[[0,[7,1]]]],[172,[[0,[7,1]]]]],8],[[[173,[[0,[7,1]]]],[173,[[0,[7,1]]]]],8],[[[174,[[0,[7,1]]]],[174,[[0,[7,1]]]]],8],[[[175,[[0,[7,1]]]],[175,[[0,[7,1]]]]],8],[[[176,[[0,[7,1]]]],[176,[[0,[7,1]]]]],8],[[177,177],8],[[[178,[[0,[7,1]]]],[178,[[0,[7,1]]]]],8],[[[179,[[0,[7,1]]]],[179,[[0,[7,1]]]]],8],[[180,180],8],[[[167,[[0,[7,1,102]]]],[167,[[0,[7,1,102]]]]],8],[[[168,[[0,[7,1]]]],[168,[[0,[7,1]]]]],8],[[[181,[[0,[7,1]]]],[181,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,[[[35,[[0,[1,102]]]],[58,[[0,[1,102]]]],4],[[6,[171,22]]]],[[[175,[[0,[1,102,183]]]],[35,[[0,[1,102,183]]]],4,[41,[[0,[1,102,183]],[99,[[0,[1,102,183]]]]]]],[[6,[[58,[[0,[1,102,183]]]],22]]]],[[[35,[166]],[58,[166]],[19,[[58,[166]]]],4,8,[163,[166,[99,[166]]]],[162,[[99,[166]]]],[42,[[41,[166,[99,[166]]]]]]],[[6,[[169,[166]],22]]]],[[[35,[1]],[58,[1]],[19,[[58,[1]]]],4,[41,[1,[99,[1]]]]],[[6,[22]]]],[[[168,[1]]],[[19,[171]]]],[[[169,[166]],[35,[166]]],[[6,[22]]]],0,0,0,0,0,0,[[[167,[[0,[1,102,183]]]],[35,[[0,[1,102,183]]]],4,[41,[[0,[1,102,183]],[99,[[0,[1,102,183]]]]]]],[[6,[[58,[[0,[1,102,183]]]],22]]]],[[171,10],11],[[[172,[[0,[9,1]]]],10],11],[[[173,[[0,[9,1]]]],10],11],[[[174,[[0,[9,1]]]],10],11],[[[175,[[0,[9,1]]]],10],11],[[[176,[[0,[9,1]]]],10],11],[[177,10],11],[[[178,[[0,[9,1]]]],10],11],[[[179,[[0,[9,1]]]],10],11],[[180,10],11],[[[167,[[0,[9,1,102]]]],10],11],[[184,10],11],[[[168,[[0,[9,1]]]],10],11],[[[181,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[[0,[1,102,183]]]],[58,[[0,[1,102,183]]]]],[[6,[[173,[[0,[1,102,183]]]],22]]]],[[[35,[[0,[1,102]]]],[57,[[0,[1,102]]]]],180],[[[21,[[44,[106]]]]],[[6,[[173,[1]]]]]],[[[35,[[0,[1,102,183]]]],[58,[[0,[1,102,183]]]]],[[179,[[0,[1,102,183]]]]]],[[[35,[[0,[1,102,183]]]],[58,[[0,[1,102,183]]]],[0,[1,102,183]]],[[6,[[173,[[0,[1,102,183]]]],22]]]],[[[35,[[0,[1,102,183]]]],[58,[[0,[1,102,183]]]]],[[6,[22]]]],[[[0,[14,15]],16],12],[[170,17]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[169,[166]],[35,[166]],[41,[166,[99,[166]]]]],[[6,[22]]]],[[[168,[1]]],8],[[[168,[1]]],8],0,0,0,[4,185],0,[[[35,[166]],[174,[166]],4,8,[41,[166,[99,[166]]]]],[[6,[[168,[166]],22]]]],[[[35,[166]],[174,[166]],4,8,[163,[166,[99,[166]]]],[162,[[99,[166]]]],[42,[[41,[166,[99,[166]]]]]]],[[6,[[169,[166]],22]]]],[[[168,[1]]],[[19,[[176,[1]]]]]],[[[169,[166]],[35,[166]]],[[6,[22]]]],0,0,0,[[[168,[[0,[1,102,101]]]]],[[6,[[55,[[0,[1,102,101]]]],22]]]],[[[35,[166]],[168,[166]],4,8,[163,[166,[99,[166]]]],[162,[[99,[166]]]],[42,[[41,[166,[99,[166]]]]]]],[[6,[[169,[166]],22]]]],[[[173,[[0,[1,102,183]]]],[35,[[0,[1,102,183]]]]],[[58,[[0,[1,102,183]]]]]],[[[179,[[0,[1,102,183]]]],[35,[[0,[1,102,183]]]],4,[41,[[0,[1,102,183]],[99,[[0,[1,102,183]]]]]]],[[58,[[0,[1,102,183]]]]]],[[[168,[1]]],[[19,[[172,[1]]]]]],[[[169,[166]],[35,[166]],[41,[166,[99,[166]]]]],[[6,[22]]]],[[4,[42,[[41,[166,[0,[[38,[166]],102,183]]]]]]],[[6,[[42,[[162,[[0,[[38,[166]],102,183]]]]]],22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],0,0,[[170,23],6],[[171,23],6],[[[172,[[0,[102,1]]]],23],6],[[[173,[1]],23],6],[[[174,[[0,[102,1]]]],23],6],[[[175,[[0,[102,1]]]],23],6],[[[176,[[0,[102,1]]]],23],6],[[177,23],6],[[[178,[[0,[102,1]]]],23],6],[[[179,[[0,[102,1]]]],23],6],[[180,23],6],[[[167,[[0,[102,1,102]]]],23],6],[[184,23],6],[[[169,[[0,[102,1]]]],23],6],[[[168,[[0,[102,1]]]],23],6],[[[181,[[0,[102,1]]]],23],6],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[173,[1]]],24],[4,[[6,[170]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],[[],25],0,0,0,[[[169,[166]],[162,[[99,[166]]]],[41,[166,[99,[166]]]]],[[6,[184,22]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[4],[4],[4],[[22,10],11],[[22,10],11],[186,22],[187,22],[85,22],[[]],[188,22],[47,22],[189,22],[190,22],[[],4],[[]],[87],[22,[[19,[88]]]],[[],24],[[],6],[[],6],[[],25],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[191,[[0,[3,1]],[0,[3,[38,[[0,[3,1]]]]]]]]],[[191,[[0,[3,1]],[0,[3,[38,[[0,[3,1]]]]]]]]]],[[]],[[],192],[[],192],0,[4],[4],[4],[4],[4],[4],0,[[[191,[1,[38,[1]]]],[58,[1]],[35,[1]]],134],[[]],[[]],[[35,[0,[[21,[20]],32]]],134],[[35,138,[0,[[21,[20]],32]]],[[134,[138]]]],[[35,[21,[20]]],134],[[35,58,[0,[[21,[20]],32]]],134],[[[191,[1,[38,[1]]]],[35,[1]],[58,[1]],[0,[[21,[20]],32]]],134],[[35,58],134],[[[191,[1,[38,[1]]]],[35,[1]],[58,[1]]],134],[[],4],[[],4],[[]],[[]],0,0,[[],24],[[],24],[[35,4,[19,[192]],41]],[[[35,[1]],4,[19,[192]],[41,[1,[38,[1]]]]],[[134,[[194,[1,[193,[1,[38,[1]]]],[38,[1]]]]]]]],[[[35,[1]],4,[19,[192]],[41,[1,[38,[1]]]]],[[191,[1,[38,[1]]]]]],[[[35,[1]],4,[19,[192]],[41,[1,[38,[1]]]]],[[191,[1,[38,[1]]]]]],[24,24],[[[191,[1,[38,[1]]]],24],24],[[],24],[[[191,[1,[38,[1]]]]],24],[[[19,[[21,[20]]]],[41,[[0,[1,101]],[38,[[0,[1,101]]]]]]],134],[[[41,[[0,[1,101]],[38,[[0,[1,101]]]]]]],134],[[[35,[1]],[194,[1,[193,[1,[38,[1]]]],[38,[1]]]],[19,[[21,[20]]]]],134],[[[194,[1,[193,[1,[38,[1]]]],[38,[1]]]]],134],[[]],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[35,[1]],[58,[1]]],[[6,[[58,[1]],85]]]],0,[[[35,[1]],[58,[1]]],[[6,[85]]]],[[[35,[1]],[58,[1]]],[[6,[[58,[1]],85]]]],0,0,[85,85],[[[195,[[0,[3,1]]]]],[[195,[[0,[3,1]]]]]],[[[196,[[0,[3,1]]]]],[[196,[[0,[3,1]]]]]],[[]],[[]],[[]],0,0,0,[[[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],0,[[[35,[1]],[58,[1]],[58,[1]]],8],0,0,0,[[],[[35,[1]]]],0,0,[4],[4],[4],[4],[4],[4],[4],[4],0,[4],[4],[4],[4],0,0,0,0,0,[[[35,[1]],[58,[1]]],[[19,[[104,[1]]]]]],[[[35,[1]],[58,[1]]],[[19,[107]]]],[[[35,[1]],[58,[1]]],19],[[[35,[1]],[58,[1]]],19],[[[35,[1]],[57,[1]]],[[19,[[68,[1]]]]]],[[[35,[1]],[58,[1]]],19],[[[35,[1]],[58,[1]]],[[19,[98]]]],[[[35,[1]],[58,[1]]],[[19,[[34,[[58,[1]]]]]]]],[[[35,[1]],[58,[1]]],[[19,[98]]]],[[[35,[1]],[58,[1]]],[[19,[[2,[1]]]]]],[[[35,[1]],[58,[1]]],19],[[[35,[1]],[58,[1]]],[[19,[24]]]],[[[35,[1]],[58,[1]]],[[19,[98]]]],[[[35,[1]],[58,[1]]],[[19,[98]]]],[[[35,[1]],[58,[1]]],19],[[[35,[1]],[58,[1]]],[[19,[[197,[1]]]]]],[[[35,[1]],[58,[1]]],[[19,[[103,[1]]]]]],[[[35,[1]],[58,[1]]],[[19,[13]]]],[[[35,[1]],[56,[1]]],[[19,[[57,[1]]]]]],[[[35,[1]],[55,[1]]],[[19,[[58,[1]]]]]],[[[35,[[0,[9,1]]]],10],11],[[85,10],11],[[85,10],11],[[[195,[[0,[9,1]]]],10],11],[[[196,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],0,[[[35,[1]]],[[58,[1]]]],[[[35,[1]]],[[196,[1]]]],[[[35,[1]]],[[57,[1]]]],[[[35,[1]]],[[57,[1]]]],[[[35,[1]]],[[57,[1]]]],[[[35,[1]]],[[57,[1]]]],[[[35,[1]],[57,[1]]],[[19,[[61,[1]]]]]],[[[35,[1]],[103,[1]]],[[19,[[61,[1]]]]]],[[[35,[1]],[21,[91]]],[[19,[[58,[1]]]]]],[[[35,[1]],108,1],[[19,[[58,[1]]]]]],[[[35,[1]]],[[58,[1]]]],[[[35,[1]],[97,[[2,[1]]]]],[[19,[[58,[1]]]]]],[[[35,[1]],[58,[1]]],[[19,[[55,[1]]]]]],[[[35,[1]]],[[58,[1]]]],[[[35,[1]],98],[[19,[[58,[1]]]]]],[[[35,[1]]],[[58,[1]]]],[[[35,[1]],[57,[1]],[19,[[198,[1]]]]],[[6,[85]]]],[[[35,[1]],[58,[1]],[19,[[198,[1]]]]],[[6,[85]]]],0,0,[[[35,[1]],[57,[1]]],[[19,[[56,[1]]]]]],[[[35,[1]],[58,[1]]],[[19,[[55,[1]]]]]],[[[35,[1]],91],[[55,[1]]]],[[[35,[1]],98],[[55,[1]]]],[[[35,[1]],1,[58,[1]]],[[19,[[58,[1]]]]]],[[[35,[1]],1,[58,[1]]],[[58,[1]]]],0,[[[35,[1]]]],0,0,[[],4],[[],4],[[],4],[[],4],[[[35,[1]],107],[[58,[1]]]],[[[35,[1]],1,[58,[1]]],[[58,[1]]]],[[[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[35,[1]]],[[57,[1]]]],[[[35,[1]]],[[57,[1]]]],[[[35,[1]]],[[57,[1]]]],[[[35,[1]]],[[57,[1]]]],[[[35,[1]],[58,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[35,[1]],[44,[[58,[1]]]]],[[58,[1]]]],[[[35,[1]],108,1],[[58,[1]]]],[[[35,[1]],1],[[58,[1]]]],[[[35,[1]],1],[[58,[1]]]],[[[35,[1]],1],[[58,[1]]]],[[[35,[1]],1],[[58,[1]]]],[[[35,[1]],[97,[[2,[1]]]]],[[58,[1]]]],[[[35,[1]],1],[[58,[1]]]],[[[35,[1]],1],[[58,[1]]]],[[[35,[1]],1],[[58,[1]]]],[[[35,[1]],1],[[58,[1]]]],[[[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[35,[1]],[21,[91]]],[[58,[1]]]],[[[35,[1]]],[[58,[1]]]],[[[35,[1]],98],[[58,[1]]]],[[[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],[[[35,[1]],8],[[58,[1]]]],[[[35,[1]],[197,[1]]],[[58,[1]]]],[[[35,[1]],[103,[1]]],[[58,[1]]]],[[[35,[1]],12],[[58,[1]]]],[[[35,[1]],13],[[58,[1]]]],[[[35,[1]],[56,[1]],[198,[1]]],[[19,[[57,[1]]]]]],[[[35,[1]],[55,[1]],[198,[1]]],[[19,[[58,[1]]]]]],[[]],[[]],[[]],[[]],0,[[[35,[1]],[21,[91]]],[[58,[1]]]],0,0,0,0,0,0,0,[[[35,[1]],[44,[[58,[1]]]]],[[58,[1]]]],0,[[[35,[1]],[21,[91]]],[[58,[1]]]],[[[35,[1]],[57,[1]]],[[57,[1]]]],0,[[],[[35,[1]]]],[[[35,[1]]],[[196,[1]]]],[[[35,[1]]],[[58,[1]]]],[[[35,[1]]],[[58,[1]]]],0,[[[35,[1]],[97,[[2,[1]]]]],[[58,[1]]]],0,0,0,0,0,[[[35,[1]],[58,[1]]],19],0,[[[35,[1]],[58,[1]]],[[6,[85]]]],0,0,[87],[[[195,[1]]],[[58,[1]]]],[[[35,[1]],[58,[1]],[58,[1]]],[[6,[8,85]]]],0,0,[[[35,[1]],91],[[6,[[58,[1]],136]]]],[[[35,[1]],138],[[6,[136]]]],[[[35,[1]],[58,[1]]],[[19,[[58,[1]]]]]],0,[[[35,[1]],[58,[1]]],[[6,[[58,[1]],85]]]],[[[35,[1]],[21,[91]]],[[58,[1]]]],0,[[[35,[1]],[58,[1]],[58,[1]]],[[58,[1]]]],0,[[[35,[1]]],[[58,[1]]]],0,[[[35,[1]],[21,[91]]],[[58,[1]]]],0,[[[35,[1]]],[[58,[1]]]],[[[35,[1]]],[[58,[1]]]],0,0,0,[[]],[[]],[[]],[[],24],[[[35,[1]],[57,[1]]],[[19,[[199,[1]]]]]],[[[35,[1]],[58,[1]]],[[19,[[200,[1]]]]]],[[[35,[1]],[58,[1]]],[[6,[85]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],0,[[[35,[1]],12],[[58,[1]]]],0,[[[195,[1]]],1],[[]],[[]],[[]],[[]],[[[35,[1]],1,1],[[6,[[56,[1]],85]]]],0,[[[35,[1]],1,1],[[6,[[55,[1]],85]]]],0,[[[195,[1]]],[[55,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[98,98],[[19,[98]]]],[[]],[[]],[[]],[[]],[98,98],[201,201],[[]],[[]],[4],[4],[4],[4],[5,[[6,[98]]]],[[98,91],98],[98,[[19,[98]]]],[4],[4],[[98,98],8],[[201,201],8],[[],8],[[],8],[[],8],[[],8],[91,24],[[98,[44,[[21,[91]]]]],98],[[98,10],11],[[98,10],11],[[201,10],11],[[201,10],11],[91,98],[[]],[24,98],[[]],[[[0,[14,15]],16],12],[[98,98],8],[[98,17]],[[],4],[[],4],[[]],[[]],[98,8],[98,8],[98,8],[107,8],[[[44,[[21,[91]]]]],98],[91,98],[[],[[28,[98,201]]]],[[[44,[[21,[91]]]]],98],[[],98],[[98,98],[[19,[18]]]],0,[98,24],[98,24],[98,8],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[],98],[[98,23],6],[[]],[[]],[[],24],[[],24],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[]],[[]],[[[21,[20]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[197,[[0,[3,1]]]]],[[197,[[0,[3,1]]]]]],[[]],[4],[4],[4],[[[197,[[0,[7,1]]]],[197,[[0,[7,1]]]]],8],[[],8],[[],8],[[[197,[[0,[9,1]]]],10],11],[[[197,[1]],10],11],[[]],[[],4],[[]],[147,[[197,[1]]]],[[]],[[],24],[[],6],[[],6],[[],25],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],34],[[],[[34,[109]]]],[[],[[34,[110]]]],[[],[[34,[91]]]],[[108,[45,[1]]],[[6,[[46,[1]],47]]]],[[69,[45,[1]]],[[6,[[46,[1]],47]]]],[[109,[45,[1]]],[[6,[[46,[1]],47]]]],[[110,[45,[1]]],[[6,[[46,[1]],47]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[108,108],[69,69],[109,109],[110,110],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[108]]]],[5,[[6,[69]]]],[5,[[6,[109]]]],[5,[[6,[110]]]],[4],[4],[4],[4],[[108,108],8],[[69,69],8],[[109,109],8],[[110,110],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[108,10],11],[[108,10],11],[[69,10],11],[[69,10],11],[[109,10],11],[[109,10],11],[[110,10],11],[[110,10],11],[[]],[[]],[[]],[[]],[1,19],[1,[[19,[108]]]],[1,[[19,[69]]]],[1,[[19,[109]]]],[1,[[19,[110]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[108,17]],[[69,17]],[[109,17]],[[110,17]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[108,8],[110,8],[[108,108],8],[108,8],[[109,109],[[19,[18]]]],[[110,110],[[19,[18]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[],[[6,[22]]]],[[108,23],6],[[69,23],6],[[109,23],6],[[110,23],6],[4,8],[[109,4],8],[[110,4],8],[[],91],[109,91],[110,91],[[],1],[108,1],[69,1],[109,1],[110,[[0,[[202,[12]],203]]]],[[]],[108],[69],[109],[110],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[111,[[6,[108]]]],[[],6],[111,[[6,[69]]]],[[],6],[111,[[6,[109]]]],[[],6],[[],6],[111,[[6,[110]]]],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],[[[21,[20]]]],0,0,[[13,13],13],[[]],[[]],[[]],[13,13],[[]],[4],[4],[5,[[6,[13]]]],[[13,13],13],[4],[[13,13],8],[[],8],[[],8],[[13,10],11],[[13,10],11],[12,13],[[]],[[],4],[[]],[13,8],[[13,13],13],[[13,13],[[19,[18]]]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[13,13],13],[[13,23],6],[[13,13],13],[[]],[[],24],[[],6],[[],6],[[],25],[[]],[[[21,[20]]]],0,[[35,70],71],[35,24],0,0,0,[[]],[[]],[[]],[4,106],[204,204],[[]],[4],[4],[4],[[204,204],8],[[],8],[[],8],[[204,10],11],[[204,10],11],[[]],[[[44,[106]]],[[134,[204]]]],0,[[],4],[[]],[[[44,[106]]],[[19,[4]]]],0,[204,106],[106,8],[106,8],[204,[[34,[106]]]],[[]],[[],24],[4,[[34,[106]]]],0,[[],6],[[],6],[[],25],[[]],0,0,0,0,0,0,0,[[]],[[]],[205,189],[205,189],0,[4],[4],[4],[[189,10],11],[[189,10],11],[[]],0,[[],4],[[]],[87],0,[[],24],0,[[],6],[[],6],[[],25],[[]],0,[[]],[[]],[4],[4],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,91,[44,[91]],207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,91,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,91,[44,[91]],207],6],[[206,4,207],6],[[206,91,4,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,207],6],[[206,91,207],6],[4],[[206,10],11],[[]],[204,[[6,[101,189]]]],[204,206],[[],4],[[]],[206,8],[[],6],[[],6],[[],25],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[208,6],[208,6],[208,6],[209,6],[210,6],[211,6],[211,6],[[]],[[]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[212,8],[[212,8],6],[[212,[44,[106]]],6],[[212,107],6],[[208,[0,[102,15]]],6],[[208,[0,[102,15]]],6],[[212,213],6],[[212,214],6],[[208,[0,[102,15]]],6],[[210,[0,[102,15]]],6],[[211,91,[0,[102,15]]],6],[[211,91,[0,[102,15]]],6],[[212,215],6],[[212,216],6],[[212,217],6],[[212,218],6],[[209,[0,[102,15]]],6],[[212,[19,[4]]],6],[[212,91,[0,[102,15]]],6],[[212,91,112,91,[0,[102,15]]],6],[212,6],[[212,[19,[4]]],6],[[212,[0,[102,15]]],6],[[212,91],6],[[212,91,4],6],[[212,91,112,91,4],6],[[212,4],6],[[212,91,4],6],[[212,91,112,91,4],6],[[212,111],6],[[212,112],6],[[212,12],6],[[212,106],6],[212,6],[[212,91],6],[[212,91,112,91],6],[[209,[0,[102,15]]],6],[102,[[6,[204,189]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],25],[[],25],[[],25],[[],25],[[],25],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[199,[[0,[3,1]]]]],[[199,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[199,[[0,[101,1]]]]]]]],[4],[[[199,[[0,[7,1]]]],[199,[[0,[7,1]]]]],8],[[],8],[[],8],[[[199,[[0,[9,1]]]],10],11],[[]],[[[199,[1]]],[[61,[1]]]],[[],4],[[]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[[199,[[0,[102,1]]]],23],6],[[]],[[],6],[[],6],[[],25],[[]],[[[21,[20]]]],[[[199,[1]],[80,[1]]],[[56,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[[200,[[0,[3,1]]]]],[[200,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[200,[[0,[101,1]]]]]]]],[4],[[[200,[[0,[7,1]]]],[200,[[0,[7,1]]]]],8],[[],8],[[],8],[[[200,[[0,[9,1]]]],10],11],[[[200,[1]],10],11],[[]],[[[35,[1]],[58,[1]]],[[19,[[200,[1]]]]]],[[],4],[[]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[[200,[[0,[102,1]]]],23],6],[[]],[[],24],[[],6],[[],6],[[],25],[[]],[[[21,[20]]]],[[[200,[1]],[80,[1]]],[[55,[1]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[[220,[[0,[3,219]],[0,[3,1]]]]],[[220,[[0,[3,219]],[0,[3,1]]]]]],[[]],[[[220,[219,1]],[220,[219,1]]],18],[4],[4],[5,[[6,[[220,[[0,[101,219]],[0,[101,1]]]]]]]],[4],[[[220,[[0,[7,219]],[0,[7,1]]]],[220,[[0,[7,219]],[0,[7,1]]]]],8],[[],8],[[],8],[[[220,[[0,[219,205]],1]],10],11],[[[220,[[0,[9,219]],[0,[9,1]]]],10],11],[[]],[91,[[6,[[220,[219,1]],186]]]],[91,[[6,[[55,[1]],85]]]],[91,[[6,[[220,[108,1]],85]]]],[[219,1],[[220,[219,1]]]],[[[0,[14,15]],16],12],[[[220,[219,1]],17]],[[],4],[[]],[[[220,[219,1]]],[[61,[1]]]],[[[220,[219,1]],[220,[219,1]]],[[19,[18]]]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[[220,[[0,[102,219]],[0,[102,1]]]],23],6],[[[220,[219,1]]],219],[[[220,[219,1]]],1],[[[220,[219,1]]],24],[[]],[[],24],[[],6],[[],6],[[],25],[[[220,[219,1]]],1],[[]],[[[21,[20]]]],0,[[]],[[]],[[]],[[[198,[[0,[3,1]]]]],[[198,[[0,[3,1]]]]]],[[]],0,[[],[[198,[[0,[77,1]]]]]],[4],[4],[5,[[6,[[198,[[0,[101,1]]]]]]]],[4],[[[198,[[0,[7,1]]]],[198,[[0,[7,1]]]]],8],0,[[[198,[[0,[9,1]]]],10],11],[[]],[[[198,[1]],[56,[1]]],[[19,[[199,[1]]]]]],[[[198,[1]],[55,[1]]],[[19,[[200,[1]]]]]],[[[55,[1]]],[[19,[[200,[1]]]]]],[[],4],[[[198,[1]],[35,[1]],[58,[1]]],[[19,[[55,[1]]]]]],[[[198,[1]],[55,[1]],[19,[[200,[1]]]]],[[19,[[19,[[200,[1]]]]]]]],[[]],[[],[[198,[1]]]],[[[35,[1]],[58,[1]]]],[[[198,[1]],[80,[1]]],[[55,[1]]]],[[[198,[1]],24,[80,[1]]]],[[[198,[1]],98,[80,[1]]]],[[[21,[20]]],[[6,[22]]]],[[],[[6,[22]]]],[[[198,[[0,[102,1]]]],23],6],[[]],[[[198,[1]]],[[35,[1]]]],[[[198,[1]],[55,[1]]],[[6,[85]]]],[[[35,[1]]],[[198,[1]]]],[[],6],[[],6],[[],25],[[]],[[[21,[20]]]]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[15,"u64"],[4,"UInt"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[4,"Ordering"],[4,"Option"],[3,"Path"],[8,"AsRef"],[4,"Error"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[3,"CacheMap"],[3,"RandomState"],[3,"HashMap"],[8,"Eq"],[8,"Borrow"],[8,"StableDeref"],[8,"Copy"],[8,"FnOnce"],[3,"Vec"],[3,"Store"],[3,"IO"],[3,"Witness"],[8,"Coprocessor"],[3,"MultiFrame"],[3,"CircuitFrame"],[3,"Lang"],[3,"Arc"],[3,"Frame"],[15,"slice"],[8,"ConstraintSystem"],[3,"AllocatedNum"],[4,"SynthesisError"],[3,"AllocatedPtr"],[3,"AllocatedContPtr"],[3,"GlobalAllocations"],[3,"Scalar"],[3,"Bls12"],[3,"PreparedVerifyingKey"],[3,"Proof"],[6,"ZExprPtr"],[6,"ZContPtr"],[3,"ContPtr"],[3,"Ptr"],[4,"Boolean"],[8,"IntoHashComponents"],[15,"array"],[8,"PrimeField"],[4,"ConsName"],[6,"ConsWitness"],[4,"ContName"],[8,"AsAllocatedHashComponents"],[6,"ContWitness"],[4,"Continuation"],[4,"ContTag"],[8,"Write"],[6,"Result"],[4,"TrieCoproc"],[3,"NewCoprocessor"],[3,"LookupCoprocessor"],[3,"InsertCoprocessor"],[3,"Trie"],[8,"Default"],[4,"Error"],[3,"LookupProof"],[3,"PoseidonCache"],[3,"InsertProof"],[4,"ReductionError"],[4,"LurkError"],[4,"ProofError"],[3,"Error"],[4,"NovaError"],[3,"Demand"],[8,"Error"],[4,"Status"],[3,"Evaluator"],[15,"str"],[3,"Error"],[3,"FrameIt"],[8,"Fn"],[3,"Take"],[3,"Binding"],[8,"Into"],[3,"Symbol"],[4,"Coproc"],[3,"DummyCoprocessor"],[8,"Deserialize"],[8,"Serialize"],[3,"Thunk"],[4,"Expression"],[3,"FWrap"],[15,"u8"],[15,"char"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[4,"LanguageField"],[3,"HashConstants"],[6,"U3"],[3,"PoseidonConstants"],[6,"U4"],[6,"U6"],[6,"U8"],[4,"HashArity"],[4,"HashConst"],[3,"InversePoseidonCache"],[8,"HashName"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[3,"Cont"],[6,"ContStub"],[3,"LEM"],[3,"Var"],[4,"LEMCTL"],[4,"LEMOP"],[6,"Result"],[6,"AString"],[4,"Error"],[4,"LitBase"],[6,"Span"],[6,"ParseResult"],[3,"Box"],[8,"InputLength"],[8,"AsBytes"],[3,"ParseError"],[4,"ErrorKind"],[4,"ParseErrorKind"],[6,"IResult"],[4,"Pos"],[4,"StringFragment"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"PublicParams"],[3,"Groth16Prover"],[3,"Parameters"],[3,"GenericSRS"],[8,"RngCore"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[8,"Send"],[6,"S1"],[4,"Proof"],[3,"PublicParams"],[3,"NovaProver"],[6,"C1"],[4,"RawPtr"],[6,"S1"],[3,"CommittedExpression"],[4,"Claim"],[3,"Proof"],[4,"ReductionCount"],[3,"Evaluation"],[3,"PtrEvaluation"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"ZBytes"],[3,"ZStorePtr"],[4,"LurkPtr"],[4,"LurkCont"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"DeserializeOwned"],[3,"VerificationResult"],[6,"NovaProofCache"],[3,"Error"],[3,"Error"],[4,"FromHexError"],[4,"SerdeError"],[3,"Error"],[3,"ReplState"],[3,"Command"],[8,"ReplTrait"],[3,"Repl"],[3,"ConstantPtrs"],[3,"NamedConstants"],[4,"Syntax"],[3,"ZStore"],[4,"ZCont"],[4,"ZExpr"],[4,"LurkSym"],[8,"From"],[8,"Field"],[4,"ZData"],[8,"Display"],[3,"Deserializer"],[8,"Visitor"],[3,"SerializeCell"],[3,"SerializeMap"],[3,"SerializeTupleVariant"],[3,"StructSerializer"],[3,"Serializer"],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[8,"Tag"],[3,"ZPtr"],[8,"ToInputs"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"CoCircuit"],[8,"Evaluable"],[13,"Pos"],[8,"Prover"],[8,"Provable"],[8,"TypePredicates"],[8,"FileStore"],[8,"Op"],[8,"Write"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YOO","n":["Coproc","let_store","lurk"],"q":[[0,"lurk_macros"]],"d":["","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …",""],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
