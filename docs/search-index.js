var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","drop","from","handle_meta","handle_non_meta","init","into","name","new","process_line","prompt","references","try_from","try_into","type_id","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[0,[[]],[[]],[[],1],[2],[2],[2],[[]],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]],8,[0,[[10,[9]],11]]],12],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]]],12],[[],2],[[]],[[],13],[[[6,[3]],2,[14,[1]],[15,[3,[4,[3]]]]],[[5,[3,[4,[3]]]]]],[[[5,[3,[4,[3]]]],13],13],[[[5,[3,[4,[3]]]]],13],[[16,17,[19,[18]]],[[21,[20]]]],[[],21],[[],21],[[],22],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[6,"Scalar"],[4,"Coproc"],[3,"ClutchState"],[3,"Store"],[3,"Ptr"],[3,"Package"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[3,"String"],[4,"Option"],[3,"Lang"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"fcomm":{"doc":"","t":"DEDNDNDNDNDNFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMLLLLLLLLLLLLLLLLLLLLLMLMFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLFMLLLLLLLLLMMMMMFLFFMMMLMFFFMMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLL","n":["Cli","Command","Commit","Commit","Eval","Eval","Open","Open","Prove","Prove","Verify","Verify","_lurk_function","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim","command","commit","commitment","commitment","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","error","eval","eval_input","expression","expression","expression","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","function","function","has_subcommand","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into_app","into_app_for_update","limit","lurk","lurk","lurk","lurk","main","open","opening_request","proof","proof","proof","proof","prove","quote_input","read_eval_from_path","read_from_path","read_no_eval_from_path","reduction_count","reduction_count","references","references","references","references","references","references","references","request","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"fcomm"]],"d":["Functional commitments","","","Creates a hiding commitment to a function","","Evaluates an expression","","Creates an opening","","Generates a proof for the given expression","","Verifies a proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Chain commitment openings. Opening includes commitment to …","Wrap evaluation result in a claim","Path to claim to prove","","","Path to functional commitment","Optional commitment value (hex string). Function will be …","","","","","","","","","","","","","","","","","","","","","","Exit with error on failed verification","","Evaluate inputs before passing to function (outside the …","","Path to expression source","Path to expression source","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Path to function","Optional path to function used if commitment is not …","","","","","","","","","","Path to function input","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Iteration limit","","Function is lurk source.","","","","","","","Path to proof output if prove requested","Path to proof input","Path to proof input","","Quote input before passing to function when opening. …","","","","Number of circuit reductions per step","Number of circuit reductions per step","","","","","","","","Optional path to OpeningRequest – which subsumes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Be verbose","","","","","","","",""],"i":[0,0,0,21,0,21,0,21,0,21,0,21,0,18,12,22,14,23,24,18,12,22,14,23,24,21,21,18,21,12,22,14,23,24,18,21,12,22,14,23,24,22,14,23,18,12,12,22,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,14,18,0,14,23,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,12,22,21,18,21,12,22,14,23,24,0,22,18,21,12,22,14,23,24,18,18,18,12,22,14,23,0,22,0,0,22,23,24,23,22,0,0,0,22,23,18,21,12,22,14,23,24,22,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,24,18,21,12,22,14,23,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]],[5,[4]],6,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[9]]]],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[12,6,[8,[13,[7,[13]]]]]],0,0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],0,[[14,6,[8,[13,[7,[13]]]]]],0,[[[3,[[0,[1,2,15]]]],[5,[4]],16,6,[8,[[0,[1,2,15]],[7,[[0,[1,2,15]]]]]]],[[10,[[17,[[0,[1,2,15]]]],9]]]],0,0,[[18,19],20],[[21,19],20],[[12,19],20],[[22,19],20],[[14,19],20],[[23,19],20],[[24,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,[[10,[18,26]]]],[25,[[10,[21,26]]]],[25,[[10,[12,26]]]],[25,[[10,[22,26]]]],[25,[[10,[14,26]]]],[25,[[10,[23,26]]]],[25,[[10,[24,26]]]],[25,[[10,[18,26]]]],[25,[[10,[21,26]]]],[25,[[10,[12,26]]]],[25,[[10,[22,26]]]],[25,[[10,[14,26]]]],[25,[[10,[23,26]]]],[25,[[10,[24,26]]]],0,0,[27,16],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[3,[[0,[1,2]]]],[5,[4]],16,6,16,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[[17,[[0,[1,2]]]],9]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],0,0,0,0,0,[[]],[[22,6,16,[8,[13,[7,[13]]]]]],[[[5,[4]]],[[10,[[28,[[0,[1,2,15]]]],9]]]],[[[29,[[5,[4]]]]],[[10,[[31,[[0,[2,30,1]]]],9]]]],0,0,0,[[23,6,[8,[13,[7,[13]]]]]],0,[[[3,[[0,[1,2]]]],[5,[4]],6,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[9]]]],[[[3,[[0,[1,2]]]],[5,[4]]],[[10,[[17,[[0,[1,2]]]],9]]]],[[[3,[[0,[1,2]]]],[5,[4]]],[[10,[9]]]],0,0,[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[18,25],[[10,[26]]]],[[21,25],[[10,[26]]]],[[12,25],[[10,[26]]]],[[22,25],[[10,[26]]]],[[14,25],[[10,[26]]]],[[23,25],[[10,[26]]]],[[24,25],[[10,[26]]]],[[18,25],[[10,[26]]]],[[21,25],[[10,[26]]]],[[12,25],[[10,[26]]]],[[22,25],[[10,[26]]]],[[14,25],[[10,[26]]]],[[23,25],[[10,[26]]]],[[24,25],[[10,[26]]]],0,[[24,16,[8,[13,[7,[13]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[8,"LurkField"],[8,"Serialize"],[3,"Store"],[3,"Path"],[8,"AsRef"],[15,"usize"],[4,"Coproc"],[3,"Lang"],[4,"Error"],[4,"Result"],[6,"Command"],[3,"Commit"],[6,"S1"],[3,"Eval"],[8,"DeserializeOwned"],[15,"bool"],[3,"Ptr"],[3,"Cli"],[3,"Formatter"],[6,"Result"],[4,"Command"],[3,"Open"],[3,"Prove"],[3,"Verify"],[3,"ArgMatches"],[3,"Error"],[15,"str"],[3,"OpeningRequest"],[4,"Option"],[8,"Deserialize"],[3,"Proof"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[3,"TypeId"]]},\
"lurk":{"doc":"","t":"ENCCRNCLLLLALLAALLLLLLLAAAALLLLLLLLALALLLLLLALLLAALAAALLLAALALAALLLLLALLAIAKKAADMMLLMMMMLLMMMLLLMMMMMMMLMMLLMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMLMLLLMMLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILKLKLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIDDDDNENDMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLFMLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLKLLLKLLLKLLLAKLLLLLMLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNDNNLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNSDEINNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLNNNNNDEGGDEGGNNNNNNNNNNNNNNNNNNIDNNNNNRRNNNNNNNENNNNNLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNIEEDNNNLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLRDLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLERNRRNLLLLLLLLLLLLFLFLLLLLLLIIIQLLAKLLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLMLLLLLLLLLLLLLLLLLLLLGGNGGGGDGEDNGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLDNNNDEDGGMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLDEDDGRNDNDININEEDDGNNDNDNDDNEGNNNNHDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMMFMLLLLMMMLLLLLFKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMMMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLMLLLLLLKLKLLLLLMMKLKLLLKLKLLLFFFLLLLLLLLLLNNNNNNNNNNNNNNNNNNEEDDNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDNDNEDDDILMMMMLLLLLLLLLLLLMMMLMLLLMMLLLLLLLLMMMLMLMMMLLMMLLLLLLLLLLLLMLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLMMMMMMMLMMLLMLLLLMLMMMMMLMLMMMLLLMMLLLLLLLLLLLLLLLMMLMLLMLMMLMLMMMLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLNENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKL","n":["Num","Scalar","Sym","Symbol","TEST_SEED","U64","UInt","add_assign","borrow","borrow_mut","cid","circuit","clone","clone_into","cont","coprocessor","deref","deref_mut","deserialize","div_assign","drop","eq","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","get_hash","has_id","hash","hash","hash_witness","id","init","into","into_scalar","is_negative","is_zero","light_data","most_negative","most_positive","mul_assign","package","parser","partial_cmp","proof","ptr","public_parameters","read_from_path","read_from_stdin","references","repl","scalar_store","serialize","store","sub_assign","sym","tag","to_owned","to_string","try_from","try_into","type_id","uint","vzip","write_to_path","writer","ToInputs","gadgets","input_size","to_inputs","data","pointer","GlobalAllocations","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","from","fun_tag","if_cont_tag","init","into","lambda_sym","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","power2_32_num","power2_64_num","references","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_scalar_ptr_cont","hash","hash","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","pick","pick","pick_const","ptr","references","references","scalar_ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","drop","eq","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","references","to_owned","try_from","try_into","type_id","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","eval_arity","evaluate","simple_evaluate","synthesize","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","into","into","into","provide","provide","provide","references","references","references","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Status","Terminal","Witness","_p","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_frames","get_frames","has_id","i","id","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_terminal","is_terminal","is_terminal","iter","lang","log","log","log","maybe_emitted_expression","new","next","output","peekmore","precedes","read_from_path","read_from_stdin","reduce","reduce","references","references","references","references","references","references","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","witness","write_to_path","Coproc","Dummy","DummyCoprocessor","Lang","add_coprocessor","arity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cid","cid","clone","clone","clone","clone_into","clone_into","clone_into","coprocessors","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","from","from","from","has_coprocessors","has_id","has_id","id","id","init","init","init","into","into","into","is_default","key","lookup","max_coprocessor_arity","new","read_from_path","read_from_path","read_from_stdin","read_from_stdin","references","references","references","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write_to_path","write_to_path","Char","Comm","Cons","Expression","Fun","Nil","Num","Opaque","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","as_simple_keyword_string","as_str","as_sym","as_sym_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_keyword_sym","is_list","is_null","is_num","is_opaque","is_str","is_sym","is_thunk","references","references","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","BLS12_381","FIELD","FWrap","LanguageField","LurkField","Pallas","Vesta","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","cid","clone","clone_into","cmp","de","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","has_id","hash","hex_digits","id","init","init","into","into","is_negative","most_negative","most_positive","partial_cmp","read_from_path","read_from_stdin","references","references","ser","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_path","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","PoseidonCache","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","constants","constants","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","hash3","hash4","hash6","hash8","init","init","init","init","into","into","into","into","into_hash_components","references","references","references","references","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","ClosedEnv","Cons","ConsName","ConsStub","ConsWitness","Cont","ContName","ContStub","ContWitness","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cons","cons","cons","cons_named","cons_named","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","index","index","index","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","length","new_blank","new_dummy","new_from_stub","references","references","references","references","references","references","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Atom","Cell","Comm","Cons","Encodable","LightData","LightExpr","LightStore","Nil","StrCons","SymCons","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_count","clone","clone","clone_into","clone_into","de","de","de","de","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","read_size_bytes","references","references","references","scalar_map","ser","ser","ser","ser","tag","tag_is_atom","tag_is_small","to_owned","to_owned","to_string","to_string","to_trimmed_le_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LURK_EXTERNAL_SYMBOL_NAMES","Package","add_external_symbol","add_external_symbols","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","external_symbols","fmt","from","init","into","local_symbol","lurk","name","name","new","references","relative_abbreviation","remove_external_symbol","remove_external_symbols","root","to_owned","try_from","try_into","type_id","vzip","Error","KEYWORD_MARKER","NoInput","SYM_MARKER","SYM_SEPARATOR","Syntax","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","names_keyword","provide","read_symbol_path","references","to_owned","to_string","try_from","try_into","type_id","vzip","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","has_id","id","init","init","init","into","into","into","lang","new","outer_prove","proof","proof_count","prove","read_from_path","read_from_stdin","reduction_count","reduction_count","references","references","references","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_groth16_proof","vzip","vzip","vzip","write_to_path","C1","C2","Compressed","EE1","EE2","G1","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","S1","S2","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cid","cid","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","evaluate_and_prove","from","from","from","get_evaluation_frames","has_id","has_id","id","id","init","init","init","into","into","into","lang","new","prove","prove_recursively","public_params","read_from_path","read_from_path","read_from_stdin","read_from_stdin","reduction_count","references","references","references","serialize","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","write_to_path","write_to_path","ContPtr","Index","Null","Opaque","Ptr","RawPtr","SPtr","ScalarContPtr","ScalarPtr","_f","_f","allocate_maybe_fun_unconstrained","arbitrary_with","as_cons","as_list","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","de","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parts","get_hash","get_hash","get_hash","get_hash","has_id","hash","hash","hash","hash","id","idx","index","index","init","init","init","init","into","into","into","into","into_hash_components","is_atom","is_cons","is_error","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_self_evaluating","new","new","null","null","opaque","opaque","opaque_idx","partial_cmp","partial_cmp","raw","raw","read_from_path","read_from_stdin","references","references","references","references","ser","serialize","tag","tag","tag","tag_field","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","write_to_path","Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","FileStore","Five","Id","Ipld","LurkCont","LurkPtr","LurkScalarBytes","LurkScalarIpld","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","ScalarBytes","Source","Ten","Terminal","VERBOSE","VerificationResult","apply","apply_and_prove","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid_from_string","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","hash","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","proof","proof_cid","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_params","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","string_cid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","JsonError","OpeningFailure","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","init","into","provide","references","source","to_string","try_from","try_into","type_id","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","drop","drop","env","eval_expr","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","limit","name","name","new","new","new","new","process_line","process_line","prompt","prompt","references","references","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binop","Binop2","Call","Call2","Char","Comm","Cons","Dummy","Emit","Error","Fun","If","Let","LetRec","Lookup","Nil","Num","Outermost","ScalarContinuation","ScalarExpression","ScalarStore","ScalarThunk","Str","Sym","Tail","Terminal","Thunk","UInt","Unop","add_one_ptr","add_ptr","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","cid","cid","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","finalize","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_cont","get_expr","get_hash","has_id","has_id","has_id","has_id","hash","id","id","id","id","init","init","init","init","into","into","into","into","new_with_expr","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","references","references","references","references","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_store","to_store_with_expr","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","arg","body","closed_env","ConstantPtrs","Create","Error","Get","HashScalar","NamedConstants","Store","StringSet","TypePredicates","all_strings","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","car_cdr_mut","cdr","cdr","char","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comm","comm_store","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diff","drop","drop","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_list","fetch_maybe_sym","fetch_num","fetch_scalar","fetch_scalar_cont","fetch_str","fetch_sym","fetch_uint","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","fun_store","get_begin","get_char","get_char_from_u32","get_constants","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_expr_hash","get_hash_components_cont","get_hash_components_thunk","get_lurk_sym","get_maybe_opaque","get_nil","get_num","get_opaque_ptr","get_quote","get_str","get_sym","get_t","get_u64","greater","greater_equal","hash_cont","hash_expr","hash_expr_aux","hash_nil","hash_string_mut","hash_sym","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","init","init","init","init","init","init","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_key","intern_list","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_nil","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_scalar_cont_ptr","intern_scalar_ptr","intern_str","intern_strcons","intern_sym","intern_sym_and_ancestors","intern_sym_with_case_conversion","intern_thunk","into","into","into","into","into","into","is_fun","is_potentially","is_self_evaluating","key","lambda","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","lurk_package","lurk_sym","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_scalar_ptr_cache","poseidon_cache","product","provide","ptr","ptr_eq","quote","quotient","read","read_in_package","read_maybe_meta","read_next","read_string","references","references","references","references","references","references","root_sym","scalar_from_parts","scalar_from_parts_cont","scalar_ptr","scalar_ptr_cont_map","scalar_ptr_map","secret","secret","secret_mut","str","str_store","strcons","strcons","sum","sym","sym_store","t","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","u64","uint64","unop_store","value","vzip","vzip","vzip","vzip","vzip","vzip","Key","Sym","Sym","Symbol","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","child","child","cid","cid","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","extend","extend","fmt","fmt","from","from","from","from","full_name","full_name","full_sym_name","get_hash","get_hash","has_id","has_id","hash","hash","id","id","init","init","into","into","is_keyword","is_keyword","is_opaque","is_root","is_root","is_toplevel","is_toplevel","key_root","keyword_name","name","name","new","new","new_absolute","new_absolute","new_from_path","new_key","new_opaque","new_opaque","new_sym","opaque","parent","parent","partial_cmp","partial_cmp","path","path","path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","references","references","root","root","serialize","serialize","simple_keyword_name","symbol","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_path","write_to_path","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","cid","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","has_id","has_id","has_id","hash","hash","hash","hash","id","id","id","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","partial_cmp","partial_cmp","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","references","references","references","references","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","U64","UInt","add","arbitrary_with","borrow","borrow_mut","cid","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","equivalent","fmt","fmt","from","from","has_id","id","init","into","is_zero","mul","partial_cmp","read_from_path","read_from_stdin","references","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","vzip","write_to_path","Write","fmt","fmt_to_string"],"q":[[0,"lurk"],[73,"lurk::circuit"],[77,"lurk::circuit::gadgets"],[79,"lurk::circuit::gadgets::data"],[158,"lurk::circuit::gadgets::pointer"],[255,"lurk::cont"],[297,"lurk::cont::Continuation"],[329,"lurk::coprocessor"],[336,"lurk::error"],[410,"lurk::eval"],[580,"lurk::eval::lang"],[667,"lurk::expr"],[741,"lurk::field"],[821,"lurk::hash"],[902,"lurk::hash_witness"],[1119,"lurk::light_data"],[1205,"lurk::package"],[1237,"lurk::parser"],[1265,"lurk::proof"],[1284,"lurk::proof::groth16"],[1350,"lurk::proof::nova"],[1431,"lurk::ptr"],[1579,"lurk::public_parameters"],[2119,"lurk::public_parameters::error"],[2154,"lurk::repl"],[2214,"lurk::scalar_store"],[2369,"lurk::scalar_store::ScalarContinuation"],[2399,"lurk::scalar_store::ScalarExpression"],[2402,"lurk::store"],[2688,"lurk::sym"],[2793,"lurk::tag"],[3013,"lurk::uint"],[3053,"lurk::writer"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","","Returns the argument unchanged.","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","<code>LightData</code> is a lightweight binary data serialization …","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","This module offers a connection the the backend proving …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","As with all evaluation, the value returned from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","Analogous to ScalarExpression::Comm","Analogous to ScalarExpression::Cons","A trait for types that can be serialized and deserialized …","<code>LightData</code> is a binary tree with two types of nodes: Atom …","Enum to represent a light expression.","LightStore contains a fragment of the ScalarStore, but …","Analogous to ScalarExpression::Nil","Replaces ScalarExpression::Str, contains a string and a …","Replaces ScalarExpression::Sym, contains a symbol and a …","","","","","","","","","","Returns the number of bytes required to encode the given …","","","","","Deserializes a <code>LightData</code> into this value.","","","Deserializes a <code>LightData</code> from a <code>&amp;[u8]</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the <code>usize</code> that’s represented by a little endian …","","","","An analogous to the ScalarStore’s scalar_map, but with …","Serializes this value into a <code>LightData</code>.","","","Serializes this <code>LightData</code> into a <code>Vec&lt;u8&gt;</code>.","Returns the tag byte for this <code>LightData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","","","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Generates an outer Groth16 proof using the given …","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","","","The number of reductions used in the proof.","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","","Type alias for a MultiFrame with S1 field elements.","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Type alias for G1 group elements using the Pallas curve.","Type alias for G2 group elements using the Vesta curve.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for scalar field elements on the Pallas curve.","Type alias for scalar field elements on the Vesta curve.","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","Evaluates and proves the computation given the public …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Evaluates and generates the frames of the computation …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","","","","An Index is the ordinary ptr into the IndexSet …","A Null ptr is used when the hash is F::zero(), such as …","An Opaque ptr is created from a ScalarPtr or ScalarContPtr …","","","A struct representing a scalar pointer with a tag and a …","","","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","The underlying pointer, which can be null, opaque, or an …","","","","","","","","","","","An expression tageturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ScalarStore</code> allows realization of a graph of <code>ScalarPtr</code>s …","","","","","","","","","Add all ScalarPtrs representing and reachable from expr.","Add the <code>ScalarPtr</code> representing <code>expr</code>, and queue it for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Method which finalizes the <code>ScalarStore</code>, ensuring that all …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ScalarStore</code> and add all <code>ScalarPtr</code>s reachable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutable version of car_cdr to handle Str. <code>(cdr str)</code> may …","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of ScalarPtr -&gt; ContPtr for reverse lookups","Holds a mapping of ScalarPtr -&gt; Ptr for reverse lookups","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enumeration type for symbol names, which can either be a …","","Type for hieararchical symbol names","","","","","","","Creates a new Symbol with a child path segment added to …","Creates a new Sym with a child path segment added to the …","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","Creates a new Sym with the path extended by the given …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the full name of the Symbol.","Returns the full name of the Symbol or Keyword symbol.","The full name corresponding to the symbol or keyword’s …","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the Sym is a keyword.","Returns true if the Symbol is marked as opaque.","Returns true if the Symbol is the root Symbol, i.e. if it …","Returns true if the Sym is the root symbol.","Returns true if the Symbol is a top-level Symbol, i.e. if …","Returns true if the Sym is toplevel","Returns the root Keyword Symbol.","The full name corresponding to a Sym, if it is a keyword.","Returns the name of the Symbol.","","Creates a new Symbol with the given name and a path …","Creates a new Sym with the given name.","Creates a new Symbol with an absolute path derived from …","Creates a new absolute Sym with the given name.","Creates a new Sym from a path vector and a boolean flag …","Creates a new Keyword Sym with a name derived from the …","Creates a new opaque Symbol with an empty path.","Creates a new opaque Sym.","Creates a new Sym with a name derived from the given …","","Returns the parent Symbol of the Symbol, if there is one.","Returns the parent of the Sym or Keyword, if there is one.","","","Returns a reference to the path vector of the Symbol.","Returns a reference to the path vector of the Sym.","","","","","","","","Creates a new Symbol with the root path <code>[&quot;&quot;]</code>.","Returns the root Symbol.","","","The simple name corresponding to a Sym, if it is a keyword …","Returns true if the Sym is a symbol.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,2,0,0,0,2,0,2,2,2,2,0,2,2,0,0,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,0,2,2,2,0,0,2,0,0,0,2,2,2,0,0,2,0,2,0,0,2,2,2,2,2,0,2,2,0,0,0,183,183,0,0,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,0,0,0,37,38,37,38,38,37,38,37,38,37,37,37,37,37,38,37,184,37,38,37,38,37,38,37,38,37,38,37,38,37,38,37,37,37,37,37,38,38,37,37,37,38,37,38,37,38,37,38,38,37,37,38,37,38,37,38,38,38,38,37,38,37,38,37,38,37,37,37,37,37,37,37,37,37,37,37,38,37,37,37,38,37,37,38,37,38,37,38,37,38,37,38,37,38,51,51,51,51,51,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,185,186,187,188,189,190,191,192,193,194,195,185,186,196,194,189,192,193,194,187,188,189,190,191,193,185,186,188,193,195,185,186,0,0,197,67,67,67,197,56,57,0,56,58,0,58,0,56,58,58,56,57,58,56,57,56,57,56,57,58,56,57,58,56,57,58,56,57,58,58,56,56,57,57,58,58,58,58,58,56,56,57,58,56,57,58,56,57,58,56,57,58,56,57,58,56,56,57,58,56,57,58,56,57,58,56,57,58,56,57,58,56,57,65,0,0,0,0,0,65,0,65,0,64,68,55,64,65,71,66,68,55,64,65,71,66,65,55,64,65,66,55,64,65,66,55,65,68,55,64,65,71,66,68,55,64,65,71,66,65,68,55,64,65,71,66,0,55,55,64,65,66,55,64,65,68,0,55,55,55,55,64,65,71,66,68,55,64,65,65,71,66,68,68,65,64,65,68,55,64,65,71,66,68,64,55,68,55,64,65,71,66,71,198,55,64,65,198,55,65,65,198,55,65,68,0,198,55,64,55,68,71,64,71,64,65,65,198,55,68,55,64,65,71,66,65,64,198,55,65,55,55,64,65,66,55,55,68,55,64,65,71,66,68,55,64,65,71,66,68,55,64,65,71,66,68,55,64,65,71,66,64,65,0,77,0,0,73,77,78,77,73,78,77,73,78,77,78,77,73,78,77,73,73,73,78,77,73,78,77,73,78,77,78,77,73,78,77,77,78,77,73,78,77,73,73,78,77,78,77,78,77,73,78,77,73,73,73,73,73,73,78,77,78,77,78,77,73,78,77,78,77,77,78,77,73,78,77,73,78,77,73,78,77,73,78,77,73,78,77,84,84,84,0,84,84,84,84,84,84,0,84,84,83,83,83,84,84,84,84,84,83,84,83,84,83,84,83,83,84,83,84,83,84,83,84,83,84,83,84,84,83,84,83,83,83,83,84,83,84,83,84,84,84,84,84,84,84,84,84,84,84,83,84,83,84,83,84,83,84,83,83,84,83,94,1,0,0,0,94,94,85,94,85,94,85,85,85,85,85,85,94,85,94,85,85,94,85,85,85,85,94,85,1,1,1,1,1,1,1,1,1,1,85,85,85,1,85,94,85,94,85,1,1,1,85,85,85,94,85,85,85,1,1,1,1,1,1,85,1,1,1,1,1,1,94,85,94,85,94,85,94,85,85,102,103,102,103,102,103,102,103,0,0,0,0,0,102,103,96,104,102,103,96,104,96,96,96,96,96,104,96,104,102,103,96,104,102,103,96,104,102,103,96,104,96,104,102,102,103,96,104,104,104,104,104,102,103,96,104,102,103,96,104,44,102,103,96,104,102,103,96,104,102,103,96,104,102,103,96,104,102,103,96,104,49,47,47,110,47,0,0,0,0,0,0,0,0,110,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,47,47,47,49,49,0,0,49,47,49,47,47,49,49,0,47,47,47,47,110,107,107,110,109,111,47,49,107,110,109,111,47,49,107,109,108,110,108,110,48,107,48,107,109,110,109,111,47,49,107,110,109,111,47,49,107,108,110,109,48,107,111,111,47,49,110,109,111,47,49,107,110,109,111,47,49,107,110,109,111,47,49,107,110,109,111,47,49,107,110,109,111,47,49,48,107,112,110,50,107,110,109,111,47,49,107,110,109,111,47,49,107,107,47,49,47,49,105,47,49,110,109,111,47,49,107,112,110,50,107,110,109,111,47,49,107,107,107,107,107,110,109,111,47,49,107,107,108,110,48,107,107,107,110,109,111,47,49,107,107,110,109,111,47,49,107,110,109,111,47,49,107,110,109,111,47,49,107,110,109,111,47,49,107,86,86,113,113,0,0,0,0,113,113,113,114,113,86,114,113,86,114,113,86,86,113,86,113,86,199,114,113,86,114,113,86,114,113,86,114,113,86,114,113,86,113,86,114,113,113,86,86,114,113,86,114,113,86,114,113,86,86,114,113,86,114,199,114,113,86,86,86,86,113,86,113,86,86,114,113,86,114,113,86,114,113,86,114,113,86,0,0,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,0,0,116,0,0,116,116,116,116,116,116,116,116,116,116,116,116,116,0,116,0,116,116,116,116,116,116,116,0,0,0,200,200,200,0,200,200,200,200,200,0,200,201,201,201,200,0,0,0,0,0,0,125,124,120,125,124,120,120,120,120,125,125,124,120,125,124,120,120,125,124,120,125,124,120,120,120,125,124,120,125,124,120,125,125,125,120,120,125,120,120,125,120,125,124,120,120,120,125,124,120,125,124,120,125,124,120,125,125,125,124,120,120,0,0,135,0,0,0,0,0,0,0,0,135,0,0,0,0,137,136,135,137,136,135,136,135,135,137,136,135,137,136,135,136,135,137,136,135,137,137,136,135,137,136,135,136,135,137,136,135,137,136,135,137,137,137,135,0,136,135,136,135,137,137,136,135,136,135,137,136,135,137,136,135,137,136,135,135,137,136,135,136,135,0,138,138,138,0,0,0,0,0,42,41,42,140,42,42,138,42,41,140,138,42,41,140,140,138,42,41,140,138,42,41,140,138,140,140,138,42,41,140,138,42,41,140,140,138,42,41,140,138,42,41,140,138,42,41,140,138,42,42,41,41,140,140,138,42,42,41,140,140,138,42,41,140,140,138,42,41,140,140,138,42,41,138,42,41,140,138,42,41,140,140,42,42,41,42,42,42,138,138,42,42,42,138,41,42,41,42,41,138,138,140,42,41,140,140,138,42,41,140,140,140,140,42,41,140,138,42,41,140,140,138,42,41,140,138,42,41,140,138,42,41,140,140,138,42,41,140,140,0,0,0,0,0,0,158,0,144,0,0,148,0,157,0,0,0,0,0,148,148,0,144,0,158,0,0,144,0,0,157,157,148,158,0,0,154,154,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,152,202,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,0,145,159,148,149,150,151,152,153,154,155,156,157,158,143,144,159,148,149,150,151,152,153,154,155,156,157,158,143,144,159,151,152,154,143,0,149,150,149,150,158,148,149,150,157,158,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,149,150,149,150,148,149,150,151,152,153,154,155,156,157,158,143,144,159,148,149,150,151,154,155,157,158,144,0,149,153,145,0,144,145,149,150,153,143,149,150,143,149,150,151,152,153,154,155,156,157,158,143,162,144,159,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,151,158,151,157,151,151,148,202,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,148,202,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,152,154,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,145,144,144,149,150,154,0,145,154,154,144,145,154,145,159,145,151,157,144,145,0,203,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,203,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,145,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,143,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,159,149,150,154,0,148,149,150,151,152,153,154,155,156,157,158,143,144,159,151,148,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,162,159,159,145,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,203,148,149,150,151,152,153,154,155,156,157,158,143,162,145,144,159,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,170,167,170,167,167,167,169,167,167,170,167,170,167,170,167,167,167,170,167,169,169,169,169,167,169,167,170,167,170,167,167,167,169,167,169,170,167,167,169,167,169,167,170,167,0,0,0,170,167,170,167,170,167,170,167,170,167,174,174,174,174,172,172,172,174,174,174,172,174,174,174,174,172,172,174,0,0,0,0,172,172,174,174,172,172,174,171,171,172,173,174,171,172,173,174,171,172,173,174,171,172,173,174,171,172,173,174,171,172,173,174,171,172,171,172,173,174,171,172,173,174,171,172,173,174,171,172,173,174,171,172,173,174,171,172,173,174,171,171,172,172,173,174,171,172,173,174,171,171,174,171,172,173,174,174,171,172,173,174,171,172,173,174,171,172,173,174,171,171,172,173,174,171,172,173,174,171,172,173,174,171,172,173,174,171,172,173,174,171,171,172,171,171,172,173,174,171,172,173,174,171,172,173,174,171,172,173,174,171,172,173,174,204,205,206,207,208,209,210,211,212,213,204,205,214,212,207,210,211,212,206,207,208,209,211,204,205,206,211,213,204,205,215,215,215,0,176,0,176,0,0,0,0,0,175,178,178,31,31,176,175,31,60,177,178,176,175,31,60,177,178,31,31,31,31,178,31,31,31,178,178,176,60,177,178,176,60,177,178,178,31,178,31,178,31,31,31,178,175,31,31,31,176,175,31,60,177,178,176,175,31,60,177,178,178,176,175,31,60,177,178,178,178,31,178,178,31,31,31,31,31,31,31,31,31,31,31,31,31,31,176,175,31,60,60,177,178,176,175,31,60,177,178,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,178,178,31,31,31,31,31,31,31,31,178,31,178,31,176,175,31,60,177,178,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,176,175,31,60,177,178,216,216,216,31,178,178,178,178,31,178,31,31,31,31,31,31,178,31,178,31,31,178,31,178,178,31,31,31,31,178,31,31,31,178,60,177,31,178,178,31,31,31,31,31,176,175,31,60,177,178,31,31,31,177,31,31,31,178,31,31,31,31,178,178,31,31,31,178,31,31,176,60,177,178,60,176,175,31,60,177,178,176,175,31,60,177,178,176,175,31,60,177,178,178,31,31,177,176,175,31,60,177,178,76,0,76,0,180,76,180,76,180,76,180,76,180,76,180,76,180,76,180,76,180,76,180,76,180,76,180,76,180,76,180,76,180,76,180,76,76,76,180,76,76,180,76,180,76,180,76,180,76,180,76,180,76,180,76,180,180,76,180,76,76,76,180,76,180,76,180,76,76,76,180,76,76,180,180,76,180,76,180,76,180,180,76,180,76,180,76,180,76,180,76,76,76,180,76,180,76,180,76,180,76,180,76,180,76,90,91,52,52,52,52,52,90,90,89,90,89,90,90,89,91,0,91,52,52,90,91,52,90,91,0,89,91,91,91,52,89,91,91,52,52,52,91,89,89,90,91,0,0,0,90,52,91,91,90,89,91,91,89,0,52,52,89,89,90,52,217,90,91,217,89,52,90,91,89,52,90,91,89,52,90,91,89,52,90,91,89,90,91,89,52,90,91,89,52,90,91,89,52,90,91,89,52,90,91,89,90,91,89,52,90,91,89,52,90,91,89,52,90,91,89,89,52,52,90,90,91,91,89,52,90,91,139,89,52,90,91,89,52,90,91,89,90,91,89,52,90,91,89,90,91,89,52,90,91,89,52,90,91,89,91,89,89,90,91,89,90,91,89,90,91,89,52,90,91,89,90,91,217,90,91,217,90,91,139,89,52,90,91,139,89,52,90,91,89,52,90,91,89,52,90,91,89,89,52,52,90,90,91,91,89,52,90,91,89,52,90,91,89,52,90,91,89,90,91,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,218,218],"f":[0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],[[]],[[],3],0,[[[2,[[0,[4,1]]]]],[[2,[[0,[4,1]]]]]],[[]],0,0,[5],[5],[6,[[7,[[2,[1]]]]]],[[[2,[1]],[2,[1]]]],[5],[[[2,[[0,[8,1]]]],[2,[[0,[8,1]]]]],9],[[],9],0,0,0,0,[[[2,[[0,[10,1]]]],11],12],[[[2,[1]],11],12],[13,[[2,[1]]]],[14,[[2,[1]]]],[[]],[1,[[2,[1]]]],[[[0,[15,16]],17],14],[18,9],0,[[[2,[1]],19]],0,[[],18],[[],5],[[]],[[[2,[1]]],1],[[[2,[1]]],9],[[[2,[1]]],9],0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,[[[2,[1]],[2,[1]]],[[21,[20]]]],0,0,0,[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,0,[[[2,[1]],29],7],0,[[[2,[1]],[2,[1]]]],0,0,[[]],[[],18],[[],7],[[],7],[[],30],0,[[]],[[[23,[22]]]],0,0,0,[[],5],[31,32],0,0,0,0,0,[[]],[[]],0,0,0,0,[[[33,[[0,[4,1]]]]],[[33,[[0,[4,1]]]]]],[[]],0,0,0,[5],[5],[5],0,0,0,0,0,0,0,[[]],0,0,[[],5],[[]],0,0,0,0,[[[34,[1]],[31,[1]]],[[7,[[33,[1]],35]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[25,26,[27,[3]]],[[7,[28]]]],0,0,0,0,0,[[]],0,[[],7],[[],7],[[],30],0,0,[[]],0,0,0,[[[34,[1]],36],[[7,[[37,[1]],35]]]],[[[34,[1]],36],[[7,[[38,[1]],35]]]],[[[34,[1]],[39,[1]]],[[7,[[37,[1]],35]]]],[[[34,[1]],[40,[1]]],[[7,[[38,[1]],35]]]],[[[34,[1]],[31,[1]],[41,[1]]],[[7,[[38,[1]],35]]]],[[[34,[1]],[31,[1]],[42,[1]]],[[7,[[37,[1]],35]]]],[[[34,[1]],[31,[1]],36],[[7,[[38,[1]],35]]]],[[[37,[1]],[34,[1]],[37,[1]]],[[7,[43,35]]]],[[[38,[1]],[34,[1]],[38,[1]]],[[7,[43,35]]]],[[[34,[1]],[44,[1]]],[[7,[[37,[1]],35]]]],[[[37,[1]],[34,[1]],1],[[7,[43,35]]]],[[[34,[1]],[31,[1]],36],[[7,[[37,[1]],35]]]],[[[34,[1]],1,[45,[1]]],[[7,[[37,[1]],35]]]],[[[37,[1]],[34,[1]],1],[[7,[43,35]]]],[[[38,[1]],[34,[1]],1],[[7,[43,35]]]],[[[37,[1]],[34,[1]],[31,[1]]],[[7,[35]]]],[[]],[[[37,[1]]]],[[[38,[1]]]],[[[34,[1]],[21,[[42,[1]]]],[31,[1]]],[[7,[[37,[1]],35]]]],[[[34,[1]],[21,[[41,[1]]]],[31,[1]]],[[7,[[38,[1]],35]]]],[[]],[[]],[[]],[[]],[5,[[37,[1]]]],[5,[[38,[1]]]],[[[37,[[0,[4,46]]]]],[[37,[[0,[4,46]]]]]],[[[38,[[0,[4,1]]]]],[[38,[[0,[4,1]]]]]],[[]],[[]],[[[34,[1]],[33,[1]],[31,[1]],[45,[1]],[37,[1]]],[[7,[[37,[1]],35]]]],[[[34,[1]],[33,[1]],[31,[1]],[37,[1]],[37,[1]]],[[7,[[37,[1]],35]]]],[[[34,[1]],[33,[1]],[37,[1]],[37,[1]],47,[0,[[48,[1]],47,[0,[1,[37,[1]]]]]],43],[[7,[[37,[1]],35]]]],[[[34,[1]],[33,[1]],[31,[1]],[37,[1]],[37,[1]],[37,[1]]],[[7,[[37,[1]],35]]]],[[[34,[1]],[33,[1]],[31,[1]]],[[7,[[37,[1]],35]]]],[[[34,[1]],49,[45,[1]],[0,[[50,[1]],49,[0,[1,[45,[1]]]]]],43],[[7,[[38,[1]],35]]]],[[[34,[1]],49,[45,[1]],[0,[[50,[1]],49,[0,[1,[45,[1]]]]]]],[[7,[35]]]],[[[34,[1]],[33,[1]],[31,[1]],[37,[1]],[37,[1]]],[[7,[[37,[1]],35]]]],[[[34,[1]],[33,[1]],[31,[1]],[37,[1]],[38,[1]]],[[7,[[37,[1]],35]]]],[5],[5],[5],[5],[5],[5],[[[37,[1]],[34,[1]],[37,[1]]]],[[[38,[1]],[34,[1]],[38,[1]]]],[[[38,[1]],[31,[1]]],18],[[[37,[1]],[31,[1]]],18],[[[37,[1]],11],12],[[[38,[1]],11],12],[[]],[[]],[[[45,[1]],[45,[1]]],[[37,[1]]]],[[[45,[1]],[45,[1]]],[[38,[1]]]],[[[38,[1]],[31,[1]]],[[21,[[51,[1]]]]]],[[[38,[1]],[31,[1]]],[[21,[[41,[1]]]]]],[[[38,[1]],[31,[1]]],[[21,[[40,[1]]]]]],[[[37,[1]]],[[45,[1]]]],[[[38,[1]]],[[45,[1]]]],[[],5],[[],5],[[]],[[]],[[[37,[1]],[34,[1]]],[[7,[43,35]]]],[[[37,[1]],[34,[1]]],[[7,[43,35]]]],[[[37,[1]],[34,[1]]],[[7,[43,35]]]],[[[37,[1]],[34,[1]]],[[7,[43,35]]]],[[[37,[1]],[34,[1]],[33,[1]]],[[7,[43,35]]]],[[[37,[1]],[34,[1]]],[[7,[43,35]]]],[[[37,[1]],[34,[1]]],[[7,[43,35]]]],[[[37,[1]],[34,[1]]],[[7,[43,35]]]],[[[37,[1]],[34,[1]]],[[7,[43,35]]]],[[[37,[1]],[34,[1]]],[[7,[43,35]]]],[[[34,[1]],43,[37,[1]],[37,[1]]],[[7,[[37,[1]],35]]]],[[[34,[1]],43,[38,[1]],[38,[1]]],[[7,[[38,[1]],35]]]],[[[34,[1]],43,[39,[1]],[39,[1]]],[[7,[[37,[1]],35]]]],[[[37,[1]],[31,[1]]],[[21,[[42,[1]]]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[37,[1]],[31,[1]]],[[21,[[39,[1]]]]]],[[[37,[1]]],[[45,[1]]]],[[[38,[1]]],[[45,[1]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[51,[[0,[4,1]]]]],[[51,[[0,[4,1]]]]]],[[]],[[[51,[1]]],52],[5],[5],[5],[[[51,[[0,[8,1]]]],[51,[[0,[8,1]]]]],9],[[],9],[[[51,[1]],[31,[1]],53],54],[[[51,[[0,[10,1]]]],11],12],[[]],[[[0,[15,16]],17],14],[[[51,[1]]],[[41,[1]]]],[[[51,[[0,[15,1]]]],19]],[[],5],[[[51,[1]],[31,[1]]]],[[]],[[25,26,[27,[3]]],[[7,[28]]]],[[]],[[],7],[[],7],[[],30],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],5],[[],5],[[31,42,42,41],55],[31,42],[[34,33,31,37,38],[[7,[35]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[56,56],[[[57,[[0,[4,1]]]]],[[57,[[0,[4,1]]]]]],[[]],[[]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[58,11],12],[[58,11],12],[[56,11],12],[[56,11],12],[[[57,[1]],11],12],[[[57,[[0,[10,1]]]],11],12],[35,58],[59,58],[60,58],[[]],[56,58],[[]],[60,56],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[61],[61],[61],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[58,[[21,[62]]]],[56,[[21,[62]]]],[[]],[[]],[[],18],[[],18],[[],18],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[[55,[[0,[4,1]]]]],[[55,[[0,[4,1]]]]]],[[[64,[[0,[4,63]],[0,[4,63]],4]]],[[64,[[0,[4,63]],[0,[4,63]],4]]]],[65,65],[[[66,[[0,[4,1]]]]],[[66,[[0,[4,1]]]]]],[[]],[[]],[[]],[[]],0,[[],65],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[65]]]],[5],[5],[5],[5],[5],[5],[[[31,[1]]],[[42,[1]]]],0,[[[55,[[0,[8,1]]]],[55,[[0,[8,1]]]]],9],[[[64,[[0,[8,63]],[0,[8,63]],8]],[64,[[0,[8,63]],[0,[8,63]],8]]],9],[[65,65],9],[[[66,[[0,[8,1]]]],[66,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[[68,[1,[67,[1]]]]],[[7,[56]]]],[[[31,[1]],69],[[7,[[42,[1]],56]]]],0,[[[55,[[0,[10,1]]]],11],12],[[[55,[1]],11],[[7,[70]]]],[[[55,[1]],[31,[1]],53],54],[[[64,[[0,[10,63]],[0,[10,63]],10]],11],12],[[65,11],12],[[[71,[[0,[10,63]],[0,[10,1]],[0,[10,[67,[[0,[10,1]]]]]]]],11],12],[[[66,[[0,[10,1]]]],11],12],[[]],[[]],[[]],[[[41,[1]]],65],[[]],[[]],[[]],[[[42,[1]],[42,[1]],[31,[1]],5,72,[73,[1,[67,[1]]]]],[[7,[[32,[[64,[[55,[1]],[66,[1]],[67,[1]]]]]],56]]]],[[[68,[1,[67,[1]]]]],[[7,[[32,[[64,[[55,[1]],[66,[1]],[67,[1]]]]]],56]]]],[18,9],0,[[],18],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[68,[1,[67,[1]]]]],[[55,[1]]]],0,[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[[55,[1]]],9],[[[64,[[55,[1]],63,[67,[1]]]]],9],[65,9],[[],9],[[[55,[1]]],9],[65,9],[65,9],[[],9],[[[55,[1]]],9],[65,9],[[[68,[1,[67,[1]]]]],[[7,[[74,[[71,[[66,[1]],1,[67,[1]]]]]],56]]]],0,[[31,5]],[[[55,[1]],[31,[1]],5]],[[[64,[[55,[1]],63,[67,[1]]]],[31,[1]]]],[[[55,[1]],[31,[1]]],[[21,[[42,[1]]]]]],[[[42,[1]],[42,[1]],[31,[1]],5,[73,[1,[67,[1]]]]],[[68,[1,[67,[1]]]]]],[[[71,[[66,[1]],1,[67,[1]]]]],21],0,[[],75],[[[64,[[55,[1]],63,[67,[1]]]],[64,[[55,[1]],63,[67,[1]]]]],9],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[16,31,73],[[7,[56]]]],[[[55,[1]],[31,[1]],[73,[1,[67,[1]]]]],[[7,[56]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[65,29],7],[[],5],[[],65],[[[55,[1]]],65],[[65,[31,[1]]],[[21,[[41,[1]]]]]],[[[55,[1]],[31,[1]]],[[32,[1]]]],[[]],[[]],[[]],[[]],[[],18],[[[55,[1]],[31,[1]]],[[7,[[32,[1]],60]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[23,[22]]]],0,0,0,0,[[[73,[1,[67,[1]]]],76,[67,[1]],[31,[1]]]],[[[77,[1]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[[78,[[0,[4,1]]]]],[[78,[[0,[4,1]]]]]],[[[77,[[0,[4,1]]]]],[[77,[[0,[4,1]]]]]],[[[73,[[0,[4,1]],[0,[4,[67,[[0,[4,1]]]]]]]]],[[73,[[0,[4,1]],[0,[4,[67,[[0,[4,1]]]]]]]]]],[[]],[[]],[[]],[[[73,[1,[67,[1]]]]],[[79,[76]]]],[[],[[73,[[0,[80,1]],[0,[80,[67,[[0,[80,1]]]]]]]]]],[5],[5],[5],[5],[5],[5],[6,[[7,[[78,[1]]]]]],[6,[[7,[[77,[[0,[81,1]]]]]]]],[5],[5],[5],[[[78,[1]]],5],[[[77,[1]]],5],[[[77,[1]],[31,[1]],[42,[1]],[42,[1]],[41,[1]]],[[55,[1]]]],[[[78,[[0,[10,1]]]],11],12],[[[77,[[0,[10,1]]]],11],12],[[[73,[[0,[10,1]],[0,[10,[67,[[0,[10,1]]]]]]]],11],12],[[]],[[]],[[]],[[[73,[1,[67,[1]]]]],9],[18,9],[18,9],[[],18],[[],18],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[73,[1,[67,[1]]]]],9],[[[73,[1,[67,[1]]]]],18],[[[73,[1,[67,[1]]]],[31,[1]],[42,[1]]],21],[[[73,[1,[67,[1]]]]],5],[[],[[73,[1,[67,[1]]]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[78,[1]],29],7],[[[77,[[0,[82,1]]]],29],7],[[[78,[1]],[31,[1]]],[[42,[1]]]],[[[77,[1]],[31,[1]]],[[42,[1]]]],[[[77,[1]],[34,[1]],[33,[1]],[31,[1]],[37,[1]],[38,[1]]],[[7,[35]]]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[83,[1]],[34,[1]],[31,[1]]],[[7,[35]]]],[[[34,[1]],[31,[1]]],[[7,[35]]]],[[[34,[1]],[21,[[83,[1]]]],[31,[1]]],[[7,[35]]]],[[[84,[1]]],[[21,[18]]]],[[[84,[1]]],[[21,[69]]]],[[[84,[1]]],[[21,[76]]]],[[[84,[1]]],[[21,[18]]]],[[]],[[]],[[]],[[]],[[[84,[[0,[4,1]]]]],[[84,[[0,[4,1]]]]]],[[[83,[[0,[4,1]]]]],[[83,[[0,[4,1]]]]]],[[]],[[]],0,[5],[5],[5],[5],[5],[5],[[[84,[[0,[8,1]]]],[84,[[0,[8,1]]]]],9],[[[83,[[0,[8,1]]]],[83,[[0,[8,1]]]]],9],[[],9],[[],9],[[[84,[1]],[31,[1]],53],54],[[[84,[[0,[10,1]]]],11],12],[[[83,[[0,[10,1]]]],11],12],[[]],[[]],[[[0,[15,16]],17],14],[[[83,[1]],19]],[[[34,[1]],[31,[1]],[37,[1]],[38,[1]]],[[7,[[45,[1]],35]]]],[[],5],[[],5],[[]],[[]],[[[84,[1]]],9],[[[84,[1]]],9],[[[84,[1]]],9],[[[84,[1]]],9],[[[84,[1]]],9],[[[84,[1]]],9],[[[84,[1]]],9],[[[84,[1]]],9],[[[84,[1]]],9],[[[84,[1]]],9],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],3],[[[85,[[0,[4,1]]]]],[[85,[[0,[4,1]]]]]],[[]],[[[85,[1]],[85,[1]]],20],[86,[[87,[[85,[1]]]]]],[5],[5],[5],[5],[6,[[7,[[85,[1]]]]]],[5],[5],[[[85,[[0,[8,1]]]],[85,[[0,[8,1]]]]],9],[[],9],[[[85,[[0,[10,1]]]],11],12],[[]],[[]],[[],21],[88],[52],[89],[90],[91],[92],[93],[14],[[],94],[[[0,[15,16]],17],14],[18,9],[[[85,[1]],19]],[[],18],[[],18],[[],5],[[],5],[[]],[[]],[[],9],[[]],[[]],[[[85,[1]],[85,[1]]],[[21,[20]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[85,[1]]],86],[[[85,[1]],29],7],[[],[[32,[95]]]],[[],[[21,[88]]]],[[],[[21,[52]]]],[[],[[21,[89]]]],[[],[[21,[90]]]],[[],[[21,[91]]]],[[]],[[],[[21,[92]]]],[[],[[21,[93]]]],[[],93],[[],[[21,[14]]]],[[],14],[[],18],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[96,[1]]],[[98,[1,97]]]],[[[96,[1]]],[[98,[1,99]]]],[[[96,[1]]],[[98,[1,100]]]],[[[96,[1]]],[[98,[1,101]]]],[[[96,[1]],102],[[103,[1]]]],0,[[],[[96,[1]]]],[[],[[104,[[0,[80,1]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[[96,[[0,[10,1]]]],11],12],[[[104,[[0,[10,1]]]],11],12],[[]],[5,102],[[]],[[]],[[]],[[[104,[1]]],1],[[[104,[1]]],1],[[[104,[1]]],1],[[[104,[1]]],1],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[107,[[0,[105,80,63,106,10]],63,1]]],[[32,[[0,[105,80,63,106,10]]]]]],[[[107,[[0,[105,80,63,106,10]],63,1]],[31,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[108,[1]],[31,[1]],[42,[1]]],[[7,[60]]]],[[[110,[[109,[1]]]],[31,[1]],[42,[1]]],[[7,[60]]]],[[[108,[1]],[31,[1]],[42,[1]]],[[7,[60]]]],[[[110,[[109,[1]]]],[31,[1]],[42,[1]]],[[7,[60]]]],[[[48,[1]],47,[31,[1]],[42,[1]]],[[7,[60]]]],[[[107,[47,[109,[1]],1]],47,[31,[1]],[42,[1]]],[[7,[60]]]],[[[48,[1]],47,[31,[1]],[42,[1]]],[[7,[56]]]],[[[107,[47,[109,[1]],1]],47,[31,[1]],[42,[1]]],[[7,[56]]]],0,[[[110,[4]]],[[110,[4]]]],[[[109,[[0,[4,1]]]]],[[109,[[0,[4,1]]]]]],[[[111,[[0,[4,1]]]]],[[111,[[0,[4,1]]]]]],[47,47],[49,49],[[[107,[[0,[4,105]],4,[0,[4,1]]]]],[[107,[[0,[4,105]],4,[0,[4,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[108,[1]],[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],[[[110,[[109,[1]]]],[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],0,[[[48,[1]],47,[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],[[[107,[47,[109,[1]],1]],47,[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],0,0,[[],47],[[],49],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[[110,[8]],[110,[8]]],9],[[[109,[[0,[8,1]]]],[109,[[0,[8,1]]]]],9],[[[111,[[0,[8,1]]]],[111,[[0,[8,1]]]]],9],[[47,47],9],[[49,49],9],[[[107,[[0,[8,105]],8,[0,[8,1]]]],[107,[[0,[8,105]],8,[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[48,[1]],47,[42,[1]],[42,[1]],[42,[1]],[31,[1]]],[[42,[1]]]],[[[107,[47,[109,[1]],1]],47,[42,[1]],[42,[1]],[42,[1]],[31,[1]]],[[42,[1]]]],[[[112,[1]],[31,[1]],[41,[1]]],[[21,[[51,[1]]]]]],[[[110,[[111,[1]]]],[31,[1]],[41,[1]]],[[21,[[51,[1]]]]]],[[[50,[1]],49,[31,[1]],[41,[1]]],[[21,[[51,[1]]]]]],[[[107,[49,[111,[1]],1]],49,[31,[1]],[41,[1]]],[[21,[[51,[1]]]]]],[[[110,[10]],11],12],[[[109,[[0,[10,1]]]],11],12],[[[111,[[0,[10,1]]]],11],12],[[47,11],12],[[49,11],12],[[[107,[[0,[10,105]],10,[0,[10,1]]]],11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[[107,[[0,[105,80,63,106,10]],63,1]],[0,[105,80,63,106,10]]],[[110,[63]]]],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[47,19]],[[49,19]],[[],5],[47,5],[49,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[112,[1]],[31,[1]],[51,[1]]],[[41,[1]]]],[[[110,[[111,[1]]]],[31,[1]],[51,[1]]],[[41,[1]]]],[[[50,[1]],49,[31,[1]],[51,[1]]],[[41,[1]]]],[[[107,[49,[111,[1]],1]],49,[31,[1]],[51,[1]]],[[41,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],[[107,[[0,[105,80,63,106,10]],63,1]]]],[[],[[107,[[0,[105,80,63,106,10]],63,1]]]],[[[110,[63]]],[[107,[[0,[105,80,63,106,10]],63,1]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,[[[108,[1]],[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],[[[110,[[109,[1]]]],[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],[[[48,[1]],47,[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],[[[107,[47,[109,[1]],1]],47,[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],[[[107,[[0,[105,80,63,106,10]],63,1]]],[[32,[[110,[63]]]]]],[[[107,[[0,[105,80,63,106,10]],63,1]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[[107,[[0,[105,80,63,106,10]],63,1]]],5],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,95],[[[113,[[0,[4,1]]]]],[[113,[[0,[4,1]]]]]],[86,86],[[]],[[]],[86,[[87,[16]]]],[86,[[87,[[114,[1]]]]]],[86,[[87,[[113,[1]]]]]],[[],[[87,[86]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[[114,[[0,[8,1]]]],[114,[[0,[8,1]]]]],9],[[[113,[[0,[8,1]]]],[113,[[0,[8,1]]]]],9],[[86,86],9],[[],9],[[],9],[[[114,[[0,[10,1]]]],11],12],[[[113,[1]],11],12],[[[113,[[0,[10,1]]]],11],12],[[86,11],12],[[86,11],12],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[],[[21,[5]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,[[],86],[[[114,[1]]],86],[[[113,[1]]],86],[86,[[32,[95]]]],[86,95],[95,9],[95,9],[[]],[[]],[[],18],[[],18],[5,[[32,[95]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[]],[[]],[[]],0,0,[[115,[23,[69]]]],[115],[[]],[[]],[115,115],[[]],[[],115],[5],[5],[5],0,[[115,11],12],[[]],[[],5],[[]],[[115,76],[[21,[76]]]],[[],115],[115,76],0,[76,115],[[25,26,[27,[3]]],[[7,[28]]]],[[115,76],76],[[115,76]],[115],[[],115],[[]],[[],7],[[],7],[[],30],[[]],0,0,0,0,0,0,[[]],[[]],[116,116],[[]],[5],[5],[5],[[116,11],12],[[116,11],12],[[]],[[],5],[[]],[69],[61],[[[75,[117]]],[[7,[116]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[]],[[],18],[[],7],[[],7],[[],30],[[]],0,0,0,0,[5,5],[5,5],0,[[],73],[5,5],[5,9],[5,9],[[5,73]],0,[[],[[7,[32,35]]]],[[],5],[[],32],[[],5],[[],5],[32,[[7,[9,35]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[[120,[[0,[4,118,119]]]]],[[120,[[0,[4,118,119]]]]]],[[]],[[5,[122,[[73,[121,[67,[121]]]]]]],[[7,[[124,[123]],35]]]],[5],[5],[5],[5],[5],[5],[6,[[7,[[120,[[0,[118,119]]]]]]]],[5],[5],[5],[[]],[[]],[[]],[18,9],[[],18],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[125,[123,[67,[121]],121]]],[[73,[121,[67,[121]]]]]],[[5,[73,[121,[67,[121]]]]],[[125,[123,[67,[121]],121]]]],[[[125,[123,[67,[121]],121]],[126,[123]],[127,[123]],[42,[121]],[42,[121]],[31,[121]],5,[0,[128,4]],[122,[[73,[121,[67,[121]]]]]]],[[7,[58]]]],0,0,[[[125,[123,[67,[121]],121]],[0,[121,[55,[121]],[66,[121]],[67,[121]]]],[126,[123]],128],[[7,[[129,[123]],35]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[[125,[123,[67,[121]],121]]],5],0,[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[120,[[0,[118,119]]]],29],7],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[[130,[123]],[131,[123]],[132,[123]],[0,[128,133]]],[[7,[9,35]]]],[[[0,[121,[55,[121]],[66,[121]],[67,[121]]]],[130,[123]],[129,[123]]],[[7,[9,35]]]],[[]],[[]],[[]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[[135,[[67,[134]]]],[136,[[67,[134]]]]],[[7,[[135,[[67,[134]]]],58]]]],[5],[5],[5],[5],[5],[5],[6,[[7,[[136,[[0,[81,[67,[134]]]]]]]]]],[6,[[7,[[135,[[0,[81,[67,[134]]]]]]]]]],[5],[5],[5],[[[137,[134,[67,[134]]]],[136,[[67,[134]]]],[42,[134]],[42,[134]],[31,[134]],5,[122,[[73,[134,[67,[134]]]]]]],[[7,[58]]]],[[]],[[]],[[]],[[[137,[134,[67,[134]]]],[42,[134]],[42,[134]],[31,[134]],5,[73,[134,[67,[134]]]]],[[7,[[32,[[64,[[55,[134]],[66,[134]],[67,[134]]]]]],58]]]],[18,9],[18,9],[[],18],[[],18],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[137,[134,[67,[134]]]]],[[73,[134,[67,[134]]]]]],[[5,[73,[134,[67,[134]]]]],[[137,[134,[67,[134]]]]]],[[[137,[134,[67,[134]]]],[136,[[67,[134]]]],[32,[[64,[[55,[134]],[66,[134]],[67,[134]]]]]],[31,[134]],[122,[[73,[134,[67,[134]]]]]]],[[7,[58]]]],[[[136,[[67,[134]]]],[31,[134]],5,[32,[134]],[122,[[73,[134,[67,[134]]]]]]],[[7,[[135,[[67,[134]]]],58]]]],[[5,[122,[[73,[134,[67,[134]]]]]]],[[136,[[67,[134]]]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[[137,[134,[67,[134]]]]],5],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[136,[[0,[82,[67,[134]]]]]],29],7],[[[135,[[0,[82,[67,[134]]]]]],29],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[[135,[[67,[134]]]],[136,[[67,[134]]]],5,[32,[134]]],[[7,[9,59]]]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,[[[34,[1]],[31,[1]],[21,[[42,[1]]]]],[[7,[35]]]],[[]],[[[42,[1]]],[[21,[[42,[1]]]]]],[[[42,[1]]],[[21,[[42,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[138,138],[[[42,[[0,[4,1]]]]],[[42,[[0,[4,1]]]]]],[[[41,[[0,[4,1]]]]],[[41,[[0,[4,1]]]]]],[[[140,[[0,[4,139]],[0,[4,1]]]]],[[140,[[0,[4,139]],[0,[4,1]]]]]],[[]],[[]],[[]],[[]],[[138,138],20],[[[140,[139,1]],[140,[139,1]]],20],[86,[[87,[[140,[139,1]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[[140,[139,1]]]]]],[5],[5],[5],[5],[[138,138],9],[[[42,[[0,[8,1]]]],[42,[[0,[8,1]]]]],9],[[[41,[[0,[8,1]]]],[41,[[0,[8,1]]]]],9],[[[140,[[0,[8,139]],[0,[8,1]]]],[140,[[0,[8,139]],[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[138,11],12],[[[42,[[0,[10,1]]]],11],12],[[[42,[1]],[31,[1]],53],54],[[[41,[1]],[31,[1]],53],54],[[[41,[[0,[10,1]]]],11],12],[[[140,[[0,[10,139]],[0,[10,1]]]],11],12],[[[140,[[0,[139,141]],1]],11],12],[[]],[[]],[88,[[42,[1]]]],[[]],[[]],[[139,1],[[140,[139,1]]]],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[18,9],[[138,19]],[[[42,[1]],19]],[[[41,[1]],19]],[[[140,[139,1]],19]],[[],18],[138,[[21,[5]]]],[[89,5],[[42,[1]]]],[[52,5],[[41,[1]]]],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[[140,[139,1]]]],[[[42,[1]]],9],[[[42,[1]]],9],[[[41,[1]]],9],[[[42,[1]]],9],[[[42,[1]]],9],[[[42,[1]]],9],[138,9],[138,9],[[[42,[1]]],9],[[[42,[1]],89],9],[[[42,[1]]],9],[5,138],[[52,138],[[41,[1]]]],[89,[[42,[1]]]],[52,[[41,[1]]]],[[89,5],[[42,[1]]]],[[52,5],[[41,[1]]]],[138,[[21,[5]]]],[[138,138],[[21,[20]]]],[[[140,[139,1]],[140,[139,1]]],[[21,[20]]]],0,0,[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[140,[139,1]]],86],[[[140,[139,1]],29],7],[[[140,[139,1]]],139],0,0,[[[140,[139,1]]],1],[[]],[[]],[[]],[[]],[[],18],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[[140,[139,1]]],1],[[]],[[]],[[]],[[]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[31,[142]],[42,[142]],[143,[142]],5,9,[73,[142,[77,[142]]]]],[[7,[[144,[142]],24]]]],[[[31,[142]],[42,[142]],[143,[142]],5,9,9,[137,[142,[77,[142]]]],[136,[[77,[142]]]],[122,[[73,[142,[77,[142]]]]]]],[[7,[[145,[142]],24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],146],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[69,[[7,[146,147]]]],0,0,[148,148],[149,149],[150,150],[[[151,[[0,[4,1]]]]],[[151,[[0,[4,1]]]]]],[[[152,[[0,[4,1]]]]],[[152,[[0,[4,1]]]]]],[153,153],[[[154,[[0,[4,1]]]]],[[154,[[0,[4,1]]]]]],[155,155],[156,156],[157,157],[158,158],[[[143,[[0,[4,1,82]]]]],[[143,[[0,[4,1,82]]]]]],[[[144,[[0,[4,1]]]]],[[144,[[0,[4,1]]]]]],[159,159],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],160],0,0,0,0,[[158,[31,[[0,[1,82,161]]]]],[[41,[[0,[1,82,161]]]]]],[148,5],[[],149],[[],150],[[],157],[[],158],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[148]]]],[6,[[7,[149]]]],[6,[[7,[150]]]],[6,[[7,[[151,[1]]]]]],[6,[[7,[[152,[[0,[81,1]]]]]]]],[6,[[7,[153]]]],[6,[[7,[[154,[[0,[81,1]]]]]]]],[6,[[7,[155]]]],[6,[[7,[156]]]],[6,[[7,[157]]]],[6,[[7,[158]]]],[6,[[7,[[143,[[0,[81,1,82]]]]]]]],[6,[[7,[162]]]],[6,[[7,[[145,[[0,[81,1]]]]]]]],[6,[[7,[[144,[[0,[81,1]]]]]]]],[6,[[7,[159]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,0,0,[[148,148],9],[[149,149],9],[[150,150],9],[[[151,[[0,[8,1]]]],[151,[[0,[8,1]]]]],9],[[[152,[[0,[8,1]]]],[152,[[0,[8,1]]]]],9],[[153,153],9],[[[154,[[0,[8,1]]]],[154,[[0,[8,1]]]]],9],[[155,155],9],[[156,156],9],[[157,157],9],[[158,158],9],[[[143,[[0,[8,1,82]]]],[143,[[0,[8,1,82]]]]],9],[[[144,[[0,[8,1]]]],[144,[[0,[8,1]]]]],9],[[159,159],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[[31,[[0,[1,82]]]],[42,[[0,[1,82]]]],5],[[7,[149,24]]]],[[153,[31,[[0,[1,82,161]]]],5,[73,[[0,[1,82,161]],[77,[[0,[1,82,161]]]]]]],[[7,[[42,[[0,[1,82,161]]]],24]]]],[[[31,[142]],[42,[142]],[21,[[42,[142]]]],5,9,[137,[142,[77,[142]]]],[136,[[77,[142]]]],[122,[[73,[142,[77,[142]]]]]]],[[7,[[145,[142]],24]]]],[[[31,[1]],[42,[1]],[21,[[42,[1]]]],5,[73,[1,[77,[1]]]]],[[7,[24]]]],[[[144,[1]]],[[21,[149]]]],[[[145,[142]],[31,[142]]],[[7,[24]]]],0,0,0,0,0,0,[[[143,[[0,[1,82,161]]]],[31,[[0,[1,82,161]]]],5,[73,[[0,[1,82,161]],[77,[[0,[1,82,161]]]]]]],[[7,[[42,[[0,[1,82,161]]]],24]]]],[[149,11],12],[[150,11],12],[[[151,[[0,[10,1]]]],11],12],[[[152,[[0,[10,1]]]],11],12],[[153,11],12],[[[154,[[0,[10,1]]]],11],12],[[155,11],12],[[156,11],12],[[157,11],12],[[158,11],12],[[[143,[[0,[10,1,82]]]],11],12],[[162,11],12],[[[144,[[0,[10,1]]]],11],12],[[159,11],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[31,[[0,[1,82,161]]]],[42,[[0,[1,82,161]]]]],[[151,[[0,[1,82,161]]]]]],[[[31,[[0,[1,82]]]],[41,[[0,[1,82]]]]],158],[23,[[7,[[151,[1]]]]]],[[[31,[[0,[1,82]]]],[42,[[0,[1,82]]]]],157],[[[31,[[0,[1,82,161]]]],[42,[[0,[1,82,161]]]],[0,[1,82,161]]],[[151,[[0,[1,82,161]]]]]],[[[31,[[0,[1,82,161]]]],[42,[[0,[1,82,161]]]]]],[[[0,[15,16]],17],14],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[[148,19]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[145,[142]],[31,[142]],[73,[142,[77,[142]]]]],[[7,[24]]]],[[[144,[1]]],9],[[[144,[1]]],9],0,0,0,[5,163],0,[[[31,[142]],[152,[142]],5,9,[73,[142,[77,[142]]]]],[[7,[[144,[142]],24]]]],[[[31,[142]],[152,[142]],5,9,[137,[142,[77,[142]]]],[136,[[77,[142]]]],[122,[[73,[142,[77,[142]]]]]]],[[7,[[145,[142]],24]]]],[[[144,[1]]],[[21,[[154,[1]]]]]],[[[145,[142]],[31,[142]]],[[7,[24]]]],0,0,0,[[[31,[142]],[144,[142]],5,9,[137,[142,[77,[142]]]],[136,[[77,[142]]]],[122,[[73,[142,[77,[142]]]]]]],[[7,[[145,[142]],24]]]],[[[151,[[0,[1,82,161]]]],[31,[[0,[1,82,161]]]]],[[42,[[0,[1,82,161]]]]]],[[157,[31,[[0,[1,82,161]]]],5,[73,[[0,[1,82,161]],[77,[[0,[1,82,161]]]]]]],[[42,[[0,[1,82,161]]]]]],[[[144,[1]]],[[21,[150]]]],[[[145,[142]],[31,[142]],[73,[142,[77,[142]]]]],[[7,[24]]]],[[5,[122,[[73,[142,[0,[[67,[142]],82,161]]]]]]],[[7,[[122,[[136,[[0,[[67,[142]],82,161]]]]]],24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],0,[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,[[148,29],7],[[149,29],7],[[150,29],7],[[[151,[1]],29],7],[[[152,[[0,[82,1]]]],29],7],[[153,29],7],[[[154,[[0,[82,1]]]],29],7],[[155,29],7],[[156,29],7],[[157,29],7],[[158,29],7],[[[143,[[0,[82,1,82]]]],29],7],[[162,29],7],[[[145,[[0,[82,1]]]],29],7],[[[144,[[0,[82,1]]]],29],7],[[159,29],7],0,0,0,0,[6,[[7,[146]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[151,[1]]],18],[[],7],[5,[[7,[148]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,0,0,[[[145,[142]],[136,[[77,[142]]]],[73,[142,[77,[142]]]]],[[7,[162,24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[5],[[24,11],12],[[24,11],12],[[]],[164,24],[35,24],[60,24],[165,24],[166,24],[[],5],[[]],[61],[[25,26,[27,[3]]],[[7,[28]]]],[24,[[21,[62]]]],[[],18],[[],7],[[],7],[[],30],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[167,[[0,[4,1]],[0,[4,[67,[[0,[4,1]]]]]]]]],[[167,[[0,[4,1]],[0,[4,[67,[[0,[4,1]]]]]]]]]],[[]],[[],168],[[],168],0,[5],[5],[5],[5],[5],[5],0,[[[167,[1,[67,[1]]]],[42,[1]],[31,[1]]],87],[[]],[[]],[[31,[0,[[23,[22]],63]],115],87],[[31,[75,[117]],115,[0,[[23,[22]],63]]],87],[[31,[23,[22]],115],87],[[31,42,115,[0,[[23,[22]],63]]],87],[[[167,[1,[67,[1]]]],[31,[1]],[42,[1]],115,[0,[[23,[22]],63]]],87],[[31,42],87],[[[167,[1,[67,[1]]]],[31,[1]],[42,[1]]],87],[[],5],[[],5],[[]],[[]],0,0,[[],18],[[],18],[[31,5,[21,[168]],73]],[[[31,[1]],5,[21,[168]],[73,[1,[67,[1]]]]],[[87,[[170,[1,[169,[1,[67,[1]]]],[67,[1]]]]]]]],[[[31,[1]],5,[21,[168]],[73,[1,[67,[1]]]]],[[167,[1,[67,[1]]]]]],[[[31,[1]],5,[21,[168]],[73,[1,[67,[1]]]]],[[167,[1,[67,[1]]]]]],[18,18],[[[167,[1,[67,[1]]]],18],18],[[],18],[[[167,[1,[67,[1]]]]],18],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[21,[[23,[22]]]],[73,[1,[67,[1]]]]],87],[[[73,[1,[67,[1]]]]],87],[[[31,[1]],[170,[1,[169,[1,[67,[1]]]],[67,[1]]]],[21,[[23,[22]]]]],87],[[[170,[1,[169,[1,[67,[1]]]],[67,[1]]]]],87],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[171,[1]],[31,[1]],[42,[1]]],[[21,[[39,[1]]]]]],[[[171,[1]],[31,[1]],[42,[1]]],[[21,[[39,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[[171,[[0,[4,1]]]]],[[171,[[0,[4,1]]]]]],[[[172,[[0,[4,1]]]]],[[172,[[0,[4,1]]]]]],[[[173,[[0,[4,1]]]]],[[173,[[0,[4,1]]]]]],[[[174,[[0,[4,1]]]]],[[174,[[0,[4,1]]]]]],[[]],[[]],[[]],[[]],[[],[[171,[[0,[80,1]]]]]],[[],[[172,[1]]]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[[171,[[0,[81,80,1]]]]]]]],[6,[[7,[[172,[[0,[81,1]]]]]]]],[6,[[7,[[173,[[0,[81,1]]]]]]]],[6,[[7,[[174,[[0,[81,1]]]]]]]],[5],[5],[5],[5],[[[171,[[0,[8,1]]]],[171,[[0,[8,1]]]]],9],[[[172,[[0,[8,1]]]],[172,[[0,[8,1]]]]],9],[[[173,[[0,[8,1]]]],[173,[[0,[8,1]]]]],9],[[[174,[[0,[8,1]]]],[174,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[[171,[1]],[31,[1]]]],[[[171,[[0,[10,1]]]],11],12],[[[172,[[0,[10,1]]]],11],12],[[[172,[1]],11],12],[[[173,[[0,[10,1]]]],11],12],[[[174,[[0,[10,1]]]],11],12],[[]],[[]],[[]],[[]],[[[171,[1]],[40,[1]]],[[21,[[174,[1]]]]]],[[[171,[1]],[39,[1]]],[[21,[[172,[1]]]]]],[[[0,[15,16]],17],14],[18,9],[18,9],[18,9],[18,9],[[[174,[[0,[15,1]]]],19]],[[],18],[[],18],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[[31,[1]],[42,[1]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[171,[[0,[82,1]]]],29],7],[[[172,[[0,[82,1]]]],29],7],[[[173,[[0,[82,1]]]],29],7],[[[174,[[0,[82,1]]]],29],7],[[]],[[]],[[]],[[]],[[[171,[1]]],[[21,[[31,[1]]]]]],[[[171,[1]],[39,[1]]],21],[[],18],[[[114,[1]]],[[7,[[171,[1]]]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[175,[[32,[69]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[31,[1]],[42,[1]]],[[7,[[42,[1]],60]]]],0,[[[31,[1]],[42,[1]]],[[7,[60]]]],[[[31,[1]],[42,[1]]],[[7,[60]]]],[[[31,[1]],[42,[1]]],[[7,[[42,[1]],60]]]],0,0,[176,176],[60,60],[[[177,[[0,[4,1]]]]],[[177,[[0,[4,1]]]]]],[[[178,[[0,[4,1]]]]],[[178,[[0,[4,1]]]]]],[[]],[[]],[[]],[[]],0,0,0,[[[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],0,[[[31,[1]],[42,[1]],[42,[1]]],9],0,0,0,[[],175],[[],[[31,[1]]]],0,0,[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,[5],[5],[5],[5],[5],[5],0,0,0,0,0,[[[31,[1]],[42,[1]]],[[21,[[84,[1]]]]]],[[[31,[1]],[42,[1]]],[[21,[88]]]],[[[31,[1]],[42,[1]]],21],[[[31,[1]],[42,[1]]],21],[[[31,[1]],[41,[1]]],[[21,[[51,[1]]]]]],[[[31,[1]],[42,[1]]],21],[[[31,[1]],[42,[1]]],[[21,[[32,[[42,[1]]]]]]]],[[[31,[1]],[42,[1]]],[[21,[76]]]],[[[31,[1]],[42,[1]]],[[21,[[2,[1]]]]]],[[[31,[1]],[39,[1]]],[[21,[[42,[1]]]]]],[[[31,[1]],[40,[1]]],[[21,[[41,[1]]]]]],[[[31,[1]],[42,[1]]],[[21,[69]]]],[[[31,[1]],[42,[1]]],[[21,[76]]]],[[[31,[1]],[42,[1]]],[[21,[13]]]],[[176,11],12],[[175,11],12],[[[31,[[0,[10,1]]]],11],12],[[60,11],12],[[60,11],12],[[[177,[[0,[10,1]]]],11],12],[[[178,[[0,[10,1]]]],11],12],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[31,[1]]],[[42,[1]]]],[[[31,[1]],88],[[42,[1]]]],[[[31,[1]],93],[[42,[1]]]],[[[31,[1]]],[[178,[1]]]],[[[31,[1]]],[[41,[1]]]],[[[31,[1]]],[[41,[1]]]],[[[31,[1]]],[[41,[1]]]],[[[31,[1]]],[[41,[1]]]],[[[31,[1]],[42,[1]]],[[21,[[39,[1]]]]]],[[[31,[1]],[41,[1]]],21],[[[31,[1]],[83,[1]]],21],[[[31,[1]],[23,[69]],9],[[21,[[42,[1]]]]]],[[[31,[1]],89,1],[[21,[[42,[1]]]]]],[[[31,[1]]],[[42,[1]]]],[[[31,[1]],[179,[[2,[1]]]]],[[21,[[42,[1]]]]]],[[[31,[1]],[42,[1]]],[[21,[[39,[1]]]]]],[[[31,[1]]],[[42,[1]]]],[[[31,[1]],[23,[69]]],[[21,[[42,[1]]]]]],[[[31,[1]],76],[[21,[[42,[1]]]]]],[[[31,[1]]],[[42,[1]]]],[[[31,[1]],14],[[42,[1]]]],0,0,[[[31,[1]],[41,[1]]],[[21,[[40,[1]]]]]],[[[31,[1]],[42,[1]]],[[21,[[39,[1]]]]]],[[[31,[1]],[42,[1]],176],[[21,[[39,[1]]]]]],[[[31,[1]],176],[[21,[[39,[1]]]]]],[[[31,[1]],[23,[69]]],1],[[[31,[1]],[42,[1]],176],[[21,[[39,[1]]]]]],[[[31,[1]],1,[42,[1]]],[[21,[[42,[1]]]]]],[[[31,[1]],1,[42,[1]]],[[42,[1]]]],0,[[[31,[1]]]],0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[31,[1]],1,[42,[1]]],[[42,[1]]]],[[[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],[[[31,[1]]],[[41,[1]]]],[[[31,[1]]],[[41,[1]]]],[[[31,[1]]],[[41,[1]]]],[[[31,[1]]],[[41,[1]]]],[[[31,[1]],[42,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],[[[31,[1]],76],[[42,[1]]]],[[[31,[1]]],[[42,[1]]]],[[[31,[1]],1],[[42,[1]]]],[[[31,[1]],1],[[42,[1]]]],[[[31,[1]],1],[[42,[1]]]],[[[31,[1]],1],[[42,[1]]]],[[[31,[1]]],[[42,[1]]]],[[[31,[1]],[179,[[2,[1]]]]],[[42,[1]]]],[[[31,[1]],1],[[42,[1]]]],[[[31,[1]],1],[[42,[1]]]],[[[31,[1]],1],[[42,[1]]]],[[[31,[1]],1],[[42,[1]]]],[[[31,[1]],[40,[1]],[171,[1]]],[[21,[[41,[1]]]]]],[[[31,[1]],[39,[1]],[171,[1]]],[[21,[[42,[1]]]]]],[[[31,[1]],[23,[69]]],[[42,[1]]]],[[[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],[[[31,[1]],76],[[42,[1]]]],[[[31,[1]],76],[[21,[[42,[1]]]]]],[[[31,[1]],[23,[69]],115],[[42,[1]]]],[[[31,[1]],[83,[1]]],[[42,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[89,9],[[],9],[[[31,[1]],[23,[69]]],[[42,[1]]]],0,0,0,0,0,0,0,[[[31,[1]]],[[42,[1]]]],0,0,[[[31,[1]],[23,[69]]],[[42,[1]]]],[[[31,[1]],[41,[1]]],[[41,[1]]]],0,[[],[[31,[1]]]],[[[31,[1]]],[[178,[1]]]],[[[31,[1]]],[[42,[1]]]],[[[31,[1]]],[[42,[1]]]],0,[[[31,[1]],[179,[[2,[1]]]]],[[42,[1]]]],0,0,0,0,0,[[[31,[1]],[42,[1]]],21],0,[[[31,[1]],[42,[1]]],[[7,[60]]]],0,0,0,[61],[[[177,[1]]],[[42,[1]]]],[[[31,[1]],[42,[1]],[42,[1]]],[[7,[9,60]]]],0,0,[[[31,[1]],69],[[7,[[42,[1]],116]]]],[[[31,[1]],69,115],[[7,[[42,[1]],116]]]],[[[31,[1]],[75,[117]],115],[[7,[116]]]],[[[31,[1]],[75,[117]],115],[[7,[[42,[1]],116]]]],[[[31,[1]],[75,[117]]],[[7,[[42,[1]],116]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[31,[1]],[23,[69]],9],[[42,[1]]]],[[[31,[1]],1,1],[[21,[[39,[1]]]]]],[[[31,[1]],1,1],[[21,[[40,[1]]]]]],[[[177,[1]]],[[39,[1]]]],0,0,[[[31,[1]],[42,[1]]],[[21,[[42,[1]]]]]],0,[[[31,[1]],[42,[1]]],[[7,[[42,[1]],60]]]],[[[31,[1]],[23,[69]]],[[42,[1]]]],0,[[[31,[1]],[42,[1]],[42,[1]]],[[42,[1]]]],0,0,[[[31,[1]],[23,[69]]],[[42,[1]]]],0,[[[31,[1]]],[[42,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[],18],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,[[[31,[1]],14],[[42,[1]]]],0,[[[177,[1]]],1],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[180,18],180],[[76,18],76],[[],3],[[],3],[180,180],[76,76],[[]],[[]],[5],[5],[5],[5],[6,[[7,[180]]]],[6,[[7,[76]]]],[5],[5],[[180,180],9],[[76,76],9],[[],9],[[],9],[180,180],[76,76],[[180,11],12],[[76,11],12],[[]],[[]],[18,76],[69,76],[180,18],[76,18],[76,18],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[18,9],[18,9],[[180,19]],[[76,19]],[[],18],[[],18],[[],5],[[],5],[[]],[[]],[180,9],[76,9],[180,9],[180,9],[76,9],[180,9],[76,9],[[],76],[76,[[21,[18]]]],[180,18],[76,18],[18,180],[18,76],[18,180],[18,76],[[9,[32,[18]]],76],[18,76],[[],180],[9,76],[18,76],0,[180,[[21,[180]]]],[76,[[21,[76]]]],[[180,180],[[21,[20]]]],[[76,76],[[21,[20]]]],[180,[[32,[18]]]],[76,[[32,[18]]]],0,[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[],180],[[],76],[[180,29],7],[[76,29],7],[76,[[21,[18]]]],[76,180],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],32],[[],[[32,[90]]]],[[],[[32,[91]]]],[[],[[32,[69]]]],[[89,[34,[1]]],[[7,[[45,[1]],35]]]],[[52,[34,[1]]],[[7,[[45,[1]],35]]]],[[90,[34,[1]]],[[7,[[45,[1]],35]]]],[[91,[34,[1]]],[[7,[[45,[1]],35]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[89,89],[52,52],[90,90],[91,91],[[]],[[]],[[]],[[]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[89]]]],[6,[[7,[90]]]],[6,[[7,[91]]]],[5],[5],[5],[5],[[89,89],9],[[52,52],9],[[90,90],9],[[91,91],9],[[],9],[[],9],[[],9],[[],9],[[89,11],12],[[89,11],12],[[52,11],12],[[52,11],12],[[90,11],12],[[90,11],12],[[91,11],12],[[91,11],12],[[]],[[]],[[]],[[]],[1,21],[1,[[21,[89]]]],[1,[[21,[52]]]],[1,[[21,[90]]]],[1,[[21,[91]]]],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[[[0,[15,16]],17],14],[18,9],[18,9],[18,9],[[89,19]],[[52,19]],[[90,19]],[[91,19]],[[],18],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[89,9],[91,9],[[89,89],9],[89,9],[[90,90],[[21,[20]]]],[[91,91],[[21,[20]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[89,29],7],[[90,29],7],[[91,29],7],[5,9],[[90,5],9],[[91,5],9],[[],69],[90,69],[91,69],[[],1],[89,1],[52,1],[90,1],[91,[[0,[[181,[14]],182]]]],[[]],[89],[52],[90],[91],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],7],[92,[[7,[89]]]],[[],7],[92,[[7,[52]]]],[[],7],[92,[[7,[90]]]],[[],7],[92,[[7,[91]]]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],0,0,[[13,13],13],[[]],[[]],[[]],[[],3],[13,13],[[]],[5],[5],[6,[[7,[13]]]],[[13,13],13],[5],[[13,13],9],[[],9],[[13,11],12],[[13,11],12],[[]],[14,13],[18,9],[[],18],[[],5],[[]],[13,9],[[13,13],13],[[13,13],[[21,[20]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[13,13],13],[[13,29],7],[[13,13],13],[[]],[[],18],[[],7],[[],7],[[],30],[[]],[[[23,[22]]]],0,[[31,53],54],[31,18]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[3,"Cid"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"UInt"],[15,"u64"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[3,"String"],[8,"Hasher"],[4,"Ordering"],[4,"Option"],[3,"Path"],[8,"AsRef"],[4,"Error"],[3,"RawCodec"],[8,"Read"],[8,"Extend"],[3,"Error"],[8,"Serializer"],[3,"TypeId"],[3,"Store"],[3,"Vec"],[3,"GlobalAllocations"],[8,"ConstraintSystem"],[4,"SynthesisError"],[8,"FnOnce"],[3,"AllocatedPtr"],[3,"AllocatedContPtr"],[6,"ScalarPtr"],[6,"ScalarContPtr"],[3,"ContPtr"],[3,"Ptr"],[4,"Boolean"],[8,"IntoHashComponents"],[3,"AllocatedNum"],[8,"PrimeField"],[4,"ConsName"],[6,"ConsWitness"],[4,"ContName"],[6,"ContWitness"],[4,"Continuation"],[4,"ContTag"],[8,"Write"],[6,"Result"],[3,"IO"],[4,"ReductionError"],[4,"LurkError"],[4,"ProofError"],[4,"NovaError"],[3,"Error"],[3,"Demand"],[8,"Error"],[8,"Copy"],[3,"Frame"],[4,"Status"],[3,"Witness"],[8,"Coprocessor"],[3,"Evaluator"],[15,"str"],[3,"Error"],[3,"FrameIt"],[8,"Fn"],[3,"Lang"],[3,"Take"],[3,"PeekMoreIterator"],[4,"Sym"],[4,"Coproc"],[3,"DummyCoprocessor"],[3,"HashMap"],[8,"Default"],[8,"Deserialize"],[8,"Serialize"],[3,"Thunk"],[4,"Expression"],[3,"FWrap"],[4,"LightData"],[6,"Result"],[15,"char"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[4,"LanguageField"],[15,"u8"],[3,"HashConstants"],[6,"U3"],[3,"PoseidonConstants"],[6,"U4"],[6,"U6"],[6,"U8"],[4,"HashArity"],[4,"HashConst"],[3,"PoseidonCache"],[8,"HashName"],[8,"Eq"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[3,"Cont"],[6,"ContStub"],[4,"LightExpr"],[3,"LightStore"],[3,"Package"],[4,"Error"],[8,"Iterator"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"Scalar"],[3,"Arc"],[3,"Bls12"],[3,"PublicParams"],[3,"Groth16Prover"],[3,"Parameters"],[3,"GenericSRS"],[8,"RngCore"],[3,"Proof"],[3,"PreparedVerifyingKey"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[8,"Send"],[6,"S1"],[4,"Proof"],[3,"PublicParams"],[3,"NovaProver"],[4,"RawPtr"],[8,"Tag"],[3,"SPtr"],[8,"Display"],[6,"S1"],[3,"CommittedExpression"],[4,"Claim"],[3,"Proof"],[6,"Cid"],[4,"Error"],[4,"ReductionCount"],[3,"Evaluation"],[3,"PtrEvaluation"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"LurkScalarBytes"],[3,"LurkScalarIpld"],[4,"LurkPtr"],[4,"LurkCont"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"DeserializeOwned"],[3,"VerificationResult"],[6,"NovaProofCache"],[3,"Error"],[3,"Error"],[4,"FromHexError"],[3,"ReplState"],[3,"Command"],[8,"ReplTrait"],[3,"Repl"],[3,"ScalarStore"],[4,"ScalarExpression"],[3,"ScalarThunk"],[4,"ScalarContinuation"],[3,"StringSet"],[4,"HashScalar"],[3,"ConstantPtrs"],[3,"NamedConstants"],[8,"Into"],[3,"Symbol"],[8,"From"],[8,"Field"],[8,"ToInputs"],[8,"AsAllocatedHashComponents"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"CoCircuit"],[8,"Evaluable"],[8,"Encodable"],[8,"Prover"],[8,"Provable"],[8,"Id"],[8,"FileStore"],[13,"Let"],[13,"LetRec"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"],[8,"TypePredicates"],[8,"Op"],[8,"Write"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YOO","n":["Coproc","let_store","lurk"],"q":[[0,"lurk_macros"]],"d":["","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …",""],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[]},\
"lurkrs":{"doc":"","t":"F","n":["main"],"q":[[0,"lurkrs"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
