var searchIndex = new Map(JSON.parse('[\
["foil",{"doc":"FOIL Flat Optimization Intermediate Language","t":"PFFFEEGEFFEKEFPFENNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNCNCNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKNFFFGFFPKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFIKKFIFFNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNONNNNNNNNONNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["F","Foil","FoilConfig","Func","Graph","Id","Label","LabelTrait","MappedFoil","Meta","MetaData","MetaMapper","Relation","Schema","V","Var","Vert","add","add_constructor","add_with_meta","alloc","alloc_unique_var","alloc_unique_var_with_meta","alloc_var","alloc_var_with_meta","alloc_with_meta","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","coil","compare","congruence","connect","constructor","constructors","constructors","default","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalences","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finalize","finalize_for_schema","find","find","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_hash","get_hash","get_hash","get_hash","get_hash","graph","graph_mut","hash","hash","hash","hash","hash","header","header","header","init","init","init","init","init","init","init","init","intern_constant","intern_var","intern_var_by_label","into","into","into","into","into","into","into","into","is_finalized","is_minimized","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","merge","metadata","minimal","minimize","name","new","new","new","new_with_metadata","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","projectors","register","synthesize","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unique_var","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","var","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Relation","synthesize","AsSyntax","CoilDef","CoilMeta","CoilSyntax","Context","Let","Let","Syntax","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","compare","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expand","expand","expand","find","find","fmt","fmt","fmt","from","from","from","from","from","from","from","get_hash","hash","init","init","init","init","init","init","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","Graph","Id","LabelTrait","MetaData","Partition","SimpleLabel","Vert","Vertex","alloc","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","class","class_info","classes","classes","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","congruent","congruent","connect","connect","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equiv","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","find","find","find","find_predecessor","find_vertex","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_hash","hash","id","id","index","index","init","init","init","init","into","into","into","into","label","label","labels","layout_raw","layout_raw","layout_raw","layout_raw","merge","merge","metadata","metadata","metadata","new","new","partition","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","predecessors","predecessors_owned","set_equiv","size","successor","successors","successors","successors","to_owned","to_owned","to_owned","to_owned","to_partition","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vert","vertex","vertex","vertices","vzip","vzip","vzip","vzip"],"q":[[0,"foil"],[304,"foil::circuit"],[306,"foil::coil"],[459,"foil::congruence"],[629,"core::cmp"],[630,"core::clone"],[631,"core::convert"],[632,"alloc::string"],[633,"core::cmp"],[634,"alloc::vec"],[635,"core::default"],[636,"rkyv::with"],[637,"core::result"],[638,"core::option"],[639,"core::fmt"],[640,"core::fmt"],[641,"lurk::field"],[642,"core::hash"],[643,"core::marker"],[644,"core::hash"],[645,"core::fmt"],[646,"core::alloc::layout"],[647,"core::alloc::layout"],[648,"bellpepper_core::constraint_system"],[649,"alloc::boxed"],[650,"core::any"],[651,"lurk::lem::store"],[652,"lurk::lem::pointers"],[653,"anyhow"],[654,"std::collections::hash::map"],[655,"core::ops::function"],[656,"core::cell"],[657,"core::ops::function"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This module provides a general mechanism for synthesizing …","","","","","","","","","","","","","","","","","","Congruence Closure","","","Congruence Closure extended with constructors and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a vector of triples, each represnting the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Partition <code>self</code> (a <code>Graph</code>), filtering vertices to those for …","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[11,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,1,9,1,1,1,1,1,1,1,29,7,9,14,1,15,11,16,29,7,9,14,1,15,11,16,0,7,9,14,1,15,11,16,7,9,14,1,15,11,16,7,0,7,0,1,7,0,9,9,14,1,15,16,29,7,9,14,1,15,11,16,29,7,9,14,1,15,11,16,29,7,9,14,1,15,11,16,29,7,9,14,1,15,11,16,7,9,14,15,11,16,9,7,7,7,7,7,9,9,9,9,9,14,14,14,14,14,15,15,15,15,15,11,11,11,11,11,16,16,16,16,16,1,1,27,29,7,7,9,14,1,15,15,11,11,16,29,7,7,7,9,9,9,14,1,15,15,15,15,15,15,15,11,11,11,11,11,11,11,16,7,9,14,15,11,1,1,7,9,14,15,11,7,15,11,29,7,9,14,1,15,11,16,1,1,1,29,7,9,14,1,15,11,16,1,1,29,7,9,14,1,15,11,16,1,7,1,1,7,29,7,15,7,7,29,7,9,14,1,15,11,16,7,1,29,7,9,14,1,15,11,16,7,15,11,29,7,9,14,1,15,11,16,29,7,9,14,1,15,11,16,29,7,9,14,1,15,11,16,1,7,9,14,15,11,16,7,9,14,15,11,16,7,9,14,15,11,16,11,29,7,9,14,1,15,11,16,0,38,0,0,0,0,0,0,66,0,67,65,66,35,61,36,67,65,66,35,61,36,35,61,36,35,61,36,35,35,35,36,67,65,66,35,61,36,67,65,66,35,61,36,67,65,66,35,61,36,67,65,66,35,61,36,35,61,35,35,35,35,35,61,61,61,61,61,39,65,66,67,36,35,61,36,67,65,66,35,35,61,36,35,35,67,65,66,35,61,36,67,65,66,35,61,36,67,65,66,35,61,36,35,67,65,66,35,61,36,35,61,36,67,65,66,35,61,36,67,65,66,35,61,36,67,65,66,35,61,36,67,65,66,35,61,36,67,65,66,35,61,36,67,65,66,35,61,36,67,65,66,35,61,36,0,0,0,0,0,0,0,0,44,69,69,2,44,70,69,2,44,70,70,44,70,70,69,2,44,70,69,2,44,70,2,44,2,44,69,44,70,69,2,44,70,69,2,44,70,69,2,44,70,69,2,44,70,69,2,44,70,69,69,69,69,69,69,2,2,2,2,2,44,44,44,44,44,70,70,70,70,70,2,44,70,69,2,69,69,2,44,70,53,53,69,2,2,44,70,70,2,2,69,2,70,70,69,2,44,70,69,2,44,70,69,70,70,69,2,44,70,2,44,69,70,70,69,2,44,69,2,44,70,69,69,69,70,69,69,70,70,69,2,44,70,44,69,69,2,44,70,69,2,44,70,69,2,44,70,44,2,70,2,70,2,70,69,2,44,44,69,2,44,70],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[1,[-1,-2]],-3,[3,[2]]],2,[4,5],6,[[8,[[7,[-2]]]]]],[[[9,[-1]],[7,[-1]],-1],10,6],[[[1,[-1,-2]],-3,[3,[2]],-2],2,[4,5],6,[[8,[[7,[-2]]]]]],[[[1,[-1,-2]],-3],2,[4,5],6,[[8,[11]]]],[[[1,[-1,-2]],-3],2,[4,5],6,[[8,[12]]]],[[[1,[-1,-2]],-3,-4],2,[4,5],6,[[8,[12]]],[[8,[-2]]]],[[[1,[-1,-2]],13],2,[4,5],6],[[[1,[-1,-2]],-3,-4],2,[4,5],6,[[8,[12]]],[[8,[-2]]]],[[[1,[-1,-2]],-3,-4],2,[4,5],6,[[8,[11]]],[[8,[-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[7,[-1]]],[[7,[-1]]],[5,6]],[[[9,[-1]]],[[9,[-1]]],[5,6]],[14,14],[[[1,[-1,-2]]],[[1,[-1,-2]]],[5,4],[5,6]],[15,15],[11,11],[16,16],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[7,[-1]],[7,[-1]]],17,[18,6]],0,[[-1,-2],17,[],[]],0,[[[1,[-1,-2]],2,-3],10,[4,5],6,[[20,[],[[19,[2]]]]]],[[-1,[21,[[7,[-2]]]],-2],[[7,[-2]]],[[8,[12]]],6],0,[[[9,[-1]]],[[21,[[7,[-1]]]]],6],[[],[[9,[-1]]],[22,6]],[[],14],[[],[[1,[-1,-2]]],[4,5],6],[[],15],[[],16],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[23,10],[23,10],[23,10],[23,10],[23,10],[23,10],[23,10],[23,10],[[[7,[-1]],[7,[-1]]],26,[4,6]],[[[9,[-1]],[9,[-1]]],26,[4,6]],[[14,14],26],[[15,15],26],[[11,11],26],[[16,16],26],[[[9,[-1]]],[[21,[[7,[-1]]]]],6],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[[1,[-1,-2]]],10,[4,5],6],[[[1,[-1,-2]]],10,[4,5],6],[[27,-1],[[28,[-2]]],6,[]],[[[29,[-1,-2,-3,-4]],-2],[[28,[-3]]],[4,5],6,[],[[27,[-2,-3]]]],[[[7,[-1]],30],31,[32,6]],[[[7,[-1]],30],[[25,[10,33]]],6],[[[9,[-1]],30],31,[32,6]],[[14,30],31],[[[1,[-1,-2]],30],31,[32,4],[32,6]],[[15,30],31],[[15,30],[[25,[10,33]]]],[[11,30],31],[[11,30],[[25,[10,33]]]],[[16,30],31],[-1,-1,[]],[34,[[7,[35]]]],[34,[[7,[35]]]],[-1,-1,[]],[[[36,[-1,-2,-3]]],[[9,[35]]],37,[[38,[-1]]],[[39,[-1]]]],[[[36,[-1,-2,-3]]],[[9,[35]]],37,[[38,[-1]]],[[39,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[11,15],[34,15],[[[7,[-1]]],15,6],[34,15],[-1,-1,[]],[11,15],[[[7,[-1]]],15,6],[[[7,[-1]]],11,6],[34,11],[[[7,[-1]]],11,6],[-1,-1,[]],[15,11],[15,11],[34,11],[-1,-1,[]],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[-1,-2],40,[41,42],43],[[[1,[-1,-2]]],[[44,[-2,11]]],[4,5],6],[[[1,[-1,-2]]],[[44,[-2,11]]],[4,5],6],[[[7,[-1]],-2],10,[41,6],45],[[[9,[-1]],-2],10,[41,6],45],[[14,-1],10,45],[[15,-1],10,45],[[11,-1],10,45],[[-1,-2],[[46,[-2,-3]]],[],[47,48,49],[]],[[-1,-2],[[46,[-2,-3]]],[],[47,48,49],[]],[[-1,-2],[[46,[-2,-3]]],[],[47,48,49],[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[[1,[-1,-2]],13,-1],[[25,[15,50]]],[4,5],6],[[[1,[-1,-2]],13],[[10,[15,2]]],[4,5],6],[[[1,[-1,-2]],-3],[[10,[15,2]]],[4,5],6,[[8,[11]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]]],26,[4,5],6],[[[1,[-1,-2]]],26,[4,5],6],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[[1,[-1,-2]],53,53],10,[4,5],6],[[[7,[-1]]],-1,6],[[[1,[-1,-2]]],[[1,[-1,-2]]],[4,5],6],[[[1,[-1,-2]]],[[1,[-1,-2]]],[4,5],6],[[[7,[-1]]],12,6],[[[1,[-1,-2]],-4],[[29,[-1,-2,-3,-4]]],[4,5],6,[],[[27,[-2,-3]]]],[-1,[[7,[-2]]],[[8,[12]]],6],[-1,15,[[8,[12]]]],[[-1,-2],[[7,[-2]]],[[8,[12]]],6],[[[7,[-1]],[7,[-1]]],[[28,[17]]],[54,6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[7,[-1]]],[[28,[[21,[[7,[-1]]]]]]],6],[[[1,[-1,-2]],11,2],10,[4,5],6],[[[29,[-1,-2,-4,-5]],-6],[[25,[10,55]]],[4,5],6,37,[[38,[-3]]],[[27,[-2,-4]]],[[56,[-3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[[[1,[-1,-2]],-3],15,[4,5],6,[[8,[12]]]],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,11,[[8,[12]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[38,-2,[60,[-1]],[21,[[60,[-1]]]]],[[25,[10,55]]],37,[[56,[-1]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[35,35],[61,61],[[[36,[-1,-2,-3]]],[[36,[-1,-2,-3]]],[5,37],[5,[38,[-1]]],[5,[39,[-1]]]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[35,35],17],[[-1,-2],17,[],[]],[[],35],[[],[[36,[-1,-2,-3]]],37,[[38,[-1]]],[[39,[-1]]]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[23,10],[23,10],[23,10],[23,10],[23,10],[23,10],[[35,35],26],[[61,61],26],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[39,[1,[-1,35]],[62,[-1]],63,[3,[63]]],[[64,[[21,[63]]]]],37],[[65,[1,[-1,35]],[62,[-1]],63,[3,[63]]],[[64,[[21,[63]]]]],37],[[66,[1,[-1,35]],[62,[-1]],63,[3,[63]]],[[64,[[21,[63]]]]],37],[[[67,[[36,[-1,-2,-3]]]],35],[[28,[-3]]],37,[[38,[-1]]],[[39,[-1]]]],[[[36,[-1,-2,-3]],35],[[28,[-2]]],37,[[38,[-1]]],[[39,[-1]]]],[[35,30],31],[[61,30],31],[[[36,[-1,-2,-3]],30],31,[32,37],[32,[38,[-1]]],[32,[39,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[34,35],[-1,-1,[]],[-1,-1,[]],[[-1,-2],40,[41,42],43],[[35,-1],10,45],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[35,35],[[28,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[[44,[-1,-2]],-3,-1],2,6,68,[[8,[-2]]]],[[[69,[-1,-2]]],23,6,68],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[70,[-1,-2]],53],[[28,[[71,[53]]]]],6,68],[[[44,[-1,-2]],[28,[[70,[-1,-2]]]]],[[21,[[10,[53,[21,[12]],[28,[[21,[53]]]]]]]]],6,68],[[[70,[-1,-2]]],[[72,[53,[71,[53]]]]],6,68],0,[[[69,[-1,-2]]],[[69,[-1,-2]]],[5,6],[5,68]],[2,2],[[[44,[-1,-2]]],[[44,[-1,-2]]],[5,6],[5,68]],[[[70,[-1,-2]]],[[70,[-1,-2]]],[5,6],[5,68]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[2,[44,[-1,-2]],2],26,6,68],[[[44,[-1,-2]],53,53],26,6,68],[[2,[44,[-1,-2]],-3],10,6,68,[[20,[],[[19,[2]]]]]],[[[44,[-1,-2]],2,-3],10,6,68,[[20,[],[[19,[2]]]]]],[[],[[69,[-1,-2]]],[22,6],[22,68]],[[],[[44,[-1,-2]]],6,68],[[],[[70,[-1,-2]]],[22,6],[22,68]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[23,-1,[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[25,[[24,[-3,-4]]]]],[],[],[],[]],[23,10],[23,10],[23,10],[23,10],[[[69,[-1,-2]],[69,[-1,-2]]],26,[4,6],[4,68]],[[2,2],26],[[[44,[-1,-2]],[44,[-1,-2]]],26,[4,6],[4,68]],[[[70,[-1,-2]],[70,[-1,-2]]],26,[4,6],[4,68]],[[[69,[-1,-2]]],53,6,68],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[2,[44,[-1,-2]]],53,6,68],[[[44,[-1,-2]],53],53,6,68],[[[70,[-1,-2]],53],53,6,68],[[[69,[-1,-2]],[44,[-1,-2]],-3],[[28,[[69,[-1,-2]]]]],6,68,[[74,[[69,[-1,-2]]],[[73,[26]]]]]],[[2,[44,[-1,-2]]],[[69,[-1,-2]]],6,68],[[[69,[-1,-2]],30],[[25,[10,33]]],6,68],[[[69,[-1,-2]],30],31,[32,6],[32,68]],[[2,30],31],[[[44,[-1,-2]],30],31,[32,6],[32,68]],[[[70,[-1,-2]],30],31,[32,6],[32,68]],[2,53],[[[69,[-1,-2]]],53,6,68],[-1,-1,[]],[53,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[44,[-1,-2]]],[[70,[-1,-2]]],6,68],[[-1,-2],40,[41,42],43],[[2,-1],10,45],[[[69,[-1,-2]]],23,6,68],[2,53],[[[70,[-1,-2]]],[[72,[53,53]]],6,68],0,[[],23],[[],23],[[],23],[[],23],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[69,[-1,-2]]],-2,6,68],[[[70,[-1,-2]],53],[[28,[-2]]],6,68],0,[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[],[[25,[51,52]]]],[[2,[44,[-1,-2]],2],10,6,68],[[[44,[-1,-2]],53,53],10,6,68],[[[69,[-1,-2]]],-1,6,68],[[[70,[-1,-2]],53],[[28,[-1]]],6,68],0,[[53,-1,-2],[[69,[-2,-1]]],68,6],[53,2],[[[44,[-1,-2]]],[[70,[-1,-2]]],6,68],[[]],[[]],[[]],[[]],[[[69,[-1,-2]]],[[75,[[71,[53]]]]],6,68],[[[69,[-1,-2]]],[[71,[53]]],6,68],[[[69,[-1,-2]],53],10,6,68],[[[70,[-1,-2]]],23,6,68],[[[69,[-1,-2]],23],[[28,[53]]],6,68],[[[69,[-1,-2]]],[[75,[[21,[53]]]]],6,68],[[[70,[-1,-2]],53],[[28,[[21,[53]]]]],6,68],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1,-2]],-3],[[70,[-1,-2]]],6,68,[[76,[[69,[-1,-2]]],[[73,[26]]]]]],[-1,12,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[-1,57,[]],[[[44,[-1,-2]],53,53],10,6,68],[[[58,[-1]]],[[58,[59]]],[]],[[[58,[-1]]],[[58,[59]]],[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[-1,59,[]],[[[69,[-1,-2]]],2,6,68],[[2,[44,[-1,-2]]],[[69,[-1,-2]]],6,68],[[[44,[-1,-2]],53],[[69,[-1,-2]]],6,68],[[[44,[-1,-2]]],[[21,[[69,[-1,-2]]]]],6,68],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[5,"Foil",0],[5,"Vert",459],[1,"slice"],[10,"PartialEq",629],[10,"Clone",630],[10,"MetaData",459],[5,"Func",0],[10,"Into",631],[5,"Schema",0],[1,"tuple"],[6,"Label",0],[5,"String",632],[1,"str"],[5,"FoilConfig",0],[5,"Var",0],[5,"Meta",0],[6,"Ordering",629],[10,"Ord",629],[17,"Item"],[10,"IntoIterator",633],[5,"Vec",634],[10,"Default",635],[1,"usize"],[5,"With",636],[6,"Result",637],[1,"bool"],[10,"MetaMapper",0],[6,"Option",638],[5,"MappedFoil",0],[5,"Formatter",639],[8,"Result",639],[10,"Debug",639],[5,"Error",639],[5,"Symbol",640],[5,"CoilMeta",306],[5,"CoilDef",306],[10,"LurkField",641],[10,"Relation",304],[10,"Syntax",306],[1,"u64"],[10,"Hash",642],[10,"Sized",643],[10,"BuildHasher",642],[5,"Graph",459],[10,"Hasher",642],[5,"IndentedSection",644],[10,"Display",639],[10,"Send",643],[10,"Sync",643],[5,"Error",645],[5,"Layout",646],[5,"LayoutError",646],[8,"Id",459],[10,"PartialOrd",629],[6,"SynthesisError",647],[10,"ConstraintSystem",647],[5,"TypeId",648],[5,"Box",649],[10,"Any",648],[5,"AllocatedNum",650],[5,"Context",306],[5,"Store",651],[5,"Ptr",652],[8,"Result",645],[5,"Let",306],[6,"CoilSyntax",306],[5,"AsSyntax",306],[10,"LabelTrait",459],[5,"Vertex",459],[5,"Partition",459],[5,"IndexSet",653],[5,"HashMap",654],[17,"Output"],[10,"FnMut",655],[5,"RefCell",656],[10,"Fn",655]],"b":[[143,"impl-Debug-for-Func%3CM%3E"],[144,"impl-Display-for-Func%3CM%3E"],[148,"impl-Debug-for-Var"],[149,"impl-Display-for-Var"],[150,"impl-Debug-for-Label"],[151,"impl-Display-for-Label"],[154,"impl-From%3C%26Symbol%3E-for-Func%3CCoilMeta%3E"],[155,"impl-From%3CSymbol%3E-for-Func%3CCoilMeta%3E"],[157,"impl-From%3C%26CoilDef%3CF,+R,+S%3E%3E-for-Schema%3CCoilMeta%3E"],[158,"impl-From%3CCoilDef%3CF,+R,+S%3E%3E-for-Schema%3CCoilMeta%3E"],[162,"impl-From%3C%26Label%3E-for-Var"],[163,"impl-From%3C%26Symbol%3E-for-Var"],[164,"impl-From%3C%26Func%3CT%3E%3E-for-Var"],[165,"impl-From%3CSymbol%3E-for-Var"],[167,"impl-From%3CLabel%3E-for-Var"],[168,"impl-From%3CFunc%3CT%3E%3E-for-Var"],[169,"impl-From%3C%26Func%3CT%3E%3E-for-Label"],[170,"impl-From%3CSymbol%3E-for-Label"],[171,"impl-From%3CFunc%3CT%3E%3E-for-Label"],[173,"impl-From%3CVar%3E-for-Label"],[174,"impl-From%3C%26Var%3E-for-Label"],[175,"impl-From%3C%26Symbol%3E-for-Label"],[542,"impl-Display-for-Vertex%3CT,+L%3E"],[543,"impl-Debug-for-Vertex%3CT,+L%3E"],[547,"impl-From%3C%26Vert%3E-for-usize"],[548,"impl-From%3C%26Vertex%3CT,+L%3E%3E-for-usize"]]}],\
["lurk",{"doc":"Lurk","t":"GPEPPGNNNNQQNNNNQCCNNNNCCCQNNNNNNNNNNNNNNNNNNNNNNNNCCCNNNNNNNNNNQNNNNNNNNNNNNQNNCQQNNNNQQCNNNNCCNNNCQNNQCQCQNNNNNNNNNNQNNNNNNQQNNECEEECCCCKMMMHHFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHCHGJJPFPFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNHNNNNNNNNNNNNNNHHOONNNNHOONNNNNNNNNNNNNNNNNNNNNNNNNNNNOKKNCMNNMCNCNNNCCFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHPGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIGIPFFPFFPPFIIFGNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCFRRKKFFFFFKGFKPPFFMNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMMMNNNNNNNNNNNNNNNNNNNNMMMNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNMNNNNNNNNNNNNNNNNMNNNNMMNNNNNNMNMMMNNNNNMNMMNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGPGPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFONNNNNNNNNNNNNNNNONONCNONNNNNNNNNOFGPFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPTFPGKTPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIPPFPPPPPPPGPPPPPPPPFPPPPPPGPPPPPPPGPPPPPPPPPPFPNONNNNNNNNNNNNNNNCNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNCNONNNNOONNNNNNCOCNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNGPPFPPFFNNNNNNNONNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOFNNNNNNHHHHHHNNNNHHNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPFGINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNONNONNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPGJPPIIPNCNNNNNNNNCONNNNNNNNNCCCNNNNNNNNNPPPGPNNNNNNNNNNNNNNNNNNNNNNNNNHNHHHHHNNNNNNNNNNPPPPPPPPFGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNONNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNPGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOPPPGNNNNNNNNNNNNNNNNNNNHHHHHHHHNNNNNNNNNHHHHHHHHHHHHHHHHHHHHKRRKGRRKPPKKRRRKRNNMMNNNNMMNMNMNMMNMMNNCMMNNMMMMMMCNNNNNNMNNIIPKIIRIRIRIFIGFPIINNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNHNNNNNNNNNNNNNNNNNNNNNNNNNNIPIIGPPGFPIIIFINNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNONNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCCHHHHFGFPPPOONNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONOONNNNNNNNOONNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNHNNNNNHHNNNNNNNNNNNNHNFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPPPPPPPPPPPGFPPPPPPPPPPPGFPPPPPPPPPPPPPPPPGFGFPPPPPPPPPPPKPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPPGNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNHNNNNNNNCCCCPPPPPPPPPPPPPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOPPPPPPPPPPPPPPGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOIIFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNONNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNN","n":["Num","Scalar","Symbol","U64","U64","UInt","add","add_assign","arbitrary_with","arbitrary_with","aux_func","block","borrow","borrow","borrow_mut","borrow_mut","char","circuit","cli","clone","clone","clone_into","clone_into","config","coprocessor","coroutine","ctrl","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","div","div_assign","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","field","fmt","fmt","fmt","fmt","from","from","from","from","from","from_scalar","func","get_hash","hash","header","header","init","init","into","into","into_scalar","is_negative","is_zero","is_zero","keyword","layout_raw","layout_raw","lem","list","lit","most_negative","most_positive","mul","mul_assign","num","op","parser","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","proof","public_parameters","rem","serialize","serialize","state","str","sub","sub_assign","sym","symbol","symbol","tag","tag","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","uint","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","var","vars","vzip","vzip","z_cont","z_data","z_expr","z_ptr","z_store","gadgets","circom","constraints","pointer","CircomGadget","evaluate_simple","into_circom_input","name","alloc_equal","enforce_equal","AllocatedContPtr","AllocatedPtr","alloc","alloc","alloc_constant","alloc_constant","alloc_equal","alloc_equal","alloc_infallible","alloc_tag","alloc_tag_equal","alloc_tag_equal","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fmt","fmt","from","from","from","from","from_parts","get_value","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","parse_and_run","paths","lurk_default_dir","Flow","LURK_CONFIG","LURK_CONFIG_FILE","Parallel","ParallelConfig","ParallelN","PerfConfig","Sequential","Settings","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","frames","from","from","from","from","from_config","home_dir","init","init","init","init","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","lurk_config","lurk_config_file","parallelism","perf","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","public_params_default_dir","public_params_dir","slots","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","wit_gen_vs_folding","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","evaluate_internal","evaluate_simple","gadgets","has_circuit","sha256","synthesize","synthesize_internal","synthesize_simple","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","evaluate_simple","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","synthesize_simple","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","a_ptr_as_z_ptr","chain_car_cdr","SC","Sha256Coproc","Sha256Coprocessor","arity","arity","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","fmt","fmt","from","from","from","has_circuit","has_circuit","init","init","into","into","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","serialize","serialize","synthesize","synthesize_internal","synthesize_simple","synthesize_simple","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","StandardTrie","Trie","TrieCoproc","arity","arity","arity","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","evaluate_simple","evaluate_simple","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","has_circuit","has_circuit","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","synthesize","synthesize_insert","synthesize_internal","synthesize_simple","synthesize_simple","synthesize_simple","synthesize_simple","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","memoset","AllocatedProvenance","CM","CQ","CircuitMemoSet","CircuitQuery","CircuitScope","CircuitTranscript","CoroutineCircuit","LogMemo","LogMemoCircuit","MemoSet","MemoSetError","Provenance","Query","QueryDependenciesMissing","QueryResultMissing","Scope","Transcript","add","add","allocated_r","allocated_r","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_index","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","count","count","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dummy_from_index","dummy_from_index","eval","finalize_transcript","finalize_transcript","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from_ptr","from_ptr","index","init","init","init","init","init","init","init","init","init","init","input","into","into","into","into","into","into","into","into","into","into","is_finalized","is_finalized","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","map_to_element","map_to_element","num_circuits","output","pick","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","primary_circuit","query","r","r","recursive_eval","recursive_eval","secondary_circuit","symbol","symbol","symbol_ptr","symbol_ptr","symbol_ptr","symbol_ptr","synthesize","synthesize","synthesize_add","synthesize_add","synthesize_args","synthesize_eval","synthesize_map_to_element","synthesize_map_to_element","synthesize_provenance","synthesize_provenance","synthesize_query","synthesize_query","synthesize_remove_n","synthesize_remove_n","to_circuit","to_circuit","to_circuit","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Misc","Nova","ProofError","Reduction","ReductionError","Store","SuperNova","Synthesis","as_error","as_error","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","header","header","in_current_span","in_current_span","init","init","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","source","source","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Frame","_p","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","from","i","init","input","into","lang","layout_raw","output","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","evaluate_internal","evaluate_simple","evaluate_simple","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_index_by_symbol","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup_by_sym","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","synthesize","synthesize_internal","synthesize_simple","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","compare","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_possible_value","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_variants","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Copy","Cproc","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Func","Hash3Zeros","Hash4Zeros","Hash6Zeros","Hash8Zeros","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Num","Op","Open","Or","PopBinding","PushBinding","Return","String","Sub","Symbol","Trunc","Unit","Var","Zero","alloc_consts","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","ctrl","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_hash","get_hash","hash","hash","header","init","init","init","init","init","init","input_params","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","multiframe","name","name","new","new","new_unchecked","num_constraints","ops","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","slots_count","store","synthesize_frame","synthesize_frame_aux","tag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","AllocatedVal","Bits","Boolean","GlobalAllocator","Number","Pointer","SlotWitness","SlotsAllocations","alloc_const","alloc_const_cloned","alloc_ptr","alloc_tag","alloc_tag_cloned","alloc_z_ptr","alloc_z_ptr_from_parts","allocations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_slots_allocations","clone","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness","EvalConfig","borrow","borrow_mut","deref","deref_mut","deserialize","drop","eval_step","evaluate","evaluate_simple","evaluate_simple_with_env","evaluate_with_env","evaluate_with_env_and_cont","from","init","into","layout_raw","make_cprocs_funcs_from_lang","make_eval_step_from_config","new_ivc","new_nivc","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","MultiFrame","arity","arity","blank","borrow","borrow_mut","build_frames","cache_witness","circuit_index","clear_cached_witness","clone","clone_into","deref","deref_mut","deserialize","drop","emitted","fmt","frames","from","from_frames","init","input","into","layout_raw","num_circuits","num_frames","output","pointer_metadata","precedes","primary_circuit","program_counter","public_input_size","public_inputs","secondary_circuit","significant_frame_count","synthesize","synthesize","synthesize","synthesize_frames","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Hash4","Hash6","Hash8","Ptr","RawPtr","ZPtr","atom","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","dummy","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt_to_string","fmt_to_string_simple","from","from","get_atom","get_atom","get_hash","get_hash","get_hash4","get_hash6","get_hash8","get_index2","get_index3","get_index4","has_tag","has_tag_in","hash","hash","init","init","into","into","is_fun","is_hash","is_list","is_nil","is_num","is_str","is_sym","layout_raw","layout_raw","new","parts","pointer_metadata","pointer_metadata","raw","serialize","serialize","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Store","WithStore","add_comm","borrow","borrow","borrow_mut","borrow_mut","car_cdr","char","comm","commit","cons","cont_error","cont_outermost","cont_terminal","deconstruct_provenance","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","dummy","expect_f","expect_ptrs","expect_raw_ptrs","fetch_char","fetch_env","fetch_f","fetch_f_by_idx","fetch_key","fetch_list","fetch_num","fetch_proper_list","fetch_provenance","fetch_ptrs","fetch_raw_ptrs","fetch_string","fetch_sym","fetch_symbol","fetch_tag","fetch_u64","fmt","fmt","from","from","get_cont_terminal","hash3_cost","hash3zeros","hash3zeros_idx","hash4_cost","hash4zeros","hash4zeros_idx","hash6_cost","hash6zeros","hash6zeros_idx","hash8_cost","hash8zeros","hash8zeros_idx","hash_ptr","hash_raw_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","hydrate_z_cache","improper_list","init","init","initial_empty_env","inner","intern_atom","intern_empty_env","intern_f","intern_fun","intern_lurk_symbol","intern_nil","intern_provenance","intern_ptrs","intern_ptrs_hydrated","intern_raw_atom","intern_raw_ptrs","intern_raw_ptrs_hydrated","intern_string","intern_symbol","intern_symbol_path","intern_syntax","intern_t","intern_user_symbol","into","into","inverse_poseidon_cache","is_zero","key","layout_raw","layout_raw","list","num","num_u64","opaque","open","pointer_metadata","pointer_metadata","pop_binding","poseidon_cache","ptr_eq","ptr_eq","ptrs_to_raw_ptrs","push_binding","raw_ptr_eq","raw_ptrs_to_ptrs","raw_to_ptr","raw_zero","read","read","read_maybe_meta","read_with_default_state","store","tag","to_inner","to_ptr","to_raw_ptr","to_scalar_vector","to_scalar_vector_raw","try_from","try_from","try_into","try_into","type_id","type_id","u64","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","zero","Cont","Expr","Op1","Op2","Tag","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_field","get_hash","hash","header","index","init","into","layout_raw","pointer_metadata","pos","serialize","to_field","to_field","to_owned","to_string","try_from","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_code","parse_litbase_digits","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Custom","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","from","from_upto","get_from_offset","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_numeric","parse_numeric_suffix","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","CEKState","Error","ErrorType","EvaluationStore","FoldingMode","Frame","FrameIO","FrameLike","IVC","NIVC","Provable","Prover","Ptr","PublicParams","PublicParams","RecursiveSNARKTrait","RecursiveSnark","borrow","borrow_mut","compress","cont","deref","deref_mut","deserialize","drop","env","evaluate_and_prove","expected_num_steps","expr","fmt","folding_mode","from","get_cont_terminal","hydrate_z_cache","init","initial_empty_env","input","into","layout_raw","nova","num_frames","output","pointer_metadata","prove","prove_recursively","ptr_eq","public_input_size","public_inputs","read","reduction_count","supernova","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","verify","vzip","z0_secondary","C1LEM","C2","Compressed","CurveCycleEquipped","Dual","E1","E1","EE1","EE1","EE2","EE2","NovaCircuitShape","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuits","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","evaluate_and_prove","fmt","fmt","folding_mode","from","from","from","from","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","new","pk","pointer_metadata","pointer_metadata","pointer_metadata","pp","prove_from_frames","prove_recursively","public_params","reduction_count","serialize","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vk","vzip","vzip","vzip","C2","Compressed","EE1","EE2","FoldingConfig","IVC","NIVC","Proof","PublicParams","Recursive","SS1","SS2","SuperNovaAuxParams","SuperNovaProver","SuperNovaPublicParams","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuit_cache_keys","clone","clone_into","compress","compress","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","evaluate_and_prove","fmt","fmt","folding_mode","from","from","from","from","from","index","init","init","init","init","into","into","into","into","lang","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","pk","pk_and_vk","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pp","prove_from_frames","prove_recursively","prove_recursively","public_params","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vk","vzip","vzip","vzip","vzip","disk_cache","instance","public_params","supernova_aux_params","supernova_circuit_params","supernova_public_params","Instance","Kind","Metadata","NovaPublicParams","SuperNovaAuxParams","SuperNovaCircuitParams","abomonated","abomonated","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_key","cache_key","circuit_param_instances","clone","clone","clone_into","clone_into","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","key","kind","kind","lang","lang","lang","layout_raw","layout_raw","layout_raw","new","open","pointer_metadata","pointer_metadata","pointer_metadata","rc","rc","reindex","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","cmp","compare","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","ContTagIter","Cproc","Cproc","Diff","Dummy","Emit","Emit","Env","Equal","Error","Eval","Eval","ExprTag","ExprTagIter","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op1","Op1Iter","Op2","Op2Iter","Open","Outermost","Product","Prov","Quotient","Rec","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_numeric","iter","iter","iter","iter","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","len","len","len","len","next","next","next","next","next_back","next_back","next_back","next_back","nth","nth","nth","nth","par_bridge","par_bridge","par_bridge","par_bridge","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","size_hint","size_hint","size_hint","size_hint","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","compare","deref","deref_mut","deserialize","deserialize","drop","dummy","eq","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_parts","get_hash","hash","header","init","into","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_z_expr","into","layout_raw","new","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[134,"lurk::circuit"],[135,"lurk::circuit::gadgets"],[138,"lurk::circuit::gadgets::circom"],[142,"lurk::circuit::gadgets::constraints"],[144,"lurk::circuit::gadgets::pointer"],[223,"lurk::cli"],[225,"lurk::cli::paths"],[226,"lurk::config"],[354,"lurk::coprocessor"],[369,"lurk::coprocessor::circom"],[370,"lurk::coprocessor::circom::non_wasm"],[401,"lurk::coprocessor::gadgets"],[403,"lurk::coprocessor::sha256"],[470,"lurk::coprocessor::trie"],[702,"lurk::coroutine"],[703,"lurk::coroutine::memoset"],[990,"lurk::error"],[1055,"lurk::eval"],[1090,"lurk::eval::lang"],[1212,"lurk::field"],[1322,"lurk::lem"],[1572,"lurk::lem::circuit"],[1666,"lurk::lem::eval"],[1695,"lurk::lem::multiframe"],[1743,"lurk::lem::pointers"],[1840,"lurk::lem::store"],[1982,"lurk::lem::tag"],[2028,"lurk::parser"],[2069,"lurk::parser::base"],[2116,"lurk::parser::error"],[2203,"lurk::parser::position"],[2238,"lurk::parser::position::Pos"],[2244,"lurk::parser::string"],[2284,"lurk::parser::syntax"],[2304,"lurk::proof"],[2364,"lurk::proof::nova"],[2458,"lurk::proof::supernova"],[2578,"lurk::public_parameters"],[2584,"lurk::public_parameters::instance"],[2686,"lurk::state"],[2724,"lurk::symbol"],[2792,"lurk::tag"],[3151,"lurk::z_data"],[3200,"lurk::z_data::z_cont"],[3250,"lurk::z_data::z_cont::ZCont"],[3282,"lurk::z_data::z_expr"],[3332,"lurk::z_data::z_expr::ZExpr"],[3335,"lurk::z_data::z_ptr"],[3385,"lurk::z_data::z_store"],[3428,"core::clone"],[3429,"rkyv::with"],[3430,"core::result"],[3431,"serde::de"],[3432,"core::cmp"],[3433,"core::fmt"],[3434,"core::fmt"],[3435,"core::marker"],[3436,"core::hash"],[3437,"core::fmt"],[3438,"core::alloc::layout"],[3439,"serde::ser"],[3440,"alloc::string"],[3441,"core::any"],[3442,"alloc::boxed"],[3443,"core::any"],[3444,"bellpepper_core::gadgets::num"],[3445,"bellpepper_core::gadgets::boolean"],[3446,"bellpepper_core::constraint_system"],[3447,"ff"],[3448,"bellpepper_core::constraint_system"],[3449,"core::ops::function"],[3450,"anyhow"],[3451,"camino"],[3452,"std::collections::hash::map"],[3453,"config::error"],[3454,"serde::de"],[3455,"core::cell"],[3456,"alloc::rc"],[3457,"core::error"],[3458,"arecibo::errors"],[3459,"arecibo::supernova::error"],[3460,"core::marker"],[3461,"clap_builder::builder::possible_value"],[3462,"alloc::sync"],[3463,"core::fmt"],[3464,"core::convert"],[3465,"nom::traits"],[3466,"nom::internal"],[3467,"arecibo"],[3468,"arecibo"],[3469,"arecibo::supernova::snark"],[3470,"arecibo::supernova::snark"],[3471,"std::io::error"],[3472,"rayon::iter::par_bridge"],[3473,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","a small scalar field element in U64 representation for …","","Unsigned fixed-width integer type for Lurk.","","","","","Creates an auxiliary <code>Func</code>. No transformations or checks …","","","","","","","","","","","","","Global config for Lurk Includes settings for cache …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","Creates a checked <code>Func</code>","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","","","Lurk Evaluation Model (LEM)","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","","","This module offers a connection the the backend proving …","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","Usage of circom coprocessors.","","","An interface to declare a new type of Circom gadget. It …","","","","This could now use alloc_is_zero to avoid duplication.","Adds a constraint to CS, enforcing an equality …","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","Parses CLI arguments and continues the program flow …","","","The level of parallelism used when synthesizing the Lurk …","Global config variable for <code>Settings</code>","Global path variable for configuration file","Try to be smart about thread management based on # of cpus …","Parallel configuration settings","How many threads to use? (Advisory, might be ignored.)","Performance-related configuration settings","Runs without parallelism","Contains the Lurk config settings The <code>public_params_dir</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parallel witness generation for each Frame within a …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads config settings from a file or env vars The public …","Returns the home directory used by <code>cargo`` and </code>rustup`","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> on <code>Flow::Parallel</code> or <code>Flow::ParallelN</code>","Returns <code>true</code> on <code>Flow::Sequential</code>","","","","","Gets the <code>LURK_CONFIG</code> settings. If uninitialized, sets the …","Gets the <code>LURK_CONFIG_FILE</code> path. If uninitialized, sets the …","Parallelism settings","Parallelism &amp; witness gen configs","","","","","","Public parameter disk cache location","Parallel witness generation for each slot in a Frame","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Witnesses generation for MultiFrames in parallel with …","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","Function for internal plumbing. Reimplementing is not …","","Helper gadgets for synthesis","Returns true if this Coprocessor actually implements a …","","","Function for internal plumbing. Reimplementing is not …","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","Chains <code>car_cdr</code> calls <code>n</code> times, returning the accumulated <code>car</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","Returns a value corresponding to the commitment associated …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","The <code>memoset</code> module implements a <code>MemoSet</code>.","","","","","","","","","","","","","","","","","A <code>Scope</code> tracks the queries made while evaluating, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","How many types of query are provided?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","What is this queries index? Used for ordering circuits and …","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","And does nothing but return nil. It should probably never …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","<code>Copy(x, y)</code> binds <code>x</code> to a copy of what <code>y</code> is bound to","<code>Cproc(ys, c, xs)</code> binds <code>ys</code> to the results of coprocessor <code>c</code> …","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hash3Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash4Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash6Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hash8Zeros(x, t)</code> binds <code>x</code> to a …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","","The atomic operations of LEMs.","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>PopBinding(ys, x)</code> is the inverse of <code>PushBinding</code>","<code>PushBinding(x, ys)</code> is a Lurk specific operation. It binds <code>x</code>…","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","","LEM variables","<code>Zero(x, t)</code> binds <code>x</code> to a <code>Ptr::zero(t)</code>","","","","","","","","","","","","","","","","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","","Instantiates a <code>Func</code> with no transformations or check. …","Computes the number of constraints that <code>synthesize</code> should …","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","Memoizes allocations for numerical constants in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cached version of Lurk’s default step function (IVC, no …","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Creates the <code>Func</code>s used to call coprocessors in the NIVC …","Creates a LEM <code>Func</code> corresponding to Lurk’s step function …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is a tagged pointer. The tag is there to say what kind …","<code>RawPtr</code> is the basic pointer type of the LEM store. An <code>Atom</code> …","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>, which is a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","<code>WithStore</code> provides a distinct type for coupling a store …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fetches an environment","","","","Fetches a cons list that was interned. If the list is …","","Fetches a cons list that was interned. Panics if the list …","Fetches a provenance","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Cost of poseidon hash with arity 3, including the input","Retrieves the hash of 3 padded zeros","","Cost of poseidon hash with arity 4, including the input","Retrieves the hash of 4 padded zeros","","Cost of poseidon hash with arity 6, including the input","Retrieves the hash of 6 padded zeros","","Cost of poseidon hash with arity 8, including the input","Retrieves the hash of 8 padded zeros","","Hydrates a <code>Ptr</code>. That is, creates a <code>ZPtr</code> with the tag of …","Safe version of <code>hash_raw_ptr_unsafe</code> that doesn’t hit a …","","","","Hashes enqueued <code>RawPtr</code> trees from the bottom to the top, …","Interns a sequence of pointers as an improper cons-list …","","","","","","","","","","","","Creates a <code>Ptr</code> that’s a parent of <code>N</code> children","Similar to <code>intern_ptrs</code> but doesn’t add the resulting …","Creates an atom <code>RawPtr</code> which points to a cached element of …","Creates a <code>RawPtr</code> that’s a parent of <code>N</code> children","Similar to <code>intern_raw_ptrs</code> but doesn’t add the resulting …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Interns a sequence of pointers as a proper (<code>nil</code>…","","","Creates an atom pointer from a <code>ZPtr</code>, with its hash. Hashing","","","","","","","","Converts array of pointers of size <code>P</code> to array of raw …","","Equality of the content-addressed versions of two pointers","Tries to convert array of raw pointers of size <code>N</code> to array …","","","","","","","","","","Attempts to recover the <code>Ptr</code> that corresponds to a <code>ZPtr</code>. If …","Attempts to recover the <code>RawPtr</code> that corresponds to a field …","Constructs a vector of scalars that correspond to tags and …","","","","","","","","","","","","","","","","","","","","","","The LEM <code>Tag</code> is a wrapper around other types that are used …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","Retrieves the <code>from_offset</code> attribute, if present","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","The State of a CEK machine.","the type for the Store’s errors","Type for error potentially thrown during verification","A trait for a store of expressions","Folding mode used for proving","Associated type for a frame-like datatype","the type for the Frame’s IO","A Frame of evaluation in a CEK machine.","Variant for IVC folding","Variant for NIVC folding","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","the type for the Store’s pointers","Associated type for public parameters","Associated type for public parameters","Trait to abstract Nova and SuperNova proofs","Associated proof type, which must implement …","","","Compress a proof","the continuation (K)","","","","","the environment (E)","Evaluate an expression with an environment and then …","Returns the expected total number of steps for the prover …","the expression, or control word (C)","","Returns a reference to the prover’s FoldingMode","Returns the argument unchanged.","getting the terminal continuation pointer","cache hashes for pointers enqueued for hydration","","getting a pointer to the initial, empty environment","the input of the frame","Calls <code>U::from(self)</code>.","","An adapter to a Nova proving system implementation.","Returns the number of reduction frames in the provable …","the output of the frame","","Generates a recursive proof from a vector of <code>M</code>","Generate the recursive SNARK, encoded in <code>ProveOutput</code>","hash-equality of the expressions represented by Ptrs","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","interpreting a string representation of an expression","Returns the number of reductions for the prover.","An adapter to a SuperNova proving system implementation.","","","","","","","Verify the proof given the public parameters, the input …","","Return the <code>z0_secondary</code>","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation …","This trait defines most of the requirements for …","Convenience alias for the Dual field of a …","Convenience alias for the primary group type pegged to a …","Why the next 2 types?","Type alias for the Evaluation Engine using G1 group …","a concrete implementation of an …","Type alias for the Evaluation Engine using G2 group …","a concrete implementation of an …","Type alias for Nova Circuit Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","Computes a cache key of the primary circuit. The point is …","Generates the circuits for the Nova proving system.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new NovaProver with a reduction count and a <code>Lang</code>","provides a reference to a ProverKey suitable for producing …","","","","Public parameters for the Nova proving system.","Generate a proof from a sequence of frames","","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","provides a reference to a VerifierKey suitable for …","","","","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Folding configuration specifies the <code>Lang</code>, the reduction …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the SuperNova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","Type alias for SuperNova Aux Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","Computes a cache key of a supernova primary circuit. The …","Collects all the cache keys of supernova instance. We need …","","","","","","","","","","","","","","","","","","return the digest","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return a reference to the contained <code>Lang</code>.","","","","","Create a new SuperNovaProver with a reduction count and a …","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","provides a reference to a ProverKey suitable for producing …","Prover key and Verifier key for SuperNova","","","","","Public params for SuperNova.","Generate a proof from a sequence of frames","","","Generates the running claim params for the SuperNova …","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","provides a reference to a VerifierKey suitable for …","","","","","","Instances","","","","Attempts to extract abomonated public parameters.","Instances compute a cache-key for the objects they …","From ::nova, there are 3 “kinds” of public param …","What we put into the cache","Tag for nova::NovaPublicParams instances","Tag for supernova::SuperNovaAuxParams instances","Tag for [supernova::SuperNovaCircuitParams] instances","","","","","","","","","","","If this Instance is of Kind::SuperNovaAuxParams, then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key (or cache_key) of this Instance used to retrieve …","","","The key (or cache_key) of this Instance used to retrieve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","An iterator over the variants of ContTag","","","","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","An iterator over the variants of ExprTag","","","","","","","","","","","","","","","","","","An iterator over the variants of Op1","","An iterator over the variants of Op2","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","","","","",""],"i":[0,2,0,2,1,0,1,2,2,1,0,0,2,1,2,1,0,0,0,2,1,2,1,0,0,0,0,2,1,2,1,2,2,1,1,1,2,2,1,2,1,2,2,2,2,2,1,1,1,1,1,0,0,0,2,2,1,1,2,2,2,1,1,2,0,2,2,2,1,2,1,2,1,2,2,2,1,0,2,1,0,0,0,2,2,1,2,0,0,0,2,1,2,1,0,0,1,2,1,0,0,1,2,0,0,0,0,0,2,1,2,1,2,1,2,1,2,1,0,2,1,2,1,2,1,0,0,2,1,0,0,0,0,0,0,0,0,0,0,33,33,33,0,0,0,0,37,50,37,50,37,50,37,37,37,50,37,50,37,50,37,50,37,50,37,50,37,50,37,50,37,50,37,50,37,50,37,37,50,50,37,37,37,50,37,37,50,37,50,37,37,37,37,37,37,37,37,37,37,50,37,50,37,37,50,37,50,37,50,37,50,37,50,37,50,37,50,37,50,37,50,37,50,0,0,0,0,0,0,58,0,58,0,58,0,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,55,56,56,57,58,55,56,57,58,55,56,57,58,55,55,55,55,55,56,56,56,56,56,57,57,57,57,57,58,58,58,58,58,55,56,57,58,57,55,56,57,58,55,0,55,56,57,58,55,56,57,58,58,58,55,56,57,58,0,0,56,55,55,56,57,58,0,55,57,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,55,56,57,58,57,0,0,61,0,62,62,62,62,0,62,0,61,61,61,0,0,0,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,0,0,66,0,0,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,65,66,66,65,66,65,66,66,66,65,66,65,66,65,66,66,65,66,65,66,65,66,65,66,65,65,66,65,66,66,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,65,66,0,0,0,69,0,0,69,0,0,75,69,0,0,0,0,0,69,70,71,72,75,69,70,71,72,74,76,77,75,69,70,71,72,74,76,77,69,70,71,72,69,70,71,72,215,70,71,72,74,75,69,70,71,72,74,76,77,75,69,70,71,72,74,76,77,75,69,70,70,71,71,72,72,74,76,77,75,69,70,71,72,74,76,77,74,69,70,71,72,69,69,69,70,71,72,75,69,70,71,72,74,76,77,75,69,69,69,69,70,71,72,74,76,77,69,70,71,72,75,69,70,71,72,74,76,77,74,0,75,69,70,71,72,74,76,77,75,69,70,71,72,74,76,77,74,74,74,74,75,69,70,71,72,74,76,77,74,74,74,74,70,71,72,69,74,69,69,70,71,72,69,70,71,72,75,69,70,71,72,74,76,77,75,69,70,71,72,74,76,77,75,69,70,71,72,74,76,77,75,69,70,71,72,74,76,77,75,69,70,71,72,74,76,77,75,69,70,71,72,74,76,77,76,77,75,69,70,71,72,74,76,77,0,0,83,88,0,0,0,0,0,0,0,0,0,0,0,95,95,0,0,83,85,84,86,87,95,89,90,96,97,91,92,87,85,86,95,89,90,96,97,91,92,87,85,86,87,89,90,91,92,87,85,86,89,90,91,92,87,85,86,88,84,83,85,86,85,95,89,90,96,97,91,92,87,85,86,95,89,90,96,97,91,92,87,85,86,95,89,90,96,97,91,92,87,85,86,95,89,90,96,97,91,92,87,85,86,88,94,88,83,85,95,89,90,96,97,91,92,85,86,95,89,90,96,97,91,92,87,85,86,88,94,88,95,89,90,96,97,91,92,87,85,86,87,95,89,90,96,97,91,92,87,85,86,83,85,95,89,90,96,97,91,92,87,85,86,83,85,87,87,90,95,89,90,96,97,91,92,87,85,86,87,91,83,85,88,88,87,88,94,88,88,94,94,91,87,84,86,94,94,84,86,94,94,94,94,84,86,88,83,85,89,90,91,92,87,85,86,88,95,89,90,96,97,91,92,87,85,86,95,89,90,96,97,91,92,87,85,86,95,89,90,96,97,91,92,87,85,86,95,89,90,96,97,91,92,87,85,86,95,89,90,96,97,91,92,87,85,86,95,89,90,96,97,91,92,87,85,86,95,89,90,96,97,91,92,87,85,86,102,103,0,103,0,102,103,103,103,102,103,102,103,102,102,102,103,102,103,102,103,102,103,102,103,103,102,102,103,103,103,103,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,103,102,0,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,0,106,106,106,106,106,106,106,106,106,106,106,106,0,0,109,0,0,81,81,109,110,109,81,108,110,109,81,108,110,109,81,110,109,81,81,81,81,110,109,81,108,110,109,81,108,110,110,109,109,81,81,108,110,109,81,108,110,109,109,109,110,109,110,109,81,108,110,109,109,81,108,108,81,109,81,110,109,81,108,110,109,81,108,81,81,110,109,81,108,81,81,108,81,110,109,81,108,110,109,81,109,109,109,110,109,81,110,109,81,108,110,109,81,108,110,109,81,108,110,109,81,108,110,109,81,108,110,109,81,108,110,109,81,108,112,4,0,112,0,0,4,112,112,112,113,112,113,112,113,112,113,112,113,113,113,112,112,113,112,113,112,112,113,113,112,113,112,113,112,112,112,112,112,113,113,113,113,113,112,112,113,112,113,4,4,4,4,4,4,4,4,4,4,113,113,112,4,112,113,112,113,4,112,113,4,4,113,112,113,112,113,4,4,4,4,4,4,112,113,112,112,4,4,4,4,4,4,4,4,112,113,112,113,112,113,112,113,112,113,112,113,112,112,113,0,129,129,0,129,129,129,129,129,129,129,0,129,129,129,129,129,129,129,129,0,129,129,129,129,129,128,0,129,129,128,128,129,129,126,0,129,129,129,129,128,126,129,126,129,129,0,129,124,124,124,125,126,127,128,129,124,125,126,127,128,129,124,124,124,0,124,125,126,127,128,129,124,125,126,127,128,129,127,127,124,125,126,127,128,129,124,125,126,127,128,129,124,125,126,127,128,129,124,125,126,127,128,129,124,125,126,127,128,129,124,124,124,124,124,125,125,125,125,125,126,126,126,126,126,127,127,127,127,127,128,128,128,128,128,129,129,129,129,129,0,124,125,125,126,127,128,129,124,125,126,127,128,129,125,126,125,126,125,124,125,126,127,128,129,124,124,125,126,127,128,129,124,125,126,127,128,129,0,125,124,124,125,124,124,127,124,124,125,126,127,128,129,0,124,0,124,124,0,124,125,126,127,128,129,126,125,124,125,126,127,128,129,124,125,126,127,128,129,124,125,126,127,128,129,124,124,125,126,127,128,129,124,125,126,127,128,129,124,125,126,127,128,129,124,125,126,127,128,129,0,131,131,0,131,131,0,0,63,63,63,63,63,63,63,132,135,132,131,63,135,132,131,63,0,131,131,63,135,132,131,63,135,132,131,63,135,132,131,63,135,132,131,63,135,132,131,63,135,132,131,63,135,132,131,63,135,132,131,63,135,132,131,63,131,135,132,131,63,135,132,131,63,135,132,131,63,135,132,131,63,135,132,131,63,135,132,131,63,135,132,131,63,132,0,136,136,136,136,136,136,0,0,0,0,0,0,136,136,136,136,0,0,136,136,136,136,136,136,136,136,136,136,0,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,140,140,140,140,0,0,0,35,140,35,140,35,35,140,35,140,35,140,35,140,35,140,140,35,35,140,35,134,140,35,140,140,140,140,140,35,35,35,35,35,140,35,35,35,140,35,140,35,140,35,140,140,140,35,35,35,35,35,140,35,140,35,140,35,35,140,35,35,35,35,35,140,35,35,35,140,35,35,140,35,35,140,35,140,35,140,35,140,35,140,35,140,35,140,35,140,35,0,0,34,142,34,142,34,34,34,34,34,34,34,34,34,34,34,142,34,142,34,142,34,142,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,142,34,142,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,142,34,34,142,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,142,34,34,34,34,142,34,34,34,34,34,34,142,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,142,34,142,34,34,34,34,142,34,142,34,142,34,34,142,34,142,34,142,34,142,34,34,139,139,139,139,0,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,149,0,0,147,149,0,0,147,147,0,147,147,147,147,147,147,147,147,0,146,147,147,147,147,147,147,147,147,147,0,0,0,147,147,147,147,147,147,147,147,147,148,148,148,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,148,0,0,0,0,0,148,148,148,148,148,148,148,148,148,148,156,156,156,156,156,156,156,156,0,0,156,156,152,152,156,152,156,152,156,152,156,152,156,152,156,152,156,152,156,152,156,152,156,156,156,156,156,152,152,152,152,152,152,152,156,156,152,152,156,152,152,156,152,156,152,152,156,152,156,156,152,0,152,152,152,156,152,152,152,156,152,156,152,156,152,156,152,156,152,156,152,156,152,156,152,156,152,158,0,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,216,216,216,216,216,216,159,159,159,0,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,0,0,0,0,0,0,0,0,159,159,159,159,159,159,159,159,159,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,162,0,0,166,168,0,169,169,0,0,172,162,166,0,166,169,169,162,163,169,169,169,169,163,166,166,163,169,166,169,172,172,169,172,168,169,169,0,173,168,169,166,162,172,173,173,172,166,0,169,169,169,169,169,169,162,169,162,0,0,177,0,0,0,98,0,98,0,98,0,0,0,0,0,177,0,0,178,177,179,178,177,179,0,0,177,178,177,179,178,177,179,178,178,177,177,179,178,177,179,179,178,179,179,178,178,177,179,178,177,179,178,177,179,178,177,179,179,178,178,177,179,178,179,177,0,179,178,177,178,177,179,178,177,179,178,177,179,178,177,179,178,177,179,178,177,179,177,178,178,177,179,0,187,0,0,0,138,138,0,0,187,0,0,0,0,0,188,187,189,138,188,187,189,138,0,0,138,138,187,187,188,187,189,138,188,187,189,138,188,187,187,189,138,188,188,187,189,138,189,189,138,189,188,188,187,189,138,188,188,187,189,138,188,187,189,138,138,188,187,189,138,189,138,138,138,188,188,188,187,189,138,188,189,187,187,0,189,138,187,138,188,187,189,138,188,187,189,138,188,187,189,138,188,187,189,138,188,187,189,138,188,187,189,138,187,187,188,188,187,189,138,0,0,0,0,0,0,0,0,0,198,198,198,195,199,195,198,199,195,198,199,195,199,195,198,199,198,199,195,195,198,199,195,198,199,195,198,198,199,199,195,198,199,198,199,198,198,198,198,198,199,199,199,199,199,195,198,199,195,198,199,195,198,199,195,198,199,195,195,199,195,195,199,195,198,199,195,195,195,198,199,195,199,195,198,199,198,199,195,198,199,195,198,199,195,198,199,195,198,199,195,198,199,195,198,199,195,198,199,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,0,78,78,78,78,78,0,0,78,78,78,78,78,78,78,78,78,78,78,78,0,78,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,118,119,116,116,116,116,116,118,118,117,118,117,118,118,117,119,0,0,117,116,119,116,116,118,117,119,116,118,119,0,0,117,119,119,119,116,117,119,119,116,116,116,119,117,117,118,119,0,0,0,0,118,116,119,117,119,117,118,117,119,119,117,0,116,116,117,117,118,116,117,116,118,119,117,116,118,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,203,117,117,204,116,116,205,118,118,206,119,119,203,117,204,116,205,118,206,119,117,116,118,119,117,117,117,117,117,116,116,116,116,116,118,118,118,118,118,119,119,119,119,119,203,117,117,204,116,116,205,118,118,206,119,119,203,117,204,116,205,118,206,119,48,117,116,118,119,117,116,118,119,117,116,118,119,117,116,118,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,203,204,205,206,119,117,116,118,119,203,117,204,116,205,118,206,119,203,204,205,206,203,204,205,206,203,204,205,206,203,204,205,206,203,204,205,206,118,119,203,117,204,116,205,118,206,119,117,116,118,119,203,204,205,206,48,117,116,118,119,48,117,116,118,119,203,117,204,116,205,118,206,119,117,116,118,119,203,117,117,204,116,116,205,118,118,206,119,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,203,117,204,116,205,118,206,119,210,210,0,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,0,210,210,210,210,210,210,210,210,210,210,210,210,210,0,210,210,210,210,210,210,210,0,0,0,0,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,0,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,217,218,219,220,221,222,223,224,225,226,227,217,218,228,226,221,224,225,226,219,220,221,222,223,225,217,218,220,225,227,217,218,212,212,212,212,212,212,212,212,212,212,212,212,212,212,0,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,229,229,229,0,0,0,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,0,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214],"f":[0,0,0,0,0,0,[[1,1],1],[[[2,[-1]],[2,[-1]]],3,4],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[2,[-1]]],[[2,[-1]]],[5,4]],[1,1],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,0,0,[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[2,[-2]]]]],9,4],[-1,[[8,[1]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[1,1],1],[[[2,[-1]],[2,[-1]]],3,4],[6,3],[6,3],[[[2,[-1]],[2,[-1]]],10,[11,4]],[[1,1],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],0,0,0,[[[2,[-1]],12],13,[14,4]],[[[2,[-1]],12],13,4],[[1,12],13],[[1,12],13],[-1,-1,[]],[1,[[2,[-1]]],4],[15,[[2,[-1]]],4],[-1,-1,[]],[15,1],[-1,[[2,[-1]]],4],0,[[-1,-2],15,[16,17],18],[[[2,[-1]],-2],3,4,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[-1]]],-1,4],[[[2,[-1]]],10,4],[[[2,[-1]]],10,4],[1,10],0,[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],0,0,0,[[],[[2,[-1]]],4],[[],[[2,[-1]]],4],[[1,1],1],[[[2,[-1]],[2,[-1]]],3,4],0,0,0,[[[2,[-1]],[2,[-1]]],[[27,[26]]],4],[[1,1],[[27,[26]]]],[[]],[[]],0,0,[[1,1],1],[[[2,[-1]],-2],8,4,28],[[1,-1],8,28],0,0,[[1,1],1],[[[2,[-1]],[2,[-1]]],3,4],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],0,[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[33,[34,[-1]],[36,[35]]],35,4],[[33,[36,[[37,[-1]]]]],[[38,[[3,[29,[38,[-1]]]]]]],4],[33,39],[[-2,[40,[-1]],[40,[-1]]],[[8,[41,42]]],43,[[44,[-1]]]],[[-2,-4,[40,[-1]],[40,[-1]]],3,43,[[44,[-1]]],[[45,[29]]],[[47,[],[[46,[-3]]]]]],0,0,[[-2,-4],[[8,[[37,[-1]],42]]],4,[[44,[-1]]],48,[[47,[],[[46,[[8,[[49,[-3,-1]],42]]]]]]]],[[-2,-3],[[8,[[50,[-1]],42]]],4,[[44,[-1]]],[[47,[],[[46,[[8,[[51,[-1]],42]]]]]]]],[[-2,[49,[-3,-1]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]],48],[[-2,[51,[-1]]],[[8,[[50,[-1]],42]]],4,[[44,[-1]]]],[[[37,[-1]],-2,[37,[-1]]],[[8,[41,42]]],4,[[44,[-1]]]],[[[50,[-1]],-2,[50,[-1]]],[[8,[41,42]]],4,[[44,[-1]]]],[[-2,-4],[[37,[-1]]],4,[[44,[-1]]],48,[[47,[],[[46,[[49,[-3,-1]]]]]]]],[[-2,-1,[40,[-1]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[[37,[-1]],-2,-1],[[8,[41,42]]],4,[[44,[-1]]]],[[[50,[-1]],-2,-1],[[8,[41,42]]],4,[[44,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]]],[[37,[-1]]],[5,43]],[[[50,[-1]]],[[50,[-1]]],[5,4]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[[[37,[-1]],-2,[37,[-1]]],3,4,[[44,[-1]]]],[[[50,[-1]],-2,[50,[-1]]],3,4,[[44,[-1]]]],[[[37,[-1]],12],13,4],[[[50,[-1]],12],13,4],[-1,-1,[]],[[[50,[-1]]],[[37,[-1]]],4],[-1,-1,[]],[[[37,[-1]]],[[50,[-1]]],4],[[[40,[-1]],[40,[-1]]],[[37,[-1]]],4],[[[37,[-1]]],[[27,[[49,[-2,-1]]]]],4,48],[[[37,[-1]]],[[40,[-1]]],4],[[[50,[-1]]],[[40,[-1]]],4],[[[37,[-1]],-2,41,[37,[-1]]],3,4,[[44,[-1]]]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[[[37,[-1]],-2],[[8,[41,42]]],4,[[44,[-1]]]],[[[37,[-1]],-2],[[8,[41,42]]],4,[[44,[-1]]]],[[[37,[-1]],-2],[[8,[41,42]]],4,[[44,[-1]]]],[[[37,[-1]],-2],[[8,[41,42]]],4,[[44,[-1]]]],[[[37,[-1]],-2],[[8,[41,42]]],4,[[44,[-1]]]],[[[37,[-1]],-2],[[8,[41,42]]],4,[[44,[-1]]]],[[[37,[-1]],-2],[[8,[41,42]]],4,[[44,[-1]]]],[[[37,[-1]],-2],[[8,[41,42]]],4,[[44,[-1]]]],[[[37,[-1]],-2],[[8,[41,42]]],4,[[44,[-1]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[-2,41,[37,[-1]],[37,[-1]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[-2,41,[50,[-1]],[50,[-1]]],[[8,[[50,[-1]],42]]],4,[[44,[-1]]]],[[-2,41,[52,[-1]],[52,[-1]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[]],[[]],[[[37,[-1]]],[[40,[-1]]],4],[[[50,[-1]]],[[40,[-1]]],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[53,[3]]]],0,[[],54],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],55],[[],56],[[],57],[[],58],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[55]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[56]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[6,3],[6,3],[[55,55],10],[[56,56],10],[[57,57],10],[[58,58],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[55,12],13],[[56,12],13],[[57,12],13],[[58,12],13],0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[54,[27,[[59,[39,29]]]]],[[8,[55,60]]]],[[],54],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,10],[58,10],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[[27,[54]],[27,[[59,[39,29]]]]],55],[[[27,[54]]],54],0,0,[[]],[[]],[[]],[[]],[[],54],0,0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[61,6],0,[62,6],[[62,[34,[-1]],[36,[35]],35,35],[[38,[35]]],4],[[62,[34,[-1]],[36,[35]]],[[38,[35]]],4],[[62,[34,[-1]],[36,[35]]],35,4],0,[62,10],0,[[61,-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]],[37,[-1]],[37,[-1]]],[[8,[[38,[[37,[-1]]]],42]]],4,[[44,[-1]]]],[[61,-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[38,[[37,[-1]]]],42]]],4,[[44,[-1]]]],[[61,-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],0,0,0,[[[64,[-1,-2]]],6,4,[[33,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[64,[-1,-2]]],[[64,[-1,-2]]],4,[[33,[-1]]]],[[-1,-2],3,[],[]],[-2,[[53,[[64,[-1,-2]]]]],4,[[33,[-1]]]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[[64,[-1,-2]]],6,4,[[33,[-1]],14]],[[[64,[-1,-2]],[34,[-1]],[36,[35]]],35,4,[[33,[-1]],14]],[[[64,[-1,-2]],12],13,[14,4],14],[-1,-1,[]],[[[64,[-1,-2]]],10,4,[[33,[-1]],14]],[[],6],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[[64,[-1,-2]]],39,4,[[33,[-1]]]],[-2,[[64,[-1,-2]]],4,[[33,[-1]]]],[[]],[[[64,[-1,-2]],-3,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[37,[-1]],42]]],4,[[33,[-1]]],[[44,[-1]]]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[37,[-1]]],[[27,[[49,[-2,-1]]]]],4,48],[[-2,[63,[-1]],[34,[-1]],41,[37,[-1]],6],[[8,[[3,[[38,[[37,[-1]]]],[37,[-1]],[40,[-1]]]],42]]],4,[[44,[-1]]]],0,0,0,[[[65,[-1]]],6,4],[[[66,[-1]]],6,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[65,[-1]]],[[65,[-1]]],[5,4]],[[[66,[-1]]],[[66,[-1]]],[5,4]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[65,[-2]]]]],9,4],[-1,[[8,[[66,[-2]]]]],9,[67,4]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[[[65,[-1]]],6,4],[[[66,[-1]]],6,4],[[[66,[-1]],[34,[-1]],[36,[35]],35,35],[[38,[35]]],4],[[[66,[-1]],[34,[-1]],[36,[35]]],[[38,[35]]],4],[[[65,[-1]],[34,[-1]],[36,[35]]],35,4],[[[66,[-1]],[34,[-1]],[36,[35]]],35,4],[[[65,[-1]],12],13,[14,4]],[[[66,[-1]],12],13,[14,4]],[-1,-1,[]],[[[65,[-1]]],[[66,[-1]]],4],[-1,-1,[]],[[[65,[-1]]],10,4],[[[66,[-1]]],10,4],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[6,[[65,[-1]]],4],[[]],[[]],[[[65,[-1]],-2],8,4,28],[[[66,[-1]],-2],8,[68,4],28],[[[66,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]],[37,[-1]],[37,[-1]]],[[8,[[38,[[37,[-1]]]],42]]],4,[[44,[-1]]]],[[[66,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[38,[[37,[-1]]]],42]]],4,[[44,[-1]]]],[[[65,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[[66,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[69,[-1]]],6,4],[[[70,[-1]]],6,4],[[[71,[-1]]],6,4],[[[72,[-1]]],6,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[69,[-1]]],[[69,[-1]]],[5,4]],[[[70,[-1]]],[[70,[-1]]],5],[[[71,[-1]]],[[71,[-1]]],5],[[[72,[-1]]],[[72,[-1]]],5],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,[[],[[70,[-1]]],73],[[],[[71,[-1]]],73],[[],[[72,[-1]]],73],[[],[[74,[-1]]],4],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[70,[-2]]]]],9,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[71,[-2]]]]],9,[]],[-1,[[8,[[72,[-2]]]]],9,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[[[74,[-1]]],-1,4],[[[69,[-1]]],6,4],[[[70,[-1]]],6,4],[[[71,[-1]]],6,4],[[[72,[-1]]],6,4],[[[69,[-1]],[34,[-1]],[36,[35]],35,35],[[38,[35]]],4],[[[69,[-1]],[34,[-1]],[36,[35]]],[[38,[35]]],4],[[[69,[-1]],[34,[-1]],[36,[35]]],35,4],[[[70,[-1]],[34,[-1]],[36,[35]]],35,4],[[[71,[-1]],[34,[-1]],[36,[35]]],35,4],[[[72,[-1]],[34,[-1]],[36,[35]]],35,4],[[[75,[-1]],12],13,14],[[[69,[-1]],12],13,[14,4]],[[[70,[-1]],12],13,14],[[[71,[-1]],12],13,14],[[[72,[-1]],12],13,14],[[[74,[-1]],12],13,[14,4]],[[[76,[-1]],12],13,[14,4]],[[[77,[-1]],12],13,[14,4]],[-1,-1,[]],[[[72,[-1]]],[[69,[-1]]],4],[[[70,[-1]]],[[69,[-1]]],4],[-1,-1,[]],[[[71,[-1]]],[[69,[-1]]],4],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[69,[-1]]],10,4],[[[70,[-1]]],10,4],[[[71,[-1]]],10,4],[[[72,[-1]]],10,4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[74,[-1]],-1,-1],[[8,[10,[75,[-1]]]]],4],[[[80,[[79,[78]]]],[81,[-1,[69,[-1]]]]],3,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[[74,[-1]]],6,4],[[[74,[-1]],-1],[[8,[[27,[-1]],[75,[-1]]]]],4],[[[0,[-1]],[0,[-1]]],[[74,[-1]]],4],[[[0,[-1]],[0,[-1]],6],[[74,[-1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[74,[-1]],-1,-1],[[8,[[3,[[77,[-1]],10]],[75,[-1]]]]],4],[[[74,[-1]],-1],[[8,[[76,[-1]],[75,[-1]]]]],4],[[[74,[-1]]],-1,4],[[[74,[-1]],6],6,4],[[[70,[-1]],-2],8,[],28],[[[71,[-1]],-2],8,[],28],[[[72,[-1]],-2],8,[],28],[[[69,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]],[37,[-1]],[37,[-1]]],[[8,[[38,[[37,[-1]]]],42]]],4,[[44,[-1]]]],[[[74,[-1]],-2,[0,[-1]],[40,[-1]],[40,[-1]],[40,[-1]]],[[8,[[40,[-1]],42]]],4,[[44,[-1]]]],[[[69,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[38,[[37,[-1]]]],42]]],4,[[44,[-1]]]],[[[69,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[[70,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[[71,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[[72,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[76,[-1]],-1,-1,-1,[0,[-1]]],10,4],[[[77,[-1]],-1,-1,-1,[27,[-1]],-1,[0,[-1]]],10,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[83,[],[[82,[-1]]]],35],3,[[84,[-2]]],4],[[[85,[-1]],35],3,4],[84,[[40,[-1]]],4],[[[86,[-1]]],[[40,[-1]]],4],[[[87,[-1,[85,[-1]],-2]]],6,4,[[88,[-1]],22,23]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[87,[-1,[85,[-1]],-2]]],6,4,[[88,[-1]],22,23]],[[[89,[-1]]],[[89,[-1]]],5],[[[90,[-1]]],[[90,[-1]]],[5,4]],[[[91,[-1,-2,-3]]],[[91,[-1,-2,-3]]],5,5,[5,4]],[[[92,[-1,-2]]],[[92,[-1,-2]]],[5,4],5],[[[87,[-1,-2,-3]]],[[87,[-1,-2,-3]]],[5,4],5,5],[[[85,[-1]]],[[85,[-1]]],[5,4]],[[[86,[-1]]],[[86,[-1]]],[5,4]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[],6],[[84,35],6],[[[83,[],[[82,[-1]]]],35],6,[[84,[-2]]],4],[[[85,[-1]],35],6,4],[[[86,[-1]],35],6,4],[[],[[85,[-1]]],4],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[[[34,[-1]],6],[[88,[],[[93,[-2]]]]],4,[[94,[-1]]]],[[-2,[34,[-1]],6],94,4,[[44,[-1]]]],[[[88,[],[[93,[-1]]]],[91,[[88,[],[[93,[-1]]]],[85,[-2]],-2]]],35,[[94,[-2]]],4],[[[83,[],[[82,[-1]]]],[34,[-2]],[89,[-2]]],3,[[84,[-2]]],4],[[[85,[-1]],[34,[-1]],[89,[-1]]],3,4],[[95,12],13],[[[89,[-1]],12],13,14],[[[90,[-1]],12],13,[14,4]],[[96,12],13],[[[97,[-1]],12],13,[14,4]],[[[91,[-1,-2,-3]],12],13,14,14,[14,4]],[[[92,[-1,-2]],12],13,[14,4],14],[[[85,[-1]],12],13,[14,4]],[[[86,[-1]],12],13,[14,4]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[34,[-1]],35],[[27,[[88,[],[[93,[-2]]]]]]],4,[[94,[-1]]]],[[-2,[34,[-1]],35],[[27,[94]]],4,[[44,[-1]]]],[[[88,[],[[93,[-1]]]]],6,[[94,[-2]]],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[87,[-1,[85,[-1]],-2]]],[[38,[35]]],4,[[88,[-1]],22,23]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[83,[],[[82,[-1]]]]],10,[[84,[-2]]],4],[[[85,[-1]]],10,4],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[[83,[],[[82,[-1]]]],-2],[[27,[-2]]],[[84,[-2]]],4],[[[85,[-1]],-1],[[27,[-1]]],4],[[[87,[-1,[85,[-1]],-2]]],6,[98,4],[[88,[-1]],22,23]],[[[87,[-1,[85,[-1]],-2]]],[[38,[35]]],4,[[88,[-1]],22,23]],[[-2,41,[90,[-1]],[90,[-1]]],[[8,[[90,[-1]],42]]],4,[[44,[-1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[87,[-1,[85,[-1]],-2]],6],[[87,[-1,[85,[-1]],-2]]],[98,4],[[88,[-1]],22,23]],[[[91,[-2,[85,[-1]],-1]],35],35,4,[[88,[-1]]]],[[[83,[],[[82,[-1]]]]],[[27,[-2]]],[[84,[-2]]],4],[[[85,[-1]]],[[27,[-1]]],4],[[[88,[],[[93,[-1]]]],[91,[[88,[],[[93,[-1]]]],[85,[-2]],-2]],[88,[],[[93,[-1]]]]],35,[[94,[-2]]],4],[[[88,[],[[93,[-1]]]],[91,[[88,[],[[93,[-1]]]],[85,[-2]],-2]],[88,[],[[93,[-1]]]]],35,[[94,[-2]]],4],[[[87,[-1,[85,[-1]],-2]]],[[99,[-1]]],[98,4],[[88,[-1]],22,23]],[[[88,[],[[93,[-1]]]]],100,[[94,[-2]]],4],[94,100],[[[88,[],[[93,[-1]]]],[34,[-2]]],35,[[94,[-2]]],4],[[[88,[],[[93,[-1]]]],[34,[-2]]],35,[[94,[-2]]],4],[[94,[34,[-1]]],35,4],[[94,[34,[-1]]],35,4],[[[91,[-2,[85,[-1]],-1]],-3,[63,[-1]]],[[8,[3,42]]],4,[[88,[-1]]],[[44,[-1]]]],[[[87,[-1,[85,[-1]],-2]],-3,[27,[[40,[-1]]]],[36,[[40,[-1]]]]],[[8,[[3,[[27,[[40,[-1]]]],[38,[[40,[-1]]]]]],42]]],4,[[88,[-1]],22,23],[[44,[-1]]]],[[84,-2,[40,[-1]],[37,[-1]]],[[8,[[40,[-1]],42]]],4,[[44,[-1]]]],[[[86,[-1]],-2,[40,[-1]],[37,[-1]]],[[8,[[40,[-1]],42]]],4,[[44,[-1]]]],[[94,-2,[63,[-1]],[34,[-1]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[94,-2,[63,[-1]],[34,[-1]],[92,[-1,[86,[-1]]]],[37,[-1]],[37,[-1]]],[[8,[[3,[[3,[[37,[-1]],[37,[-1]]]],[37,[-1]]]],42]]],4,[[44,[-1]]]],[[84,-2,[40,[-1]]],[[8,[[40,[-1]],42]]],4,[[44,[-1]]]],[[[86,[-1]],-2,[40,[-1]]],[[8,[[40,[-1]],42]]],4,[[44,[-1]]]],[[94,-2,[63,[-1]],[34,[-1]],[37,[-1]],[38,[[37,[-1]]]],[37,[-1]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[94,-2,[63,[-1]],[34,[-1]],[37,[-1]],[38,[[37,[-1]]]],[37,[-1]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[94,-2,[63,[-1]],[34,[-1]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[94,-2,[63,[-1]],[34,[-1]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[[84,-2,[40,[-1]],[37,[-1]],[40,[-1]]],[[8,[[40,[-1]],42]]],4,[[44,[-1]]]],[[[86,[-1]],-2,[40,[-1]],[37,[-1]],[40,[-1]]],[[8,[[40,[-1]],42]]],4,[[44,[-1]]]],[[[88,[],[[93,[-1]]]],-3,[34,[-2]]],-1,[[94,[-2]]],4,[[44,[-2]]]],[[[83,[],[[82,[-1]]]],-3],-1,[[84,[-2]]],4,[[44,[-2]]]],[[[85,[-1]],-2],-3,4,[[44,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[88,[],[[93,[-1]]]],[34,[-2]]],35,[[94,[-2]]],4],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,101,[]],[-1,101,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[102,102],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[[103,12],13],[[103,12],13],[[102,12],13],[[102,12],13],[-1,-1,[]],[104,103],[42,103],[102,103],[105,103],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[]],[[]],[103,[[27,[101]]]],[102,[[27,[101]]]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[106,[-1,-2,-3,-4]]],[[106,[-1,-2,-3,-4]]],[5,107],[5,107],5,5],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[[106,[-1,-2,-3,-4]],[106,[-1,-2,-3,-4]]],10,[11,107],[11,107],11,11],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[106,[-1,-2,-3,-4]],12],13,[14,107],[14,107],14,14],[-1,-1,[]],0,[[],6],0,[-1,-2,[],[]],0,[[],[[8,[24,25]]]],0,[[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[81,[-1,-2]],-3],3,4,[],[[45,[[108,[-1,-2]]]]]],[[[81,[-1,-2]],-3,-4],3,4,[],[[45,[100]]],[[45,[-2]]]],[[[109,[-1]]],6,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[110,[-1]]],[[110,[-1]]],5],[[[109,[-1]]],[[109,[-1]]],[5,4]],[[[81,[-1,-2]]],[[81,[-1,-2]]],5,5],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[81,[-1,-2]]],6,4,[]],[[[81,[-1,-2]]],[[111,[100,-2]]],4,[]],[[],[[81,[-1,-2]]],73,73],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[110,[-2]]]]],9,[]],[-1,[[8,[[109,[-2]]]]],9,[67,4]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[81,[-2,-3]]]]],9,[],67],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[6,3],[6,3],[[[110,[-1]]],6,4],[[[109,[-1]]],6,4],[[[109,[-1]],[34,[-1]],[36,[35]],35,35],[[38,[35]]],4],[[[109,[-1]],[34,[-1]],[36,[35]]],[[38,[35]]],4],[[[110,[-1]],[34,[-1]],[36,[35]]],35,4],[[[109,[-1]],[34,[-1]],[36,[35]]],35,4],[[[110,[-1]],12],13,14],[[[109,[-1]],12],13,[14,4]],[[[81,[-1,-2]],12],13,14,14],[[[108,[-1,-2]],12],13,14,14],[-1,-1,[]],[[[110,[-1]]],[[109,[-1]]],4],[-1,-1,[]],[-1,-1,[]],[[[3,[-1,-3]]],[[108,[-2,-3]]],[[45,[100]]],4,[[62,[-2]]]],[-1,-1,[]],[[[81,[-1,-2]],100],[[27,[6]]],4,[]],[[[109,[-1]]],10,4],[[[81,[-1,-2]]],10,4,[]],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[81,[-1,-2]]],10,4,[]],[[[81,[-1,-2]]],29,4,[]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[[81,[-1,-2]],100],[[27,[-2]]],4,[]],[[],[[81,[-1,-2]]],4,[]],[[-1,-3],[[108,[-4,-2]]],[[45,[100]]],[],[[45,[-2]]],4],[[[38,[-3]]],[[81,[-1,-2]]],4,[],[[45,[[108,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[110,[-1]],-2],8,[],28],[[[109,[-1]],-2],8,[68,4],28],[[[81,[-1,-2]],-3],8,[],68,28],[[[109,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]],[37,[-1]],[37,[-1]]],[[8,[[38,[[37,[-1]]]],42]]],4,[[44,[-1]]]],[[[109,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[38,[[37,[-1]]]],42]]],4,[[44,[-1]]]],[[[109,[-1]],-2,[63,[-1]],[34,[-1]],41,[36,[[37,[-1]]]]],[[8,[[37,[-1]],42]]],4,[[44,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[112,112],[[[113,[-1]]],[[113,[-1]]],5],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[113,[-1]],[113,[-1]]],26,4],[[-1,-2],26,[],[]],[[],112],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[-1,[[8,[112]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[113,[-2]]]]],9,4],[6,3],[6,3],[[112,112],10],[[[113,[-1]],[113,[-1]]],10,11],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[112,12],13],[[112,12],13],[[[113,[-1]],12],13,14],[-1,-1,[]],[-1,-1,[]],[[[36,[114]]],[[27,[4]]]],[115,4],[116,4],[117,4],[118,4],[119,4],[120,4],[121,4],[15,4],[4,112],[[-1,-2],15,[16,17],18],[[[113,[-1]],-2],3,4,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[4,29],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[4,10],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],4],[[],4],[[[113,[-1]],[113,[-1]]],[[27,[26]]],4],[[]],[[]],[[112,-1],8,28],[[[113,[-1]],-2],8,4,28],[4,[[38,[114]]]],[4,[[27,[115]]]],[4,[[27,[116]]]],[4,[[27,[117]]]],[4,[[27,[118]]]],[4,[[27,[119]]]],[-1,-2,[],[]],[-1,-2,[],[]],[112,[[27,[122]]]],[-1,29,[]],[4,[[27,[123]]]],[4,123],[4,[[27,[120]]]],[4,[[27,[121]]]],[4,121],[4,[[27,[15]]]],[4,15],[4,29],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[],[[36,[112]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[124,-2,[34,[-1]]],[[63,[-1]]],4,[[44,[-1]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[124,[36,[35]],[34,[-1]],[81,[-1,-2]],6],[[53,[0]]],4,[[62,[-1]]]],[124,[[53,[3]]]],0,[124,124],[125,125],[126,126],[127,127],[128,128],[129,129],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],0,0,[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[[124,124],10],[[125,125],10],[[126,126],10],[[127,127],10],[[128,128],10],[[129,129],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],0,[[124,12],13],[[125,12],13],[[125,12],13],[[126,12],13],[[127,12],13],[[128,12],13],[[129,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[125,-1],3,19],[[126,-1],3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],0,[125,130],0,[[29,[38,[125]],6,127],[[53,[124]]]],[39,125],[[29,[38,[125]],6,127],124],[[124,[34,[-1]]],6,4],0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[126,[34,[-1]]],35,4],[-1,29,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[124,6],[[53,[124]]]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[[[63,[-1]],-2,-1],[[40,[-1]]],4,[[44,[-1]]]],[[[63,[-1]],-2,-1],[[40,[-1]]],4,[[44,[-1]]]],[[[63,[-1]],-2,35,[34,[-1]]],[[37,[-1]]],4,[[44,[-1]]]],[[[63,[-1]],-2,-3],[[40,[-1]]],4,[[44,[-1]]],48],[[[63,[-1]],-2,-3],[[40,[-1]]],4,[[44,[-1]]],48],[[[63,[-1]],-2,[134,[-1]]],[[37,[-1]]],4,[[44,[-1]]]],[[[63,[-1]],-2,-3,-1],[[37,[-1]]],4,[[44,[-1]]],48],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[131,[-1]]],[[131,[-1]]],[5,4]],[[-1,-2],3,[],[]],[[],[[63,[-1]]],[73,4]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[6,3],[6,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[],124],[[[27,[[3,[124,[36,[124]],[81,[-1,-2]]]]]],35,[34,[-1]],6],[[53,[[38,[0]]]]],4,[[62,[-1]]]],[[[27,[[3,[124,[36,[124]],[81,[-1,-2]]]]]],35,[34,[-1]],6],[[53,[[3,[[38,[35]],6,[38,[35]]]]]]],4,[[62,[-1]]]],[[[27,[[3,[124,[36,[124]],[81,[-1,-2]]]]]],35,35,[34,[-1]],6],[[53,[[3,[[38,[35]],6,[38,[35]]]]]]],4,[[62,[-1]]]],[[[27,[[3,[124,[36,[124]],[81,[-1,-2]]]]]],35,35,[34,[-1]],6],[[53,[[38,[0]]]]],4,[[62,[-1]]]],[[[27,[[3,[124,[36,[124]],[81,[-1,-2]]]]]],35,35,35,[34,[-1]],6],[[53,[[38,[0]]]]],4,[[62,[-1]]]],[-1,-1,[]],[[],6],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[[81,[-1,-2]]],[[38,[124]]],4,[[62,[-1]]]],[[[136,[-1,-2]]],124,4,[[62,[-1]]]],[[[81,[-1,-2]]],[[136,[-1,-2]]],[],[]],[[[81,[-1,-2]]],[[136,[-1,-2]]],[],[]],[[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,[[[137,[-1,-2]]],6,4,[[62,[-1]]]],[[[137,[-1,-2]]],6,4,[[62,[-1]]]],[[[133,[[138,[-1,-2]]]],6],[[137,[-1,-2]]],4,[[62,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,35,[34,[-1]],6,[136,[-1,-2]]],[[53,[[38,[0]],103]]],4,[[62,[-1]]]],[[[137,[-1,-2]],[34,[-1]]],[[53,[3,42]]],4,[[62,[-1]]]],[[[137,[-1,-2]]],6,4,[[62,[-1]]]],[[[137,[-1,-2]]],3,4,[[62,[-1]]]],[[[137,[-1,-2]]],[[137,[-1,-2]]],[5,4],[5,[62,[-1]]]],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],0,[[[137,[-1,-2]],12],13,[14,4],[14,[62,[-1]]]],[[[137,[-1,-2]]],[[27,[[38,[0]]]]],4,[[62,[-1]]]],[-1,-1,[]],[[[36,[0]],[34,[-1]],[133,[[138,[-1,-2]]]]],[[38,[[137,[-1,-2]]]]],4,[[62,[-1]]]],[[],6],[[[137,[-1,-2]]],[[38,[35]]],4,[[62,[-1]]]],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[[137,[-1,-2]]],6,[98,4],[[62,[-1]]]],[[[137,[-1,-2]]],6,4,[[62,[-1]]]],[[[137,[-1,-2]]],[[38,[35]]],4,[[62,[-1]]]],[[]],[[[137,[-1,-2]],[137,[-1,-2]]],10,4,[[62,[-1]]]],[[[137,[-1,-2]],6],[[137,[-1,-2]]],[98,4],[[62,[-1]]]],[[[137,[-1,-2]]],6,4,[[62,[-1]]]],[[[137,[-1,-2]]],6,4,[[62,[-1]]]],[[[137,[-1,-2]]],[[38,[-1]]],4,[[62,[-1]]]],[[[137,[-1,-2]]],[[99,[-1]]],[98,4],[[62,[-1]]]],[[[36,[0]]],6],[[[137,[-1,-2]],-3,[36,[[40,[-1]]]]],[[53,[[38,[[40,[-1]]]],42]]],4,[[62,[-1]]],[[44,[-1]]]],[[[137,[-1,-2]],-3],[[53,[3,42]]],4,[[62,[-1]]],[[44,[-1]]]],[[[137,[-1,-2]],-3,[27,[[40,[-1]]]],[36,[[40,[-1]]]]],[[53,[[3,[[27,[[40,[-1]]]],[38,[[40,[-1]]]]]],42]]],4,[[62,[-1]]],[[44,[-1]]]],[[[137,[-1,-2]],-3,[34,[-1]],[38,[[37,[-1]]]],[36,[0]],[63,[-1]]],[[53,[[38,[[37,[-1]]]],42]]],4,[[62,[-1]]],[[44,[-1]]]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[[139,6],35],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[35,139],35],[140,140],[35,35],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[140]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[35]]],9],[6,3],[6,3],[[],[[134,[-1]]],4],[[140,140],10],[[35,35],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[140,12],13],[[35,12],13],[[35,[34,[-1]],78],29,4],[[35,[34,[-1]]],29,4],[-1,-1,[]],[-1,-1,[]],[140,[[27,[6]]]],[35,[[27,[6]]]],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[140,[[27,[6]]]],[140,[[27,[6]]]],[140,[[27,[6]]]],[35,[[27,[6]]]],[35,[[27,[6]]]],[35,[[27,[6]]]],[[35,139],10],[[35,[36,[139]]],10],[[140,-1],3,19],[[35,-1],3,19],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[35,10],[140,10],[35,10],[35,10],[35,10],[35,10],[35,10],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[139,140],35],[35,[[3,[139,140]]]],[[]],[[]],[35,140],[[140,-1],8,28],[[35,-1],8,28],[35,139],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[34,[-1]],-1,-1,35],3,4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[34,[-1]],35],[[53,[[3,[35,35]]]]],4],[[[34,[-1]],115],35,4],[[[34,[-1]],-1],35,4],[[[34,[-1]],35],35,4],[[[34,[-1]],35,35],35,4],[[[34,[-1]]],35,4],[[[34,[-1]]],35,4],[[[34,[-1]]],35,4],[[[34,[-1]],35],[[27,[[141,[35]]]]],4],[[],[[34,[-1]]],4],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[[[34,[-1]]],35,4],[[[34,[-1]],6],-1,4],[[[34,[-1]],6],[[141,[35]]],4],[[[34,[-1]],6],[[141,[140]]],4],[[[34,[-1]],35],[[27,[115]]],4],[[[34,[-1]],35],[[27,[[38,[[3,[35,35]]]]]]],4],[[[34,[-1]],35],[[27,[-1]]],4],[[[34,[-1]],6],[[27,[-1]]],4],[[[34,[-1]],35],[[27,[100]]],4],[[[34,[-1]],35],[[27,[[3,[[38,[35]],[27,[35]]]]]]],4],[[[34,[-1]],35],[[27,[-1]]],4],[[[34,[-1]],35],[[27,[[38,[35]]]]],4],[[[34,[-1]],35],[[27,[[3,[35,35,35]]]]],4],[[[34,[-1]],6],[[27,[[141,[35]]]]],4],[[[34,[-1]],6],[[27,[[141,[140]]]]],4],[[[34,[-1]],35],[[27,[29]]],4],[[[34,[-1]],35],[[27,[100]]],4],[[[34,[-1]],35],[[27,[100]]],4],[[[34,[-1]],140],[[27,[139]]],4],[[[34,[-1]],35],[[27,[15]]],4],[[[142,[-1,96]],12],[[8,[3,143]]],4],[[[34,[-1]],12],13,[14,4]],[-1,-1,[]],[-1,-1,[]],[[[34,[-1]]],-2,4,[]],[[[34,[-1]]],6,4],[[[34,[-1]]],-1,4],0,[[[34,[-1]]],6,4],[[[34,[-1]]],-1,4],0,[[[34,[-1]]],6,4],[[[34,[-1]]],-1,4],0,[[[34,[-1]]],6,4],[[[34,[-1]]],-1,4],0,[[[34,[-1]],35],[[134,[-1]]],4],[[[34,[-1]],140],[[113,[-1]]],4],[[[34,[-1]],-1,35],35,4],[[[34,[-1]],-1,35],[[3,[-1,[134,[-1]]]]],4],[[[34,[-1]]],3,4],[[[34,[-1]]],3,4],[[[34,[-1]],[38,[35]],35],35,4],[[],6],[[],6],[[[34,[-1]]],-2,4,[]],[[[142,[-1,-2]]],-2,4,[]],[[[34,[-1]],139,-1],35,4],[[[34,[-1]]],35,4],[[[34,[-1]],-1],[[3,[6,10]]],4],[[[34,[-1]],35,35,35],35,4],[[[34,[-1]],39],35,4],[[[34,[-1]]],35,4],[[[34,[-1]],35,35,35],35,4],[[[34,[-1]],139,[141,[35]]],35,4],[[[34,[-1]],139,[141,[35]],[134,[-1]]],35,4],[[[34,[-1]],-1],140,4],[[[34,[-1]],[141,[140]]],140,4],[[[34,[-1]],[141,[140]],[113,[-1]]],140,4],[[[34,[-1]],39],35,4],[[[34,[-1]],100],35,4],[[[34,[-1]],[36,[29]]],35,4],[[[34,[-1]],[0,[-1]]],35,4],[[[34,[-1]]],35,4],[[[34,[-1]],39],35,4],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[34,[-1]],140],10,4],[[[34,[-1]],39],35,4],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[[34,[-1]],-2],35,4,[[145,[],[[144,[35]]]]]],[[[34,[-1]],-1],35,4],[[[34,[-1]],15],35,4],[[[34,[-1]],[134,[-1]]],35,4],[[[34,[-1]],-1],[[27,[[3,[-1,35]]]]],4],[[]],[[]],[[[34,[-1]],35],[[27,[[141,[35]]]]],4],0,[[[34,[-1]],-2,-2],10,4,[]],[[[34,[-1]],35,35],10,4],[[[34,[-1]],[141,[35]]],[[141,[140]]],4],[[[34,[-1]],35,35,35],35,4],[[[34,[-1]],140,140],10,4],[[[34,[-1]],[141,[140]]],[[27,[[141,[35]]]]],4],[[[34,[-1]],140,140],[[27,[35]]],4],[[[34,[-1]]],140,4],[[[34,[-1]],[80,[[79,[78]]]],39],[[53,[35]]],4],[[[34,[-1]],39],[[53,[-2,-3]]],4,[],[]],[[[34,[-1]],[80,[[79,[78]]]],39],[[53,[[3,[6,146,35,10]],147]]],4],[[[34,[-1]],39],[[53,[35]]],4],[[[142,[-1,-2]]],[[34,[-1]]],4,[]],[[[34,[-1]],139],140,4],[[[142,[-1,-2]]],-2,4,[]],[[[34,[-1]],[134,[-1]]],35,4],[[[34,[-1]],[113,[-1]]],140,4],[[[34,[-1]],[36,[35]]],[[38,[-1]]],4],[[[34,[-1]],[36,[140]]],[[38,[-1]]],4],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[34,[-1]],15],35,4],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[34,[-1]],139],35,4],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[139,139],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[-1,[[8,[139]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[139,139],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[139,12],13],[[139,12],13],[-1,-1,[]],[-1,[[27,[139]]],4],[[-1,-2],15,[16,17],18],[[139,-1],3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[139,6],[[],6],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[]],[6,[[27,[139]]]],[[139,-1],8,28],[139,-1,4],[139,-1,4],[-1,-2,[],[]],[-1,29,[]],[-1,[[8,[-2]]],[],[]],[120,[[53,[139,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,101,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[147,147],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],0,0,[[147,12],13],[[147,12],13],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],6],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,[148,39],[-1,-2,[],[]],[-1,-2,[],[]],[148,148],[[-1,-2],3,[],[]],[148,115],[[148,146],[[149,[-1,[38,[114]]]]],4],[[],148],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[148,-1],29,[[150,[[36,[114]]]]]],[[148,148],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[148,12],13],[-1,-1,[]],[[],6],[-1,-2,[],[]],[[148,115],10],[[],[[8,[24,25]]]],[[],[[0,[[151,[146],[[46,[[149,[-1,29]]]]]]]]],4],[146,[[149,[-1,148]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,29]]]]]]]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,29]]]]]]]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,148]]]]]]]]],4],[148,[[31,[151]]]],[[],[[0,[[151,[146],[[46,[[149,[-1,29]]]]]]]]],4],[[]],[148,121],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[[-1,39,[152,[-1,-2]]],[[152,[-1,-2]]],[153,154],4],[[-1,155,[152,[-1,-2]]],[[152,[-1,-2]]],[153,154],4],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[156,[-1]]],[[156,[-1]]],[5,4]],[[[152,[-1,-2]]],[[152,[-1,-2]]],[5,154],[5,4]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[[[156,[-1]],[156,[-1]]],10,[11,4]],[[[152,[-1,-2]],[152,[-1,-2]]],10,[11,154],[11,4]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],0,0,[[[156,[-1]],12],13,[14,4]],[[[156,[-1]],12],13,4],[[[152,[146,-1]],12],13,4],[[[152,[-1,-2]],12],13,[14,154],[14,4]],[-1,-1,[]],[-1,-1,[]],[[-1,155],[[152,[-1,-2]]],[153,154],4],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],6],[[],6],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[156,[-1]]],10,4],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[[157,[-1,-2,[152,[-1,-3]]]],-4],[[157,[-1,-2,[152,[-1,-3]]]]],154,[],4,[[151,[[152,[-1,-3]]],[[46,[[152,[-1,-3]]]]]]]],[[-1,[156,[-2]]],[[152,[-1,-2]]],154,4],[[[27,[-1]],-2,[156,[-3]]],[[157,[-2,-1,[152,[-2,-3]]]]],[],154,4],[[[152,[-1,-2]],[152,[-1,-2]]],[[152,[-1,-2]]],[153,154],4],[[]],[[]],[[[8,[-1,-2]],-3,-5],[[157,[-3,-1,[152,[-3,-4]]]]],[],[],154,4,[[151,[-2],[[46,[[156,[-4]]]]]]]],[[-1,[156,[-2]]],[[157,[-1,-3,[152,[-1,-2]]]]],154,4,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[158,158],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[158,158],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[158,12],13],[-1,-1,[]],[[146,146],158],[158,[[27,[6]]]],[[],6],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[]],[[39,6,6,6,6],29],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[159,159],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[159,159],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[159,12],13],[-1,-1,[]],[[],6],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[115,39],[[0,[[151,[146],[[46,[[149,[-1,115]]]]]]]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,146]]]]]]]]],4],[[115,10,39],[[0,[[151,[146],[[46,[[149,[-1,159]]]]]]]]],4],[[115,10,39],[[0,[[151,[146],[[46,[[149,[-1,146]]]]]]]]],4],[115,[[0,[[151,[146],[[46,[[149,[-1,29]]]]]]]]],4],[[115,10,39],[[0,[[151,[146],[[46,[[149,[-1,29]]]]]]]]],4],[[115,10,39],[[0,[[151,[146],[[46,[[149,[-1,29]]]]]]]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,115]]]]]]]]],4],[[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[80,[[79,[78]]]],10],[[0,[[151,[146],[[46,[[149,[-1,[133,[100]]]]]]]]]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,[0,[-1]]]]]]]]]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,[0,[-1]]]]]]]]]]],4],[146,[[149,[-1,146]]],4],[[[80,[[79,[78]]]],10,10],[[0,[[151,[146],[[46,[[149,[-1,[0,[-1]]]]]]]]]]],4],[[[80,[[79,[78]]]],10],[[0,[[151,[146],[[46,[[149,[-1,[27,[[3,[10,[0,[-1]]]]]]]]]]]]]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,[0,[-1]]]]]]]]]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,146]]]]]]]]],4],[[[80,[[79,[78]]]],10],[[0,[[151,[146],[[46,[[149,[-1,[0,[-1]]]]]]]]]]],4],[[[80,[[79,[78]]]],10],[[0,[[151,[146],[[46,[[149,[-1,[133,[100]]]]]]]]]]],4],[[[80,[[79,[78]]]],10],[[0,[[151,[146],[[46,[[149,[-1,[133,[100]]]]]]]]]]],4],[[[80,[[79,[78]]]],10],[[0,[[151,[146],[[46,[[149,[-1,[133,[100]]]]]]]]]]],4],[146,[[149,[-1,[38,[146]]]]],4],[146,[[149,[-1,[38,[146]]]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,[0,[-1]]]]]]]]]]],4],[[[80,[[79,[78]]]],10],[[0,[[151,[146],[[46,[[149,[-1,[0,[-1]]]]]]]]]]],4],[39,[[0,[[151,[146],[[46,[[149,[-1,29]]]]]]]]],4],[39,[[0,[[151,[146],[[46,[[149,[-1,29]]]]]]]]],4],[[],[[0,[[151,[146],[[46,[[149,[-1,[38,[29]]]]]]]]]]],4],[[[80,[[79,[78]]]],10,10],[[0,[[151,[146],[[46,[[149,[-1,[0,[-1]]]]]]]]]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[162,[],[[160,[-1]],[161,[-2]]]],-1],[[8,[[162,[],[[160,[-1]],[161,[-2]]]],103]]],[],[]],[163,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[163,-1,[]],[[[166,[],[[164,[-1]],[160,[-2]],[165,[-3]]]],-2,35,35,[34,[-4]],6],[[8,[[3,[-3,[38,[-4]],[38,[-4]],6]],103]]],[[168,[35],[[167,[[38,[35]]]]]]],[],[[162,[-4,-1],[[160,[-2]]]]],98],[[[166,[],[[164,[-1]],[160,[-2]],[165,[-3]]]],6],6,[[168,[35],[[167,[[38,[35]]]]]]],[],[[162,[-4,-1],[[160,[-2]]]]],98],[163,-1,[]],[[169,12],13],[[[166,[],[[164,[-1]],[160,[-2]],[165,[-3]]]]],169,[[168,[35],[[167,[[38,[35]]]]]]],[],[[162,[-4,-1],[[160,[-2]]]]],98],[-1,-1,[]],[[[172,[],[[170,[-1]],[171,[-2]]]]],-1,[],14],[[[172,[],[[170,[-1]],[171,[-2]]]]],3,[],14],[[],6],[[[172,[],[[170,[-1]],[171,[-2]]]]],-1,[],14],[[[168,[],[[167,[-1]]]]],-1,[[163,[-2]]],[]],[-1,-2,[],[]],[[],[[8,[24,25]]]],0,[173,6],[[[168,[],[[167,[-1]]]]],-1,[[163,[-2]]],[]],[[]],[[[166,[],[[164,[-1]],[160,[-2]],[165,[-3]]]],-2,[38,[-1]],[34,[-4]]],[[8,[[3,[-3,[38,[-4]],[38,[-4]],6]],103]]],[[168,[35],[[167,[[38,[35]]]]]]],[],[[162,[-4,-1],[[160,[-2]]]]],98],[[-1,[36,[-2]],[38,[-3]],[34,[-2]]],[[8,[[162,[],[[160,[-1]],[161,[-4]]]],103]]],[],98,[],[]],[[[172,[],[[170,[-1]],[171,[-2]]]],-1,-1],10,[],14],[173,6],[173,[[38,[-1]]],4],[[[172,[],[[170,[-1]],[171,[-2]]]],39],[[8,[-1,-2]]],[],14],[[[166,[],[[164,[-1]],[160,[-2]],[165,[-3]]]]],6,[[168,[35],[[167,[[38,[35]]]]]]],[],[[162,[-4,-1],[[160,[-2]]]]],98],0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[[162,[],[[160,[-1]],[161,[-2]]]],-1,[36,[-3]],[36,[-3]]],[[8,[10,-2]]],[],[],98],[-1,-2,[],[]],[[],[[38,[[174,[-1]]]]],98],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[6,[133,[[81,[-1,-2]]]]],-1,98,[[62,[-1]]]],[[6,[133,[[81,[-1,-2]]]]],[[3,[[175,[-1,-2]],[176,[-1]]]]],98,[[62,[-1]]]],[[[177,[-1,[175,[-1,-2]]]],[178,[-1]]],[[8,[[177,[-1,[175,[-1,-2]]]],103]]],98,[[62,[-1]]]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[178,[-2]]]]],9,98],[-1,[[8,[[177,[-2,-3]]]]],9,98,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[6,3],[6,3],[[[179,[-1,-2]],-3,35,35,[34,[-1]],6],[[8,[[3,[-4,[38,[-1]],[38,[-1]],6]],103]]],98,[[62,[-1]]],[],[]],[[[178,[-1]],12],13,98],[[[179,[-1,-2]],12],13,[14,98],[14,[62,[-1]]]],[[[179,[-1,-2]]],169,98,[[62,[-1]]]],[[[180,[-1]]],[[178,[-1]]],98],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[6,[133,[[81,[-1,-2]]]]],[[179,[-1,-2]]],98,[[62,[-1]]]],[[[178,[-1]]],[[184,[[181,[-1]],[182,[-1]],[183,[-1]]]]],98],[[]],[[]],[[]],0,[[[179,[-1,-2]],[178,[-1]],[36,[0]],[34,[-1]]],[[8,[[3,[[177,[-1,[175,[-1,-2]]]],[38,[-1]],[38,[-1]],6]],103]]],98,[[62,[-1]]]],[[[178,[-1]],[36,[-1]],[38,[[175,[-1,-2]]]],[34,[-1]]],[[8,[[177,[-1,[175,[-1,-2]]]],103]]],98,[[62,[-1]]]],[[6,[133,[[81,[-1,-2]]]]],[[178,[-1]]],98,[[62,[-1]]]],[[[179,[-1,-2]]],6,98,[[62,[-1]]]],[[[178,[-1]],-2],8,98,28],[[[177,[-1,-2]],-3],8,98,[],28],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[177,[-1,[175,[-1,-2]]]],-3,[36,[-1]],[36,[-1]]],[[8,[10,-4]]],98,[[62,[-1]]],[],[]],[[[178,[-1]]],[[185,[[181,[-1]],[182,[-1]],[183,[-1]]]]],98],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[6,[133,[[81,[-1,-2]]]],6],-1,98,[[62,[-1]]]],[[6,[133,[[81,[-1,-2]]]]],[[186,[[181,[-1]]]]],98,[[62,[-1]]]],[[[138,[-1,-2]]],[[138,[-1,-2]]],[5,4],[5,[62,[-1]]]],[[-1,-2],3,[],[]],[[[187,[-1,[175,[-1,-2]]]],[188,[-1]]],[[8,[[187,[-1,[175,[-1,-2]]]],103]]],98,[[62,[-1]]]],[[[187,[-1,[87,[-1,[85,[-1]],-2]]]],[188,[-1]]],[[8,[[187,[-1,[87,[-1,[85,[-1]],-2]]]],103]]],98,[[88,[-1]],22,23]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[187,[-2,-3]]]]],9,98,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[[188,[-1]]],-1,98],[6,3],[6,3],[6,3],[6,3],[[[189,[-1,-2]],-3,35,35,[34,[-1]],6],[[8,[[3,[-4,[38,[-1]],[38,[-1]],6]],103]]],98,[[62,[-1]]],[],[]],[[[189,[-1,-2]],12],13,[14,98],[14,[62,[-1]]]],[[[138,[-1,-2]],12],13,[14,4],[14,[62,[-1]]]],[[[189,[-1,-2]]],169,98,[[62,[-1]]]],[-1,-1,[]],[[[190,[-1]]],[[188,[-1]]],98],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[188,[-1]],6],-2,98,[]],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[138,[-1,-2]]],[[133,[[81,[-1,-2]]]]],4,[[62,[-1]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[6,[133,[[81,[-1,-2]]]]],[[189,[-1,-2]]],98,[[62,[-1]]]],[[[133,[[81,[-1,-2]]]],6],[[138,[-1,-2]]],4,[[62,[-1]]]],[[[133,[[81,[-1,-2]]]],6],[[138,[-1,-2]]],4,[[62,[-1]]]],[[[138,[-1,-2]]],6,4,[[62,[-1]]]],[[[188,[-1]]],[[193,[[181,[-1]],[191,[-1]],[192,[-1]]]]],98],0,[[]],[[]],[[]],[[]],0,[[[189,[-1,-2]],[188,[-1]],[36,[0]],[34,[-1]]],[[8,[[3,[[187,[-1,[175,[-1,-2]]]],[38,[-1]],[38,[-1]],6]],103]]],98,[[62,[-1]]]],[[[188,[-1]],[36,[-1]],[38,[[87,[-1,[85,[-1]],-2]]]],[34,[-1]]],[[8,[[187,[-1,[87,[-1,[85,[-1]],-2]]]],103]]],98,[[88,[-1]],22,23]],[[[188,[-1]],[36,[-1]],[38,[[175,[-1,-2]]]],[34,[-1]]],[[8,[[187,[-1,[175,[-1,-2]]]],103]]],98,[[62,[-1]]]],[[6,[133,[[81,[-1,-2]]]]],[[188,[-1]]],98,[[62,[-1]]]],[[[189,[-1,-2]]],6,98,[[62,[-1]]]],[[[138,[-1,-2]]],6,4,[[62,[-1]]]],[[[187,[-1,-2]],-3],8,98,[],28],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[[[187,[-1,[175,[-1,-2]]]],-3,[36,[-1]],[36,[-1]]],[[8,[10,-4]]],98,[[62,[-1]]],[],[]],[[[187,[-1,[87,[-1,[85,[-1]],-2]]]],-3,[36,[-1]],[36,[-1]]],[[8,[10,-4]]],98,[[88,[-1]],22,23],[],[]],[[[188,[-1]]],[[194,[[181,[-1]],[191,[-1]],[192,[-1]]]]],98],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[195,[-1,-2]]],[[8,[[178,[-1]],0]]],98,[[62,[-1]]]],[[[195,[-1,-2]]],[[8,[[196,[-1]],0]]],98,[[62,[-1]]]],[[[195,[-1,-2]]],[[8,[[197,[-1]],0]]],98,[[62,[-1]]]],[[[195,[-1,-2]]],[[8,[[188,[-1]],0]]],98,[[62,[-1]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[195,[-1,-2]]],[[38,[[195,[-1,-2]]]]],98,[[62,[-1]]]],[198,198],[199,199],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[[195,[-1,-2]],200],[[202,[201]]],98,[[62,[-1]]]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[198]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[199]]],9],[6,3],[6,3],[6,3],[[198,198],10],[[199,199],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[195,[-1,-2]],12],13,[14,98],[14,[62,[-1]]]],[[198,12],13],[[199,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[195,[-1,-2]]],29,98,[[62,[-1]]]],0,0,[[[195,[-1,-2]]],[[133,[[81,[-1,-2]]]]],98,[[62,[-1]]]],0,0,[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[6,[133,[[81,[-1,-2]]]],10,198],[[195,[-1,-2]]],98,[[62,[-1]]]],[[[195,[-1,-2]],200],[[202,[201]]],98,[[62,[-1]]]],[[]],[[]],[[]],0,0,[[[195,[-1,-2]],6],[[195,[-1,-2]]],98,[[62,[-1]]]],[[198,-1],8,28],[[199,-1],8,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],78],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[78,12],13],[[78,[133,[100]]],29],[-1,-1,[]],[78,[[133,[100]]]],[[78,[36,[[133,[100]]]]],[[53,[3]]]],[[],6],[[],78],[[],78],[[78,-1],[[133,[100]]],[[150,[39]]]],[[78,[36,[-1]],10,10],[[53,[[133,[100]]]]],[[150,[39]]]],[[78,[36,[-1]],10],[[53,[[133,[100]]]]],[[150,[39]]]],[-1,-2,[],[]],[[],[[8,[24,25]]]],[39,100],[[],100],0,[[]],[78,[[80,[[79,[78]]]]]],[[78,39],[[27,[[133,[100]]]]]],[[78,[133,[100]]],[[53,[3]]]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],0,[39,100],[-1,-2,[],[]],0,[-1,-2,[],[]],[[100,100],[[27,[100]]]],[-1,-2,[],[]],[-1,-2,[],[]],[100,100],[[-1,-2],3,[],[]],[[100,100],26],[[-1,-2],26,[],[]],[6,-1,[]],[6,-1,[]],[-1,[[8,[100]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[100,39],100],[100,[[27,[100]]]],[6,3],[[100,100],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[100,[36,[-1]]],100,[[150,[39]]]],[[100,12],13],[[100,12],13],[39,29],[100,29],[100,29],[39,100],[-1,-1,[]],[39,[[27,[100]]]],[[-1,-2],15,[16,17],18],[[100,100],10],[[100,-1],3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],6],[-1,-2,[],[]],[100,10],[100,10],[100,10],[100,10],[115,10],[[[36,[-1]]],100,[[150,[39]]]],[[[38,[29]]],100],[[],[[8,[24,25]]]],[100,[[53,[39]]]],[[[36,[-1]],10],100,[[150,[39]]]],[[[38,[29]],10],100],[[100,100],[[27,[26]]]],[100,[[36,[29]]]],[[]],[100,10],[10,100],[[],100],[[],100],[[100,-1],8,28],[100,3],[[[36,[-1]]],100,[[150,[39]]]],[[[38,[29]]],100],[-1,-2,[],[]],[-1,29,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[117,-2],[[40,[-1]]],4,[[44,[-1]]]],[[116,-2],[[40,[-1]]],4,[[44,[-1]]]],[[118,-2],[[40,[-1]]],4,[[44,[-1]]]],[[119,-2],[[40,[-1]]],4,[[44,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[203,203],[117,117],[204,204],[116,116],[205,205],[118,118],[206,206],[119,119],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[117]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[116]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[118]]],9],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[119]]],9],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[[117,117],10],[[116,116],10],[[118,118],10],[[119,119],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[203,12],13],[[117,12],13],[[117,12],13],[[204,12],13],[[116,12],13],[[116,12],13],[[205,12],13],[[118,12],13],[[118,12],13],[[206,12],13],[[119,12],13],[[119,12],13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[48]]],4],[-1,[[27,[117]]],4],[-1,[[27,[116]]],4],[-1,[[27,[118]]],4],[-1,[[27,[119]]],4],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[117,-1],3,19],[[116,-1],3,19],[[118,-1],3,19],[[119,-1],3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[119,10],[[],203],[[],204],[[],205],[[],206],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[[],[[8,[24,25]]]],[203,6],[204,6],[205,6],[206,6],[203,[[27,[-1]]],[]],[204,[[27,[-1]]],[]],[205,[[27,[-1]]],[]],[206,[[27,[-1]]],[]],[203,[[27,[-1]]],[]],[204,[[27,[-1]]],[]],[205,[[27,[-1]]],[]],[206,[[27,[-1]]],[]],[[203,6],[[27,[-1]]],[]],[[204,6],[[27,[-1]]],[]],[[205,6],[[27,[-1]]],[]],[[206,6],[[27,[-1]]],[]],[-1,[[207,[-2]]],[],[]],[-1,[[207,[-2]]],[],[]],[-1,[[207,[-2]]],[],[]],[-1,[[207,[-2]]],[],[]],[[118,118],[[27,[26]]]],[[119,119],[[27,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[117,-1],8,28],[[116,-1],8,28],[[118,-1],8,28],[[119,-1],8,28],[203,[[3,[6,[27,[6]]]]]],[204,[[3,[6,[27,[6]]]]]],[205,[[3,[6,[27,[6]]]]]],[206,[[3,[6,[27,[6]]]]]],[48,-1,4],[117,-1,4],[116,-1,4],[118,-1,4],[119,-1,[[208,[15]],209]],[48],[117],[116],[118],[119],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[120,[[8,[117,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[120,[[8,[116,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[120,[[8,[118,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[120,[[8,[119,-1]]],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,114],[210,210],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[210,210],10],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[210,12],13],[[210,12],13],[-1,-1,[]],[[[36,[114]]],[[53,[210]]]],[210,[[8,[-1,0]]],67],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],6],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[]],[[[36,[114]]],[[27,[6]]]],[210,114],[114,10],[114,10],[210,[[38,[114]]]],[-1,-2,[],[]],[-1,29,[]],[6,[[38,[114]]]],[-1,[[8,[210,0]]],68],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[211,[-1]]],[[211,[-1]]],[5,4]],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[211,[-2]]]]],9,[67,4]],[6,3],[[[211,[-1]],[211,[-1]]],10,[11,4]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[211,[-1]],12],13,[14,4]],[-1,-1,[]],[[[211,[-1]]],[[141,[-1]]],4],[[],6],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[]],[[[211,[-1]],-2],8,[68,4],28],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[211,[-1]],[0,[-1]]],[[51,[-1]]],4],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[212,[-1]]],[[212,[-1]]],[5,4]],[[-1,-2],3,[],[]],[6,-1,[]],[6,-1,[]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[-1,[[8,[[212,[-2]]]]],9,[67,4]],[6,3],[[[212,[-1]],[212,[-1]]],10,[11,4]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[212,[-1]],12],13,[14,4]],[[[212,[-1]],12],13,4],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],6],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[]],[[[212,[-1]],-2],8,[68,4],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]],[[[212,[-1]],[0,[-1]]],[[52,[-1]]],4],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[49,[-1,-2]]],[[49,[-1,-2]]],[5,48],[5,4]],[[-1,-2],3,[],[]],[[[49,[-1,-2]],[49,[-1,-2]]],26,48,4],[[-1,-2],26,[],[]],[6,-1,[]],[6,-1,[]],[-1,[[8,[[49,[-2,-3]]]]],9,[67,48],[67,4]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[],[[49,[139,-1]]],4],[[[49,[-1,-2]],[49,[-1,-2]]],10,[11,48],[11,4]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[[49,[-1,-2]],12],13,[48,21],4],[[[49,[-1,-2]],12],13,[14,48],[14,4]],[-1,-1,[]],[39,[[8,[[49,[-1,-2]],213]]],48,4],[[-1,-2],[[49,[-1,-2]]],48,4],[[-1,-2],15,[16,17],18],[[[49,[-1,-2]],-3],3,48,4,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],6],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[[49,[-1,-2]],[49,[-1,-2]]],[[27,[26]]],48,4],[[[49,[-1,-2]]],[[3,[-2,-2]]],48,4],[[]],[[[49,[-1,-2]],-3],8,[68,48],[68,4],28],[[[49,[-1,-2]]],-1,48,4],[[[49,[-1,-2]]],-2,48,4],[[[49,[-1,-2]]],29,48,4],[-1,-2,[],[]],[-1,29,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[[[49,[-1,-2]]],-2,48,4],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[214,[-1]]],[[214,[-1]]],[5,4]],[[-1,-2],3,[],[]],0,[[],[[214,[-1]]],[73,4]],[6,-1,[]],[6,-1,[]],[-1,[[8,[[214,[-2]]]]],9,[67,4]],[[-1,-2],[[8,[[7,[-3,-4]]]]],[],[],[],[]],[6,3],[[[214,[-1]],[214,[-1]]],10,[11,4]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],[[-1,-2],10,[],[]],0,[[[214,[-1]],12],13,[14,4]],[-1,-1,[]],[[[214,[-1]],[51,[-1]]],[[27,[[211,[-1]]]]],4],[[[214,[-1]],[52,[-1]]],[[27,[[212,[-1]]]]],4],[[[52,[-1]]],[[27,[[212,[-1]]]]],4],[[],6],[[[214,[-1]],[52,[-1]],[27,[[212,[-1]]]]],[[27,[[27,[[212,[-1]]]]]]],4],[-1,-2,[],[]],[[],[[8,[24,25]]]],[[],[[214,[-1]]],4],[[[214,[-1]],[0,[-1]]],[[52,[-1]]],4],[[]],[[[214,[-1]],39,[0,[-1]]],[[3,[[52,[-1]],[212,[-1]]]]],4],[[[214,[-1]],100,[0,[-1]]],[[3,[[52,[-1]],[212,[-1]]]]],4],[[[214,[-1]],-2],8,[68,4],28],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,30,[]],[[[31,[-1]]],[[31,[32]]],[]],[-1,32,[]],[-1,32,[]],[-1,-2,[],[]]],"c":[],"p":[[6,"UInt",0],[6,"Num",0],[1,"tuple"],[10,"LurkField",1212],[10,"Clone",3428],[1,"usize"],[5,"With",3429],[6,"Result",3430],[10,"Deserializer",3431],[1,"bool"],[10,"PartialEq",3432],[5,"Formatter",3433],[8,"Result",3433],[10,"Debug",3433],[1,"u64"],[10,"Hash",3434],[10,"Sized",3435],[10,"BuildHasher",3434],[10,"Hasher",3434],[5,"IndentedSection",3436],[10,"Display",3433],[10,"Send",3435],[10,"Sync",3435],[5,"Layout",3437],[5,"LayoutError",3437],[6,"Ordering",3432],[6,"Option",3438],[10,"Serializer",3439],[5,"String",3440],[5,"TypeId",3441],[5,"Box",3442],[10,"Any",3441],[10,"CircomGadget",138],[5,"Store",1840],[5,"Ptr",1743],[1,"slice"],[5,"AllocatedPtr",144],[5,"Vec",3443],[1,"str"],[5,"AllocatedNum",3444],[6,"Boolean",3445],[6,"SynthesisError",3446],[10,"PrimeField",3447],[10,"ConstraintSystem",3446],[10,"Into",3448],[17,"Output"],[10,"FnOnce",3449],[10,"Tag",2792],[5,"ZPtr",3335],[5,"AllocatedContPtr",144],[8,"ZContPtr",3335],[8,"ZExprPtr",3335],[8,"Result",3450],[5,"Utf8PathBuf",3451],[5,"Settings",226],[5,"PerfConfig",226],[5,"ParallelConfig",226],[6,"Flow",226],[5,"HashMap",3452],[6,"ConfigError",3453],[10,"CoCircuit",354],[10,"Coprocessor",354],[5,"GlobalAllocator",1572],[5,"CircomCoprocessor",370],[5,"Sha256Coprocessor",403],[6,"Sha256Coproc",403],[10,"Deserialize",3431],[10,"Serialize",3439],[6,"TrieCoproc",470],[5,"NewCoprocessor",470],[5,"LookupCoprocessor",470],[5,"InsertCoprocessor",470],[10,"Default",3454],[5,"Trie",470],[6,"Error",470],[5,"LookupProof",470],[5,"InsertProof",470],[5,"State",2686],[5,"RefCell",3455],[5,"Rc",3456],[5,"Lang",1090],[17,"CM"],[10,"MemoSet",703],[10,"CircuitMemoSet",703],[5,"LogMemo",703],[5,"LogMemoCircuit",703],[5,"CoroutineCircuit",703],[10,"Query",703],[5,"Transcript",703],[5,"CircuitTranscript",703],[5,"Scope",703],[5,"CircuitScope",703],[17,"CQ"],[10,"CircuitQuery",703],[6,"MemoSetError",703],[5,"Provenance",703],[5,"AllocatedProvenance",703],[10,"CurveCycleEquipped",2364],[8,"C2",2458],[5,"Symbol",2724],[10,"Error",3457],[6,"ReductionError",990],[6,"ProofError",990],[6,"NovaError",3458],[6,"SuperNovaError",3459],[5,"Frame",1055],[10,"Copy",3435],[5,"Binding",1090],[6,"Coproc",1090],[5,"DummyCoprocessor",1090],[5,"IndexMap",3460],[6,"LanguageField",1212],[5,"FWrap",1212],[1,"u8"],[1,"char"],[6,"ContTag",2792],[6,"ExprTag",2792],[6,"Op1",2792],[6,"Op2",2792],[1,"u16"],[1,"u32"],[5,"PossibleValue",3461],[1,"u128"],[5,"Func",1322],[5,"Var",1322],[6,"Lit",1322],[5,"Block",1322],[6,"Ctrl",1322],[6,"Op",1322],[8,"AString",1322],[6,"AllocatedVal",1572],[5,"SlotWitness",1572],[5,"Arc",3462],[8,"ZPtr",1743],[5,"SlotsAllocations",1572],[5,"EvalConfig",1666],[5,"MultiFrame",1695],[6,"FoldingConfig",2458],[6,"Tag",1982],[6,"RawPtr",1743],[1,"array"],[5,"WithStore",1840],[5,"Error",3433],[17,"Item"],[10,"IntoIterator",3463],[8,"Span",2028],[6,"Error",2028],[6,"LitBase",2069],[8,"ParseResult",2028],[10,"AsRef",3448],[10,"Fn",3449],[5,"ParseError",2116],[10,"InputLength",3464],[10,"AsBytes",3464],[6,"ErrorKind",3465],[6,"ParseErrorKind",2116],[8,"IResult",3466],[6,"Pos",2203],[6,"StringFragment",2244],[17,"PublicParams"],[17,"ErrorType"],[10,"RecursiveSNARKTrait",2304],[10,"CEKState",2304],[17,"Frame"],[17,"RecursiveSnark"],[10,"Prover",2304],[17,"FrameIO"],[10,"FrameLike",2304],[6,"FoldingMode",2304],[17,"Ptr"],[17,"Error"],[10,"EvaluationStore",2304],[10,"Provable",2304],[8,"Dual",2364],[8,"C1LEM",2364],[8,"C2",2364],[6,"Proof",2364],[5,"PublicParams",2364],[5,"NovaProver",2364],[8,"NovaPublicParams",2364],[8,"E1",2364],[8,"SS1",2364],[8,"SS2",2364],[5,"ProverKey",3467],[5,"VerifierKey",3467],[5,"CircuitDigests",3468],[6,"Proof",2458],[5,"PublicParams",2458],[5,"SuperNovaProver",2458],[8,"SuperNovaPublicParams",2458],[8,"SS1",2458],[8,"SS2",2458],[5,"ProverKey",3469],[5,"VerifierKey",3469],[5,"Instance",2584],[8,"SuperNovaAuxParams",2458],[8,"NovaCircuitShape",2364],[6,"Kind",2584],[5,"Metadata",2584],[5,"Utf8Path",3451],[5,"File",3470],[8,"Result",3471],[5,"ExprTagIter",2792],[5,"ContTagIter",2792],[5,"Op1Iter",2792],[5,"Op2Iter",2792],[5,"IterBridge",3472],[10,"From",3448],[10,"Field",3447],[6,"ZData",3151],[6,"ZCont",3200],[6,"ZExpr",3282],[5,"Error",3450],[5,"ZStore",3385],[8,"ChildMap",470],[15,"Pos",2238],[15,"Let",3250],[15,"LetRec",3250],[15,"Call0",3250],[15,"Call",3250],[15,"Call2",3250],[15,"Tail",3250],[15,"Lookup",3250],[15,"Unop",3250],[15,"Binop",3250],[15,"Binop2",3250],[15,"If",3250],[15,"Emit",3250],[15,"Fun",3332]],"b":[[54,"impl-Debug-for-Num%3CF%3E"],[55,"impl-Display-for-Num%3CF%3E"],[56,"impl-Display-for-UInt"],[57,"impl-Debug-for-UInt"],[59,"impl-From%3CUInt%3E-for-Num%3CF%3E"],[60,"impl-From%3Cu64%3E-for-Num%3CF%3E"],[574,"impl-From%3CInsertCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[575,"impl-From%3CNewCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[577,"impl-From%3CLookupCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[1014,"impl-Display-for-ProofError"],[1015,"impl-Debug-for-ProofError"],[1016,"impl-Debug-for-ReductionError"],[1017,"impl-Display-for-ReductionError"],[1019,"impl-From%3CNovaError%3E-for-ProofError"],[1020,"impl-From%3CSynthesisError%3E-for-ProofError"],[1021,"impl-From%3CReductionError%3E-for-ProofError"],[1022,"impl-From%3CSuperNovaError%3E-for-ProofError"],[1256,"impl-Display-for-LanguageField"],[1257,"impl-Debug-for-LanguageField"],[1464,"impl-Display-for-Var"],[1465,"impl-Debug-for-Var"],[1696,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[1697,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[1731,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[1732,"impl-Circuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[1733,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[1906,"impl-EvaluationStore-for-Store%3CF%3E"],[1907,"impl-Store%3CF%3E"],[1947,"impl-EvaluationStore-for-Store%3CF%3E"],[1948,"impl-Store%3CF%3E"],[1955,"impl-Store%3CF%3E"],[1956,"impl-EvaluationStore-for-Store%3CF%3E"],[2002,"impl-Debug-for-Tag"],[2003,"impl-Display-for-Tag"],[2016,"impl-Tag"],[2017,"impl-Tag-for-Tag"],[2048,"impl-Display-for-Error"],[2049,"impl-Debug-for-Error"],[2160,"impl-Debug-for-ParseErrorKind%3CF%3E"],[2161,"impl-Display-for-ParseErrorKind%3CF%3E"],[2162,"impl-Display-for-ParseError%3CLocatedSpan%3C%26str%3E,+F%3E"],[2163,"impl-Debug-for-ParseError%3CI,+F%3E"],[2485,"impl-RecursiveSNARKTrait%3CF,+MultiFrame%3C\'a,+F,+C%3E%3E-for-Proof%3CF,+MultiFrame%3C\'a,+F,+C%3E%3E"],[2486,"impl-RecursiveSNARKTrait%3CF,+CoroutineCircuit%3CF,+LogMemo%3CF%3E,+Q%3E%3E-for-Proof%3CF,+CoroutineCircuit%3CF,+LogMemo%3CF%3E,+Q%3E%3E"],[2540,"impl-RecursiveSNARKTrait%3CF,+CoroutineCircuit%3CF,+LogMemo%3CF%3E,+Q%3E%3E-for-Proof%3CF,+CoroutineCircuit%3CF,+LogMemo%3CF%3E,+Q%3E%3E"],[2541,"impl-RecursiveSNARKTrait%3CF,+MultiFrame%3C\'a,+F,+C%3E%3E-for-Proof%3CF,+MultiFrame%3C\'a,+F,+C%3E%3E"],[2571,"impl-RecursiveSNARKTrait%3CF,+MultiFrame%3C\'a,+F,+C%3E%3E-for-Proof%3CF,+MultiFrame%3C\'a,+F,+C%3E%3E"],[2572,"impl-RecursiveSNARKTrait%3CF,+CoroutineCircuit%3CF,+LogMemo%3CF%3E,+Q%3E%3E-for-Proof%3CF,+CoroutineCircuit%3CF,+LogMemo%3CF%3E,+Q%3E%3E"],[2747,"impl-Debug-for-Symbol"],[2748,"impl-Display-for-Symbol"],[2962,"impl-Debug-for-ExprTag"],[2963,"impl-Display-for-ExprTag"],[2965,"impl-Debug-for-ContTag"],[2966,"impl-Display-for-ContTag"],[2968,"impl-Debug-for-Op1"],[2969,"impl-Display-for-Op1"],[2971,"impl-Debug-for-Op2"],[2972,"impl-Display-for-Op2"],[3170,"impl-Display-for-ZData"],[3171,"impl-Debug-for-ZData"],[3313,"impl-Debug-for-ZExpr%3CF%3E"],[3314,"impl-Display-for-ZExpr%3CF%3E"],[3357,"impl-Display-for-ZPtr%3CE,+F%3E"],[3358,"impl-Debug-for-ZPtr%3CE,+F%3E"]]}],\
["lurk_macros",{"doc":"Lurk Macros","t":"YYQQXQ","n":["Coproc","TryFromRepr","let_store","lurk","serde_test","store"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a <code>Store</code> reference to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …","Exposes the <code>Store</code> introduced by <code>let_store!</code>, without the …"],"i":[0,0,0,0,0,0],"f":[0,0,0,0,0,0],"c":[],"p":[],"b":[]}],\
["lurk_metrics",{"doc":"Metrics infrastructure","t":"SFFNNNNNNNNNNNNNNNNNNN","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[5,"MetricsSinkHandle",0],[1,"tuple"],[5,"MetricsSink",0],[5,"Formatter",22],[8,"Result",22],[6,"Result",23],[5,"TypeId",24]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
