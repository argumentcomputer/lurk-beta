var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","drop","from","handle_meta","handle_non_meta","init","into","name","new","process_line","prompt","references","try_from","try_into","type_id","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[0,[[]],[[]],[[],1],[2],[2],[2],[[]],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]],8,[0,[[10,[9]],11]]],12],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]]],12],[[],2],[[]],[[],13],[[[6,[3]],2,[14,[1]],[15,[3,[4,[3]]]]],[[5,[3,[4,[3]]]]]],[[[5,[3,[4,[3]]]],13],13],[[[5,[3,[4,[3]]]]],13],[[16,17,[19,[18]]],[[21,[20]]]],[[],21],[[],21],[[],22],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[6,"Scalar"],[4,"Coproc"],[3,"ClutchState"],[3,"Store"],[3,"Ptr"],[3,"Package"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[3,"String"],[4,"Option"],[3,"Lang"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"fcomm":{"doc":"fcomm: Functional Commitments","t":"DEDDGRNDNDININEEDDGNNDNDNDDNGGEGNNNNHDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMFMFMLLLLMMMLLLLLFKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMMMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLL","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","FileStore","Five","Id","Ipld","LurkCont","LurkPtr","LurkScalarBytes","LurkScalarIpld","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","PublicParamDiskCache","PublicParamMemCache","ReductionCount","S1","ScalarBytes","Source","Ten","Terminal","VERBOSE","VerificationResult","apply","apply_and_prove","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid_from_string","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","hash","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","lang","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","proof","proof_cid","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_params","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","string_cid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","JsonError","OpeningFailure","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","init","into","provide","references","source","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"fcomm"],[543,"fcomm::error"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,31,0,9,0,0,19,0,30,0,0,0,0,0,19,19,0,9,0,31,0,0,9,0,0,0,0,30,30,19,31,0,0,27,27,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,25,68,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,0,14,33,19,20,21,24,25,26,27,28,29,30,31,4,9,33,19,20,21,24,25,26,27,28,29,30,31,4,9,33,24,25,27,4,0,20,21,20,21,31,19,20,21,30,31,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,20,21,20,21,19,20,21,24,25,26,27,28,29,30,31,4,9,33,19,20,21,24,27,28,30,31,9,0,20,26,14,0,9,14,20,21,26,4,20,21,4,20,21,24,25,26,27,28,29,30,31,4,39,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,24,31,24,30,24,24,19,68,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,68,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,25,27,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,14,9,9,20,21,0,27,0,14,27,27,9,14,27,14,33,14,24,30,9,14,0,69,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,69,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,14,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,4,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,33,20,21,27,0,19,20,21,24,25,26,27,28,29,30,31,4,9,33,24,19,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,39,33,33,14,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,69,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[12,[1,[7,[1]]]],[13,[[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[[14,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[17,[[11,[15,18]]]],0,0,[19,19],[20,20],[21,21],[[[24,[[0,[22,23]]]]],[[24,[[0,[22,23]]]]]],[[[25,[[0,[22,23]]]]],[[25,[[0,[22,23]]]]]],[26,26],[[[27,[[0,[22,23]]]]],[[27,[[0,[22,23]]]]]],[28,28],[29,29],[30,30],[31,31],[[[4,[[0,[22,23,32]]]]],[[4,[[0,[22,23,32]]]]]],[[[9,[[0,[22,23]]]]],[[9,[[0,[22,23]]]]]],[33,33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],34],0,0,0,0,[[31,[2,[[0,[23,32,35]]]]],[[36,[[0,[23,32,35]]]]]],[19,5],[[],20],[[],21],[[],30],[[],31],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[37,[[11,[19]]]],[37,[[11,[20]]]],[37,[[11,[21]]]],[37,[[11,[[24,[23]]]]]],[37,[[11,[[25,[[0,[38,23]]]]]]]],[37,[[11,[26]]]],[37,[[11,[[27,[[0,[38,23]]]]]]]],[37,[[11,[28]]]],[37,[[11,[29]]]],[37,[[11,[30]]]],[37,[[11,[31]]]],[37,[[11,[[4,[[0,[38,23,32]]]]]]]],[37,[[11,[39]]]],[37,[[11,[[14,[[0,[38,23]]]]]]]],[37,[[11,[[9,[[0,[38,23]]]]]]]],[37,[[11,[33]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,0,0,[[19,19],6],[[20,20],6],[[21,21],6],[[[24,[[0,[40,23]]]],[24,[[0,[40,23]]]]],6],[[[25,[[0,[40,23]]]],[25,[[0,[40,23]]]]],6],[[26,26],6],[[[27,[[0,[40,23]]]],[27,[[0,[40,23]]]]],6],[[28,28],6],[[29,29],6],[[30,30],6],[[31,31],6],[[[4,[[0,[40,23,32]]]],[4,[[0,[40,23,32]]]]],6],[[[9,[[0,[40,23]]]],[9,[[0,[40,23]]]]],6],[[33,33],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[2,[[0,[23,32]]]],[3,[[0,[23,32]]]],5],[[11,[20,10]]]],[[26,[2,[[0,[23,32,35]]]],5,[8,[[0,[23,32,35]],[7,[[0,[23,32,35]]]]]]],[[11,[[3,[[0,[23,32,35]]]],10]]]],[[[2,[1]],[3,[1]],[41,[[3,[1]]]],5,6,[12,[1,[7,[1]]]],[13,[[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[[14,[1]],10]]]],[[[2,[23]],[3,[23]],[41,[[3,[23]]]],5,[8,[23,[7,[23]]]]],[[11,[10]]]],[[[9,[23]]],[[41,[20]]]],[[[14,[1]],[2,[1]]],[[11,[10]]]],0,0,0,0,0,0,[[[4,[[0,[23,32,35]]]],[2,[[0,[23,32,35]]]],5,[8,[[0,[23,32,35]],[7,[[0,[23,32,35]]]]]]],[[11,[[3,[[0,[23,32,35]]]],10]]]],[[20,42],43],[[21,42],43],[[[24,[[0,[44,23]]]],42],43],[[[25,[[0,[44,23]]]],42],43],[[26,42],43],[[[27,[[0,[44,23]]]],42],43],[[28,42],43],[[29,42],43],[[30,42],43],[[31,42],43],[[[4,[[0,[44,23,32]]]],42],43],[[39,42],43],[[[9,[[0,[44,23]]]],42],43],[[33,42],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[[0,[23,32,35]]]],[3,[[0,[23,32,35]]]]],[[24,[[0,[23,32,35]]]]]],[[[2,[[0,[23,32]]]],[36,[[0,[23,32]]]]],31],[45,[[11,[[24,[23]]]]]],[[[2,[[0,[23,32]]]],[3,[[0,[23,32]]]]],30],[[[2,[[0,[23,32,35]]]],[3,[[0,[23,32,35]]]],[0,[23,32,35]]],[[24,[[0,[23,32,35]]]]]],[[[2,[[0,[23,32,35]]]],[3,[[0,[23,32,35]]]]]],[[[0,[46,47]],48],49],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[[19,51]],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[[[9,[23]]],6],[[[9,[23]]],6],0,0,[[],[[8,[1,[7,[1]]]]]],0,[5,52],0,[[[2,[1]],[25,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[25,[1]],5,6,[12,[1,[7,[1]]]],[13,[[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[[14,[1]],10]]]],[[[9,[23]]],[[41,[[27,[23]]]]]],[[[14,[1]],[2,[1]]],[[11,[10]]]],0,0,0,[[[2,[1]],[9,[1]],5,6,[12,[1,[7,[1]]]],[13,[[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[[14,[1]],10]]]],[[[24,[[0,[23,32,35]]]],[2,[[0,[23,32,35]]]]],[[3,[[0,[23,32,35]]]]]],[[30,[2,[[0,[23,32,35]]]],5,[8,[[0,[23,32,35]],[7,[[0,[23,32,35]]]]]]],[[3,[[0,[23,32,35]]]]]],[[[9,[23]]],[[41,[21]]]],[[[14,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[5,[[11,[[53,[[13,[[7,[1]]]]]],10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],0,[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],0,[[19,59],11],[[20,59],11],[[21,59],11],[[[24,[23]],59],11],[[[25,[[0,[32,23]]]],59],11],[[26,59],11],[[[27,[[0,[32,23]]]],59],11],[[28,59],11],[[29,59],11],[[30,59],11],[[31,59],11],[[[4,[[0,[32,23,32]]]],59],11],[[39,59],11],[[[14,[[0,[32,23]]]],59],11],[[[9,[[0,[32,23]]]],59],11],[[33,59],11],0,0,0,0,[37,[[11,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[23]]],50],[[],11],[5,[[11,[19]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],0,0,0,[[[14,[1]],[13,[[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[39,10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[5],[[10,42],43],[[10,42],43],[[]],[61,10],[62,10],[63,10],[64,10],[65,10],[[],5],[[]],[66],[[55,56,[57,[16]]],[[11,[58]]]],[10,[[41,[67]]]],[[],50],[[],11],[[],11],[[],60],[[]]],"c":[],"p":[[6,"S1"],[3,"Store"],[3,"Ptr"],[3,"CommittedExpression"],[15,"usize"],[15,"bool"],[4,"Coproc"],[3,"Lang"],[4,"Claim"],[4,"Error"],[4,"Result"],[3,"NovaProver"],[3,"PublicParams"],[3,"Proof"],[6,"Cid"],[3,"Cid"],[15,"str"],[4,"Error"],[4,"ReductionCount"],[3,"Evaluation"],[3,"PtrEvaluation"],[8,"Clone"],[8,"LurkField"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"LurkScalarBytes"],[3,"LurkScalarIpld"],[4,"LurkPtr"],[4,"LurkCont"],[8,"Serialize"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"DeserializeOwned"],[3,"ContPtr"],[8,"Deserializer"],[8,"Deserialize"],[3,"VerificationResult"],[8,"PartialEq"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"AsRef"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[3,"String"],[8,"Hasher"],[6,"NovaProofCache"],[3,"Arc"],[3,"Path"],[3,"RawCodec"],[8,"Read"],[8,"Extend"],[3,"Error"],[8,"Serializer"],[3,"TypeId"],[3,"Error"],[4,"SynthesisError"],[3,"Error"],[3,"Error"],[4,"FromHexError"],[3,"Demand"],[8,"Error"],[8,"Id"],[8,"FileStore"]]},\
"lurk":{"doc":"","t":"ENCCRNCLLLALLALLLLLLLAAALLLLLLLLALLLLLALLLAALALAALALAALLLLLALAIKKIILKLKLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIDDDDNENDMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLFMLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLKLLLKLLLKLLLAKLLLLLMLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNSDEINNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNDEGGDEGGNNNNNNNNNNNNNNNNNNIDNNNNNRRNNNNNNNENNNNNLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNIEEDNNNLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLRDLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLERNRRNLLLLLLLLLLLLFLFLLLLLLLIIIQLLAKLLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLGGNGGGGDGEDNGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLMLLLLLLKLKLLLLLMMKLKLLLKLKLLLFFFLLLLLLLLLLNNNNNNNNNNNNNNNNNNEEDDNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNDDENNNDNENNEEENINNNDNNINNIQDDDGGDNNQNNDNINNLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMMLLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLKLKLLLLLMMMMMLLMLLLLLLMLMMLMLLLMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKL","n":["Num","Scalar","Sym","Symbol","TEST_SEED","U64","UInt","add_assign","borrow","borrow_mut","circuit","clone","clone_into","coprocessor","deref","deref_mut","deserialize","div_assign","drop","eq","equivalent","error","eval","field","fmt","fmt","from","from","from","from_scalar","get_hash","hash","hash_witness","init","into","into_scalar","is_negative","is_zero","light_data","most_negative","most_positive","mul_assign","package","parser","partial_cmp","proof","references","repl","scalar_store","serialize","store","sub_assign","sym","tag","to_owned","to_string","try_from","try_into","type_id","uint","vzip","writer","ToInputs","input_size","to_inputs","CoCircuit","Coprocessor","arity","eval_arity","evaluate","simple_evaluate","synthesize","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","into","into","into","provide","provide","provide","references","references","references","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Status","Terminal","Witness","_p","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_frames","get_frames","i","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_terminal","is_terminal","is_terminal","iter","lang","log","log","log","maybe_emitted_expression","new","next","output","peekmore","precedes","reduce","reduce","references","references","references","references","references","references","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","witness","Coproc","Dummy","DummyCoprocessor","Lang","add_coprocessor","arity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessors","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","eval_arity","eval_arity","fmt","fmt","fmt","from","from","from","has_coprocessors","init","init","init","into","into","into","is_default","lookup","max_coprocessor_arity","new","references","references","references","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BLS12_381","FIELD","FWrap","LanguageField","LurkField","Pallas","Vesta","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","de","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","hex_digits","init","init","into","into","is_negative","most_negative","most_positive","partial_cmp","references","references","ser","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","ClosedEnv","Cons","ConsName","ConsStub","ConsWitness","Cont","ContName","ContStub","ContWitness","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cons","cons","cons","cons_named","cons_named","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","index","index","index","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","length","new_blank","new_dummy","new_from_stub","references","references","references","references","references","references","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Atom","Cell","Comm","Cons","Encodable","LightData","LightExpr","LightStore","Nil","StrCons","SymCons","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_count","clone","clone","clone_into","clone_into","de","de","de","de","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","read_size_bytes","references","references","references","scalar_map","ser","ser","ser","ser","tag","tag_is_atom","tag_is_small","to_owned","to_owned","to_string","to_string","to_trimmed_le_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LURK_EXTERNAL_SYMBOL_NAMES","Package","add_external_symbol","add_external_symbols","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","external_symbols","fmt","from","init","into","local_symbol","lurk","name","name","new","references","relative_abbreviation","remove_external_symbol","remove_external_symbols","root","to_owned","try_from","try_into","type_id","vzip","Error","KEYWORD_MARKER","NoInput","SYM_MARKER","SYM_SEPARATOR","Syntax","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","names_keyword","provide","read_symbol_path","references","to_owned","to_string","try_from","try_into","type_id","vzip","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","lang","new","outer_prove","proof","proof_count","prove","reduction_count","reduction_count","references","references","references","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","Compressed","EE1","EE2","G1","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","S1","S2","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","evaluate_and_prove","from","from","from","init","init","init","into","into","into","lang","new","prove_recursively","public_params","reduction_count","references","references","references","serialize","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","drop","drop","env","eval_expr","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","limit","name","name","new","new","new","new","process_line","process_line","prompt","prompt","references","references","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binop","Binop2","Call","Call2","Char","Comm","Cons","Dummy","Emit","Error","Fun","If","Let","LetRec","Lookup","Nil","Num","Outermost","ScalarContinuation","ScalarExpression","ScalarStore","ScalarThunk","Str","Sym","Tail","Terminal","Thunk","UInt","Unop","add_one_ptr","add_ptr","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","finalize","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_cont","get_expr","get_hash","hash","init","init","init","init","into","into","into","into","new_with_expr","references","references","references","references","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_store","to_store_with_expr","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","arg","body","closed_env","A3","A3","A4","A4","A6","A6","A8","A8","Binop","Binop2","Call","Call0","Call2","Char","Comm","Cons","ConstantPtrs","ContPtr","Continuation","Create","Dummy","Emit","Error","Error","Expression","Fun","Get","HashArity","HashConst","HashScalar","If","IntoHashComponents","Let","LetRec","Lookup","NamedConstants","Nil","Num","Object","Opaque","Outermost","Pointer","Pointer","Ptr","RawPtr","SPtr","ScalarContPtr","ScalarPtr","Store","Str","Sym","Tag","Tail","Terminal","Thunk","Thunk","TypePredicates","UInt","Unop","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","allocate_maybe_fun_unconstrained","arbitrary_with","as_cons","as_list","as_simple_keyword_string","as_str","as_sym","as_sym_str","atom","begin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr_mut","cdr","cdr","char","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","comm","commit","cons","cons","cons_eq","cont_tag","current_env","de","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","diff","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dummy","emit","eq","eq","eq","eq","eq","eq","eq","equal","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_list","fetch_maybe_sym","fetch_num","fetch_scalar","fetch_scalar_cont","fetch_str","fetch_sym","fetch_uint","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_parts","get_begin","get_char","get_char_from_u32","get_constants","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_expr_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash_components_cont","get_hash_components_thunk","get_lurk_sym","get_maybe_opaque","get_nil","get_num","get_quote","get_simple_cont","get_str","get_sym","get_t","get_u64","greater","greater_equal","hash","hash","hash","hash","hash","hash","hash_components","hash_cont","hash_expr","hash_expr_aux","hash_nil","hash_string_mut","hash_sym","hidden","hide","hide","hydrate_scalar_cache","idx","if_","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert_in_store","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_key","intern_list","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_nil","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_scalar_cont_ptr","intern_scalar_ptr","intern_str","intern_strcons","intern_sym","intern_sym_and_ancestors","intern_sym_with_case_conversion","intern_thunk","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_hash_components","into_hash_components","is_atom","is_cons","is_cons","is_error","is_fun","is_fun","is_fun","is_keyword_sym","is_list","is_list","is_nil","is_null","is_num","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","is_str","is_sym","is_thunk","key","lambda","less","less_equal","let_","letrec","list","lurk_sym","modulo","new","new","new","new_opaque_ptr","new_opaque_raw_ptr","nil","nil","num","num","num_equal","open","open","open_mut","partial_cmp","partial_cmp","product","provide","ptr","ptr_eq","quote","quotient","read","read_in_package","read_maybe_meta","read_next","read_string","references","references","references","references","references","references","references","references","references","references","references","references","references","references","root_sym","scalar_from_parts","scalar_from_parts_cont","scalar_ptr","secret","secret","secret_mut","ser","serialize","str","strcons","strcons","sum","sym","t","t","tag","tag","tag","tag","tag_field","tag_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u64","uint64","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Key","Sym","Sym","Symbol","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","child","child","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","extend","extend","fmt","fmt","from","from","from","from","full_name","full_name","full_sym_name","get_hash","get_hash","hash","hash","init","init","into","into","is_keyword","is_keyword","is_opaque","is_root","is_root","is_toplevel","is_toplevel","key_root","keyword_name","name","name","new","new","new_absolute","new_absolute","new_from_path","new_key","new_opaque","new_opaque","new_sym","opaque","parent","parent","partial_cmp","partial_cmp","path","path","path","references","references","root","root","serialize","serialize","simple_keyword_name","symbol","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","partial_cmp","partial_cmp","references","references","references","references","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","equivalent","fmt","fmt","from","from","init","into","is_zero","mul","partial_cmp","references","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","vzip","Write","fmt","fmt_to_string"],"q":[[0,"lurk"],[62,"lurk::circuit"],[65,"lurk::coprocessor"],[72,"lurk::error"],[146,"lurk::eval"],[310,"lurk::eval::lang"],[383,"lurk::field"],[457,"lurk::hash_witness"],[674,"lurk::light_data"],[760,"lurk::package"],[792,"lurk::parser"],[820,"lurk::proof"],[839,"lurk::proof::groth16"],[899,"lurk::proof::nova"],[966,"lurk::repl"],[1026,"lurk::scalar_store"],[1157,"lurk::scalar_store::ScalarContinuation"],[1187,"lurk::scalar_store::ScalarExpression"],[1190,"lurk::store"],[1713,"lurk::store::Continuation"],[1745,"lurk::sym"],[1838,"lurk::tag"],[2040,"lurk::uint"],[2074,"lurk::writer"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","","Returns the argument unchanged.","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","<code>LightData</code> is a lightweight binary data serialization …","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","This module offers a connection the the backend proving …","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","Analogous to ScalarExpression::Comm","Analogous to ScalarExpression::Cons","A trait for types that can be serialized and deserialized …","<code>LightData</code> is a binary tree with two types of nodes: Atom …","Enum to represent a light expression.","LightStore contains a fragment of the ScalarStore, but …","Analogous to ScalarExpression::Nil","Replaces ScalarExpression::Str, contains a string and a …","Replaces ScalarExpression::Sym, contains a symbol and a …","","","","","","","","","","Returns the number of bytes required to encode the given …","","","","","Deserializes a <code>LightData</code> into this value.","","","Deserializes a <code>LightData</code> from a <code>&amp;[u8]</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the <code>usize</code> that’s represented by a little endian …","","","","An analogous to the ScalarStore’s scalar_map, but with …","Serializes this value into a <code>LightData</code>.","","","Serializes this <code>LightData</code> into a <code>Vec&lt;u8&gt;</code>.","Returns the tag byte for this <code>LightData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","","","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Generates an outer Groth16 proof using the given …","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","The number of reductions used in the proof.","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","Type alias for a MultiFrame with S1 field elements.","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Type alias for G1 group elements using the Pallas curve.","Type alias for G2 group elements using the Vesta curve.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for scalar field elements on the Pallas curve.","Type alias for scalar field elements on the Vesta curve.","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","Evaluates and proves the computation given the public …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ScalarStore</code> allows realization of a graph of <code>ScalarPtr</code>s …","","","","","","","","","Add all ScalarPtrs representing and reachable from expr.","Add the <code>ScalarPtr</code> representing <code>expr</code>, and queue it for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Method which finalizes the <code>ScalarStore</code>, ensuring that all …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ScalarStore</code> and add all <code>ScalarPtr</code>s reachable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutable version of car_cdr to handle Str. <code>(cdr str)</code> may …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codenumeration type for symbol names, which can either be a …","","Type for hieararchical symbol names","","","","","","","Creates a new Symbol with a child path segment added to …","Creates a new Sym with a child path segment added to the …","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","Creates a new Sym with the path extended by the given …","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the full name of the Symbol.","Returns the full name of the Symbol or Keyword symbol.","The full name corresponding to the symbol or keyword’s …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the Sym is a keyword.","Returns true if the Symbol is marked as opaque.","Returns true if the Symbol is the root Symbol, i.e. if it …","Returns true if the Sym is the root symbol.","Returns true if the Symbol is a top-level Symbol, i.e. if …","Returns true if the Sym is toplevel","Returns the root Keyword Symbol.","The full name corresponding to a Sym, if it is a keyword.","Returns the name of the Symbol.","","Creates a new Symbol with the given name and a path …","Creates a new Sym with the given name.","Creates a new Symbol with an absolute path derived from …","Creates a new absolute Sym with the given name.","Creates a new Sym from a path vector and a boolean flag …","Creates a new Keyword Sym with a name derived from the …","Creates a new opaque Symbol with an empty path.","Creates a new opaque Sym.","Creates a new Sym with a name derived from the given …","","Returns the parent Symbol of the Symbol, if there is one.","Returns the parent of the Sym or Keyword, if there is one.","","","Returns a reference to the path vector of the Symbol.","Returns a reference to the path vector of the Sym.","","","","Creates a new Symbol with the root path <code>[&quot;&quot;]</code>.","Returns the root Symbol.","","","The simple name corresponding to a Sym, if it is a keyword …","Returns true if the Sym is a symbol.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,2,0,0,0,2,0,2,2,2,0,2,2,0,2,2,2,2,2,2,2,0,0,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,0,0,2,0,2,0,0,2,0,2,0,0,2,2,2,2,2,0,2,0,0,142,142,0,0,143,46,46,46,143,35,36,0,35,37,0,37,0,35,37,37,35,36,37,35,36,35,36,35,36,37,35,36,37,35,36,37,35,36,37,37,35,35,36,36,37,37,37,37,37,35,35,36,37,35,36,37,35,36,37,35,36,37,35,36,37,35,35,36,37,35,36,37,35,36,37,35,36,37,35,36,37,35,36,44,0,0,0,0,0,44,0,44,0,43,47,32,43,44,52,45,47,32,43,44,52,45,32,43,44,45,32,43,44,45,32,44,47,32,43,44,52,45,47,32,43,44,52,45,44,47,32,43,44,52,45,0,32,32,43,44,45,32,43,44,47,0,32,32,32,32,43,44,52,45,47,32,43,44,44,52,45,47,47,43,47,32,43,44,52,45,47,43,32,47,32,43,44,52,45,52,144,32,43,44,144,32,44,44,144,32,44,47,0,144,32,43,32,47,52,43,52,43,144,32,47,32,43,44,52,45,44,43,144,32,44,32,32,43,44,45,32,32,47,32,43,44,52,45,47,32,43,44,52,45,47,32,43,44,52,45,47,32,43,44,52,45,43,0,58,0,0,54,58,59,58,54,59,58,54,59,58,54,59,58,54,54,54,59,58,54,59,58,54,59,58,59,58,54,59,58,59,58,54,59,58,54,54,59,58,54,59,58,54,54,54,54,54,59,58,54,59,58,59,58,58,59,58,54,59,58,54,59,58,54,59,58,54,59,58,54,74,1,0,0,0,74,74,64,74,64,74,64,64,64,64,64,74,64,74,64,64,74,64,64,64,64,74,64,1,1,1,1,1,1,1,1,1,1,64,64,1,74,64,74,64,1,1,1,64,74,64,64,64,1,1,1,1,1,1,64,1,1,1,1,1,1,74,64,74,64,74,64,74,64,85,83,83,81,83,0,0,0,0,0,0,0,0,81,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,83,83,83,85,85,0,0,85,83,85,83,83,85,85,0,83,83,83,83,81,78,78,81,80,84,83,85,78,81,80,84,83,85,78,80,79,81,79,81,82,78,82,78,80,81,80,84,83,85,78,81,80,84,83,85,78,79,81,80,82,78,84,84,83,85,81,80,84,83,85,78,81,80,84,83,85,78,81,80,84,83,85,78,81,80,84,83,85,78,81,80,84,83,85,82,78,86,81,88,78,81,80,84,83,85,78,81,80,84,83,85,78,78,83,85,83,85,76,83,85,81,80,84,83,85,78,86,81,88,78,81,80,84,83,85,78,78,78,78,78,81,80,84,83,85,78,78,79,81,82,78,78,78,81,80,84,83,85,78,78,81,80,84,83,85,78,81,80,84,83,85,78,81,80,84,83,85,78,81,80,84,83,85,78,65,65,89,89,0,0,0,0,89,89,89,90,89,65,90,89,65,90,89,65,65,89,65,89,65,145,90,89,65,90,89,65,90,89,65,90,89,65,90,89,65,89,65,90,89,89,65,65,90,89,65,90,89,65,90,89,65,65,90,89,65,90,145,90,89,65,65,65,65,89,65,89,65,65,90,89,65,90,89,65,90,89,65,90,89,65,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,0,93,0,0,93,93,93,93,93,93,93,93,93,93,93,93,93,0,93,0,93,93,93,93,93,93,93,0,0,0,146,146,146,0,146,146,146,146,146,0,146,147,147,147,146,0,0,0,0,0,0,101,100,97,101,100,97,97,97,101,101,100,97,101,100,97,97,101,100,97,101,100,97,101,100,97,101,100,97,101,101,101,97,97,101,101,97,101,100,97,97,97,101,100,97,101,100,97,101,100,97,101,101,101,100,97,0,0,111,0,0,0,0,0,0,0,0,111,0,0,0,0,113,112,111,113,112,111,111,113,112,111,113,112,111,112,111,113,112,111,113,113,112,111,113,112,111,113,112,111,113,113,111,0,113,113,112,111,112,111,113,112,111,113,112,111,113,112,111,111,113,112,111,0,0,0,118,114,118,114,114,114,117,114,114,118,114,118,114,118,114,114,114,118,114,117,117,117,117,114,117,114,118,114,118,114,114,114,117,114,117,118,114,114,117,114,117,114,118,114,0,0,0,118,114,118,114,118,114,118,114,118,114,123,123,123,123,121,121,121,123,123,123,121,123,123,123,123,121,121,123,0,0,0,0,121,121,123,123,121,121,123,119,119,121,122,123,119,121,122,123,119,121,122,123,119,121,122,123,119,121,122,123,119,121,119,121,122,123,119,121,122,123,119,121,122,123,119,121,122,123,119,121,122,123,119,121,122,123,119,119,121,121,122,123,119,121,122,123,119,119,123,123,119,121,122,123,119,121,122,123,119,119,121,122,123,119,121,122,123,119,121,122,123,119,119,121,119,119,121,122,123,119,121,122,123,119,121,122,123,119,121,122,123,148,149,150,151,152,153,154,155,156,157,148,149,158,156,151,154,155,156,150,151,152,153,155,148,149,150,155,157,148,149,159,159,159,135,160,135,160,135,160,135,160,87,87,87,87,87,126,126,126,0,0,0,127,87,87,0,87,0,126,127,0,0,0,87,0,87,87,87,0,126,126,0,126,87,0,161,0,0,0,0,0,0,126,126,162,87,87,0,126,0,126,87,125,125,125,30,129,30,30,126,126,126,126,132,132,135,160,127,28,30,129,31,130,126,125,87,39,131,132,135,160,127,28,30,129,31,130,126,125,87,39,131,132,28,132,28,28,28,132,132,127,30,129,31,130,126,125,87,39,131,132,127,30,129,31,130,126,125,87,39,131,132,129,130,132,132,28,132,28,87,132,129,28,135,160,127,28,30,129,31,130,126,125,87,39,131,132,135,160,127,28,30,129,31,130,126,125,87,39,131,132,129,132,135,160,127,28,30,129,31,130,126,125,87,39,131,132,132,132,30,129,31,130,126,125,87,132,30,129,31,130,126,125,87,132,28,28,28,28,28,28,28,28,28,28,28,28,28,28,127,28,30,30,129,129,31,31,130,126,126,125,87,87,39,39,131,132,135,135,160,127,28,30,30,129,31,130,126,125,87,39,131,132,129,28,28,28,28,28,28,28,28,28,30,129,31,130,125,87,28,28,28,28,28,28,28,87,28,28,28,28,132,132,30,129,31,130,125,87,125,28,28,28,28,28,28,28,28,132,28,130,132,135,160,127,28,30,129,31,130,126,125,87,39,131,132,87,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,135,160,127,28,30,129,31,130,126,125,87,39,131,132,163,129,30,30,126,31,164,30,126,126,30,126,30,126,126,30,126,164,30,164,30,126,126,126,28,132,132,132,132,132,28,28,132,28,31,132,28,28,28,132,28,132,132,28,132,28,129,130,132,39,131,28,132,132,28,28,28,28,28,135,160,127,28,30,129,31,130,126,125,87,39,131,132,28,28,28,131,28,132,28,129,129,28,28,132,132,28,28,132,162,30,129,31,162,129,127,30,129,31,130,126,125,87,39,131,132,129,39,135,160,127,28,30,129,31,130,126,125,87,39,131,132,135,160,127,28,30,129,31,130,126,125,87,39,131,132,135,160,127,28,30,129,31,130,126,125,87,39,131,132,132,28,129,131,135,160,127,28,30,129,31,130,126,125,87,39,131,132,165,166,167,168,169,170,171,172,173,174,175,165,166,176,174,169,172,173,174,167,168,169,170,171,173,165,166,168,173,175,165,166,57,0,57,0,139,57,139,57,139,57,139,57,139,57,139,57,139,57,139,57,139,57,139,57,139,57,139,57,139,57,139,57,139,57,57,57,139,57,57,139,57,139,57,139,57,139,57,139,57,139,139,57,139,57,57,57,139,57,139,57,139,57,57,57,139,57,57,139,139,57,139,57,139,57,139,139,57,139,57,139,57,57,57,139,57,139,57,139,57,139,57,139,57,70,71,68,68,68,68,68,70,70,69,70,69,70,70,69,71,0,71,68,68,70,71,68,70,71,0,69,71,71,71,68,69,71,71,68,68,68,71,69,69,70,71,0,0,0,70,68,71,71,70,69,71,71,69,0,68,68,69,69,70,68,177,70,71,177,69,68,70,71,69,68,70,71,69,68,70,71,69,68,70,71,69,68,70,71,69,68,70,71,69,68,70,71,69,68,70,71,69,70,71,69,68,70,71,69,68,70,71,69,68,70,71,69,69,68,68,70,70,71,71,69,68,70,71,128,69,68,70,71,69,68,70,71,69,68,70,71,69,68,70,71,69,68,70,71,69,71,69,69,70,71,69,68,70,71,69,70,71,177,70,71,177,70,71,128,69,68,70,71,128,69,68,70,71,69,68,70,71,69,68,70,71,69,69,68,68,70,70,71,71,69,68,70,71,69,68,70,71,69,68,70,71,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,178,178],"f":[0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],[[]],0,[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],0,[4],[4],[5,[[6,[[2,[1]]]]]],[[[2,[1]],[2,[1]]]],[4],[[[2,[[0,[7,1]]]],[2,[[0,[7,1]]]]],8],[[],8],0,0,0,[[[2,[1]],9],10],[[[2,[[0,[11,1]]]],9],10],[12,[[2,[1]]]],[13,[[2,[1]]]],[[]],[1,[[2,[1]]]],[[[0,[14,15]],16],12],[[[2,[1]],17]],0,[[],4],[[]],[[[2,[1]]],1],[[[2,[1]]],8],[[[2,[1]]],8],0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,[[[2,[1]],[2,[1]]],[[19,[18]]]],0,[[20,21,[23,[22]]],[[6,[24]]]],0,0,[[[2,[1]],25],6],0,[[[2,[1]],[2,[1]]]],0,0,[[]],[[],26],[[],6],[[],6],[[],27],0,[[]],0,0,[[],4],[28,29],0,0,[[],4],[[],4],[[28,30,30,31],32],[28,30],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[35,35],[[[36,[[0,[3,1]]]]],[[36,[[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[37,9],10],[[37,9],10],[[35,9],10],[[35,9],10],[[[36,[1]],9],10],[[[36,[[0,[11,1]]]],9],10],[38,37],[34,37],[39,37],[35,37],[[]],[39,35],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[40],[40],[40],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[37,[[19,[41]]]],[35,[[19,[41]]]],[[]],[[]],[[],26],[[],26],[[],26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[32,[[0,[3,1]]]]],[[32,[[0,[3,1]]]]]],[[[43,[[0,[3,42]],[0,[3,42]],3]]],[[43,[[0,[3,42]],[0,[3,42]],3]]]],[44,44],[[[45,[[0,[3,1]]]]],[[45,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],0,[[],44],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[44]]]],[4],[4],[4],[4],[4],[4],[[[28,[1]]],[[30,[1]]]],0,[[[32,[[0,[7,1]]]],[32,[[0,[7,1]]]]],8],[[[43,[[0,[7,42]],[0,[7,42]],7]],[43,[[0,[7,42]],[0,[7,42]],7]]],8],[[44,44],8],[[[45,[[0,[7,1]]]],[45,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[47,[1,[46,[1]]]]],[[6,[35]]]],[[[28,[1]],48],[[6,[[30,[1]],35]]]],0,[[[32,[1]],9],[[6,[49]]]],[[[32,[[0,[11,1]]]],9],10],[[[32,[1]],[28,[1]],50],51],[[[43,[[0,[11,42]],[0,[11,42]],11]],9],10],[[44,9],10],[[[52,[[0,[11,42]],[0,[11,1]],[0,[11,[46,[[0,[11,1]]]]]]]],9],10],[[[45,[[0,[11,1]]]],9],10],[[]],[[]],[[]],[[]],[[[31,[1]]],44],[[]],[[]],[[[30,[1]],[30,[1]],[28,[1]],4,53,[54,[1,[46,[1]]]]],[[6,[[29,[[43,[[32,[1]],[45,[1]],[46,[1]]]]]],35]]]],[[[47,[1,[46,[1]]]]],[[6,[[29,[[43,[[32,[1]],[45,[1]],[46,[1]]]]]],35]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[47,[1,[46,[1]]]]],[[32,[1]]]],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[[32,[1]]],8],[[[43,[[32,[1]],42,[46,[1]]]]],8],[44,8],[[],8],[[[32,[1]]],8],[44,8],[44,8],[[],8],[[[32,[1]]],8],[44,8],[[[47,[1,[46,[1]]]]],[[6,[[55,[[52,[[45,[1]],1,[46,[1]]]]]],35]]]],0,[[28,4]],[[[32,[1]],[28,[1]],4]],[[[43,[[32,[1]],42,[46,[1]]]],[28,[1]]]],[[[32,[1]],[28,[1]]],[[19,[[30,[1]]]]]],[[[30,[1]],[30,[1]],[28,[1]],4,[54,[1,[46,[1]]]]],[[47,[1,[46,[1]]]]]],[[[52,[[45,[1]],1,[46,[1]]]]],19],0,[[],56],[[[43,[[32,[1]],42,[46,[1]]]],[43,[[32,[1]],42,[46,[1]]]]],8],[[15,28,54],[[6,[35]]]],[[[32,[1]],[28,[1]],[54,[1,[46,[1]]]]],[[6,[35]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[44,25],6],[[],4],[[],44],[[[32,[1]]],44],[[44,[28,[1]]],[[19,[[31,[1]]]]]],[[[32,[1]],[28,[1]]],[[29,[1]]]],[[]],[[]],[[]],[[]],[[],26],[[[32,[1]],[28,[1]]],[[6,[[29,[1]],39]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[[54,[1,[46,[1]]]],57,[46,[1]],[28,[1]]]],[[[58,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[59,[[0,[3,1]]]]],[[59,[[0,[3,1]]]]]],[[[58,[[0,[3,1]]]]],[[58,[[0,[3,1]]]]]],[[[54,[[0,[3,1]],[0,[3,[46,[[0,[3,1]]]]]]]]],[[54,[[0,[3,1]],[0,[3,[46,[[0,[3,1]]]]]]]]]],[[]],[[]],[[]],[[[54,[1,[46,[1]]]]],[[60,[57]]]],[[],[[54,[[0,[61,1]],[0,[61,[46,[[0,[61,1]]]]]]]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[59,[1]]]]]],[5,[[6,[[58,[[0,[62,1]]]]]]]],[4],[4],[4],[[[59,[1]]],4],[[[58,[1]]],4],[[[59,[[0,[11,1]]]],9],10],[[[58,[[0,[11,1]]]],9],10],[[[54,[[0,[11,1]],[0,[11,[46,[[0,[11,1]]]]]]]],9],10],[[]],[[]],[[]],[[[54,[1,[46,[1]]]]],8],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[54,[1,[46,[1]]]]],8],[[[54,[1,[46,[1]]]],[28,[1]],[30,[1]]],19],[[[54,[1,[46,[1]]]]],4],[[],[[54,[1,[46,[1]]]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[59,[1]],25],6],[[[58,[[0,[63,1]]]],25],6],[[[59,[1]],[28,[1]]],[[30,[1]]]],[[[58,[1]],[28,[1]]],[[30,[1]]]],[[[58,[1]],[33,[1]],[28,[1]],[0,[1]],[0,[1]]],[[6,[34]]]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[[64,[[0,[3,1]]]]],[[64,[[0,[3,1]]]]]],[[]],[[[64,[1]],[64,[1]]],18],[65,[[66,[[64,[1]]]]]],[4],[4],[4],[4],[5,[[6,[[64,[1]]]]]],[4],[4],[[[64,[[0,[7,1]]]],[64,[[0,[7,1]]]]],8],[[],8],[[[64,[[0,[11,1]]]],9],10],[[]],[[]],[[],19],[67],[68],[69],[70],[71],[72],[73],[12],[[],74],[[[0,[14,15]],16],12],[[[64,[1]],17]],[[],26],[[],4],[[],4],[[]],[[]],[[],8],[[]],[[]],[[[64,[1]],[64,[1]]],[[19,[18]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[64,[1]]],65],[[[64,[1]],25],6],[[],[[29,[75]]]],[[],[[19,[67]]]],[[],[[19,[68]]]],[[],[[19,[69]]]],[[],[[19,[70]]]],[[],[[19,[71]]]],[[]],[[],[[19,[72]]]],[[],[[19,[73]]]],[[],73],[[],[[19,[12]]]],[[],12],[[],26],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[78,[[0,[76,61,42,77,11]],42,1]]],[[29,[[0,[76,61,42,77,11]]]]]],[[[78,[[0,[76,61,42,77,11]],42,1]],[28,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[79,[1]],[28,[1]],[30,[1]]],[[6,[39]]]],[[[81,[[80,[1]]]],[28,[1]],[30,[1]]],[[6,[39]]]],[[[79,[1]],[28,[1]],[30,[1]]],[[6,[39]]]],[[[81,[[80,[1]]]],[28,[1]],[30,[1]]],[[6,[39]]]],[[[82,[1]],83,[28,[1]],[30,[1]]],[[6,[39]]]],[[[78,[83,[80,[1]],1]],83,[28,[1]],[30,[1]]],[[6,[39]]]],[[[82,[1]],83,[28,[1]],[30,[1]]],[[6,[35]]]],[[[78,[83,[80,[1]],1]],83,[28,[1]],[30,[1]]],[[6,[35]]]],0,[[[81,[3]]],[[81,[3]]]],[[[80,[[0,[3,1]]]]],[[80,[[0,[3,1]]]]]],[[[84,[[0,[3,1]]]]],[[84,[[0,[3,1]]]]]],[83,83],[85,85],[[[78,[[0,[3,76]],3,[0,[3,1]]]]],[[78,[[0,[3,76]],3,[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[79,[1]],[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],[[[81,[[80,[1]]]],[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],0,[[[82,[1]],83,[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],[[[78,[83,[80,[1]],1]],83,[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],0,0,[[],83],[[],85],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[81,[7]],[81,[7]]],8],[[[80,[[0,[7,1]]]],[80,[[0,[7,1]]]]],8],[[[84,[[0,[7,1]]]],[84,[[0,[7,1]]]]],8],[[83,83],8],[[85,85],8],[[[78,[[0,[7,76]],7,[0,[7,1]]]],[78,[[0,[7,76]],7,[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[82,[1]],83,[30,[1]],[30,[1]],[30,[1]],[28,[1]]],[[30,[1]]]],[[[78,[83,[80,[1]],1]],83,[30,[1]],[30,[1]],[30,[1]],[28,[1]]],[[30,[1]]]],[[[86,[1]],[28,[1]],[31,[1]]],[[19,[[87,[1]]]]]],[[[81,[[84,[1]]]],[28,[1]],[31,[1]]],[[19,[[87,[1]]]]]],[[[88,[1]],85,[28,[1]],[31,[1]]],[[19,[[87,[1]]]]]],[[[78,[85,[84,[1]],1]],85,[28,[1]],[31,[1]]],[[19,[[87,[1]]]]]],[[[81,[11]],9],10],[[[80,[[0,[11,1]]]],9],10],[[[84,[[0,[11,1]]]],9],10],[[83,9],10],[[85,9],10],[[[78,[[0,[11,76]],11,[0,[11,1]]]],9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[[78,[[0,[76,61,42,77,11]],42,1]],[0,[76,61,42,77,11]]],[[81,[42]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[83,17]],[[85,17]],[[],4],[83,4],[85,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[86,[1]],[28,[1]],[87,[1]]],[[31,[1]]]],[[[81,[[84,[1]]]],[28,[1]],[87,[1]]],[[31,[1]]]],[[[88,[1]],85,[28,[1]],[87,[1]]],[[31,[1]]]],[[[78,[85,[84,[1]],1]],85,[28,[1]],[87,[1]]],[[31,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],[[78,[[0,[76,61,42,77,11]],42,1]]]],[[],[[78,[[0,[76,61,42,77,11]],42,1]]]],[[[81,[42]]],[[78,[[0,[76,61,42,77,11]],42,1]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],0,[[[79,[1]],[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],[[[81,[[80,[1]]]],[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],[[[82,[1]],83,[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],[[[78,[83,[80,[1]],1]],83,[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],[[[78,[[0,[76,61,42,77,11]],42,1]]],[[29,[[81,[42]]]]]],[[[78,[[0,[76,61,42,77,11]],42,1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[78,[[0,[76,61,42,77,11]],42,1]]],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,75],[[[89,[[0,[3,1]]]]],[[89,[[0,[3,1]]]]]],[65,65],[[]],[[]],[65,[[66,[15]]]],[65,[[66,[[90,[1]]]]]],[65,[[66,[[89,[1]]]]]],[[],[[66,[65]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[90,[[0,[7,1]]]],[90,[[0,[7,1]]]]],8],[[[89,[[0,[7,1]]]],[89,[[0,[7,1]]]]],8],[[65,65],8],[[],8],[[],8],[[[90,[[0,[11,1]]]],9],10],[[[89,[1]],9],10],[[[89,[[0,[11,1]]]],9],10],[[65,9],10],[[65,9],10],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[],[[19,[4]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],0,[[],65],[[[90,[1]]],65],[[[89,[1]]],65],[65,[[29,[75]]]],[65,75],[75,8],[75,8],[[]],[[]],[[],26],[[],26],[4,[[29,[75]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[]],[[]],[[]],0,0,[[91,[92,[48]]]],[91],[[]],[[]],[91,91],[[]],[[],91],[4],[4],[4],0,[[91,9],10],[[]],[[],4],[[]],[[91,57],[[19,[57]]]],[[],91],[91,57],0,[57,91],[[20,21,[23,[22]]],[[6,[24]]]],[[91,57],57],[[91,57]],[91],[[],91],[[]],[[],6],[[],6],[[],27],[[]],0,0,0,0,0,0,[[]],[[]],[93,93],[[]],[4],[4],[4],[[93,9],10],[[93,9],10],[[]],[[],4],[[]],[48],[40],[[[56,[94]]],[[6,[93]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[]],[[],26],[[],6],[[],6],[[],27],[[]],0,0,0,0,[4,4],[4,4],0,[[],54],[4,4],[4,8],[4,8],[[4,54]],0,[[],[[6,[29,34]]]],[[],4],[[],29],[[],4],[[],4],[29,[[6,[8,34]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[97,[[0,[3,95,96]]]]],[[97,[[0,[3,95,96]]]]]],[[]],[[4,[54,[98,[46,[98]]]]],[[6,[[100,[99]],34]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[97,[[0,[95,96]]]]]]]],[4],[4],[4],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[101,[99,[46,[98]],98]]],[[54,[98,[46,[98]]]]]],[[4,[54,[98,[46,[98]]]]],[[101,[99,[46,[98]],98]]]],[[[101,[99,[46,[98]],98]],[102,[99]],[103,[99]],[30,[98]],[30,[98]],[28,[98]],4,[0,[104,3]],[54,[98,[46,[98]]]]],[[6,[37]]]],0,0,[[[101,[99,[46,[98]],98]],[0,[98,[32,[98]],[45,[98]],[46,[98]]]],[102,[99]],104],[[6,[[105,[99]],34]]]],[[[101,[99,[46,[98]],98]]],4],0,[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[97,[[0,[95,96]]]],25],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[[106,[99]],[107,[99]],[108,[99]],[0,[104,109]]],[[6,[8,34]]]],[[[0,[98,[32,[98]],[45,[98]],[46,[98]]]],[106,[99]],[105,[99]]],[[6,[8,34]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[111,[[46,[110]]]],[112,[[46,[110]]]]],[[6,[[111,[[46,[110]]]],37]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[112,[[0,[62,[46,[110]]]]]]]]]],[5,[[6,[[111,[[0,[62,[46,[110]]]]]]]]]],[4],[4],[4],[[[113,[110,[46,[110]]]],[112,[[46,[110]]]],[30,[110]],[30,[110]],[28,[110]],4,[54,[110,[46,[110]]]]],[[6,[37]]]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[113,[110,[46,[110]]]]],[[54,[110,[46,[110]]]]]],[[4,[54,[110,[46,[110]]]]],[[113,[110,[46,[110]]]]]],[[[112,[[46,[110]]]],[28,[110]],4,[29,[110]],[54,[110,[46,[110]]]]],[[6,[[111,[[46,[110]]]],37]]]],[[4,[54,[110,[46,[110]]]]],[[112,[[46,[110]]]]]],[[[113,[110,[46,[110]]]]],4],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[112,[[0,[63,[46,[110]]]]]],25],6],[[[111,[[0,[63,[46,[110]]]]]],25],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[[111,[[46,[110]]]],[112,[[46,[110]]]],4,[29,[110]]],[[6,[8,38]]]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[114,[[0,[3,1]],[0,[3,[46,[[0,[3,1]]]]]]]]],[[114,[[0,[3,1]],[0,[3,[46,[[0,[3,1]]]]]]]]]],[[]],[[],115],[[],115],0,[4],[4],[4],[4],[4],[4],0,[[[114,[1,[46,[1]]]],[30,[1]],[28,[1]]],66],[[]],[[]],[[28,[0,[[92,[116]],42]],91],66],[[28,[56,[94]],91,[0,[[92,[116]],42]]],66],[[28,[92,[116]],91],66],[[28,30,91,[0,[[92,[116]],42]]],66],[[[114,[1,[46,[1]]]],[28,[1]],[30,[1]],91,[0,[[92,[116]],42]]],66],[[28,30],66],[[[114,[1,[46,[1]]]],[28,[1]],[30,[1]]],66],[[],4],[[],4],[[]],[[]],0,0,[[],26],[[],26],[[28,4,[19,[115]],54]],[[[28,[1]],4,[19,[115]],[54,[1,[46,[1]]]]],[[66,[[118,[1,[117,[1,[46,[1]]]],[46,[1]]]]]]]],[[[28,[1]],4,[19,[115]],[54,[1,[46,[1]]]]],[[114,[1,[46,[1]]]]]],[[[28,[1]],4,[19,[115]],[54,[1,[46,[1]]]]],[[114,[1,[46,[1]]]]]],[26,26],[[[114,[1,[46,[1]]]],26],26],[[],26],[[[114,[1,[46,[1]]]]],26],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[19,[[92,[116]]]],[54,[1,[46,[1]]]]],66],[[[54,[1,[46,[1]]]]],66],[[[28,[1]],[118,[1,[117,[1,[46,[1]]]],[46,[1]]]],[19,[[92,[116]]]]],66],[[[118,[1,[117,[1,[46,[1]]]],[46,[1]]]]],66],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[119,[1]],[28,[1]],[30,[1]]],[[19,[[120,[1]]]]]],[[[119,[1]],[28,[1]],[30,[1]]],[[19,[[120,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[119,[[0,[3,1]]]]],[[119,[[0,[3,1]]]]]],[[[121,[[0,[3,1]]]]],[[121,[[0,[3,1]]]]]],[[[122,[[0,[3,1]]]]],[[122,[[0,[3,1]]]]]],[[[123,[[0,[3,1]]]]],[[123,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[],[[119,[[0,[61,1]]]]]],[[],[[121,[1]]]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[119,[[0,[62,61,1]]]]]]]],[5,[[6,[[121,[[0,[62,1]]]]]]]],[5,[[6,[[122,[[0,[62,1]]]]]]]],[5,[[6,[[123,[[0,[62,1]]]]]]]],[4],[4],[4],[4],[[[119,[[0,[7,1]]]],[119,[[0,[7,1]]]]],8],[[[121,[[0,[7,1]]]],[121,[[0,[7,1]]]]],8],[[[122,[[0,[7,1]]]],[122,[[0,[7,1]]]]],8],[[[123,[[0,[7,1]]]],[123,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[[119,[1]],[28,[1]]]],[[[119,[[0,[11,1]]]],9],10],[[[121,[[0,[11,1]]]],9],10],[[[121,[1]],9],10],[[[122,[[0,[11,1]]]],9],10],[[[123,[[0,[11,1]]]],9],10],[[]],[[]],[[]],[[]],[[[119,[1]],[124,[1]]],[[19,[[123,[1]]]]]],[[[119,[1]],[120,[1]]],[[19,[[121,[1]]]]]],[[[0,[14,15]],16],12],[[[123,[[0,[14,1]]]],17]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[28,[1]],[30,[1]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[119,[[0,[63,1]]]],25],6],[[[121,[[0,[63,1]]]],25],6],[[[122,[[0,[63,1]]]],25],6],[[[123,[[0,[63,1]]]],25],6],[[]],[[]],[[]],[[]],[[[119,[1]]],[[19,[[28,[1]]]]]],[[[119,[1]],[120,[1]]],19],[[],26],[[[90,[1]]],[[6,[[119,[1]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[125,[1]],[33,[1]],[28,[1]]],[[6,[34]]]],[[[33,[1]],[28,[1]]],[[6,[34]]]],[[[33,[1]],[19,[[125,[1]]]],[28,[1]]],[[6,[34]]]],[[[33,[1]],[28,[1]],[19,[[30,[1]]]]],[[6,[34]]]],[[]],[[[30,[1]]],[[19,[[30,[1]]]]]],[[[30,[1]]],[[19,[[30,[1]]]]]],[[[126,[1]]],[[19,[26]]]],[[[126,[1]]],[[19,[48]]]],[[[126,[1]]],[[19,[57]]]],[[[126,[1]]],[[19,[26]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[28,[1]],[30,[1]]],[[6,[[30,[1]],39]]]],0,[[[28,[1]],[30,[1]]],[[6,[39]]]],[[[28,[1]],[30,[1]]],[[6,[39]]]],[[[28,[1]],[30,[1]]],[[6,[[30,[1]],39]]]],0,0,[127,127],[[[30,[[0,[3,1]]]]],[[30,[[0,[3,1]]]]]],[[[129,[[0,[3,128]],[0,[3,1]]]]],[[129,[[0,[3,128]],[0,[3,1]]]]]],[[[31,[[0,[3,1]]]]],[[31,[[0,[3,1]]]]]],[[[130,[[0,[3,1]]]]],[[130,[[0,[3,1]]]]]],[[[126,[[0,[3,1]]]]],[[126,[[0,[3,1]]]]]],[[[125,[[0,[3,1]]]]],[[125,[[0,[3,1]]]]]],[[[87,[[0,[3,1]]]]],[[87,[[0,[3,1]]]]]],[39,39],[[[131,[[0,[3,1]]]]],[[131,[[0,[3,1]]]]]],[[[132,[[0,[3,1]]]]],[[132,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[129,[128,1]],[129,[128,1]]],18],[[[130,[[0,[133,1]]]],[130,[[0,[133,1]]]]],18],0,0,[[[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],0,[[[28,[1]],[30,[1]],[30,[1]]],8],[[[87,[1]]],68],0,[65,[[66,[[129,[128,1]]]]]],[[],[[28,[1]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[129,[128,1]]]]]],0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,0,[[[30,[[0,[7,1]]]],[30,[[0,[7,1]]]]],8],[[[129,[[0,[7,128]],[0,[7,1]]]],[129,[[0,[7,128]],[0,[7,1]]]]],8],[[[31,[[0,[7,1]]]],[31,[[0,[7,1]]]]],8],[[[130,[[0,[7,1]]]],[130,[[0,[7,1]]]]],8],[[[126,[[0,[7,1]]]],[126,[[0,[7,1]]]]],8],[[[125,[[0,[7,1]]]],[125,[[0,[7,1]]]]],8],[[[87,[[0,[7,1]]]],[87,[[0,[7,1]]]]],8],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,[[[28,[1]],[30,[1]]],[[19,[[126,[1]]]]]],[[[28,[1]],[30,[1]]],[[19,[67]]]],[[[28,[1]],[30,[1]]],19],[[[28,[1]],[30,[1]]],19],[[[28,[1]],[31,[1]]],[[19,[[87,[1]]]]]],[[[28,[1]],[30,[1]]],19],[[[28,[1]],[30,[1]]],[[19,[[29,[[30,[1]]]]]]]],[[[28,[1]],[30,[1]]],[[19,[57]]]],[[[28,[1]],[30,[1]]],[[19,[[2,[1]]]]]],[[[28,[1]],[120,[1]]],[[19,[[30,[1]]]]]],[[[28,[1]],[124,[1]]],[[19,[[31,[1]]]]]],[[[28,[1]],[30,[1]]],[[19,[48]]]],[[[28,[1]],[30,[1]]],[[19,[57]]]],[[[28,[1]],[30,[1]]],[[19,[13]]]],[[127,9],10],[[[28,[[0,[11,1]]]],9],10],[[[30,[[0,[11,1]]]],9],10],[[[30,[1]],[28,[1]],50],51],[[[129,[[0,[11,128]],[0,[11,1]]]],9],10],[[[129,[[0,[128,134]],1]],9],10],[[[31,[[0,[11,1]]]],9],10],[[[31,[1]],[28,[1]],50],51],[[[130,[[0,[11,1]]]],9],10],[[[126,[1]],[28,[1]],50],51],[[[126,[[0,[11,1]]]],9],10],[[[125,[[0,[11,1]]]],9],10],[[[87,[1]],[28,[1]],50],51],[[[87,[[0,[11,1]]]],9],10],[[39,9],10],[[39,9],10],[[[131,[[0,[11,1]]]],9],10],[[[132,[[0,[11,1]]]],9],10],[[]],[4,135],[[]],[[]],[[]],[[]],[67,[[30,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[128,1],[[129,[128,1]]]],[[[28,[1]]],[[30,[1]]]],[[[28,[1]],67],[[30,[1]]]],[[[28,[1]],73],[[30,[1]]]],[[[28,[1]]],[[132,[1]]]],[[[28,[1]]],[[31,[1]]]],[[[28,[1]]],[[31,[1]]]],[[[28,[1]]],[[31,[1]]]],[[[28,[1]]],[[31,[1]]]],[[[28,[1]],[30,[1]]],[[19,[[120,[1]]]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[28,[1]],[31,[1]]],19],[[[28,[1]],[125,[1]]],19],[[[28,[1]],[92,[48]],8],[[19,[[30,[1]]]]]],[[[28,[1]],69,1],[[19,[[30,[1]]]]]],[[[28,[1]]],[[30,[1]]]],[[[28,[1]],[136,[[2,[1]]]]],[[19,[[30,[1]]]]]],[[[28,[1]]],[[30,[1]]]],[[[87,[1]]],[[31,[1]]]],[[[28,[1]],[92,[48]]],[[19,[[30,[1]]]]]],[[[28,[1]],57],[[19,[[30,[1]]]]]],[[[28,[1]]],[[30,[1]]]],[[[28,[1]],12],[[30,[1]]]],0,0,[[[30,[1]],17]],[[[129,[128,1]],17]],[[[31,[1]],17]],[[[130,[1]],17]],[[[125,[1]],17]],[[[87,[[0,[14,1]]]],17]],[[[33,[1]],[28,[1]],[0,[1]],[0,[1]]],[[6,[[137,[1]],34]]]],[[[28,[1]],[31,[1]]],[[19,[[124,[1]]]]]],[[[28,[1]],[30,[1]]],[[19,[[120,[1]]]]]],[[[28,[1]],[30,[1]],127],[[19,[[120,[1]]]]]],[[[28,[1]],127],[[19,[[120,[1]]]]]],[[[28,[1]],[92,[48]]],1],[[[28,[1]],[30,[1]],127],[[19,[[120,[1]]]]]],[[[28,[1]],1,[30,[1]]],[[19,[[30,[1]]]]]],[[[28,[1]],1,[30,[1]]],[[30,[1]]]],0,[[[28,[1]]]],[[[130,[1]]],4],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[87,[1]],[28,[1]]]],[[[28,[1]],1,[30,[1]]],[[30,[1]]]],[[[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],[[[28,[1]]],[[31,[1]]]],[[[28,[1]]],[[31,[1]]]],[[[28,[1]]],[[31,[1]]]],[[[28,[1]]],[[31,[1]]]],[[[28,[1]],[30,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],[[[28,[1]],57],[[30,[1]]]],[[[28,[1]]],[[30,[1]]]],[[[28,[1]],1],[[30,[1]]]],[[[28,[1]],1],[[30,[1]]]],[[[28,[1]],1],[[30,[1]]]],[[[28,[1]],1],[[30,[1]]]],[[[28,[1]]],[[30,[1]]]],[[[28,[1]],[136,[[2,[1]]]]],[[30,[1]]]],[[[28,[1]],1],[[30,[1]]]],[[[28,[1]],1],[[30,[1]]]],[[[28,[1]],1],[[30,[1]]]],[[[28,[1]],1],[[30,[1]]]],[[[28,[1]],[124,[1]],[119,[1]]],[[19,[[31,[1]]]]]],[[[28,[1]],[120,[1]],[119,[1]]],[[19,[[30,[1]]]]]],[[[28,[1]],[92,[48]]],[[30,[1]]]],[[[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],[[[28,[1]],57],[[30,[1]]]],[[[28,[1]],57],[[19,[[30,[1]]]]]],[[[28,[1]],[92,[48]],91],[[30,[1]]]],[[[28,[1]],[125,[1]]],[[30,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[129,[128,1]]]],[[[30,[1]]],8],[[[30,[1]]],8],[[[126,[1]]],8],[[[31,[1]]],8],[[],8],[[[30,[1]]],8],[[[126,[1]]],8],[[[126,[1]]],8],[[[30,[1]]],8],[[[126,[1]]],8],[[[30,[1]]],8],[[[126,[1]]],8],[[[126,[1]]],8],[[[30,[1]]],8],[[[126,[1]]],8],[69,8],[[[30,[1]],69],8],[[],8],[[[30,[1]]],8],[[[126,[1]]],8],[[[126,[1]]],8],[[[126,[1]]],8],[[[28,[1]],[92,[48]]],[[30,[1]]]],0,0,0,0,0,[[[28,[1]]],[[30,[1]]]],[[[28,[1]],[92,[48]]],[[30,[1]]]],0,[[],[[28,[1]]]],[[68,[130,[1]]],[[31,[1]]]],[[[28,[1]]],[[132,[1]]]],[[[28,[1]]],[[30,[1]]]],[[[28,[1]]],[[130,[1]]]],[[[28,[1]]],[[30,[1]]]],0,[[[28,[1]],[136,[[2,[1]]]]],[[30,[1]]]],0,0,[[[28,[1]],[30,[1]]],19],0,[[[28,[1]],[30,[1]]],[[6,[39]]]],[[[129,[128,1]],[129,[128,1]]],[[19,[18]]]],[[[130,[[0,[138,1]]]],[130,[[0,[138,1]]]]],[[19,[18]]]],0,[40],[[[131,[1]]],[[30,[1]]]],[[[28,[1]],[30,[1]],[30,[1]]],[[6,[8,39]]]],0,0,[[[28,[1]],48],[[6,[[30,[1]],93]]]],[[[28,[1]],48,91],[[6,[[30,[1]],93]]]],[[[28,[1]],[56,[94]],91],[[6,[93]]]],[[[28,[1]],[56,[94]],91],[[6,[[30,[1]],93]]]],[[[28,[1]],[56,[94]]],[[6,[[30,[1]],93]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[28,[1]],[92,[48]],8],[[30,[1]]]],[[[28,[1]],1,1],[[19,[[120,[1]]]]]],[[[28,[1]],1,1],[[19,[[124,[1]]]]]],[[[131,[1]]],[[120,[1]]]],[[[28,[1]],[30,[1]]],[[19,[[30,[1]]]]]],0,[[[28,[1]],[30,[1]]],[[6,[[30,[1]],39]]]],[[[129,[128,1]]],65],[[[129,[128,1]],25],6],[[[28,[1]],[92,[48]]],[[30,[1]]]],[[[28,[1]],[30,[1]],[30,[1]]],[[30,[1]]]],0,0,[[[28,[1]],[92,[48]]],[[30,[1]]]],[[[28,[1]]],[[30,[1]]]],0,[[]],[[[30,[1]]],69],[[[129,[128,1]]],128],[[[31,[1]]]],[[]],[[[129,[128,1]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],0,[[[28,[1]],12],[[30,[1]]]],[[[129,[128,1]]],1],[[[131,[1]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[139,26],139],[[57,26],57],[139,139],[57,57],[[]],[[]],[4],[4],[4],[4],[5,[[6,[139]]]],[5,[[6,[57]]]],[4],[4],[[139,139],8],[[57,57],8],[[],8],[[],8],[139,139],[57,57],[[139,9],10],[[57,9],10],[[]],[26,57],[[]],[48,57],[139,26],[57,26],[57,26],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[139,17]],[[57,17]],[[],4],[[],4],[[]],[[]],[139,8],[57,8],[139,8],[139,8],[57,8],[139,8],[57,8],[[],57],[57,[[19,[26]]]],[139,26],[57,26],[26,139],[26,57],[26,139],[26,57],[[8,[29,[26]]],57],[26,57],[[],139],[8,57],[26,57],0,[139,[[19,[139]]]],[57,[[19,[57]]]],[[139,139],[[19,[18]]]],[[57,57],[[19,[18]]]],[139,[[29,[26]]]],[57,[[29,[26]]]],0,[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[],139],[[],57],[[139,25],6],[[57,25],6],[57,[[19,[26]]]],[57,139],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],29],[[],[[29,[70]]]],[[],[[29,[71]]]],[[],[[29,[48]]]],[[69,[33,[1]]],[[6,[[137,[1]],34]]]],[[68,[33,[1]]],[[6,[[137,[1]],34]]]],[[70,[33,[1]]],[[6,[[137,[1]],34]]]],[[71,[33,[1]]],[[6,[[137,[1]],34]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69,69],[68,68],[70,70],[71,71],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[69]]]],[5,[[6,[70]]]],[5,[[6,[71]]]],[4],[4],[4],[4],[[69,69],8],[[68,68],8],[[70,70],8],[[71,71],8],[[],8],[[],8],[[],8],[[],8],[[69,9],10],[[69,9],10],[[68,9],10],[[68,9],10],[[70,9],10],[[70,9],10],[[71,9],10],[[71,9],10],[[]],[[]],[[]],[[]],[1,19],[1,[[19,[69]]]],[1,[[19,[68]]]],[1,[[19,[70]]]],[1,[[19,[71]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[69,17]],[[68,17]],[[70,17]],[[71,17]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[69,8],[71,8],[[69,69],8],[69,8],[[70,70],[[19,[18]]]],[[71,71],[[19,[18]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[69,25],6],[[70,25],6],[[71,25],6],[4,8],[[70,4],8],[[71,4],8],[[],48],[70,48],[71,48],[[],1],[69,1],[68,1],[70,1],[71,[[0,[[140,[12]],141]]]],[[]],[69],[68],[70],[71],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],26],[[],26],[72,[[6,[69]]]],[[],6],[[],6],[72,[[6,[68]]]],[[],6],[72,[[6,[70]]]],[72,[[6,[71]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],0,0,[[13,13],13],[[]],[[]],[[]],[13,13],[[]],[4],[4],[5,[[6,[13]]]],[[13,13],13],[4],[[13,13],8],[[],8],[[13,9],10],[[13,9],10],[12,13],[[]],[[],4],[[]],[13,8],[[13,13],13],[[13,13],[[19,[18]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[13,13],13],[[13,25],6],[[13,13],13],[[]],[[],26],[[],6],[[],6],[[],27],[[]],0,[[28,50],51],[28,26]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u64"],[4,"UInt"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[4,"Ordering"],[4,"Option"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[3,"Store"],[3,"Vec"],[3,"Ptr"],[3,"ContPtr"],[3,"IO"],[8,"ConstraintSystem"],[4,"SynthesisError"],[4,"ReductionError"],[4,"LurkError"],[4,"ProofError"],[4,"NovaError"],[3,"Error"],[3,"Demand"],[8,"Error"],[8,"Copy"],[3,"Frame"],[4,"Status"],[3,"Witness"],[8,"Coprocessor"],[3,"Evaluator"],[15,"str"],[3,"Error"],[8,"Write"],[6,"Result"],[3,"FrameIt"],[8,"Fn"],[3,"Lang"],[3,"Take"],[3,"PeekMoreIterator"],[4,"Sym"],[4,"Coproc"],[3,"DummyCoprocessor"],[3,"HashMap"],[8,"Default"],[8,"Deserialize"],[8,"Serialize"],[3,"FWrap"],[4,"LightData"],[6,"Result"],[15,"char"],[4,"ContTag"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[4,"LanguageField"],[15,"u8"],[8,"HashName"],[8,"Eq"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[6,"ConsWitness"],[4,"ConsName"],[3,"Cont"],[4,"ContName"],[6,"ContStub"],[4,"Continuation"],[6,"ContWitness"],[4,"LightExpr"],[3,"LightStore"],[3,"Package"],[8,"AsRef"],[4,"Error"],[8,"Iterator"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"Scalar"],[3,"Bls12"],[3,"PublicParams"],[3,"Groth16Prover"],[3,"Parameters"],[3,"GenericSRS"],[8,"RngCore"],[3,"Proof"],[3,"PreparedVerifyingKey"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[8,"Send"],[6,"S1"],[4,"Proof"],[3,"PublicParams"],[3,"NovaProver"],[3,"ReplState"],[3,"Command"],[3,"Path"],[8,"ReplTrait"],[3,"Repl"],[3,"ScalarStore"],[6,"ScalarPtr"],[4,"ScalarExpression"],[3,"ScalarThunk"],[4,"ScalarContinuation"],[6,"ScalarContPtr"],[3,"Thunk"],[4,"Expression"],[4,"HashScalar"],[8,"Tag"],[3,"SPtr"],[3,"RawPtr"],[3,"ConstantPtrs"],[3,"NamedConstants"],[8,"Ord"],[8,"Display"],[4,"HashArity"],[8,"Into"],[3,"AllocatedNum"],[8,"PartialOrd"],[3,"Symbol"],[8,"From"],[8,"Field"],[8,"ToInputs"],[8,"CoCircuit"],[8,"Evaluable"],[8,"Encodable"],[8,"Prover"],[8,"Provable"],[13,"Let"],[13,"LetRec"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"],[4,"HashConst"],[8,"Object"],[8,"Pointer"],[8,"IntoHashComponents"],[8,"TypePredicates"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"Op"],[8,"Write"]]},\
"lurk_macro":{"doc":"Lurk DSL","t":"OO","n":["let_store","lurk"],"q":[[0,"lurk_macro"]],"d":["Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …",""],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"lurkrs":{"doc":"","t":"F","n":["main"],"q":[[0,"lurkrs"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
