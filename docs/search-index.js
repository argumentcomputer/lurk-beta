var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","drop","from","handle_meta","handle_non_meta","init","into","name","new","process_line","prompt","references","try_from","try_into","type_id","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[0,[[]],[[]],[[],1],[2],[2],[2],[[]],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]],8,[0,[[10,[9]],11]]],12],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]]],12],[[],2],[[]],[[],13],[[[6,[3]],2,[14,[1]],[15,[3,[4,[3]]]]],[[5,[3,[4,[3]]]]]],[[[5,[3,[4,[3]]]],13],13],[[[5,[3,[4,[3]]]]],13],[[16,17,[19,[18]]],[[21,[20]]]],[[],21],[[],21],[[],22],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[6,"Scalar"],[4,"Coproc"],[3,"ClutchState"],[3,"Store"],[3,"Ptr"],[3,"Package"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[3,"String"],[4,"Option"],[3,"Lang"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"fcomm":{"doc":"","t":"DEDNDNDNDNDNFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLMMLLLLLLLLLLLLLLLLLLLLLMLMFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLFMLLLLLLLLLMMMMMFLFFMMMLMFFFMMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLL","n":["Cli","Command","Commit","Commit","Eval","Eval","Open","Open","Prove","Prove","Verify","Verify","_lurk_function","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim","command","commit","commitment","commitment","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","drop","error","eval","eval_input","expression","expression","expression","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","function","function","has_subcommand","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into_app","into_app_for_update","limit","lurk","lurk","lurk","lurk","main","open","opening_request","proof","proof","proof","proof","prove","quote_input","read_eval_from_path","read_from_path","read_no_eval_from_path","reduction_count","reduction_count","references","references","references","references","references","references","references","request","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","verbose","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"fcomm"]],"d":["Functional commitments","","","Creates a hiding commitment to a function","","Evaluates an expression","","Creates an opening","","Generates a proof for the given expression","","Verifies a proof","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Chain commitment openings. Opening includes commitment to …","Wrap evaluation result in a claim","Path to claim to prove","","","Path to functional commitment","Optional commitment value (hex string). Function will be …","","","","","","","","","","","","","","","","","","","","","","Exit with error on failed verification","","Evaluate inputs before passing to function (outside the …","","Path to expression source","Path to expression source","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Path to function","Optional path to function used if commitment is not …","","","","","","","","","","Path to function input","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Iteration limit","","Function is lurk source.","","","","","","","Path to proof output if prove requested","Path to proof input","Path to proof input","","Quote input before passing to function when opening. …","","","","Number of circuit reductions per step","Number of circuit reductions per step","","","","","","","","Optional path to OpeningRequest – which subsumes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Be verbose","","","","","","","",""],"i":[0,0,0,21,0,21,0,21,0,21,0,21,0,18,12,22,14,23,24,18,12,22,14,23,24,21,21,18,21,12,22,14,23,24,18,21,12,22,14,23,24,22,14,23,18,12,12,22,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,14,18,0,14,23,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,12,22,21,18,21,12,22,14,23,24,0,22,18,21,12,22,14,23,24,18,18,18,12,22,14,23,0,22,0,0,22,23,24,23,22,0,0,0,22,23,18,21,12,22,14,23,24,22,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,21,12,22,14,23,24,18,24,18,21,12,22,14,23,24],"f":[0,0,0,0,0,0,0,0,0,0,0,0,[[[3,[[0,[1,2]]]],[5,[4]],6,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[9]]]],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[11,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[12,6,[8,[13,[7,[13]]]]]],0,0,[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],[6],0,[[14,6,[8,[13,[7,[13]]]]]],0,[[[3,[[0,[1,2,15]]]],[5,[4]],16,6,[8,[[0,[1,2,15]],[7,[[0,[1,2,15]]]]]]],[[10,[[17,[[0,[1,2,15]]]],9]]]],0,0,[[18,19],20],[[21,19],20],[[12,19],20],[[22,19],20],[[14,19],20],[[23,19],20],[[24,19],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,[[10,[18,26]]]],[25,[[10,[21,26]]]],[25,[[10,[12,26]]]],[25,[[10,[22,26]]]],[25,[[10,[14,26]]]],[25,[[10,[23,26]]]],[25,[[10,[24,26]]]],[25,[[10,[18,26]]]],[25,[[10,[21,26]]]],[25,[[10,[12,26]]]],[25,[[10,[22,26]]]],[25,[[10,[14,26]]]],[25,[[10,[23,26]]]],[25,[[10,[24,26]]]],0,0,[27,16],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[[3,[[0,[1,2]]]],[5,[4]],16,6,16,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[[17,[[0,[1,2]]]],9]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],0,0,0,0,0,[[]],[[22,6,16,[8,[13,[7,[13]]]]]],[[[5,[4]]],[[10,[[28,[[0,[1,2,15]]]],9]]]],[[[29,[[5,[4]]]]],[[10,[[31,[[0,[2,30,1]]]],9]]]],0,0,0,[[23,6,[8,[13,[7,[13]]]]]],0,[[[3,[[0,[1,2]]]],[5,[4]],6,[8,[[0,[1,2]],[7,[[0,[1,2]]]]]]],[[10,[9]]]],[[[3,[[0,[1,2]]]],[5,[4]]],[[10,[[17,[[0,[1,2]]]],9]]]],[[[3,[[0,[1,2]]]],[5,[4]]],[[10,[9]]]],0,0,[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],[[32,33,[35,[34]]],[[10,[36]]]],0,[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[],37],[[18,25],[[10,[26]]]],[[21,25],[[10,[26]]]],[[12,25],[[10,[26]]]],[[22,25],[[10,[26]]]],[[14,25],[[10,[26]]]],[[23,25],[[10,[26]]]],[[24,25],[[10,[26]]]],[[18,25],[[10,[26]]]],[[21,25],[[10,[26]]]],[[12,25],[[10,[26]]]],[[22,25],[[10,[26]]]],[[14,25],[[10,[26]]]],[[23,25],[[10,[26]]]],[[24,25],[[10,[26]]]],0,[[24,16,[8,[13,[7,[13]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[8,"LurkField"],[8,"Serialize"],[3,"Store"],[3,"Path"],[8,"AsRef"],[15,"usize"],[4,"Coproc"],[3,"Lang"],[4,"Error"],[4,"Result"],[6,"Command"],[3,"Commit"],[6,"S1"],[3,"Eval"],[8,"DeserializeOwned"],[15,"bool"],[3,"Ptr"],[3,"Cli"],[3,"Formatter"],[6,"Result"],[4,"Command"],[3,"Open"],[3,"Prove"],[3,"Verify"],[3,"ArgMatches"],[3,"Error"],[15,"str"],[3,"OpeningRequest"],[4,"Option"],[8,"Deserialize"],[3,"Proof"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[3,"TypeId"]]},\
"lurk":{"doc":"","t":"ENCCRNCLLLLALLAALLLLLLLLAAAALLLLLLLLALALLLLLLAOOAOOLLLAALAAALLLAALALAALLLLLALLAIAAKKDDLLLLLLLLLLLMLLLLLLLMLLLLLLLMMLLMLMMLLLLLLLMMLLLLLLLLLLLLLLMAADMMLLMMMMLLMMMLLLMMMMMMMLMMLLMMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMLMLLLMMLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILKLLKLAGEGNDDNDDNNDGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIDDDDNENDMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLKLLLKLLLKLLLAKLLLLLMLLLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNDNNLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNSDEINNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNDEGGDEGGNNNNNNNNNNNNNNNNNNIDNNNNNRRNNNNNNNENNNNNLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNDENNDNNNNNNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNIEEDNNNLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLRDLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLERNRRNLLLLLLLLLLLLFLFLLLLLLLIIIQLLAKLLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLMLLLLLLLLLLLLLLLLLLLLGGNGGGGDGEDNGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLDNNNDEDGGMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLDEDDGRNDNDININEEDDGNNDNDNDDNEGNNNNHDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMMFMLLLLMMMLLLLLFKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMMMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLMLLLLLLKLKLLLLLMMKLKLLLKLKLLLFFFLLLLLLLLLLNNNNNNNNNNNNNNNNNNEEDDNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDNDNEDDDILMMMMLLLLLLLLLLLLMMMLMLLLMMLLLLLLLLMMMLMLMMMLLMMLLLLLLLLLLLLMLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKKKLMMMMMMMLMMLLMLLLLMLMMMMMLMLMMMLLLMMLLLLLLLLLLLLLLLMMLMLLMLMMLMLMMMLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLNENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKL","n":["Num","Scalar","Sym","Symbol","TEST_SEED","U64","UInt","add_assign","borrow","borrow_mut","cid","circuit","clone","clone_into","cont","coprocessor","deref","deref_mut","deserialize","div_assign","drop","eq","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","get_hash","has_id","hash","hash","hash_witness","id","init","into","into_scalar","is_negative","is_zero","lem","lem","lemop","light_data","metaptr","metaptrs","most_negative","most_positive","mul_assign","package","parser","partial_cmp","proof","ptr","public_parameters","read_from_path","read_from_stdin","references","repl","scalar_store","serialize","store","sub_assign","sym","tag","to_owned","to_string","try_from","try_into","type_id","uint","vzip","write_to_path","writer","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","blank","blank","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","count","deref","deref","deref_mut","deref_mut","drop","drop","fmt","frames","from","from","from_frame","from_frames","get_store","init","init","input","input","into","into","lang","output","output","output","precedes","precedes","public_input_size","public_inputs","reduction_count","references","references","store","store","synthesize","synthesize","synthesize_frames","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","verify_groth16_proof","vzip","vzip","witness","data","pointer","GlobalAllocations","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","from","fun_tag","if_cont_tag","init","into","lambda_sym","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","power2_32_num","power2_64_num","references","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_scalar_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","pick","pick","pick_const","ptr","references","references","scalar_ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","drop","eq","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","references","to_owned","try_from","try_into","type_id","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","eval_arity","evaluate","has_circuit","simple_evaluate","synthesize","trie","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","Trie","TrieCoproc","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","cid","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","has_id","has_id","has_id","id","id","id","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","leaves","lookup","new","new_with_capacity","prove_insert","prove_lookup","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","references","references","references","references","references","references","references","references","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","into","into","into","provide","provide","provide","references","references","references","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Status","Terminal","Witness","_p","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_frames","get_frames","has_id","i","id","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_terminal","is_terminal","is_terminal","iter","lang","log","log","log","maybe_emitted_expression","new","next","output","peekmore","precedes","read_from_path","read_from_stdin","reduce","reduce","references","references","references","references","references","references","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","witness","write_to_path","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","cid","clone","clone","clone","clone_into","clone_into","clone_into","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","from","from","from","from","from","from","has_circuit","has_coprocessors","has_id","has_id","id","id","init","init","init","init","into","into","into","into","is_default","key","lookup","max_coprocessor_arity","new","new","new_with_bindings","read_from_path","read_from_path","read_from_stdin","read_from_stdin","references","references","references","references","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_path","write_to_path","Char","Comm","Cons","Expression","Fun","Nil","Num","Opaque","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","as_simple_keyword_string","as_str","as_sym","as_sym_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_keyword_sym","is_list","is_null","is_num","is_opaque","is_str","is_sym","is_thunk","references","references","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","BLS12_381","FIELD","FWrap","LanguageField","LurkField","Pallas","Vesta","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","cid","clone","clone_into","cmp","de","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","equivalent","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","has_id","hash","hex_digits","id","init","init","into","into","is_negative","most_negative","most_positive","partial_cmp","read_from_path","read_from_stdin","references","references","ser","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_path","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","clone","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","references","references","references","references","references","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","ClosedEnv","Cons","ConsName","ConsStub","ConsWitness","Cont","ContName","ContStub","ContWitness","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cons","cons","cons","cons_named","cons_named","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","index","index","index","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","length","new_blank","new_dummy","new_from_stub","references","references","references","references","references","references","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Hash2","Hash3","Hash4","Hide","LEM","LEMOP","MatchSymPath","MatchTag","MetaPtr","Null","Open","Return","Seq","Unhash2","Unhash3","Unhash4","Witness","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone_into","clone_into","clone_into","constrain","deconflict","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","eq","eq","equivalent","equivalent","eval","from","from","from","from","get_hash","get_ptr","hash","init","init","init","init","intern_matched_sym_paths","into","into","into","into","name","new","references","references","references","references","run","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","Atom","Cell","Comm","Cons","Encodable","LightData","LightExpr","LightStore","Nil","StrCons","SymCons","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_count","clone","clone","clone_into","clone_into","de","de","de","de","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","read_size_bytes","references","references","references","scalar_map","ser","ser","ser","ser","tag","tag_is_atom","tag_is_small","to_owned","to_owned","to_string","to_string","to_trimmed_le_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LURK_EXTERNAL_SYMBOL_NAMES","Package","add_external_symbol","add_external_symbols","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","external_symbols","fmt","from","init","into","local_symbol","lurk","name","name","new","references","relative_abbreviation","remove_external_symbol","remove_external_symbols","root","to_owned","try_from","try_into","type_id","vzip","Error","KEYWORD_MARKER","NoInput","SYM_MARKER","SYM_SEPARATOR","Syntax","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","names_keyword","provide","read_symbol_path","references","to_owned","to_string","try_from","try_into","type_id","vzip","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","has_id","id","init","init","init","into","into","into","lang","new","outer_prove","proof","proof_count","prove","read_from_path","read_from_stdin","reduction_count","reduction_count","references","references","references","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_groth16_proof","vzip","vzip","vzip","write_to_path","C1","C2","Compressed","EE1","EE2","G1","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","S1","S2","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cid","cid","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","evaluate_and_prove","from","from","from","get_evaluation_frames","has_id","has_id","id","id","init","init","init","into","into","into","lang","new","prove","prove_recursively","public_params","read_from_path","read_from_path","read_from_stdin","read_from_stdin","reduction_count","references","references","references","serialize","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","write_to_path","write_to_path","ContPtr","Index","Null","Opaque","Ptr","RawPtr","SPtr","ScalarContPtr","ScalarPtr","_f","_f","allocate_maybe_fun_unconstrained","arbitrary_with","as_cons","as_list","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","de","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parts","get_hash","get_hash","get_hash","get_hash","has_id","hash","hash","hash","hash","id","idx","index","index","init","init","init","init","into","into","into","into","into_hash_components","is_atom","is_cons","is_error","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_self_evaluating","new","new","null","null","opaque","opaque","opaque_idx","partial_cmp","partial_cmp","raw","raw","read_from_path","read_from_stdin","references","references","references","references","ser","serialize","tag","tag","tag","tag_field","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","write_to_path","Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","FileStore","Five","Id","Ipld","LurkCont","LurkPtr","LurkScalarBytes","LurkScalarIpld","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","ScalarBytes","Source","Ten","Terminal","VERBOSE","VerificationResult","apply","apply_and_prove","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid_from_string","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","hash","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","proof","proof_cid","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_params","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","string_cid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","JsonError","OpeningFailure","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","init","into","provide","references","source","to_string","try_from","try_into","type_id","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","drop","drop","env","eval_expr","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","limit","name","name","new","new","new","new","process_line","process_line","prompt","prompt","references","references","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binop","Binop2","Call","Call2","Char","Comm","Cons","Dummy","Emit","Error","Fun","If","Let","LetRec","Lookup","Nil","Num","Outermost","ScalarContinuation","ScalarExpression","ScalarStore","ScalarThunk","Str","Sym","Tail","Terminal","Thunk","UInt","Unop","add_one_ptr","add_ptr","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","cid","cid","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","finalize","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_cont","get_expr","get_hash","has_id","has_id","has_id","has_id","hash","id","id","id","id","init","init","init","init","into","into","into","into","new_with_expr","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","references","references","references","references","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_store","to_store_with_expr","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","arg","body","closed_env","ConstantPtrs","Create","Error","Get","HashScalar","NamedConstants","Store","StringSet","TypePredicates","all_strings","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","car_cdr_mut","cdr","cdr","char","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comm","comm_store","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diff","drop","drop","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_list","fetch_maybe_sym","fetch_num","fetch_scalar","fetch_scalar_cont","fetch_str","fetch_sym","fetch_uint","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","fun_store","get_begin","get_char","get_char_from_u32","get_constants","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_expr_hash","get_hash_components_cont","get_hash_components_thunk","get_lurk_sym","get_maybe_opaque","get_nil","get_num","get_opaque_ptr","get_quote","get_str","get_sym","get_t","get_u64","greater","greater_equal","hash_cont","hash_expr","hash_expr_aux","hash_nil","hash_string_mut","hash_sym","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","init","init","init","init","init","init","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_key","intern_list","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_nil","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_scalar_cont_ptr","intern_scalar_ptr","intern_str","intern_strcons","intern_sym","intern_sym_and_ancestors","intern_sym_with_case_conversion","intern_thunk","into","into","into","into","into","into","inverse_poseidon_cache","is_fun","is_potentially","is_self_evaluating","key","lambda","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","lurk_package","lurk_sym","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_scalar_ptr_cache","poseidon_cache","product","provide","ptr","ptr_eq","quote","quotient","read","read_in_package","read_maybe_meta","read_next","read_string","references","references","references","references","references","references","root_sym","scalar_from_parts","scalar_from_parts_cont","scalar_ptr","scalar_ptr_cont_map","scalar_ptr_map","secret","secret","secret_mut","str","str_store","strcons","strcons","sum","sym","sym_store","t","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","u64","uint64","unop_store","value","vzip","vzip","vzip","vzip","vzip","vzip","Key","Sym","Sym","Symbol","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","child","child","cid","cid","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","extend","extend","fmt","fmt","from","from","from","from","full_name","full_name","full_sym_name","get_hash","get_hash","has_id","has_id","hash","hash","id","id","init","init","into","into","is_keyword","is_keyword","is_opaque","is_root","is_root","is_toplevel","is_toplevel","key_root","keyword_name","name","name","new","new","new_absolute","new_absolute","new_from_path","new_key","new_opaque","new_opaque","new_sym","opaque","parent","parent","partial_cmp","partial_cmp","path","path","path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","references","references","root","root","serialize","serialize","simple_keyword_name","symbol","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_to_path","write_to_path","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cid","cid","cid","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","has_id","has_id","has_id","hash","hash","hash","hash","id","id","id","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","partial_cmp","partial_cmp","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","references","references","references","references","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","U64","UInt","add","arbitrary_with","borrow","borrow_mut","cid","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","equivalent","equivalent","fmt","fmt","from","from","has_id","id","init","into","is_zero","mul","partial_cmp","read_from_path","read_from_stdin","references","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","vzip","write_to_path","Write","fmt","fmt_to_string"],"q":[[0,"lurk"],[79,"lurk::circuit"],[84,"lurk::circuit::circuit_frame"],[145,"lurk::circuit::gadgets"],[147,"lurk::circuit::gadgets::data"],[226,"lurk::circuit::gadgets::pointer"],[324,"lurk::cont"],[367,"lurk::cont::Continuation"],[399,"lurk::coprocessor"],[408,"lurk::coprocessor::trie"],[600,"lurk::error"],[674,"lurk::eval"],[847,"lurk::eval::lang"],[954,"lurk::expr"],[1030,"lurk::field"],[1111,"lurk::hash"],[1216,"lurk::hash_witness"],[1438,"lurk::lem"],[1531,"lurk::light_data"],[1619,"lurk::package"],[1651,"lurk::parser"],[1679,"lurk::proof"],[1698,"lurk::proof::groth16"],[1764,"lurk::proof::nova"],[1845,"lurk::ptr"],[1997,"lurk::public_parameters"],[2546,"lurk::public_parameters::error"],[2581,"lurk::repl"],[2641,"lurk::scalar_store"],[2800,"lurk::scalar_store::ScalarContinuation"],[2830,"lurk::scalar_store::ScalarExpression"],[2833,"lurk::store"],[3120,"lurk::sym"],[3227,"lurk::tag"],[3451,"lurk::uint"],[3492,"lurk::writer"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","Returns the argument unchanged.","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","","<code>LightData</code> is a lightweight binary data serialization …","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","This module offers a connection the the backend proving …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","The <code>trie</code> module implements a Trie with the following …","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","Returns a slice of preimages, corresponding to the path. …","","","","","","","","","","","","","","","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Hash2(x, t, is)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Hash3(x, t, is)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Hash4(x, t, is)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","Lurk Evaluation Model (LEM)","The basic building blocks of LEMs.","<code>MatchSymPath(x, cases, def)</code> checks whether <code>x</code> matches some …","<code>MatchTag(x, cases)</code> performs a match on the tag of <code>x</code>, …","Named references to be bound to <code>Ptr</code>s.","<code>MkNull(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Return([a, b, c])</code> sets the output as <code>[a, b, c]</code>","<code>Seq(ops)</code> executes each <code>op: LEMOP</code> in <code>ops</code> sequentially","<code>Unhash2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Unhash3([a, b, c], x)</code> binds <code>a</code> and <code>b</code> to the 3 children of <code>x</code>","<code>Unhash4([a, b, c, d], x)</code> binds <code>a</code> and <code>b</code> to the 4 children …","A <code>Witness</code> carries the data that results from interpreting …","","","","","","","","","Performs the static checks of correctness described in <code>LEM</code>.","","","","","","","Create R1CS constraints for LEM given an evaluation …","Removes conflicting names in parallel logical LEM paths. …","","","","","","","","","","","","","","","","","Calls <code>run</code> until the stop contidion is satisfied, using the …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Intern all symbol paths that are matched on <code>MatchSymPath</code>s","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Instantiates a <code>LEM</code> with the appropriate checks and …","","","","","Interprets a LEM using a stack of operations to be popped …","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","Analogous to ScalarExpression::Comm","Analogous to ScalarExpression::Cons","A trait for types that can be serialized and deserialized …","<code>LightData</code> is a binary tree with two types of nodes: Atom …","Enum to represent a light expression.","LightStore contains a fragment of the ScalarStore, but …","Analogous to ScalarExpression::Nil","Replaces ScalarExpression::Str, contains a string and a …","Replaces ScalarExpression::Sym, contains a symbol and a …","","","","","","","","","","Returns the number of bytes required to encode the given …","","","","","Deserializes a <code>LightData</code> into this value.","","","Deserializes a <code>LightData</code> from a <code>&amp;[u8]</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the <code>usize</code> that’s represented by a little endian …","","","","An analogous to the ScalarStore’s scalar_map, but with …","Serializes this value into a <code>LightData</code>.","","","Serializes this <code>LightData</code> into a <code>Vec&lt;u8&gt;</code>.","Returns the tag byte for this <code>LightData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","","","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Generates an outer Groth16 proof using the given …","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","","","The number of reductions used in the proof.","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","","Type alias for a MultiFrame with S1 field elements.","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Type alias for G1 group elements using the Pallas curve.","Type alias for G2 group elements using the Vesta curve.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for scalar field elements on the Pallas curve.","Type alias for scalar field elements on the Vesta curve.","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","Evaluates and proves the computation given the public …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Evaluates and generates the frames of the computation …","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","","","","An Index is the ordinary ptr into the IndexSet …","A Null ptr is used when the hash is F::zero(), such as …","An Opaque ptr is created from a ScalarPtr or ScalarContPtr …","","","A struct representing a scalar pointer with a tag and a …","","","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","The underlying pointer, which can be null, opaque, or an …","","","","","","","","","","","An expression tageturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ScalarStore</code> allows realization of a graph of <code>ScalarPtr</code>s …","","","","","","","","","Add all ScalarPtrs representing and reachable from expr.","Add the <code>ScalarPtr</code> representing <code>expr</code>, and queue it for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Method which finalizes the <code>ScalarStore</code>, ensuring that all …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ScalarStore</code> and add all <code>ScalarPtr</code>s reachable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutable version of car_cdr to handle Str. <code>(cdr str)</code> may …","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of ScalarPtr -&gt; ContPtr for reverse lookups","Holds a mapping of ScalarPtr -&gt; Ptr for reverse lookups","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enumeration type for symbol names, which can either be a …","","Type for hieararchical symbol names","","","","","","","Creates a new Symbol with a child path segment added to …","Creates a new Sym with a child path segment added to the …","","","","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","Creates a new Sym with the path extended by the given …","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the full name of the Symbol.","Returns the full name of the Symbol or Keyword symbol.","The full name corresponding to the symbol or keyword’s …","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the Sym is a keyword.","Returns true if the Symbol is marked as opaque.","Returns true if the Symbol is the root Symbol, i.e. if it …","Returns true if the Sym is the root symbol.","Returns true if the Symbol is a top-level Symbol, i.e. if …","Returns true if the Sym is toplevel","Returns the root Keyword Symbol.","The full name corresponding to a Sym, if it is a keyword.","Returns the name of the Symbol.","","Creates a new Symbol with the given name and a path …","Creates a new Sym with the given name.","Creates a new Symbol with an absolute path derived from …","Creates a new absolute Sym with the given name.","Creates a new Sym from a path vector and a boolean flag …","Creates a new Keyword Sym with a name derived from the …","Creates a new opaque Symbol with an empty path.","Creates a new opaque Sym.","Creates a new Sym with a name derived from the given …","","Returns the parent Symbol of the Symbol, if there is one.","Returns the parent of the Sym or Keyword, if there is one.","","","Returns a reference to the path vector of the Symbol.","Returns a reference to the path vector of the Sym.","","","","","","","","Creates a new Symbol with the root path <code>[&quot;&quot;]</code>.","Returns the root Symbol.","","","The simple name corresponding to a Sym, if it is a keyword …","Returns true if the Sym is a symbol.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","",""],"i":[0,2,0,0,0,2,0,2,2,2,2,0,2,2,0,0,2,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,2,0,0,0,0,0,0,2,2,2,0,0,2,0,0,0,2,2,2,0,0,2,0,2,0,0,2,2,2,2,2,0,2,2,0,0,0,0,205,205,0,0,36,38,36,38,36,38,36,38,36,38,36,36,38,36,38,36,38,36,38,36,38,36,38,36,36,38,36,38,36,38,36,36,36,38,36,38,36,36,36,36,38,36,38,36,36,36,36,38,36,38,36,38,36,38,36,36,38,36,38,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,46,47,46,47,47,46,47,46,47,46,46,46,46,46,47,46,65,46,47,46,47,46,47,46,47,46,47,46,47,46,47,46,46,46,46,46,47,47,46,46,46,47,46,47,46,47,46,47,47,46,46,47,46,47,46,47,47,47,47,46,47,46,46,47,46,47,46,46,46,46,46,46,46,46,46,46,46,47,46,46,46,47,46,46,47,46,47,46,47,46,47,46,47,46,47,67,67,67,67,67,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,206,207,208,209,210,211,212,213,214,215,216,206,207,217,215,210,213,214,215,208,209,210,211,212,214,206,207,209,214,216,206,207,0,0,218,35,35,35,35,218,0,0,0,0,71,0,0,71,0,0,77,71,0,0,0,0,71,75,78,80,77,71,72,73,74,75,78,80,77,71,72,73,74,72,73,74,71,72,73,74,71,72,73,74,75,72,73,74,75,78,80,77,71,72,73,74,75,78,80,77,71,72,73,74,72,73,74,75,78,80,77,71,72,73,74,75,71,72,73,74,71,77,71,72,73,74,75,78,80,77,71,71,71,71,72,73,74,71,72,73,74,72,73,74,75,78,80,77,71,72,73,74,75,0,75,78,80,77,71,72,73,74,75,75,75,75,75,75,72,73,74,72,73,74,75,78,80,77,71,72,73,74,75,75,72,73,74,71,72,73,74,71,71,72,73,74,75,78,80,77,71,72,73,74,75,78,80,77,71,72,73,74,75,78,80,77,71,72,73,74,78,80,75,78,80,77,71,72,73,74,72,73,74,81,82,0,81,83,0,83,0,81,83,83,81,82,83,81,82,81,82,81,82,83,81,82,83,81,82,83,81,82,83,83,81,81,82,82,83,83,83,83,83,81,81,82,83,81,82,83,81,82,83,81,82,83,81,82,83,81,81,82,83,81,82,83,81,82,83,81,82,83,81,82,83,81,82,88,0,0,0,0,0,88,0,88,0,41,89,33,41,88,92,34,89,33,41,88,92,34,88,33,41,88,34,33,41,88,34,33,88,89,33,41,88,92,34,89,33,41,88,92,34,88,89,33,41,88,92,34,0,33,33,41,88,34,33,33,41,41,88,88,89,0,33,33,33,33,41,88,92,34,89,33,41,88,88,92,34,89,89,88,41,88,89,33,41,88,92,34,89,41,33,89,33,41,88,92,34,92,219,33,41,88,219,33,88,88,219,33,88,89,0,219,33,41,33,89,92,41,92,41,88,88,219,33,89,33,41,88,92,34,88,41,219,33,88,33,33,41,88,34,33,33,89,33,41,88,92,34,89,33,41,88,92,34,89,33,41,88,92,34,89,33,41,88,92,34,41,88,0,0,99,0,0,39,39,99,96,100,99,39,96,100,99,39,100,99,100,99,39,100,99,39,39,39,96,100,99,39,96,100,99,39,100,99,96,100,99,39,100,99,99,100,99,39,96,96,100,99,99,39,99,39,100,99,100,99,96,100,99,39,96,100,99,39,39,39,39,39,96,39,39,100,99,100,99,96,100,99,39,100,99,100,99,99,100,99,39,96,100,99,39,96,100,99,39,96,100,99,39,96,100,99,39,100,99,105,105,105,0,105,105,105,105,105,105,0,105,105,104,104,104,105,105,105,105,105,104,105,104,105,104,105,104,104,105,104,105,104,105,104,105,104,105,105,104,104,105,105,104,105,104,104,104,104,105,104,105,104,105,105,105,105,105,105,105,105,105,105,105,104,105,104,105,104,105,104,105,104,104,105,104,116,1,0,0,0,116,116,106,116,106,116,106,106,106,106,106,106,116,106,116,106,106,116,106,106,106,106,106,116,106,1,1,1,1,1,1,1,1,1,1,106,106,106,1,106,116,106,116,106,1,1,1,106,106,106,116,106,106,106,1,1,1,1,1,1,106,1,1,1,1,1,1,116,106,116,106,116,106,116,106,106,124,123,124,123,124,123,124,123,0,0,0,0,0,0,124,123,117,79,125,124,123,117,79,125,117,117,117,117,123,123,79,117,79,125,117,79,125,124,123,117,79,125,124,123,117,79,125,124,123,117,79,125,123,117,79,125,124,123,123,117,79,125,125,79,79,79,79,124,123,117,79,125,125,124,123,117,79,125,59,124,123,117,79,125,123,124,123,117,79,125,124,123,117,79,125,124,123,117,79,125,124,123,117,79,125,64,62,62,131,62,0,0,0,0,0,0,0,0,131,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,62,62,62,64,64,0,0,64,62,64,62,62,64,64,0,62,62,62,62,131,128,128,131,130,132,62,64,128,131,130,132,62,64,128,130,129,131,129,131,63,128,63,128,130,131,130,132,62,64,128,131,130,132,62,64,128,129,131,130,63,128,132,132,62,64,131,130,132,62,64,128,131,130,132,62,64,128,131,130,132,62,64,128,131,130,132,62,64,128,131,131,130,130,132,132,62,62,64,64,63,128,133,131,66,128,131,130,132,62,64,128,131,130,132,62,64,128,128,62,64,62,64,126,62,64,131,130,132,62,64,128,133,131,66,128,131,130,132,62,64,128,128,128,128,128,131,130,132,62,64,128,128,129,131,63,128,128,128,131,130,132,62,64,128,128,131,130,132,62,64,128,131,130,132,62,64,128,131,130,132,62,64,128,131,130,132,62,64,128,134,134,134,134,0,0,134,134,0,134,134,134,134,134,134,134,0,137,135,134,136,137,135,134,136,134,135,134,136,135,134,136,137,134,137,135,134,136,137,135,134,136,137,135,134,136,135,134,135,135,137,137,135,134,136,135,135,135,137,135,134,136,134,137,135,134,136,135,137,137,135,134,136,137,135,134,136,137,135,134,136,137,135,134,136,137,135,134,136,137,135,134,136,107,107,140,140,0,0,0,0,140,140,140,141,140,107,141,140,107,141,140,107,107,140,107,140,107,220,141,140,107,141,140,107,141,140,107,141,140,107,141,140,107,140,140,107,107,141,140,140,107,107,141,140,107,141,140,107,141,140,107,107,141,140,107,141,220,141,140,107,107,107,107,140,107,140,107,107,141,140,107,141,140,107,141,140,107,141,140,107,0,0,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,0,0,143,0,0,143,143,143,143,143,143,143,143,143,143,143,143,143,0,143,0,143,143,143,143,143,143,143,0,0,0,221,221,221,0,221,221,221,221,221,0,221,222,222,222,221,0,0,0,0,0,0,149,148,147,149,148,147,147,147,147,149,149,148,147,149,148,147,147,149,148,147,149,148,147,147,147,149,148,147,149,148,147,149,149,149,147,147,149,147,147,149,147,149,148,147,147,147,149,148,147,149,148,147,149,148,147,149,149,149,148,147,147,0,0,157,0,0,0,0,0,0,0,0,157,0,0,0,0,159,158,157,159,158,157,158,157,157,159,158,157,159,158,157,158,157,159,158,157,159,159,158,157,159,158,157,158,157,159,158,157,159,158,157,159,159,159,157,0,158,157,158,157,159,159,158,157,158,157,159,158,157,159,158,157,159,158,157,157,159,158,157,158,157,0,161,161,161,0,0,0,0,0,57,56,57,163,57,57,161,57,56,163,161,57,56,163,163,161,57,56,163,161,57,56,163,161,163,163,161,57,56,163,161,57,56,163,163,161,57,56,163,161,57,56,163,161,161,57,57,56,56,163,163,161,57,57,56,56,163,163,161,57,57,56,163,163,161,57,56,163,163,161,57,56,163,163,161,57,56,161,57,56,163,161,57,56,163,163,57,57,56,57,57,57,161,161,57,57,57,161,56,57,56,57,56,161,161,163,57,56,163,163,161,57,56,163,163,163,163,57,56,163,161,57,56,163,163,161,57,56,163,161,57,56,163,161,57,56,163,163,161,57,56,163,163,0,0,0,0,0,0,181,0,167,0,0,171,0,180,0,0,0,0,0,171,171,0,167,0,181,0,0,167,0,0,180,180,171,181,0,0,177,177,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,175,223,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,0,168,182,171,172,173,174,175,176,177,178,179,180,181,166,167,182,171,172,173,174,175,176,177,178,179,180,181,166,167,182,174,175,177,166,0,172,173,172,173,181,171,172,173,180,181,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,172,173,172,173,171,172,173,174,175,176,177,178,179,180,181,166,167,182,171,171,172,172,173,173,174,174,177,177,178,178,180,180,181,181,167,167,0,172,176,168,0,167,168,172,173,176,166,172,173,166,172,173,174,175,176,177,178,179,180,181,166,185,167,182,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,174,181,174,180,174,174,171,223,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,171,223,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,175,177,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,168,167,167,172,173,177,0,168,177,177,167,168,177,168,182,168,174,180,167,168,0,224,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,224,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,168,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,166,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,182,172,173,177,0,171,172,173,174,175,176,177,178,179,180,181,166,167,182,174,171,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,185,182,182,168,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,224,171,172,173,174,175,176,177,178,179,180,181,166,185,168,167,182,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,193,190,193,190,190,190,192,190,190,193,190,193,190,193,190,190,190,193,190,192,192,192,192,190,192,190,193,190,193,190,190,190,192,190,192,193,190,190,192,190,192,190,193,190,0,0,0,193,190,193,190,193,190,193,190,193,190,197,197,197,197,195,195,195,197,197,197,195,197,197,197,197,195,195,197,0,0,0,0,195,195,197,197,195,195,197,194,194,195,196,197,194,195,196,197,194,195,196,197,194,195,196,197,194,195,196,197,194,195,196,197,194,195,194,195,196,197,194,195,196,197,194,195,196,197,194,195,196,197,194,195,196,197,194,194,195,195,196,196,197,197,194,194,195,195,196,197,194,195,196,197,194,194,197,194,195,196,197,197,194,195,196,197,194,195,196,197,194,195,196,197,194,194,195,196,197,194,195,196,197,194,195,196,197,194,195,196,197,194,195,196,197,194,194,195,194,194,195,196,197,194,195,196,197,194,195,196,197,194,195,196,197,194,195,196,197,225,226,227,228,229,230,231,232,233,234,225,226,235,233,228,231,232,233,227,228,229,230,232,225,226,227,232,234,225,226,236,236,236,0,199,0,199,0,0,0,0,0,198,201,201,31,31,199,198,31,84,200,201,199,198,31,84,200,201,31,31,31,31,201,31,31,31,201,201,199,84,200,201,199,84,200,201,201,31,201,31,201,31,31,31,201,198,31,31,31,199,198,31,84,200,201,199,198,31,84,200,201,201,199,198,31,84,200,201,201,201,31,201,201,31,31,31,31,31,31,31,31,31,31,31,31,31,31,199,198,31,84,84,200,201,199,198,31,84,200,201,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,201,201,31,31,31,31,31,31,31,31,201,31,201,31,199,198,31,84,200,201,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,199,198,31,84,200,201,31,237,237,237,31,201,201,201,201,31,201,31,31,31,31,31,31,201,31,201,31,31,201,31,201,201,31,31,31,31,201,31,31,31,201,84,200,31,201,201,31,31,31,31,31,199,198,31,84,200,201,31,31,31,200,31,31,31,201,31,31,31,31,201,201,31,31,31,201,31,31,199,84,200,201,84,199,198,31,84,200,201,199,198,31,84,200,201,199,198,31,84,200,201,201,31,31,200,199,198,31,84,200,201,98,0,98,0,202,98,202,98,202,98,202,98,202,98,202,98,202,98,202,98,202,98,202,98,202,98,202,98,202,202,98,98,202,98,202,98,202,98,98,98,202,98,98,202,98,202,98,202,98,202,98,202,98,202,98,202,98,202,202,98,202,98,98,98,202,98,202,98,202,98,98,98,202,98,98,202,202,98,202,98,202,98,202,202,98,202,98,202,98,202,98,202,98,98,98,202,98,202,98,202,98,202,98,202,98,202,98,112,113,68,68,68,68,68,112,112,111,112,111,112,112,111,113,0,113,68,68,112,113,68,112,113,0,111,113,113,113,68,111,113,113,68,68,68,113,111,111,112,113,0,0,0,112,68,113,113,112,111,113,113,111,0,68,68,111,111,112,68,238,112,113,238,111,68,112,113,111,68,112,113,111,68,112,113,111,68,112,113,111,112,113,111,68,112,113,111,68,112,113,111,68,112,113,111,68,112,113,111,112,113,111,68,112,113,111,68,112,113,111,111,68,68,112,112,113,113,111,111,68,68,112,112,113,113,111,68,112,113,162,111,68,112,113,111,68,112,113,111,112,113,111,68,112,113,111,112,113,111,68,112,113,111,68,112,113,111,113,111,111,112,113,111,112,113,111,112,113,111,68,112,113,111,112,113,238,112,113,238,112,113,162,111,68,112,113,162,111,68,112,113,111,68,112,113,111,68,112,113,111,111,68,68,112,112,113,113,111,68,112,113,111,68,112,113,111,68,112,113,111,112,113,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,239,239],"f":[0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],[[]],[[],3],0,[[[2,[[0,[4,1]]]]],[[2,[[0,[4,1]]]]]],[[]],0,0,[5],[5],[6,[[7,[[2,[1]]]]]],[[[2,[1]],[2,[1]]]],[5],[[[2,[[0,[8,1]]]],[2,[[0,[8,1]]]]],9],[[],9],[[],9],0,0,0,0,[[[2,[1]],10],11],[[[2,[[0,[12,1]]]],10],11],[13,[[2,[1]]]],[[]],[14,[[2,[1]]]],[1,[[2,[1]]]],[[[0,[15,16]],17],13],[18,9],0,[[[2,[1]],19]],0,[[],18],[[],5],[[]],[[[2,[1]]],1],[[[2,[1]]],9],[[[2,[1]]],9],0,0,0,0,0,0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,[[[2,[1]],[2,[1]]],[[21,[20]]]],0,0,0,[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,0,[[[2,[1]],29],7],0,[[[2,[1]],[2,[1]]]],0,0,[[]],[[],18],[[],7],[[],7],[[],30],0,[[]],[[[23,[22]]]],0,0,0,0,[[],5],[31,32],0,0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]]],5],[[],[[38,[1,[0,[4,37]],37,[35,[1]]]]]],[[5,[40,[[39,[1,[35,[1]]]]]]],[[36,[1,[0,[4,37,8]],37,[35,[1]]]]]],[[]],[[]],[[]],[[]],[[[38,[[0,[4,1]],4,4,[0,[4,[35,[[0,[4,1]]]]]]]]],[[38,[[0,[4,1]],4,4,[0,[4,[35,[[0,[4,1]]]]]]]]]],[[[36,[[0,[4,1]],[0,[4,37]],4,[0,[4,[35,[[0,[4,1]]]]]]]]],[[36,[[0,[4,1]],[0,[4,37]],4,[0,[4,[35,[[0,[4,1]]]]]]]]]],[[]],[[]],0,[5],[5],[5],[5],[5],[5],[[[38,[[0,[12,1]],12,12,[0,[12,[35,[[0,[12,1]]]]]]]],10],11],0,[[]],[[]],[[[41,[[0,[4,37]],37,[35,[1]]]],[31,[1]]],[[38,[1,[0,[4,37]],37,[35,[1]]]]]],[[5,[42,[[41,[[0,[4,37,8]],37,[35,[1]]]]]],[31,[1]],[40,[[39,[1,[35,[1]]]]]]],[[32,[[36,[1,[0,[4,37,8]],37,[35,[1]]]]]]]],[[[36,[1,[0,[4,37,8]],37,[35,[1]]]]],[[31,[1]]]],[[],5],[[],5],0,0,[[]],[[]],0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[42,[1]]],[[32,[1]]]],0,0,[[[38,[1,[0,[8,12]],[35,[1]]]],[38,[1,[0,[8,12]],[35,[1]]]]],9],[[[36,[1,[0,[8,12,37]],[35,[1]]]],[36,[1,[0,[8,12,37]],[35,[1]]]]],9],[[],5],[[[36,[1,[33,[1]],37,[35,[1]]]]],[[32,[1]]]],[[[36,[1,[33,[1]],37,[35,[1]]]]],5],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,0,[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[43,[1]],[42,[[44,[1]]]]],[[7,[[32,[[44,[1]]]],45]]]],[[[36,[1,[33,[1]],[34,[1]],[35,[1]]]],[43,[1]]],[[7,[45]]]],[[[36,[1,[0,[4,37,8]],37,[35,[1]]]],[43,[1]],[31,[1]],[46,[1]],[46,[1]],[47,[1]],[42,[[38,[1,[33,[1]],[34,[1]],[35,[1]]]]]],[48,[1]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[[36,[33,34,[35,[49]]]],[51,[50]],[52,[50]]],[[7,[9,45]]]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],0,0,0,0,[[[48,[[0,[4,1]]]]],[[48,[[0,[4,1]]]]]],[[]],0,0,0,[5],[5],[5],0,0,0,0,0,0,0,[[]],0,0,[[],5],[[]],0,0,0,0,[[[43,[1]],[31,[1]]],[[7,[[48,[1]],45]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[25,26,[27,[3]]],[[7,[28]]]],0,0,0,0,0,[[]],0,[[],7],[[],7],[[],30],0,0,[[]],0,0,0,[[[43,[1]],53],[[7,[[46,[1]],45]]]],[[[43,[1]],53],[[7,[[47,[1]],45]]]],[[[43,[1]],[54,[1]]],[[7,[[46,[1]],45]]]],[[[43,[1]],[55,[1]]],[[7,[[47,[1]],45]]]],[[[43,[1]],[31,[1]],[56,[1]]],[[7,[[47,[1]],45]]]],[[[43,[1]],[31,[1]],[57,[1]]],[[7,[[46,[1]],45]]]],[[[43,[1]],[31,[1]],53],[[7,[[47,[1]],45]]]],[[[46,[1]],[43,[1]],[46,[1]]],[[7,[58,45]]]],[[[47,[1]],[43,[1]],[47,[1]]],[[7,[58,45]]]],[[[43,[1]],[59,[1]]],[[7,[[46,[1]],45]]]],[[[46,[1]],[43,[1]],1],[[7,[58,45]]]],[[[43,[1]],[31,[1]],53],[[7,[[46,[1]],45]]]],[[[43,[1]],1,[44,[1]]],[[7,[[46,[1]],45]]]],[[[46,[1]],[43,[1]],1],[[7,[58,45]]]],[[[47,[1]],[43,[1]],1],[[7,[58,45]]]],[[[46,[1]],[43,[1]],[31,[1]]],[[7,[45]]]],[[],[[60,[44]]]],[[[46,[1]]],[[60,[[44,[1]]]]]],[[[47,[1]]],[[60,[[44,[1]]]]]],[[[43,[1]],[21,[[57,[1]]]],[31,[1]]],[[7,[[46,[1]],45]]]],[[[43,[1]],[21,[[56,[1]]]],[31,[1]]],[[7,[[47,[1]],45]]]],[[]],[[]],[[]],[[]],[[5,[42,[[44,[1]]]]],[[46,[1]]]],[[5,[42,[[44,[1]]]]],[[47,[1]]]],[[[46,[[0,[4,61]]]]],[[46,[[0,[4,61]]]]]],[[[47,[[0,[4,1]]]]],[[47,[[0,[4,1]]]]]],[[]],[[]],[[[43,[1]],[48,[1]],[31,[1]],[44,[1]],[46,[1]]],[[7,[[46,[1]],45]]]],[[[43,[1]],[48,[1]],[31,[1]],[46,[1]],[46,[1]]],[[7,[[46,[1]],45]]]],[[[43,[1]],[48,[1]],[46,[1]],[46,[1]],62,[0,[[63,[1]],62,[0,[1,[46,[1]]]]]],58],[[7,[[46,[1]],45]]]],[[[43,[1]],[48,[1]],[31,[1]],[46,[1]],[46,[1]],[46,[1]]],[[7,[[46,[1]],45]]]],[[[43,[1]],[48,[1]],[31,[1]],[42,[[46,[1]]]]],[[7,[[46,[1]],45]]]],[[[43,[1]],64,[44,[1]],[60,[65]],[0,[[66,[1]],64,[0,[1,[44,[1]]]]]],58],[[7,[[47,[1]],45]]]],[[[43,[1]],64,[44,[1]],[60,[65]],[0,[[66,[1]],64,[0,[1,[44,[1]]]]]]],[[7,[45]]]],[[[43,[1]],[48,[1]],[31,[1]],[46,[1]],[46,[1]]],[[7,[[46,[1]],45]]]],[[[43,[1]],[48,[1]],[31,[1]],[46,[1]],[47,[1]]],[[7,[[46,[1]],45]]]],[5],[5],[5],[5],[5],[5],[[[46,[1]],[43,[1]],[46,[1]]]],[[[47,[1]],[43,[1]],[47,[1]]]],[[[47,[1]],[31,[1]]],18],[[[46,[1]],[31,[1]]],18],[[[46,[1]],10],11],[[[47,[1]],10],11],[[]],[[]],[[[44,[1]],[44,[1]]],[[46,[1]]]],[[[44,[1]],[44,[1]]],[[47,[1]]]],[[[47,[1]],[31,[1]]],[[21,[[67,[1]]]]]],[[[47,[1]],[31,[1]]],[[21,[[56,[1]]]]]],[[[47,[1]],[31,[1]]],[[21,[[55,[1]]]]]],[[[46,[1]]],[[44,[1]]]],[[[47,[1]]],[[44,[1]]]],[[[46,[1]],[43,[1]],58,[46,[1]]],[[7,[45]]]],[[],5],[[],5],[[]],[[]],[[[46,[1]],[43,[1]]],[[7,[58,45]]]],[[[46,[1]],[43,[1]]],[[7,[58,45]]]],[[[46,[1]],[43,[1]]],[[7,[58,45]]]],[[[46,[1]],[43,[1]]],[[7,[58,45]]]],[[[46,[1]],[43,[1]],[48,[1]]],[[7,[58,45]]]],[[[46,[1]],[43,[1]]],[[7,[58,45]]]],[[[46,[1]],[43,[1]]],[[7,[58,45]]]],[[[46,[1]],[43,[1]]],[[7,[58,45]]]],[[[46,[1]],[43,[1]]],[[7,[58,45]]]],[[[46,[1]],[43,[1]]],[[7,[58,45]]]],[[[43,[1]],58,[46,[1]],[46,[1]]],[[7,[[46,[1]],45]]]],[[[43,[1]],58,[47,[1]],[47,[1]]],[[7,[[47,[1]],45]]]],[[[43,[1]],58,[54,[1]],[54,[1]]],[[7,[[46,[1]],45]]]],[[[46,[1]],[31,[1]]],[[21,[[57,[1]]]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[46,[1]],[31,[1]]],[[21,[[54,[1]]]]]],[[[46,[1]]],[[44,[1]]]],[[[47,[1]]],[[44,[1]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[67,[[0,[4,1]]]]],[[67,[[0,[4,1]]]]]],[[]],[[[67,[1]]],68],[5],[5],[5],[[[67,[[0,[8,1]]]],[67,[[0,[8,1]]]]],9],[[],9],[[],9],[[[67,[[0,[12,1]]]],10],11],[[[67,[1]],[31,[1]],69],70],[[]],[[[0,[15,16]],17],13],[[[67,[1]]],[[56,[1]]]],[[[67,[[0,[15,1]]]],19]],[[],5],[[[67,[1]],[31,[1]]]],[[]],[[25,26,[27,[3]]],[[7,[28]]]],[[]],[[],7],[[],7],[[],30],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],5],[[],5],[[31,57,57,56],33],[[],9],[[31,[42,[57]]],57],[[43,48,31,[42,[46]],46,47],[[7,[45]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[71,[1]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[[71,[[0,[4,1]]]]],[[71,[[0,[4,1]]]]]],[[[72,[[0,[4,1]]]]],[[72,[[0,[4,1]]]]]],[[[73,[[0,[4,1]]]]],[[73,[[0,[4,1]]]]]],[[[74,[[0,[4,1]]]]],[[74,[[0,[4,1]]]]]],[[]],[[]],[[]],[[]],[[],[[75,[1]]]],[[],[[72,[[0,[76,1]]]]]],[[],[[73,[[0,[76,1]]]]]],[[],[[74,[[0,[76,1]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[[72,[1]]]]]],[6,[[7,[[73,[1]]]]]],[6,[[7,[[74,[1]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[[[75,[1]]],1],[[[71,[1]]],5],[[[72,[1]]],5],[[[73,[1]]],5],[[[74,[1]]],5],[[[71,[1]],[31,[1]],[57,[1]],[57,[1]],[56,[1]]],[[33,[1]]]],[[[77,[12]],10],11],[[[71,[[0,[12,1]]]],10],11],[[[72,[[0,[12,1]]]],10],11],[[[73,[[0,[12,1]]]],10],11],[[[74,[[0,[12,1]]]],10],11],[[]],[[]],[[]],[[]],[[[73,[1]]],[[71,[1]]]],[[[74,[1]]],[[71,[1]]]],[[[72,[1]]],[[71,[1]]]],[[]],[[]],[[]],[[]],[[[71,[1]]],9],[18,9],[18,9],[18,9],[[],18],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[75,[1]],1,1],[[7,[9,[77,[1]]]]]],[[[31,[1]],[39,[1,[71,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[75,[1]]],5],[[[75,[1]],1],[[7,[[21,[1]],[77,[1]]]]]],[[[31,[1]]],[[75,[1]]]],[[[31,[1]],5],[[75,[1]]]],[[[75,[1]],1,1],[[7,[[77,[1]]]]]],[[[75,[1]],1],[[7,[[78,[1]],[77,[1]]]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[75,[1]]],1],[[[75,[1]],5],5],[[[72,[1]],29],7],[[[73,[1]],29],7],[[[74,[1]],29],7],[[[71,[1]],[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],[[[72,[1]],[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],[[[73,[1]],[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],[[[74,[1]],[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],[[[71,[1]],[43,[1]],[48,[1]],[31,[1]],[42,[[46,[1]]]],[46,[1]],[47,[1]]],[[7,[45]]]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[[78,[1]],1,1,1,[79,[1]]],9],[[[80,[1]],1,1,1,[21,[1]],1,[79,[1]]],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[81,81],[[[82,[[0,[4,1]]]]],[[82,[[0,[4,1]]]]]],[[]],[[]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[83,10],11],[[83,10],11],[[81,10],11],[[81,10],11],[[[82,[1]],10],11],[[[82,[[0,[12,1]]]],10],11],[[]],[84,83],[81,83],[45,83],[85,83],[[]],[84,81],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[86],[86],[86],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[83,[[21,[87]]]],[81,[[21,[87]]]],[[]],[[]],[[],18],[[],18],[[],18],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[[33,[[0,[4,1]]]]],[[33,[[0,[4,1]]]]]],[[[41,[[0,[4,37]],[0,[4,37]],4]]],[[41,[[0,[4,37]],[0,[4,37]],4]]]],[88,88],[[[34,[[0,[4,1]]]]],[[34,[[0,[4,1]]]]]],[[]],[[]],[[]],[[]],0,[[],88],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[88]]]],[5],[5],[5],[5],[5],[5],[[[31,[1]]],[[57,[1]]]],0,[[[33,[[0,[8,1]]]],[33,[[0,[8,1]]]]],9],[[[41,[[0,[8,37]],[0,[8,37]],8]],[41,[[0,[8,37]],[0,[8,37]],8]]],9],[[88,88],9],[[[34,[[0,[8,1]]]],[34,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[89,[1,[35,[1]]]]],[[7,[81]]]],[[[31,[1]],90],[[7,[[57,[1]],81]]]],0,[[[33,[[0,[12,1]]]],10],11],[[[33,[1]],10],[[7,[91]]]],[[[33,[1]],[31,[1]],69],70],[[[41,[[0,[12,37]],[0,[12,37]],12]],10],11],[[88,10],11],[[[92,[[0,[12,37]],[0,[12,1]],[0,[12,[35,[[0,[12,1]]]]]]]],10],11],[[[34,[[0,[12,1]]]],10],11],[[]],[[]],[[]],[[]],[[[56,[1]]],88],[[]],[[]],[[[57,[1]],[57,[1]],[31,[1]],5,93,[39,[1,[35,[1]]]]],[[7,[[32,[[41,[[33,[1]],[34,[1]],[35,[1]]]]]],81]]]],[[[89,[1,[35,[1]]]]],[[7,[[32,[[41,[[33,[1]],[34,[1]],[35,[1]]]]]],81]]]],[18,9],0,[[],18],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[89,[1,[35,[1]]]]],[[33,[1]]]],0,[[],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[[33,[1]]],9],[[[41,[[33,[1]],37,[35,[1]]]]],9],[88,9],[[],9],[[[33,[1]]],9],[88,9],[88,9],[[],9],[[[33,[1]]],9],[88,9],[[[89,[1,[35,[1]]]]],[[7,[[94,[[92,[[34,[1]],1,[35,[1]]]]]],81]]]],0,[[31,5]],[[[33,[1]],[31,[1]],5]],[[[41,[[33,[1]],37,[35,[1]]]],[31,[1]]]],[[[33,[1]],[31,[1]]],[[21,[[57,[1]]]]]],[[[57,[1]],[57,[1]],[31,[1]],5,[39,[1,[35,[1]]]]],[[89,[1,[35,[1]]]]]],[[[92,[[34,[1]],1,[35,[1]]]]],21],0,[[],95],[[[41,[[33,[1]],37,[35,[1]]]],[41,[[33,[1]],37,[35,[1]]]]],9],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[16,31,39],[[7,[81]]]],[[[33,[1]],[31,[1]],[39,[1,[35,[1]]]]],[[7,[81]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[88,29],7],[[[42,[[41,[[33,[1]],37,[35,[1]]]]]]],5],[[],88],[[[33,[1]]],88],[[88,[31,[1]]],[[21,[[56,[1]]]]]],[[[33,[1]],[31,[1]]],[[32,[1]]]],[[]],[[]],[[]],[[]],[[],18],[[[33,[1]],[31,[1]]],[[7,[[32,[1]],84]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[23,[22]]]],0,0,0,0,0,[[[39,[1,[35,[1]]]],[97,[[96,[1,[35,[1]]]]]],[31,[1]]]],[[[39,[1,[35,[1]]]],[97,[98]],[97,[[35,[1]]]],[31,[1]]]],[[[99,[1]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[[100,[[0,[4,1]]]]],[[100,[[0,[4,1]]]]]],[[[99,[[0,[4,1]]]]],[[99,[[0,[4,1]]]]]],[[[39,[[0,[4,1]],[0,[4,[35,[[0,[4,1]]]]]]]]],[[39,[[0,[4,1]],[0,[4,[35,[[0,[4,1]]]]]]]]]],[[]],[[]],[[]],[[[39,[1,[35,[1]]]]],[[101,[98]]]],[[],[[39,[[0,[76,1]],[0,[76,[35,[[0,[76,1]]]]]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[[100,[1]]]]]],[6,[[7,[[99,[[0,[102,1]]]]]]]],[5],[5],[5],[5],[[[100,[1]]],5],[[[99,[1]]],5],[[[99,[1]],[31,[1]],[57,[1]],[57,[1]],[56,[1]]],[[33,[1]]]],[[[100,[[0,[12,1]]]],10],11],[[[99,[[0,[12,1]]]],10],11],[[[39,[[0,[12,1]],[0,[12,[35,[[0,[12,1]]]]]]]],10],11],[[],[[96,[1,[35,[1]]]]]],[[]],[[]],[[[100,[1]]],[[99,[1]]]],[[]],[[]],[[[99,[1]]],9],[[[39,[1,[35,[1]]]]],9],[18,9],[18,9],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[[39,[1,[35,[1]]]]],9],[[[39,[1,[35,[1]]]]],18],[[[39,[1,[35,[1]]]],[31,[1]],[57,[1]]],21],[[[39,[1,[35,[1]]]]],5],[[[97,[98]],[97,[[35,[1]]]]],[[96,[1,[35,[1]]]]]],[[],[[39,[1,[35,[1]]]]]],[[[31,[1]],[32,[[97,[[96,[1,[35,[1]]]]]]]]],[[39,[1,[35,[1]]]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[100,[1]],29],7],[[[99,[[0,[103,1]]]],29],7],[[[100,[1]],[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],[[[99,[1]],[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],[[[99,[1]],[43,[1]],[48,[1]],[31,[1]],[42,[[46,[1]]]],[46,[1]],[47,[1]]],[[7,[45]]]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[104,[1]],[43,[1]],[31,[1]]],[[7,[45]]]],[[[43,[1]],[31,[1]]],[[7,[45]]]],[[[43,[1]],[21,[[104,[1]]]],[31,[1]]],[[7,[45]]]],[[[105,[1]]],[[21,[18]]]],[[[105,[1]]],[[21,[90]]]],[[[105,[1]]],[[21,[98]]]],[[[105,[1]]],[[21,[18]]]],[[]],[[]],[[]],[[]],[[[105,[[0,[4,1]]]]],[[105,[[0,[4,1]]]]]],[[[104,[[0,[4,1]]]]],[[104,[[0,[4,1]]]]]],[[]],[[]],0,[5],[5],[5],[5],[5],[5],[[[105,[[0,[8,1]]]],[105,[[0,[8,1]]]]],9],[[[104,[[0,[8,1]]]],[104,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[[105,[1]],[31,[1]],69],70],[[[105,[[0,[12,1]]]],10],11],[[[104,[[0,[12,1]]]],10],11],[[]],[[]],[[[0,[15,16]],17],13],[[[104,[1]],19]],[[[43,[1]],[31,[1]],[46,[1]],[47,[1]]],[[7,[[44,[1]],45]]]],[[],5],[[],5],[[]],[[]],[[[105,[1]]],9],[[[105,[1]]],9],[[[105,[1]]],9],[[[105,[1]]],9],[[[105,[1]]],9],[[[105,[1]]],9],[[[105,[1]]],9],[[[105,[1]]],9],[[[105,[1]]],9],[[[105,[1]]],9],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[],3],[[[106,[[0,[4,1]]]]],[[106,[[0,[4,1]]]]]],[[]],[[[106,[1]],[106,[1]]],20],[107,[[108,[[106,[1]]]]]],[5],[5],[5],[5],[6,[[7,[[106,[1]]]]]],[5],[5],[[[106,[[0,[8,1]]]],[106,[[0,[8,1]]]]],9],[[],9],[[],9],[[[106,[[0,[12,1]]]],10],11],[[]],[[]],[[[42,[109]]],21],[110],[68],[111],[112],[113],[114],[115],[13],[[],116],[[[0,[15,16]],17],13],[18,9],[[[106,[1]],19]],[[],18],[[],18],[[],5],[[],5],[[]],[[]],[[],9],[[]],[[]],[[[106,[1]],[106,[1]]],[[21,[20]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[106,[1]]],107],[[[106,[1]],29],7],[[],[[32,[109]]]],[[],[[21,[110]]]],[[],[[21,[68]]]],[[],[[21,[111]]]],[[],[[21,[112]]]],[[],[[21,[113]]]],[[]],[[],[[21,[114]]]],[[],[[21,[115]]]],[[],115],[[],[[21,[13]]]],[[],13],[[],18],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[117,[1]]],[[119,[1,118]]]],[[[117,[1]]],[[119,[1,120]]]],[[[117,[1]]],[[119,[1,121]]]],[[[117,[1]]],[[119,[1,122]]]],[123,123],[[]],[[[79,[1]],[60,[1]]],1],[[[117,[1]],123],[[124,[1]]]],0,0,[[],[[117,[1]]]],[[],[[79,[[0,[76,1]]]]]],[[],[[125,[[0,[76,1]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[123,10],11],[[[117,[[0,[12,1]]]],10],11],[[[79,[[0,[12,1]]]],10],11],[[[125,[[0,[12,1]]]],10],11],[[]],[5,123],[[]],[[]],[[]],[[]],[[[125,[1]],[106,[1]]],[[21,[[60,[1]]]]]],[[[79,[1]],[60,[1]]],1],[[[79,[1]],[60,[1]]],1],[[[79,[1]],[60,[1]]],1],[[[79,[1]],[60,[1]]],1],[[],5],[[],5],[[],5],[[],5],[[],5],[[[125,[1]],[106,[1]],[60,[1]]]],[[]],[[]],[[]],[[]],[[]],[[],60],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[128,[[0,[126,76,37,127,12]],37,1]]],[[32,[[0,[126,76,37,127,12]]]]]],[[[128,[[0,[126,76,37,127,12]],37,1]],[31,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[129,[1]],[31,[1]],[57,[1]]],[[7,[84]]]],[[[131,[[130,[1]]]],[31,[1]],[57,[1]]],[[7,[84]]]],[[[129,[1]],[31,[1]],[57,[1]]],[[7,[84]]]],[[[131,[[130,[1]]]],[31,[1]],[57,[1]]],[[7,[84]]]],[[[63,[1]],62,[31,[1]],[57,[1]]],[[7,[84]]]],[[[128,[62,[130,[1]],1]],62,[31,[1]],[57,[1]]],[[7,[84]]]],[[[63,[1]],62,[31,[1]],[57,[1]]],[[7,[81]]]],[[[128,[62,[130,[1]],1]],62,[31,[1]],[57,[1]]],[[7,[81]]]],0,[[[131,[4]]],[[131,[4]]]],[[[130,[[0,[4,1]]]]],[[130,[[0,[4,1]]]]]],[[[132,[[0,[4,1]]]]],[[132,[[0,[4,1]]]]]],[62,62],[64,64],[[[128,[[0,[4,126]],4,[0,[4,1]]]]],[[128,[[0,[4,126]],4,[0,[4,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[129,[1]],[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[131,[[130,[1]]]],[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,[[[63,[1]],62,[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[128,[62,[130,[1]],1]],62,[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,0,[[],62],[[],64],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[[131,[8]],[131,[8]]],9],[[[130,[[0,[8,1]]]],[130,[[0,[8,1]]]]],9],[[[132,[[0,[8,1]]]],[132,[[0,[8,1]]]]],9],[[62,62],9],[[64,64],9],[[[128,[[0,[8,126]],8,[0,[8,1]]]],[128,[[0,[8,126]],8,[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[63,[1]],62,[57,[1]],[57,[1]],[57,[1]],[31,[1]]],[[57,[1]]]],[[[128,[62,[130,[1]],1]],62,[57,[1]],[57,[1]],[57,[1]],[31,[1]]],[[57,[1]]]],[[[133,[1]],[31,[1]],[56,[1]]],[[21,[[67,[1]]]]]],[[[131,[[132,[1]]]],[31,[1]],[56,[1]]],[[21,[[67,[1]]]]]],[[[66,[1]],64,[31,[1]],[56,[1]]],[[21,[[67,[1]]]]]],[[[128,[64,[132,[1]],1]],64,[31,[1]],[56,[1]]],[[21,[[67,[1]]]]]],[[[131,[12]],10],11],[[[130,[[0,[12,1]]]],10],11],[[[132,[[0,[12,1]]]],10],11],[[62,10],11],[[64,10],11],[[[128,[[0,[12,126]],12,[0,[12,1]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[[128,[[0,[126,76,37,127,12]],37,1]],[0,[126,76,37,127,12]]],[[131,[37]]]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[62,19]],[[64,19]],[[],5],[62,5],[64,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[133,[1]],[31,[1]],[67,[1]]],[[56,[1]]]],[[[131,[[132,[1]]]],[31,[1]],[67,[1]]],[[56,[1]]]],[[[66,[1]],64,[31,[1]],[67,[1]]],[[56,[1]]]],[[[128,[64,[132,[1]],1]],64,[31,[1]],[67,[1]]],[[56,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],5],[[],[[128,[[0,[126,76,37,127,12]],37,1]]]],[[],[[128,[[0,[126,76,37,127,12]],37,1]]]],[[[131,[37]]],[[128,[[0,[126,76,37,127,12]],37,1]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,[[[129,[1]],[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[131,[[130,[1]]]],[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[63,[1]],62,[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[128,[62,[130,[1]],1]],62,[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[128,[[0,[126,76,37,127,12]],37,1]]],[[32,[[131,[37]]]]]],[[[128,[[0,[126,76,37,127,12]],37,1]]],5],[[]],[[]],[[]],[[]],[[]],[[]],[[[128,[[0,[126,76,37,127,12]],37,1]]],5],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[134,108],[135,135],[134,134],[[[136,[[0,[4,1]]]]],[[136,[[0,[4,1]]]]]],[[]],[[]],[[]],[[137,[43,[1]],[0,[1]],[136,[1]]],108],[[134,90,[139,[18,18,138]]],[[108,[134]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[135,135],9],[[134,134],9],[[],9],[[],9],[[137,[0,[1]],[0,[1]]],[[108,[[32,[[136,[1]]]]]]]],[[]],[[]],[[]],[[]],[[[0,[15,16]],17],13],[[135,[101,[18,[0,[1]]]]],[[108,[[0,[1]]]]]],[[135,19]],[[],5],[[],5],[[],5],[[],5],[[134,[0,[1]]]],[[]],[[]],[[]],[[]],[135,18],[[[60,[90]],134],[[108,[137]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[137,[60,[[0,[1]]]],[0,[1]]],[[108,[[136,[1]]]]]],[[]],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,109],[[[140,[[0,[4,1]]]]],[[140,[[0,[4,1]]]]]],[107,107],[[]],[[]],[107,[[108,[16]]]],[107,[[108,[[141,[1]]]]]],[107,[[108,[[140,[1]]]]]],[[[42,[109]]],[[108,[107]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[[[141,[[0,[8,1]]]],[141,[[0,[8,1]]]]],9],[[[140,[[0,[8,1]]]],[140,[[0,[8,1]]]]],9],[[107,107],9],[[],9],[[],9],[[],9],[[],9],[[[141,[[0,[12,1]]]],10],11],[[[140,[1]],10],11],[[[140,[[0,[12,1]]]],10],11],[[107,10],11],[[107,10],11],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[42,[109]]],[[21,[5]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,[[],107],[[[141,[1]]],107],[[[140,[1]]],107],[107,[[32,[109]]]],[107,109],[109,9],[109,9],[[]],[[]],[[],18],[[],18],[5,[[32,[109]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[]],[[]],[[]],0,0,[[142,[23,[90]]]],[[142,[42,[90]]]],[[]],[[]],[142,142],[[]],[[],142],[5],[5],[5],0,[[142,10],11],[[]],[[],5],[[]],[[142,98],[[21,[98]]]],[[],142],[142,98],0,[98,142],[[25,26,[27,[3]]],[[7,[28]]]],[[142,98],98],[[142,98]],[[142,[42,[98]]]],[[],142],[[]],[[],7],[[],7],[[],30],[[]],0,0,0,0,0,0,[[]],[[]],[143,143],[[]],[5],[5],[5],[[143,10],11],[[143,10],11],[[]],[[],5],[[]],[90],[86],[[[95,[144]]],[[7,[143]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[]],[[],18],[[],7],[[],7],[[],30],[[]],0,0,0,0,[5,5],[5,5],0,[[],39],[5,5],[5,9],[5,9],[[5,39]],0,[[[42,[[36,[33,34]]]]],[[7,[32,45]]]],[[],5],[[],32],[[],5],[[],5],[32,[[7,[9,45]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[[147,[[0,[4,145,146]]]]],[[147,[[0,[4,145,146]]]]]],[[]],[[5,[40,[[39,[49,[35,[49]]]]]]],[[7,[[148,[50]],45]]]],[5],[5],[5],[5],[5],[5],[6,[[7,[[147,[[0,[145,146]]]]]]]],[5],[5],[5],[[]],[[]],[[]],[18,9],[[],18],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[149,[50,[35,[49]],49]]],[[39,[49,[35,[49]]]]]],[[5,[39,[49,[35,[49]]]]],[[149,[50,[35,[49]],49]]]],[[[149,[50,[35,[49]],49]],[150,[50]],[151,[50]],[57,[49]],[57,[49]],[31,[49]],5,[0,[152,4]],[40,[[39,[49,[35,[49]]]]]]],[[7,[83]]]],0,0,[[[149,[50,[35,[49]],49]],[36,[49,[33,[49]],[34,[49]],[35,[49]]]],[150,[50]],152],[[7,[[52,[50]],45]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[[149,[50,[35,[49]],49]]],5],0,[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[147,[[0,[145,146]]]],29],7],[[]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[[51,[50]],[153,[50]],[42,[49]],[42,[49]],[154,[50]],[0,[152,155]]],[[7,[9,45]]]],[[[36,[49,[33,[49]],[34,[49]],[35,[49]]]],[51,[50]],[52,[50]]],[[7,[9,45]]]],[[]],[[]],[[]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[[157,[[35,[156]]]],[158,[[35,[156]]]]],[[7,[[157,[[35,[156]]]],83]]]],[5],[5],[5],[5],[5],[5],[6,[[7,[[158,[[0,[102,[35,[156]]]]]]]]]],[6,[[7,[[157,[[0,[102,[35,[156]]]]]]]]]],[5],[5],[5],[[[159,[156,[35,[156]]]],[158,[[35,[156]]]],[57,[156]],[57,[156]],[31,[156]],5,[40,[[39,[156,[35,[156]]]]]]],[[7,[83]]]],[[]],[[]],[[]],[[[159,[156,[35,[156]]]],[57,[156]],[57,[156]],[31,[156]],5,[39,[156,[35,[156]]]]],[[7,[[32,[[41,[[33,[156]],[34,[156]],[35,[156]]]]]],83]]]],[18,9],[18,9],[[],18],[[],18],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[[159,[156,[35,[156]]]]],[[39,[156,[35,[156]]]]]],[[5,[39,[156,[35,[156]]]]],[[159,[156,[35,[156]]]]]],[[[159,[156,[35,[156]]]],[158,[[35,[156]]]],[32,[[41,[[33,[156]],[34,[156]],[35,[156]]]]]],[31,[156]],[40,[[39,[156,[35,[156]]]]]]],[[7,[83]]]],[[[158,[[35,[156]]]],[31,[156]],[42,[[160,[[35,[156]]]]]],5,[32,[156]],[40,[[39,[156,[35,[156]]]]]]],[[7,[[157,[[35,[156]]]],83]]]],[[5,[40,[[39,[156,[35,[156]]]]]]],[[158,[[35,[156]]]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[[159,[156,[35,[156]]]]],5],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[158,[[0,[103,[35,[156]]]]]],29],7],[[[157,[[0,[103,[35,[156]]]]]],29],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[[157,[[35,[156]]]],[158,[[35,[156]]]],5,[32,[156]],[42,[156]]],[[7,[9,85]]]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,[[[43,[1]],[31,[1]],[21,[[57,[1]]]]],[[7,[45]]]],[[]],[[[57,[1]]],[[21,[[57,[1]]]]]],[[[57,[1]]],[[21,[[57,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[161,161],[[[57,[[0,[4,1]]]]],[[57,[[0,[4,1]]]]]],[[[56,[[0,[4,1]]]]],[[56,[[0,[4,1]]]]]],[[[163,[[0,[4,162]],[0,[4,1]]]]],[[163,[[0,[4,162]],[0,[4,1]]]]]],[[]],[[]],[[]],[[]],[[161,161],20],[[[163,[162,1]],[163,[162,1]]],20],[107,[[108,[[163,[162,1]]]]]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[[163,[162,1]]]]]],[5],[5],[5],[5],[[161,161],9],[[[57,[[0,[8,1]]]],[57,[[0,[8,1]]]]],9],[[[56,[[0,[8,1]]]],[56,[[0,[8,1]]]]],9],[[[163,[[0,[8,162]],[0,[8,1]]]],[163,[[0,[8,162]],[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[161,10],11],[[[57,[[0,[12,1]]]],10],11],[[[57,[1]],[31,[1]],69],70],[[[56,[1]],[31,[1]],69],70],[[[56,[[0,[12,1]]]],10],11],[[[163,[[0,[162,164]],1]],10],11],[[[163,[[0,[12,162]],[0,[12,1]]]],10],11],[[]],[110,[[57,[1]]]],[[]],[[]],[[]],[[162,1],[[163,[162,1]]]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[18,9],[[161,19]],[[[57,[1]],19]],[[[56,[1]],19]],[[[163,[162,1]],19]],[[],18],[161,[[21,[5]]]],[[111,5],[[57,[1]]]],[[68,5],[[56,[1]]]],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[[163,[162,1]]],[[60,[1]]]],[[[57,[1]]],9],[[[57,[1]]],9],[[[56,[1]]],9],[[[57,[1]]],9],[[[57,[1]]],9],[[[57,[1]]],9],[161,9],[161,9],[[[57,[1]]],9],[[[57,[1]],111],9],[[[57,[1]]],9],[5,161],[[68,161],[[56,[1]]]],[111,[[57,[1]]]],[68,[[56,[1]]]],[[111,5],[[57,[1]]]],[[68,5],[[56,[1]]]],[161,[[21,[5]]]],[[161,161],[[21,[20]]]],[[[163,[162,1]],[163,[162,1]]],[[21,[20]]]],0,0,[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[163,[162,1]]],107],[[[163,[162,1]],29],7],[[[163,[162,1]]],162],0,0,[[[163,[162,1]]],1],[[]],[[]],[[]],[[]],[[],18],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[[163,[162,1]]],1],[[]],[[]],[[]],[[]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[31,[165]],[57,[165]],[166,[165]],5,9,[39,[165,[99,[165]]]]],[[7,[[167,[165]],24]]]],[[[31,[165]],[57,[165]],[166,[165]],5,9,9,[159,[165,[99,[165]]]],[158,[[99,[165]]]],[40,[[39,[165,[99,[165]]]]]]],[[7,[[168,[165]],24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],169],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[90,[[7,[169,170]]]],0,0,[171,171],[172,172],[173,173],[[[174,[[0,[4,1]]]]],[[174,[[0,[4,1]]]]]],[[[175,[[0,[4,1]]]]],[[175,[[0,[4,1]]]]]],[176,176],[[[177,[[0,[4,1]]]]],[[177,[[0,[4,1]]]]]],[178,178],[179,179],[180,180],[181,181],[[[166,[[0,[4,1,103]]]]],[[166,[[0,[4,1,103]]]]]],[[[167,[[0,[4,1]]]]],[[167,[[0,[4,1]]]]]],[182,182],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],183],0,0,0,0,[[181,[31,[[0,[1,103,184]]]]],[[56,[[0,[1,103,184]]]]]],[171,5],[[],172],[[],173],[[],180],[[],181],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[171]]]],[6,[[7,[172]]]],[6,[[7,[173]]]],[6,[[7,[[174,[1]]]]]],[6,[[7,[[175,[[0,[102,1]]]]]]]],[6,[[7,[176]]]],[6,[[7,[[177,[[0,[102,1]]]]]]]],[6,[[7,[178]]]],[6,[[7,[179]]]],[6,[[7,[180]]]],[6,[[7,[181]]]],[6,[[7,[[166,[[0,[102,1,103]]]]]]]],[6,[[7,[185]]]],[6,[[7,[[168,[[0,[102,1]]]]]]]],[6,[[7,[[167,[[0,[102,1]]]]]]]],[6,[[7,[182]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,0,0,[[171,171],9],[[172,172],9],[[173,173],9],[[[174,[[0,[8,1]]]],[174,[[0,[8,1]]]]],9],[[[175,[[0,[8,1]]]],[175,[[0,[8,1]]]]],9],[[176,176],9],[[[177,[[0,[8,1]]]],[177,[[0,[8,1]]]]],9],[[178,178],9],[[179,179],9],[[180,180],9],[[181,181],9],[[[166,[[0,[8,1,103]]]],[166,[[0,[8,1,103]]]]],9],[[[167,[[0,[8,1]]]],[167,[[0,[8,1]]]]],9],[[182,182],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],0,[[[31,[[0,[1,103]]]],[57,[[0,[1,103]]]],5],[[7,[172,24]]]],[[176,[31,[[0,[1,103,184]]]],5,[39,[[0,[1,103,184]],[99,[[0,[1,103,184]]]]]]],[[7,[[57,[[0,[1,103,184]]]],24]]]],[[[31,[165]],[57,[165]],[21,[[57,[165]]]],5,9,[159,[165,[99,[165]]]],[158,[[99,[165]]]],[40,[[39,[165,[99,[165]]]]]]],[[7,[[168,[165]],24]]]],[[[31,[1]],[57,[1]],[21,[[57,[1]]]],5,[39,[1,[99,[1]]]]],[[7,[24]]]],[[[167,[1]]],[[21,[172]]]],[[[168,[165]],[31,[165]]],[[7,[24]]]],0,0,0,0,0,0,[[[166,[[0,[1,103,184]]]],[31,[[0,[1,103,184]]]],5,[39,[[0,[1,103,184]],[99,[[0,[1,103,184]]]]]]],[[7,[[57,[[0,[1,103,184]]]],24]]]],[[172,10],11],[[173,10],11],[[[174,[[0,[12,1]]]],10],11],[[[175,[[0,[12,1]]]],10],11],[[176,10],11],[[[177,[[0,[12,1]]]],10],11],[[178,10],11],[[179,10],11],[[180,10],11],[[181,10],11],[[[166,[[0,[12,1,103]]]],10],11],[[185,10],11],[[[167,[[0,[12,1]]]],10],11],[[182,10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[31,[[0,[1,103,184]]]],[57,[[0,[1,103,184]]]]],[[174,[[0,[1,103,184]]]]]],[[[31,[[0,[1,103]]]],[56,[[0,[1,103]]]]],181],[[[23,[[42,[109]]]]],[[7,[[174,[1]]]]]],[[[31,[[0,[1,103]]]],[57,[[0,[1,103]]]]],180],[[[31,[[0,[1,103,184]]]],[57,[[0,[1,103,184]]]],[0,[1,103,184]]],[[174,[[0,[1,103,184]]]]]],[[[31,[[0,[1,103,184]]]],[57,[[0,[1,103,184]]]]]],[[[0,[15,16]],17],13],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[18,9],[[171,19]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[168,[165]],[31,[165]],[39,[165,[99,[165]]]]],[[7,[24]]]],[[[167,[1]]],9],[[[167,[1]]],9],0,0,0,[5,186],0,[[[31,[165]],[175,[165]],5,9,[39,[165,[99,[165]]]]],[[7,[[167,[165]],24]]]],[[[31,[165]],[175,[165]],5,9,[159,[165,[99,[165]]]],[158,[[99,[165]]]],[40,[[39,[165,[99,[165]]]]]]],[[7,[[168,[165]],24]]]],[[[167,[1]]],[[21,[[177,[1]]]]]],[[[168,[165]],[31,[165]]],[[7,[24]]]],0,0,0,[[[31,[165]],[167,[165]],5,9,[159,[165,[99,[165]]]],[158,[[99,[165]]]],[40,[[39,[165,[99,[165]]]]]]],[[7,[[168,[165]],24]]]],[[[174,[[0,[1,103,184]]]],[31,[[0,[1,103,184]]]]],[[57,[[0,[1,103,184]]]]]],[[180,[31,[[0,[1,103,184]]]],5,[39,[[0,[1,103,184]],[99,[[0,[1,103,184]]]]]]],[[57,[[0,[1,103,184]]]]]],[[[167,[1]]],[[21,[173]]]],[[[168,[165]],[31,[165]],[39,[165,[99,[165]]]]],[[7,[24]]]],[[5,[40,[[39,[165,[0,[[35,[165]],103,184]]]]]]],[[7,[[40,[[158,[[0,[[35,[165]],103,184]]]]]],24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],0,[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],0,[[171,29],7],[[172,29],7],[[173,29],7],[[[174,[1]],29],7],[[[175,[[0,[103,1]]]],29],7],[[176,29],7],[[[177,[[0,[103,1]]]],29],7],[[178,29],7],[[179,29],7],[[180,29],7],[[181,29],7],[[[166,[[0,[103,1,103]]]],29],7],[[185,29],7],[[[168,[[0,[103,1]]]],29],7],[[[167,[[0,[103,1]]]],29],7],[[182,29],7],0,0,0,0,[6,[[7,[169]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[174,[1]]],18],[[],7],[5,[[7,[171]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,0,0,[[[168,[165]],[158,[[99,[165]]]],[39,[165,[99,[165]]]]],[[7,[185,24]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[5],[[24,10],11],[[24,10],11],[45,24],[187,24],[[]],[188,24],[189,24],[84,24],[[],5],[[]],[86],[[25,26,[27,[3]]],[[7,[28]]]],[24,[[21,[87]]]],[[],18],[[],7],[[],7],[[],30],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[190,[[0,[4,1]],[0,[4,[35,[[0,[4,1]]]]]]]]],[[190,[[0,[4,1]],[0,[4,[35,[[0,[4,1]]]]]]]]]],[[]],[[],191],[[],191],0,[5],[5],[5],[5],[5],[5],0,[[[190,[1,[35,[1]]]],[57,[1]],[31,[1]]],108],[[]],[[]],[[31,[0,[[23,[22]],37]],142],108],[[31,[95,[144]],142,[0,[[23,[22]],37]]],108],[[31,[23,[22]],142],108],[[31,57,142,[0,[[23,[22]],37]]],108],[[[190,[1,[35,[1]]]],[31,[1]],[57,[1]],142,[0,[[23,[22]],37]]],108],[[31,57],108],[[[190,[1,[35,[1]]]],[31,[1]],[57,[1]]],108],[[],5],[[],5],[[]],[[]],0,0,[[],18],[[],18],[[31,5,[21,[191]],39]],[[[31,[1]],5,[21,[191]],[39,[1,[35,[1]]]]],[[108,[[193,[1,[192,[1,[35,[1]]]],[35,[1]]]]]]]],[[[31,[1]],5,[21,[191]],[39,[1,[35,[1]]]]],[[190,[1,[35,[1]]]]]],[[[31,[1]],5,[21,[191]],[39,[1,[35,[1]]]]],[[190,[1,[35,[1]]]]]],[18,18],[[[190,[1,[35,[1]]]],18],18],[[],18],[[[190,[1,[35,[1]]]]],18],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[21,[[23,[22]]]],[39,[1,[35,[1]]]]],108],[[[39,[1,[35,[1]]]]],108],[[[31,[1]],[193,[1,[192,[1,[35,[1]]]],[35,[1]]]],[21,[[23,[22]]]]],108],[[[193,[1,[192,[1,[35,[1]]]],[35,[1]]]]],108],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[194,[1]],[31,[1]],[57,[1]]],[[21,[[54,[1]]]]]],[[[194,[1]],[31,[1]],[57,[1]]],[[21,[[54,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[[194,[[0,[4,1]]]]],[[194,[[0,[4,1]]]]]],[[[195,[[0,[4,1]]]]],[[195,[[0,[4,1]]]]]],[[[196,[[0,[4,1]]]]],[[196,[[0,[4,1]]]]]],[[[197,[[0,[4,1]]]]],[[197,[[0,[4,1]]]]]],[[]],[[]],[[]],[[]],[[],[[194,[[0,[76,1]]]]]],[[],[[195,[1]]]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[[194,[[0,[102,76,1]]]]]]]],[6,[[7,[[195,[[0,[102,1]]]]]]]],[6,[[7,[[196,[[0,[102,1]]]]]]]],[6,[[7,[[197,[[0,[102,1]]]]]]]],[5],[5],[5],[5],[[[194,[[0,[8,1]]]],[194,[[0,[8,1]]]]],9],[[[195,[[0,[8,1]]]],[195,[[0,[8,1]]]]],9],[[[196,[[0,[8,1]]]],[196,[[0,[8,1]]]]],9],[[[197,[[0,[8,1]]]],[197,[[0,[8,1]]]]],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[[194,[1]],[31,[1]]]],[[[194,[[0,[12,1]]]],10],11],[[[195,[1]],10],11],[[[195,[[0,[12,1]]]],10],11],[[[196,[[0,[12,1]]]],10],11],[[[197,[[0,[12,1]]]],10],11],[[]],[[]],[[]],[[]],[[[194,[1]],[55,[1]]],[[21,[[197,[1]]]]]],[[[194,[1]],[54,[1]]],[[21,[[195,[1]]]]]],[[[0,[15,16]],17],13],[18,9],[18,9],[18,9],[18,9],[[[197,[[0,[15,1]]]],19]],[[],18],[[],18],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[[[31,[1]],[57,[1]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[194,[[0,[103,1]]]],29],7],[[[195,[[0,[103,1]]]],29],7],[[[196,[[0,[103,1]]]],29],7],[[[197,[[0,[103,1]]]],29],7],[[]],[[]],[[]],[[]],[[[194,[1]]],[[21,[[31,[1]]]]]],[[[194,[1]],[54,[1]]],21],[[],18],[[],7],[[[141,[1]]],[[7,[[194,[1]]]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[198,[[32,[90]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[31,[1]],[57,[1]]],[[7,[[57,[1]],84]]]],0,[[[31,[1]],[57,[1]]],[[7,[84]]]],[[[31,[1]],[57,[1]]],[[7,[84]]]],[[[31,[1]],[57,[1]]],[[7,[[57,[1]],84]]]],0,0,[199,199],[84,84],[[[200,[[0,[4,1]]]]],[[200,[[0,[4,1]]]]]],[[[201,[[0,[4,1]]]]],[[201,[[0,[4,1]]]]]],[[]],[[]],[[]],[[]],0,0,0,[[[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,[[[31,[1]],[57,[1]],[57,[1]]],9],0,0,0,[[],198],[[],[[31,[1]]]],0,0,[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,[5],[5],[5],[5],[5],[5],0,0,0,0,0,[[[31,[1]],[57,[1]]],[[21,[[105,[1]]]]]],[[[31,[1]],[57,[1]]],[[21,[110]]]],[[[31,[1]],[57,[1]]],21],[[[31,[1]],[57,[1]]],21],[[[31,[1]],[56,[1]]],[[21,[[67,[1]]]]]],[[[31,[1]],[57,[1]]],21],[[[31,[1]],[57,[1]]],[[21,[[32,[[57,[1]]]]]]]],[[[31,[1]],[57,[1]]],[[21,[98]]]],[[[31,[1]],[57,[1]]],[[21,[[2,[1]]]]]],[[[31,[1]],[54,[1]]],[[21,[[57,[1]]]]]],[[[31,[1]],[55,[1]]],[[21,[[56,[1]]]]]],[[[31,[1]],[57,[1]]],[[21,[90]]]],[[[31,[1]],[57,[1]]],[[21,[98]]]],[[[31,[1]],[57,[1]]],[[21,[14]]]],[[199,10],11],[[198,10],11],[[[31,[[0,[12,1]]]],10],11],[[84,10],11],[[84,10],11],[[[200,[[0,[12,1]]]],10],11],[[[201,[[0,[12,1]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[31,[1]]],[[57,[1]]]],[[[31,[1]],110],[[57,[1]]]],[[[31,[1]],115],[[57,[1]]]],[[[31,[1]]],[[201,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]],[57,[1]]],[[21,[[54,[1]]]]]],[[[31,[1]],[56,[1]]],[[21,[[60,[1]]]]]],[[[31,[1]],[104,[1]]],[[21,[[60,[1]]]]]],[[[31,[1]],[23,[90]],9],[[21,[[57,[1]]]]]],[[[31,[1]],111,1],[[21,[[57,[1]]]]]],[[[31,[1]]],[[57,[1]]]],[[[31,[1]],[97,[[2,[1]]]]],[[21,[[57,[1]]]]]],[[[31,[1]],[57,[1]]],[[21,[[54,[1]]]]]],[[[31,[1]]],[[57,[1]]]],[[[31,[1]],[23,[90]]],[[21,[[57,[1]]]]]],[[[31,[1]],98],[[21,[[57,[1]]]]]],[[[31,[1]]],[[57,[1]]]],[[[31,[1]],13],[[57,[1]]]],0,0,[[[31,[1]],[56,[1]]],[[21,[[55,[1]]]]]],[[[31,[1]],[57,[1]]],[[21,[[54,[1]]]]]],[[[31,[1]],[57,[1]],199],[[21,[[54,[1]]]]]],[[[31,[1]],199],[[21,[[54,[1]]]]]],[[[31,[1]],[23,[90]]],1],[[[31,[1]],[57,[1]],199],[[21,[[54,[1]]]]]],[[[31,[1]],1,[57,[1]]],[[21,[[57,[1]]]]]],[[[31,[1]],1,[57,[1]]],[[57,[1]]]],0,[[[31,[1]]]],0,0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[31,[1]],1,[57,[1]]],[[57,[1]]]],[[[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]]],[[56,[1]]]],[[[31,[1]],[57,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[31,[1]],98],[[57,[1]]]],[[[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]]],[[57,[1]]]],[[[31,[1]],[97,[[2,[1]]]]],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],1],[[57,[1]]]],[[[31,[1]],[55,[1]],[194,[1]]],[[21,[[56,[1]]]]]],[[[31,[1]],[54,[1]],[194,[1]]],[[21,[[57,[1]]]]]],[[[31,[1]],[23,[90]]],[[57,[1]]]],[[[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],[[[31,[1]],98],[[57,[1]]]],[[[31,[1]],98],[[21,[[57,[1]]]]]],[[[31,[1]],[23,[90]],142],[[57,[1]]]],[[[31,[1]],[104,[1]]],[[57,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],9],[111,9],[[],9],[[[31,[1]],[23,[90]]],[[57,[1]]]],0,0,0,0,0,0,0,[[[31,[1]],[42,[[57,[1]]]]],[[57,[1]]]],0,0,[[[31,[1]],[23,[90]]],[[57,[1]]]],[[[31,[1]],[56,[1]]],[[56,[1]]]],0,[[],[[31,[1]]]],[[[31,[1]]],[[201,[1]]]],[[[31,[1]]],[[57,[1]]]],[[[31,[1]]],[[57,[1]]]],0,[[[31,[1]],[97,[[2,[1]]]]],[[57,[1]]]],0,0,0,0,0,[[[31,[1]],[57,[1]]],21],0,[[[31,[1]],[57,[1]]],[[7,[84]]]],0,0,0,[86],[[[200,[1]]],[[57,[1]]]],[[[31,[1]],[57,[1]],[57,[1]]],[[7,[9,84]]]],0,0,[[[31,[1]],90],[[7,[[57,[1]],143]]]],[[[31,[1]],90,142],[[7,[[57,[1]],143]]]],[[[31,[1]],[95,[144]],142],[[7,[143]]]],[[[31,[1]],[95,[144]],142],[[7,[[57,[1]],143]]]],[[[31,[1]],[95,[144]]],[[7,[[57,[1]],143]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[[31,[1]],[23,[90]],9],[[57,[1]]]],[[[31,[1]],1,1],[[21,[[54,[1]]]]]],[[[31,[1]],1,1],[[21,[[55,[1]]]]]],[[[200,[1]]],[[54,[1]]]],0,0,[[[31,[1]],[57,[1]]],[[21,[[57,[1]]]]]],0,[[[31,[1]],[57,[1]]],[[7,[[57,[1]],84]]]],[[[31,[1]],[23,[90]]],[[57,[1]]]],0,[[[31,[1]],[57,[1]],[57,[1]]],[[57,[1]]]],0,0,[[[31,[1]],[23,[90]]],[[57,[1]]]],0,[[[31,[1]]],[[57,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[],18],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,[[[31,[1]],13],[[57,[1]]]],0,[[[200,[1]]],1],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[202,18],202],[[98,18],98],[[],3],[[],3],[202,202],[98,98],[[]],[[]],[5],[5],[5],[5],[6,[[7,[202]]]],[6,[[7,[98]]]],[5],[5],[[202,202],9],[[98,98],9],[[],9],[[],9],[[],9],[[],9],[[202,[42,[18]]],202],[[98,[42,[18]]],98],[[202,10],11],[[98,10],11],[[]],[18,98],[[]],[90,98],[202,18],[98,18],[98,18],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[18,9],[18,9],[[202,19]],[[98,19]],[[],18],[[],18],[[],5],[[],5],[[]],[[]],[202,9],[98,9],[202,9],[202,9],[98,9],[202,9],[98,9],[[],98],[98,[[21,[18]]]],[202,18],[98,18],[18,202],[18,98],[18,202],[18,98],[[9,[32,[18]]],98],[18,98],[[],202],[9,98],[18,98],0,[202,[[21,[202]]]],[98,[[21,[98]]]],[[202,202],[[21,[20]]]],[[98,98],[[21,[20]]]],[202,[[32,[18]]]],[98,[[32,[18]]]],0,[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[],202],[[],98],[[202,29],7],[[98,29],7],[98,[[21,[18]]]],[98,202],[[]],[[]],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],32],[[],[[32,[112]]]],[[],[[32,[113]]]],[[],[[32,[90]]]],[[111,[43,[1]]],[[7,[[44,[1]],45]]]],[[68,[43,[1]]],[[7,[[44,[1]],45]]]],[[112,[43,[1]]],[[7,[[44,[1]],45]]]],[[113,[43,[1]]],[[7,[[44,[1]],45]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[111,111],[68,68],[112,112],[113,113],[[]],[[]],[[]],[[]],[5],[5],[5],[5],[5],[5],[5],[5],[6,[[7,[111]]]],[6,[[7,[112]]]],[6,[[7,[113]]]],[5],[5],[5],[5],[[111,111],9],[[68,68],9],[[112,112],9],[[113,113],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[111,10],11],[[111,10],11],[[68,10],11],[[68,10],11],[[112,10],11],[[112,10],11],[[113,10],11],[[113,10],11],[[]],[[]],[[]],[[]],[1,21],[1,[[21,[111]]]],[1,[[21,[68]]]],[1,[[21,[112]]]],[1,[[21,[113]]]],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[[[0,[15,16]],17],13],[18,9],[18,9],[18,9],[[111,19]],[[68,19]],[[112,19]],[[113,19]],[[],18],[[],18],[[],18],[[],5],[[],5],[[],5],[[],5],[[]],[[]],[[]],[[]],[111,9],[113,9],[[111,111],9],[111,9],[[112,112],[[21,[20]]]],[[113,113],[[21,[20]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[111,29],7],[[112,29],7],[[113,29],7],[5,9],[[112,5],9],[[113,5],9],[[],90],[112,90],[113,90],[[],1],[111,1],[68,1],[112,1],[113,[[0,[[203,[13]],204]]]],[[]],[111],[68],[112],[113],[[]],[[]],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[114,[[7,[111]]]],[[],7],[114,[[7,[68]]]],[[],7],[114,[[7,[112]]]],[[],7],[114,[[7,[113]]]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],[[[23,[22]]]],[[[23,[22]]]],[[[23,[22]]]],0,0,[[14,14],14],[[]],[[]],[[]],[[],3],[14,14],[[]],[5],[5],[6,[[7,[14]]]],[[14,14],14],[5],[[14,14],9],[[],9],[[],9],[[14,10],11],[[14,10],11],[[]],[13,14],[18,9],[[],18],[[],5],[[]],[14,9],[[14,14],14],[[14,14],[[21,[20]]]],[[[23,[22]]],[[7,[24]]]],[[],[[7,[24]]]],[[25,26,[27,[3]]],[[7,[28]]]],[[14,14],14],[[14,29],7],[[14,14],14],[[]],[[],18],[[],7],[[],7],[[],30],[[]],[[[23,[22]]]],0,[[31,69],70],[31,18]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[3,"Cid"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u64"],[4,"UInt"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[3,"String"],[8,"Hasher"],[4,"Ordering"],[4,"Option"],[3,"Path"],[8,"AsRef"],[4,"Error"],[3,"RawCodec"],[8,"Read"],[8,"Extend"],[3,"Error"],[8,"Serializer"],[3,"TypeId"],[3,"Store"],[3,"Vec"],[3,"IO"],[3,"Witness"],[8,"Coprocessor"],[3,"MultiFrame"],[8,"Copy"],[3,"CircuitFrame"],[3,"Lang"],[3,"Arc"],[3,"Frame"],[15,"slice"],[8,"ConstraintSystem"],[3,"AllocatedNum"],[4,"SynthesisError"],[3,"AllocatedPtr"],[3,"AllocatedContPtr"],[3,"GlobalAllocations"],[3,"Scalar"],[3,"Bls12"],[3,"PreparedVerifyingKey"],[3,"Proof"],[8,"FnOnce"],[6,"ScalarPtr"],[6,"ScalarContPtr"],[3,"ContPtr"],[3,"Ptr"],[4,"Boolean"],[8,"IntoHashComponents"],[15,"array"],[8,"PrimeField"],[4,"ConsName"],[6,"ConsWitness"],[4,"ContName"],[8,"AsAllocatedHashComponents"],[6,"ContWitness"],[4,"Continuation"],[4,"ContTag"],[8,"Write"],[6,"Result"],[4,"TrieCoproc"],[3,"NewCoprocessor"],[3,"LookupCoprocessor"],[3,"InsertCoprocessor"],[3,"Trie"],[8,"Default"],[4,"Error"],[3,"LookupProof"],[3,"PoseidonCache"],[3,"InsertProof"],[4,"ReductionError"],[4,"LurkError"],[4,"ProofError"],[3,"Error"],[4,"NovaError"],[3,"Demand"],[8,"Error"],[4,"Status"],[3,"Evaluator"],[15,"str"],[3,"Error"],[3,"FrameIt"],[8,"Fn"],[3,"Take"],[3,"PeekMoreIterator"],[3,"Binding"],[8,"Into"],[4,"Sym"],[4,"Coproc"],[3,"DummyCoprocessor"],[3,"HashMap"],[8,"Deserialize"],[8,"Serialize"],[3,"Thunk"],[4,"Expression"],[3,"FWrap"],[4,"LightData"],[6,"Result"],[15,"u8"],[15,"char"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[4,"LanguageField"],[3,"HashConstants"],[6,"U3"],[3,"PoseidonConstants"],[6,"U4"],[6,"U6"],[6,"U8"],[4,"HashArity"],[4,"HashConst"],[3,"InversePoseidonCache"],[8,"HashName"],[8,"Eq"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[3,"Cont"],[6,"ContStub"],[4,"LEMOP"],[3,"MetaPtr"],[3,"Witness"],[3,"LEM"],[3,"RandomState"],[3,"DashMap"],[4,"LightExpr"],[3,"LightStore"],[3,"Package"],[4,"Error"],[8,"Iterator"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"PublicParams"],[3,"Groth16Prover"],[3,"Parameters"],[3,"GenericSRS"],[8,"RngCore"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[8,"Send"],[6,"S1"],[4,"Proof"],[3,"PublicParams"],[3,"NovaProver"],[6,"C1"],[4,"RawPtr"],[8,"Tag"],[3,"SPtr"],[8,"Display"],[6,"S1"],[3,"CommittedExpression"],[4,"Claim"],[3,"Proof"],[6,"Cid"],[4,"Error"],[4,"ReductionCount"],[3,"Evaluation"],[3,"PtrEvaluation"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"LurkScalarBytes"],[3,"LurkScalarIpld"],[4,"LurkPtr"],[4,"LurkCont"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"DeserializeOwned"],[3,"VerificationResult"],[6,"NovaProofCache"],[3,"Error"],[3,"Error"],[4,"FromHexError"],[3,"ReplState"],[3,"Command"],[8,"ReplTrait"],[3,"Repl"],[3,"ScalarStore"],[4,"ScalarExpression"],[3,"ScalarThunk"],[4,"ScalarContinuation"],[3,"StringSet"],[4,"HashScalar"],[3,"ConstantPtrs"],[3,"NamedConstants"],[3,"Symbol"],[8,"From"],[8,"Field"],[8,"ToInputs"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"CoCircuit"],[8,"Evaluable"],[8,"Encodable"],[8,"Prover"],[8,"Provable"],[8,"Id"],[8,"FileStore"],[13,"Let"],[13,"LetRec"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"],[8,"TypePredicates"],[8,"Op"],[8,"Write"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YOO","n":["Coproc","let_store","lurk"],"q":[[0,"lurk_macros"]],"d":["","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …",""],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[]},\
"lurkrs":{"doc":"","t":"F","n":["main"],"q":[[0,"lurkrs"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
