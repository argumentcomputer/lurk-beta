var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","deserialize","drop","from","handle_meta","handle_non_meta","init","into","layout_raw","name","new","pointer_metadata","process_line","prompt","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"clutch"],[26,"clap_builder::builder::command"],[27,"rkyv::with"],[28,"core::result"],[29,"pasta_curves::pallas"],[30,"lurk::eval::lang"],[31,"lurk::store"],[32,"lurk::state"],[33,"core::cell"],[34,"alloc::rc"],[35,"lurk::ptr"],[36,"anyhow"],[37,"std::path"],[38,"core::convert"],[39,"core::marker"],[40,"lurk::eval"],[41,"core::alloc::layout"],[42,"core::alloc::layout"],[43,"core::option"],[44,"lurk::eval::lang"],[45,"alloc::alloc"],[46,"alloc::boxed"],[47,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[-1,-1,[]],[[[8,[6,[7,[6]]]],[9,[6]],[12,[[11,[10]]]],[13,[6]],-1],[[14,[5]]],[[16,[15]],17]],[[[8,[6,[7,[6]]]],[9,[6]],10,[13,[6]]],[[14,[[5,[[18,[6]],[18,[6]],2]]]]]],[[],2],[-1,-2,[],[]],[[],[[4,[19,20]]]],[[],21],[[[9,[6]],2,[22,[1]],[23,[6,[7,[6]]]]],[[8,[6,[7,[6]]]]]],[[]],[[[8,[6,[7,[6]]]],21],21],[[[8,[6,[7,[6]]]]],21],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,24,[]],[[[26,[-1,25]]],[[26,[27,25]]],[]],[-1,27,[]],[-1,27,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Command",26],[15,"usize"],[3,"With",27],[4,"Result",28],[15,"tuple"],[6,"Scalar",29],[4,"Coproc",30],[3,"ClutchState",0],[3,"Store",31],[3,"State",32],[3,"RefCell",33],[3,"Rc",34],[6,"Ptr",35],[6,"Result",36],[3,"Path",37],[8,"AsRef",38],[8,"Copy",39],[3,"IO",40],[3,"Layout",41],[3,"LayoutError",41],[3,"String",42],[4,"Option",43],[3,"Lang",30],[3,"TypeId",44],[3,"Global",45],[3,"Box",46],[8,"Any",44]],"b":[]},\
"fcomm":{"doc":"","t":"DEDDGRNDNDNEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMFMLLLLMLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLFLLLLLLLLLLLLKKKLLLLLLLLKK","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","file_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","from","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","FileMap","FileStore","borrow","borrow_mut","data_dir","deref","deref_mut","deserialize","drop","fmt","from","get","init","into","layout_raw","new","pointer_metadata","read_from_json_path","read_from_path","read_from_stdin","set","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","write_to_json_path","write_to_path"],"q":[[0,"fcomm"],[638,"fcomm::error"],[683,"fcomm::file_map"],[713,"lurk::store"],[714,"lurk::ptr"],[715,"lurk::eval::lang"],[716,"lurk::eval::lang"],[717,"lurk::circuit::circuit_frame"],[718,"lurk::proof::nova"],[719,"lurk::proof::nova"],[720,"core::clone"],[721,"lurk::field"],[722,"lurk::ptr"],[723,"serde::de"],[724,"core::default"],[725,"rkyv::with"],[726,"serde::de"],[727,"core::option"],[728,"lurk::eval"],[729,"core::fmt"],[730,"core::fmt"],[731,"core::hash"],[732,"core::marker"],[733,"core::hash"],[734,"core::alloc::layout"],[735,"lurk::public_parameters::error"],[736,"std::path"],[737,"serde::ser"],[738,"core::any"],[739,"alloc::alloc"],[740,"alloc::boxed"],[741,"core::any"],[742,"std::io::error"],[743,"lurk::z_data::serde"],[744,"bellpepper_core::constraint_system"],[745,"anyhow"],[746,"lurk::store"],[747,"color_eyre::section"],[748,"core::fmt"],[749,"alloc::string"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,29,0,9,0,17,0,0,0,17,17,0,9,0,29,0,0,9,0,0,28,17,29,0,0,0,0,28,25,25,18,19,22,25,26,27,28,29,4,9,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,23,16,30,17,18,19,22,23,24,25,26,27,28,29,4,9,30,17,18,19,22,23,24,25,26,27,28,29,4,9,30,22,23,25,4,0,18,19,18,19,29,17,18,19,28,29,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,17,18,18,19,19,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,4,4,40,40,16,16,9,9,30,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,18,19,18,19,17,18,19,22,23,24,25,26,27,28,29,4,9,30,17,17,17,18,18,18,19,19,19,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,4,4,4,9,9,9,30,30,30,0,18,24,16,0,9,16,18,19,24,4,18,19,4,0,17,18,19,22,23,24,25,26,27,28,29,4,40,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,22,29,22,28,22,22,17,17,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,23,25,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,9,9,18,19,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,25,0,16,25,25,9,16,25,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,30,9,16,22,28,9,16,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,4,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,30,18,19,25,17,18,19,22,23,24,25,26,27,28,29,4,9,30,22,17,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,40,30,30,16,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,80,80,0,80,80,80,80,80,80,80,80,80,80,80,80,82,82,82,80,80,80,80,80,80,80,80,82,82],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[17,17],[18,18],[[[19,[-1]]],[[19,[-1]]],[20,21]],[[[22,[-1]]],[[22,[-1]]],[20,21]],[[[23,[-1]]],[[23,[-1]]],[20,21]],[[[24,[-1]]],[[24,[-1]]],[20,21]],[[[25,[-1]]],[[25,[-1]]],[20,21]],[26,26],[[[27,[-1]]],[[27,[-1]]],[20,21]],[[[28,[-1]]],[[28,[-1]]],[20,21]],[29,29],[[[4,[-1]]],[[4,[-1]]],[20,21]],[[[9,[-1]]],[[9,[-1]]],[20,21]],[[[30,[-1]]],[[30,[-1]]],[20,21]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],0,0,0,0,[[],32],0,0,0,0,[[29,[2,[-1]]],[[33,[-1]]],[21,34,35]],[17,5],[[],18],[[],[[19,[-1]]],[36,21]],[[],[[28,[-1]]],21],[[],29],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[17]]],38],[-1,[[11,[18]]],38],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[19,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[22,[-2]]]]],38,21],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[23,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[24,[-2]]]]],38,[39,21]],[-1,[[11,[[25,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[26]]],38],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[27,[-2]]]]],38,[39,21]],[-1,[[11,[[28,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[29]]],38],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[4,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[40]]],38],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[16,[-2]]]]],38,[39,41]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[9,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[30,[-2]]]]],38,[39,21]],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],0,0,0,0,[[17,17],6],[[18,18],6],[[[19,[-1]],[19,[-1]]],6,[42,21]],[[[22,[-1]],[22,[-1]]],6,[42,21]],[[[23,[-1]],[23,[-1]]],6,[42,21]],[[[24,[-1]],[24,[-1]]],6,[42,21]],[[[25,[-1]],[25,[-1]]],6,[42,21]],[[26,26],6],[[[27,[-1]],[27,[-1]]],6,[42,21]],[[[28,[-1]],[28,[-1]]],6,[42,21]],[[29,29],6],[[[4,[-1]],[4,[-1]]],6,[42,21]],[[[9,[-1]],[9,[-1]]],6,[42,21]],[[[30,[-1]],[30,[-1]]],6,[42,21]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[[2,[-1]],[3,[-1]],5],[[11,[18,10]]],[21,34]],[[[24,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[21,34,35]],[[[2,[1]],[3,[1]],[43,[[3,[1]]]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[2,[-1]],[3,[-1]],[43,[[3,[-1]]]],5,[8,[-1,[7,[-1]]]]],[[11,[[31,[[44,[-1]],5]],10]]],21],[[[9,[-1]]],[[43,[18]]],21],[[[16,[1]],[2,[1]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],0,0,0,0,0,0,[[[4,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[21,34,35]],0,[[17,45],46],[[18,45],46],[[[19,[-1]],45],46,[47,21]],[[[22,[-1]],45],46,[47,21]],[[[23,[-1]],45],46,[47,21]],[[[24,[-1]],45],46,[47,21]],[[[25,[-1]],45],46,[47,21]],[[26,45],46],[[[27,[-1]],45],46,[47,21]],[[[28,[-1]],45],46,[47,21]],[[29,45],46],[[[4,[-1]],45],46,[47,21]],[[40,45],46],[[[9,[-1]],45],46,[47,21]],[[[30,[-1]],45],46,[47,21]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1]],[3,[-1]]],[[11,[[22,[-1]],10]]],[21,34,35]],[[[2,[-1]],[33,[-1]]],29,[21,34]],[-1,[[11,[[22,[-2]]]]],[[50,[[49,[48]]]]],21],[[[2,[-1]],[3,[-1]]],[[28,[-1]]],[21,34,35]],[[[2,[-1]],[3,[-1]],-1],[[11,[[22,[-1]],10]]],[21,34,35]],[[[2,[-1]],[3,[-1]]],[[11,[[31,[[22,[-1]],-1]],10]]],[21,34,35]],[[-1,-2],51,[52,53],54],[[17,-1],31,55],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],[[[9,[-1]]],6,21],[[[9,[-1]]],6,21],0,0,[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],0,[5,58],0,[[[2,[1]],[23,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[23,[1]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[9,[-1]]],[[43,[[25,[-1]]]]],21],[[[16,[1]],[2,[1]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[9,[-1]]],[[11,[[59,[-1]],10]]],[21,34,39]],[[[2,[1]],[9,[1]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[22,[-1]],[2,[-1]]],[[3,[-1]]],[21,34,35]],[[[28,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[3,[-1]]],[21,34,35]],[[[9,[-1]]],[[43,[[19,[-1]]]]],21],[[[16,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],0,0,[[17,-1],11,62],[[18,-1],11,62],[[[19,[-1]],-2],11,[34,21],62],[[[22,[-1]],-2],11,21,62],[[[23,[-1]],-2],11,[34,21],62],[[[24,[-1]],-2],11,[34,21],62],[[[25,[-1]],-2],11,[34,21],62],[[26,-1],11,62],[[[27,[-1]],-2],11,[34,21],62],[[[28,[-1]],-2],11,[34,21],62],[[29,-1],11,62],[[[4,[-1]],-2],11,[34,21],62],[[40,-1],11,62],[[[16,[-1]],-2],11,[34,41],62],[[[9,[-1]],-2],11,[34,21],62],[[[30,[-1]],-2],11,[34,21],62],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],63,21],[-1,[[11,[-2]]],[],[]],[5,[[11,[17]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],0,0,0,[[[16,[1]],[14,[1,[12,[1,[7,[1]]]]]],[8,[1,[7,[1]]]]],[[11,[40,10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,68,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[5,31],[[10,45],46],[[10,45],46],[69,10],[70,10],[71,10],[-1,-1,[]],[72,10],[73,10],[74,10],[60,10],[[-1,-2],[[75,[-2,-3]]],[],[76,77,78],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[11,[56,57]]]],[[]],[10,[[43,[68]]]],[-1,63,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],79],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[5,31],[[[80,[-1,-2]],45],46,[47,81],[47,82]],[-1,-1,[]],[[[80,[-1,-2]],-1],[[43,[-2]]],81,82],[[],5],[-1,-2,[],[]],[[],[[11,[56,57]]]],[-1,[[11,[[80,[-2,-3]],60]]],[[50,[61]]],81,82],[[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[-1,[[11,[-2,60]]],[[50,[61]]],[]],[[],[[11,[-1,60]]],[]],[[[80,[-1,-2]],-1,-2],[[11,[31,60]]],81,82],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,-2,[],[]],[[-1,-2],31,[],[[50,[61]]]],[[-1,-2],31,[],[[50,[61]]]]],"c":[],"p":[[6,"S1",0],[3,"Store",713],[6,"Ptr",714],[3,"CommittedExpression",0],[15,"usize"],[15,"bool"],[4,"Coproc",715],[3,"Lang",715],[4,"Claim",0],[4,"Error",638],[4,"Result",716],[3,"MultiFrame",717],[3,"NovaProver",718],[3,"PublicParams",718],[3,"Arc",719],[3,"Proof",0],[4,"ReductionCount",0],[3,"Evaluation",0],[3,"PtrEvaluation",0],[8,"Clone",720],[8,"LurkField",721],[3,"Commitment",0],[3,"OpeningRequest",0],[3,"Expression",0],[3,"Opening",0],[3,"ZBytes",0],[3,"ZStorePtr",0],[4,"LurkPtr",0],[4,"LurkCont",0],[3,"Cert",0],[15,"tuple"],[6,"CommittedExpressionMap",0],[6,"ContPtr",714],[8,"Serialize",722],[8,"DeserializeOwned",723],[8,"Default",724],[3,"With",725],[8,"Deserializer",723],[8,"Deserialize",723],[3,"VerificationResult",0],[8,"CurveCycleEquipped",718],[8,"PartialEq",726],[4,"Option",727],[3,"IO",728],[3,"Formatter",729],[6,"Result",729],[8,"Debug",729],[15,"u8"],[15,"slice"],[8,"AsRef",730],[15,"u64"],[8,"Hash",731],[8,"Sized",732],[8,"BuildHasher",731],[8,"Hasher",731],[3,"Layout",733],[3,"LayoutError",733],[6,"NovaProofCache",0],[6,"ZExprPtr",734],[4,"Error",735],[3,"Path",736],[8,"Serializer",722],[3,"String",737],[3,"TypeId",738],[3,"Global",739],[3,"Box",740],[8,"Any",738],[8,"Error",741],[3,"Error",742],[4,"SerdeError",743],[4,"SynthesisError",744],[3,"Error",745],[3,"Error",713],[4,"FromHexError",746],[3,"IndentedSection",747],[8,"Display",729],[8,"Send",732],[8,"Sync",732],[3,"Utf8PathBuf",748],[3,"FileMap",683],[8,"ToString",737],[8,"FileStore",683]],"b":[[658,"impl-Display-for-Error"],[659,"impl-Debug-for-Error"],[660,"impl-From%3CError%3E-for-Error"],[661,"impl-From%3CSerdeError%3E-for-Error"],[662,"impl-From%3CSynthesisError%3E-for-Error"],[664,"impl-From%3CError%3E-for-Error"],[665,"impl-From%3CError%3E-for-Error"],[666,"impl-From%3CFromHexError%3E-for-Error"],[667,"impl-From%3CError%3E-for-Error"]]},\
"lurk":{"doc":"","t":"ENCRNCLLOLLOAALLAAAOLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCIAAKKDDLLLLLLLLLLMLLLLLLLMLLLLLLFLLLLLMLMLLLLLLLLLLMMLLLLLLMMLLLMMLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLMAAAAIKKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAAFAAENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLHDMLLMFMLLLLLLMLLLLLLMLMMLLLLLLLFDLLLLLLLLLLLLLLLLLLLLEHHNDNDNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLFFLMMLLLLLMMFMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLLLLAKLLLLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNEDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGGDELLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNIDDDDNNEENDMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLMLLLLLLLLLLLLLLLLLLLLLFLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLKLLLLKLLLLKLLLALLLLLLLKLLLMLLLMLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNNNNNNENNNNNNNNNDNNENNNNNNNNENNNNNNNNENDLLMLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLALMLLLLMLLLLLLLALMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNDNNDDMLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMFFFFFFNDDNEMLLMLLLLLLMLLLLLLMMLLLLLLLLLLLLLLMLLLLLMMMMLLLLMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNNNNNEGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMLLLLLLLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFQIQQQQQIQIQIIIIQQQQQKKKKKKLKLKKKKLKKKKKKLLLKALKKKKKKKKKKAKGGGQQQQNIGGGQGQGDGEDNGGLLLLLLMFFLLLMLLLLLLLLLLLLLLLLLLLMMLLLLLLMLLLLLLLMLMMLLLLLFLLLLMLLLLLLLLLLLLLLLLLLLLLLLGNENNEDNGDGLLLLLLLLFFLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAAAFFFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDEDNNNMMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLLLMLLLLLLLLKLKLLLLLMLLMKLKLLLLLKLKLFFFLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMLMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLLMMLLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLLNNELLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","repl","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","arity","blank","blank","blank","borrow","borrow","borrow_mut","borrow_mut","cached_witness","cached_witness","circuit_index","circuit_index","clone","clone","clone_into","clone_into","compute_witness","count","deref","deref","deref_mut","deref_mut","deserialize","deserialize","destructure_list","drop","drop","emitted","fmt","fmt","folding_config","frames","frames","from","from","from_frame","from_frames","from_frames","get_evaluation_frames","get_store","init","init","input","input","input","into","into","io_to_scalar_vector","layout_raw","layout_raw","make_dummy","meta","next_pc","num_circuits","output","output","output","output","pointer_metadata","pointer_metadata","precedes","precedes","precedes","primary_circuit","public_input_size","public_inputs","reduction_count","secondary_circuit","significant_frame_count","store","store","synthesize","synthesize","synthesize","synthesize_frames","synthesize_frames","synthesize_frames_parallel","synthesize_frames_sequential","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","witness","circom","constraints","data","pointer","CircomGadget","into_circom_input","name","simple_evaluate","simple_evaluate_lem","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","quote_ptr","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from","from","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","config","parse_and_run","paths","repl","Backend","Nova","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_possible_value","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value_variants","vzip","CLI_CONFIG","CliSettings","backend","borrow","borrow_mut","circom_dir","cli_config","commits_dir","default","deref","deref_mut","deserialize","deserialize","drop","field","fmt","from","from_config","init","into","layout_raw","limit","pointer_metadata","proofs_dir","rc","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","lurk_default_dir","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Flow","LURK_CONFIG","LURK_CONFIG_FILE","Parallel","ParallelConfig","ParallelN","PerfConfig","Sequential","Settings","WitnessGeneration","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","default","default","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_config","home_dir","init","init","init","init","init","into","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","lurk_config","lurk_config_file","num_threads","parallelism","perf","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","public_params_default_dir","public_params_dir","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","evaluate_lem","evaluate_lem_internal","evaluate_lem_simple","has_circuit","sha256","simple_evaluate","synthesize","synthesize_lem","synthesize_lem_internal","synthesize_lem_simple","synthesize_step_circuit","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","evaluate_lem_simple","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","simple_evaluate","synthesize","synthesize_lem_simple","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SC","Sha256Coproc","Sha256Coprocessor","arity","arity","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eval_arity","eval_arity","evaluate","evaluate_lem","evaluate_lem_internal","evaluate_lem_simple","evaluate_lem_simple","fmt","fmt","from","from","from","has_circuit","has_circuit","init","init","into","into","layout_raw","layout_raw","new","pointer_metadata","pointer_metadata","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","synthesize","synthesize_lem","synthesize_lem_internal","synthesize_lem_simple","synthesize_lem_simple","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","StandardTrie","Trie","TrieCoproc","arity","arity","arity","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","evaluate_lem","evaluate_lem_internal","evaluate_lem_simple","evaluate_lem_simple","evaluate_lem_simple","evaluate_lem_simple","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","has_circuit","has_circuit","has_circuit","init","init","init","init","init","init","init","init","insert","install","install_lem","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","synthesize","synthesize","synthesize","synthesize_insert","synthesize_lem","synthesize_lem_internal","synthesize_lem_simple","synthesize_lem_simple","synthesize_lem_simple","synthesize_lem_simple","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Coprocessor","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Lurk","Meta","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","cont","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_sym_env","env","env","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_frames","get_coprocessor_z_ptr","get_frames","header","i","init","init","init","init","init","init","init","initial","input","input","input_size","into","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_coprocessor","is_error","is_error","is_error","is_incomplete","is_lurk","is_terminal","is_terminal","is_terminal","iter","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","log","log","log","maybe_emitted_expression","meta","new","next","output","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","add_coprocessor_lem","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","evaluate_lem","evaluate_lem_internal","evaluate_lem_simple","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_coprocessor","get_coprocessor_from_zptr","get_coprocessor_z_ptr","get_index","get_index_by_symbol","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup","lookup_by_sym","max_coprocessor_arity","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","synthesize_lem","synthesize_lem_internal","synthesize_lem_simple","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BLS12_381","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_possible_value","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value_variants","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","length","names_and_ptrs","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_blank","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Copy","Cproc","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Null","Num","Op","Op1","Op2","Open","Or","Return","String","Sub","Symbol","Tag","Trunc","Var","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_field","from_ptr","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","input_params","interpreter","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","multiframe","name","name","new","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slot","store","synthesize_frame","synthesize_frame_aux","to_field","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AllocatedVal","Bits","Boolean","GlobalAllocator","Number","Pointer","SlotWitness","SlotsAllocations","allocations","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_slots_allocations","clone","clone_into","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","from","from","from","from","get_allocated_const","init","init","init","init","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness","eval_step","evaluate","evaluate_simple","evaluate_with_env_and_cont","make_cprocs_funcs_from_lang","make_eval_step_from_lang","Boolean","Frame","Hints","Pointer","Val","bit_decomp","blank","blank","blank","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone","clone_into","clone_into","clone_into","commitment","cproc_outputs","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","emitted","fmt","fmt","from","from","from","hash4","hash6","hash8","hints","init","init","init","input","input","into","into","into","layout_raw","layout_raw","layout_raw","new_from_func","output","output","pc","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","MultiFrame","arity","arity","blank","borrow","borrow_mut","cached_witness","circuit_index","clone","clone_into","compute_witness","deref","deref_mut","deserialize","drop","emitted","fmt","frames","from","from_frames","get_evaluation_frames","init","into","io_to_scalar_vector","layout_raw","make_dummy","num_circuits","output","pointer_metadata","precedes","primary_circuit","public_input_size","public_inputs","reduction_count","secondary_circuit","significant_frame_count","synthesize","synthesize","synthesize","synthesize_frames","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Atom","Ptr","Tuple2","Tuple2","Tuple3","Tuple3","Tuple4","Tuple4","ZChildren","ZPtr","borrow","borrow","borrow_mut","borrow_mut","cast","char","clone","clone_into","comm","dbg_display","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","dummy","dummy","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt_to_string","from","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","init","into","into","is_nil","is_null","is_tuple","layout_raw","layout_raw","null","num","num_u64","pointer_metadata","pointer_metadata","serialize","serialize","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u64","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Store","add_comm","borrow","borrow_mut","car_cdr","commit","cons","default","deref","deref_mut","deserialize","drop","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_string","fetch_sym","fetch_symbol","fetch_symbol_path","fmt","from","get_cont_terminal","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","hydrate_z_cache","init","initial_empty_env","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_fun","intern_lurk_symbol","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","intern_user_symbol","into","inverse_poseidon_cache","key","layout_raw","list","open","pointer_metadata","poseidon_cache","ptr_eq","ptr_eq","read","read","read_maybe_meta","read_with_default_state","to_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","from_upto","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","AllocatedIO","CEKState","CircuitFrame","ContPtr","ContPtr","Error","EvalFrame","EvaluationStore","FrameIO","FrameLike","GlobalAllocation","MultiFrameTrait","NIVCProver","Provable","Prover","Ptr","Ptr","PublicParams","Store","StoreError","blank","cached_witness","compute_witness","cont","emitted","env","expected_total_iterations","expr","frame_padding_count","frames","from_frames","get_cont_terminal","get_evaluation_frames","get_evaluation_frames","hydrate_z_cache","initial_empty_env","input","io_to_scalar_vector","lang","make_dummy","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","output","output","precedes","ptr_eq","public_input_size","public_inputs","read","reduction_count","reduction_count","significant_frame_count","supernova","synthesize_frames","C1LEM","C1Lurk","C2","CE1","CE2","CK1","CK2","Compressed","CurveCycleEquipped","EE1","EE2","G1","G1","G2","G2","NovaCircuitShape","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached_witness","circuit_cache_key","circuits","clone","clone_into","compress","count","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","folding_config","frames","from","from","from","init","init","init","input","into","into","into","lang","layout_raw","layout_raw","layout_raw","meta","new","next_pc","output","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","recursive_snark","reduction_count","serialize","serialize","store","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","C2","Compressed","FoldingConfig","IVC","NIVC","Proof","PublicParams","Recursive","SuperNovaAuxParams","SuperNovaProver","SuperNovaPublicParams","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuit_cache_keys","circuit_index","circuit_shapes","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","evaluate_and_prove","fmt","fmt","from","from","from","from","index","init","init","init","init","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pp","prove","prove_recursively","public_params","recursive_snark","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","allocate_maybe_fun_unconstrained","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","disk_cache","error","instance","public_params","supernova_aux_params","supernova_circuit_params","supernova_public_params","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Instance","Kind","Metadata","NovaPublicParams","SuperNovaAuxParams","SuperNovaCircuitParams","_p","abomonated","abomonated","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_key","cache_key","circuit_param_instances","clone","clone","clone_into","clone_into","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","key","kind","kind","lang","lang","lang","layout_raw","layout_raw","layout_raw","new","open","pointer_metadata","pointer_metadata","pointer_metadata","rc","rc","reindex","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","env","eval_expr","fmt","fmt","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","layout_raw","layout_raw","limit","name","name","new","new","new","new","pointer_metadata","pointer_metadata","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","header","hidden","hide","hide","hydrate_scalar_cache","hydrate_z_cache","if_","if_store","in_current_span","init","init","init","init","initial_empty_env","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","ptr_eq","quote","quotient","read","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","fmt_to_string_raw","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Cproc","Cproc","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","simple_fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","deserialize","drop","dummy","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[100,"lurk::circuit"],[105,"lurk::circuit::circuit_frame"],[203,"lurk::circuit::gadgets"],[207,"lurk::circuit::gadgets::circom"],[212,"lurk::circuit::gadgets::constraints"],[213,"lurk::circuit::gadgets::data"],[300,"lurk::circuit::gadgets::pointer"],[411,"lurk::cli"],[416,"lurk::cli::backend"],[451,"lurk::cli::config"],[483,"lurk::cli::paths"],[484,"lurk::cli::repl"],[505,"lurk::config"],[654,"lurk::cont"],[703,"lurk::cont::Continuation"],[735,"lurk::coprocessor"],[753,"lurk::coprocessor::circom"],[754,"lurk::coprocessor::circom::non_wasm"],[787,"lurk::coprocessor::sha256"],[859,"lurk::coprocessor::trie"],[1101,"lurk::error"],[1196,"lurk::eval"],[1440,"lurk::eval::lang"],[1572,"lurk::expr"],[1657,"lurk::field"],[1763,"lurk::hash"],[1901,"lurk::hash_witness"],[2278,"lurk::lem"],[2551,"lurk::lem::circuit"],[2639,"lurk::lem::eval"],[2645,"lurk::lem::interpreter"],[2735,"lurk::lem::multiframe"],[2783,"lurk::lem::pointers"],[2864,"lurk::lem::store"],[2930,"lurk::package"],[2958,"lurk::parser"],[2999,"lurk::parser::base"],[3046,"lurk::parser::error"],[3128,"lurk::parser::position"],[3160,"lurk::parser::position::Pos"],[3166,"lurk::parser::string"],[3204,"lurk::parser::syntax"],[3225,"lurk::proof"],[3283,"lurk::proof::nova"],[3392,"lurk::proof::supernova"],[3503,"lurk::ptr"],[3609,"lurk::public_parameters"],[3617,"lurk::public_parameters::error"],[3648,"lurk::public_parameters::instance"],[3747,"lurk::repl"],[3819,"lurk::state"],[3857,"lurk::store"],[4128,"lurk::symbol"],[4197,"lurk::syntax"],[4236,"lurk::tag"],[4474,"lurk::uint"],[4516,"lurk::writer"],[4520,"lurk::z_data"],[4568,"lurk::z_data::serde"],[4601,"lurk::z_data::serde::de"],[4653,"lurk::z_data::serde::ser"],[4798,"lurk::z_data::z_cont"],[4846,"lurk::z_data::z_cont::ZCont"],[4878,"lurk::z_data::z_expr"],[4927,"lurk::z_data::z_expr::ZExpr"],[4930,"lurk::z_data::z_ptr"],[4980,"lurk::z_data::z_store"],[5026,"core::clone"],[5027,"rkyv::with"],[5028,"core::result"],[5029,"serde::de"],[5030,"core::cmp"],[5031,"core::fmt"],[5032,"core::fmt"],[5033,"core::marker"],[5034,"core::hash"],[5035,"core::fmt"],[5036,"core::alloc::layout"],[5037,"serde::ser"],[5038,"alloc::string"],[5039,"core::any"],[5040,"alloc::alloc"],[5041,"alloc::boxed"],[5042,"core::any"],[5043,"alloc::sync"],[5044,"bellpepper::util_cs::witness_cs"],[5045,"bellpepper_core::gadgets::num"],[5046,"bellpepper_core::constraint_system"],[5047,"bellpepper_core::constraint_system"],[5048,"bellpepper_core::gadgets::boolean"],[5049,"ff"],[5050,"core::ops::function"],[5051,"clap_builder::builder::possible_value"],[5052,"camino"],[5053,"std::collections::hash::map"],[5054,"config::error"],[5055,"pasta_curves::pallas"],[5056,"camino"],[5057,"std::io"],[5058,"serde::de"],[5059,"core::cell"],[5060,"alloc::rc"],[5061,"core::error"],[5062,"nova_snark::errors"],[5063,"core::marker"],[5064,"core::convert"],[5065,"indexmap::map"],[5066,"typenum::generated::consts"],[5067,"neptune::poseidon"],[5068,"typenum::generated::consts"],[5069,"nom::traits"],[5070,"nom::internal"],[5071,"bellpepper_core::util_cs::test_cs"],[5072,"nova_snark::traits::circuit"],[5073,"nova_snark"],[5074,"nova_snark::supernova"],[5075,"nova_snark::traits::circuit_supernova"],[5076,"nova_snark::supernova"],[5077,"serde_json::error"],[5078,"std::io::error"],[5079,"clap_builder::builder::command"],[5080,"std::path"],[5081,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","Global config for Lurk Includes settings for cache …","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","Returns the argument unchanged.","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","","","","","","","","","","","","","","","","","","Return the circuit index assigned to this <code>MultiFrame</code>’s …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Make a dummy <code>MultiFrame</code>, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","Global config for the CLI Includes settings for cache …","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Global config varable for <code>CliSettings</code>","Contains the CLI configuration settings","Proof generation and verification system","","","Cache directory for Circom files","Gets the <code>CLI_CONFIG</code> settings. If uninitialized, sets the …","Cache directory for commitments","","","","","","","Finite field used for evaluation and proving","","Returns the argument unchanged.","Loads config settings from a file or env var, or CLI arg …","","Calls <code>U::from(self)</code>.","","Iteration limit for the program, which is arbitrary to …","","Cache directory for proofs","Reduction count, which is the number of circuit reductions …","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","The level of parallelism used when synthesizing the Lurk …","Global config variable for <code>Settings</code>","Global path variable for configuration file","Try to be smart about thread management based on # of cpus","Parallel configuration settings","How many threads to use? (Advisory, might be ignored.)","Performance-related configuration settings","Runs without parallelism (default)","Contains the Lurk config settings The <code>public_params_dir</code> …","Should we use optimized witness-generation when possible?","","","","","","","","","","","Returns the number of parallel steps to run per thread …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Loads config settings from a file or env vars The public …","Returns the home directory used by <code>cargo`` and </code>rustup`","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>true</code> on <code>Flow::Parallel</code> or <code>Flow::ParallelN</code>","Returns <code>true</code> on <code>Flow::Sequential</code>","","","","","","Gets the <code>LURK_CONFIG</code> settings. If uninitialized, sets the …","Gets the <code>LURK_CONFIG_FILE</code> path. If uninitialized, sets the …","Returns the number of parallel threads to run","Parallelism settings","Parallelism &amp; witness gen configs","","","","","","The poseidon witness part of synthesis.","NOTE: Neptune itself <em>will</em> do this transparently at the …","","Public parameter disk cache location","Multiple <code>StepCircuit</code>s.","Synthesis (within one <code>StepCircuit</code>)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Witness generation settings","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","","","","Returns true if this Coprocessor actually implements a …","","As with all evaluation, the value returned from …","","","","","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","Returns a value corresponding to the commitment associated …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Precompute the witness blocks for all the named hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","<code>Copy(x, y)</code> binds <code>x</code> to a copy of what <code>y</code> is bound to","<code>Cproc(ys, c, xs)</code> binds <code>ys</code> to the results of coprocessor <code>c</code> …","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","LEM tags","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","LEM variables","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cached version of Lurk’s default step function (IVC, no …","","","","Creates the <code>Func</code>s used to call coprocessors in the NIVC …","Creates a LEM <code>Func</code> corresponding to Lurk’s step function …","","A <code>Frame</code> carries the data that results from interpreting a …","<code>Hints</code> hold the non-deterministic hints for hashes and <code>Func</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","Make a dummy instance, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","","","","<code>ZChildren</code> keeps track of the children of <code>ZPtr</code>s, in case …","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Safe version of <code>hash_ptr_unsafe</code> that doesn’t hit a stack …","","","Hashes enqueued <code>Ptr</code> trees from the bottom to the top, …","","","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","Equality of the content-addressed versions of two pointers","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","The associated type of allocated input and output to the …","The State of a CEK machine.","The associated <code>CircuitFrame</code> type","the type for the Store’s continuation poitners","The associated <code>ContPtr</code> type","the type for the Store’s errors","The associated <code>Frame</code> type","A trait for a store of expressions","the type for the Frame’s IO","A Frame of evaluation in a CEK machine.","The associated type which manages global allocations","Trait to support multiple <code>MultiFrame</code> implementations.","Supertrait for <code>Prover</code> that also supports NIVC.","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","the type for the Store’s pointers","The associated <code>Ptr</code> type","The associated public parameters type for the prover.","The associated <code>Store</code> type","The error type for the Store type","Synthesize a blank circuit.","Returns a reference to the cached witness values","Populates a WitnessCS with the witness values for the …","the continuation (K)","the emitted frames","the environment (E)","Returns the expected total number of iterations for the …","the expression, or control word (C)","Returns the number of padding frames needed for a given …","Iterates through the Self::CircuitFrame instances","Create an instance from some <code>Self::Frame</code>s.","getting the terminal continuation pointer","Evaluates and generates the frames of the computation …","Evaluates and generates the <code>Frame</code>s of the computation …","cache hashes for pointers enqueued for hydration","getting a pointer to the initial, empty environment","the input of the frame","Returns a public IO vector when equipped with the local …","Returns a reference to the Prover’s Lang.","Make a dummy instance, duplicating <code>self</code>’s final …","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","the output of the frame","The output of the last frame","Returns true if the supplied instance directly precedes …","hash-equality of the expressions represented by Ptrs","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","interpreting a string representation of an expression","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Counting the number of non-trivial frames in the evaluation","An adapter to a SuperNova proving system implementation.","Synthesize some frames.","LEM’s version of C1","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","The commitment engine type for the first curve in the …","The commitment engine type for the second curve in the …","Why the next 4 types?","The type of the commitment key used for points of the …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","Type alias for Nova Circuit Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","Computes a cache key of the primary circuit. The point is …","Generates the circuits for the Nova proving system.","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","Returns the first step of the RecursiveSNARK to be proved","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Folding configuration specifies <code>Lang</code> and can be either <code>IVC</code> …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the SuperNova …","A proof for the intermediate steps of a recursive …","Type alias for SuperNova Aux Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","Computes a cache key of a supernova primary circuit. The …","Collects all the cache keys of supernova instance. We need …","Return the circuit index assigned in this <code>FoldingConfig</code> to …","The internal circuit shapes","","","","","","","","","","","","","","","","return the digest","","","","","Evaluates and proves the computation given the public …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","","","","Public params for SuperNova.","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the running claim params for the SuperNova …","Returns the first step of the RecursiveSNARK to be proved","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the claim, which (for now), …","","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","Instances","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Instances compute a cache-key for the objects they …","From ::nova, there are 3 “kinds” of public param …","What we put into the cache","Tag for nova::NovaPublicParams instances","Tag for supernova::SuperNovaAuxParams instances","Tag for [supernova::SuperNovaCircuitParams] instances","","","","","","","","","","","","If this Instance is of Kind::SuperNovaAuxParams, then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key (or cache_key) of this Instance used to retrieve …","","","The key (or cache_key) of this Instance used to retrieve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","A character literal: ‘A’, ‘λ’","An improper cons-list of expressions: (1 2 . 3)","A nil-terminated cons-list of expressions: (1 2 3)","An element of the finite field <code>F</code>","A quoted expression: ’a, ’(1 2)","A string literal: “foobar”, “foo\\\\nbar”","A hierarchical symbol: foo, foo.bar.baz or keyword :foo","Lurk’s syntax for parsing","A u64 integer: 1u64, 0xffu64","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","","","","",""],"i":[0,1,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,259,259,0,0,36,36,38,36,36,38,36,38,36,36,36,36,36,38,36,38,36,36,36,38,36,38,36,38,36,0,38,36,36,38,36,36,36,36,38,36,38,36,36,36,36,38,36,38,38,36,38,36,36,38,36,36,36,36,36,38,36,38,36,38,36,38,36,36,36,36,36,36,36,36,38,36,36,36,36,36,36,36,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,38,0,0,0,0,0,99,99,99,99,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,44,58,44,58,58,44,58,44,58,44,44,44,44,44,58,44,73,44,58,44,44,58,44,58,44,58,44,58,44,58,44,58,58,44,44,44,44,44,58,58,44,44,44,58,44,58,44,58,44,58,44,58,58,44,44,58,44,44,58,58,44,58,58,58,44,58,44,44,58,44,58,44,44,44,44,44,44,44,44,44,44,44,58,44,58,44,44,58,44,44,58,44,58,44,58,44,58,44,58,44,58,44,58,44,58,44,58,44,0,0,0,0,0,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,0,83,83,83,83,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,0,0,0,88,0,88,0,88,0,0,89,90,91,92,88,89,90,91,92,88,88,89,90,91,92,88,89,90,91,92,88,89,90,91,92,88,89,89,90,90,91,92,88,89,90,91,92,88,89,90,91,92,88,89,89,89,90,90,90,91,91,91,92,92,92,88,88,88,89,90,91,92,88,89,90,91,92,88,89,0,89,90,91,92,88,89,90,91,92,88,88,88,89,90,91,92,88,0,0,88,90,89,89,90,91,92,88,91,92,0,89,91,91,89,90,91,92,88,89,90,91,92,88,89,90,91,92,88,89,90,91,92,88,89,90,91,92,88,89,90,91,92,88,89,90,91,92,88,90,76,76,76,76,76,0,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,260,261,262,263,264,265,266,267,268,269,270,260,261,271,269,264,267,268,269,262,263,264,265,266,268,260,261,263,268,270,260,261,0,0,272,0,37,37,37,37,37,37,0,37,272,272,272,272,37,0,0,0,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,101,0,0,100,101,100,101,100,101,100,101,100,101,100,101,100,101,100,100,101,101,100,101,100,101,101,101,101,100,101,100,101,100,101,101,100,101,100,101,100,101,100,101,100,100,101,100,101,100,101,100,101,101,101,100,101,100,101,100,101,100,101,100,101,100,101,100,101,100,101,100,101,0,0,0,104,0,0,104,0,0,110,104,0,0,0,0,0,104,105,106,107,110,104,105,106,107,109,111,112,110,104,105,106,107,109,111,112,104,105,106,107,104,105,106,107,273,105,106,107,109,110,104,105,106,107,109,111,112,110,104,105,106,107,109,111,112,110,104,105,105,106,106,107,107,109,111,112,110,104,105,106,107,109,111,112,109,104,105,106,107,104,104,104,104,105,106,107,110,104,105,106,107,109,111,112,110,104,104,104,104,105,106,107,109,111,112,104,105,106,107,110,104,105,106,107,109,111,112,109,0,0,110,104,105,106,107,109,111,112,110,104,105,106,107,109,111,112,109,109,109,109,110,104,105,106,107,109,111,112,109,109,109,109,105,106,107,104,105,106,107,104,105,106,107,109,104,104,104,105,106,107,104,105,106,107,110,104,105,106,107,109,111,112,110,104,105,106,107,109,111,112,110,104,105,106,107,109,111,112,110,104,105,106,107,109,111,112,110,104,105,106,107,109,111,112,110,104,105,106,107,109,111,112,111,112,110,104,105,106,107,109,111,112,119,120,0,119,54,0,54,0,119,54,54,119,120,54,119,120,54,119,120,119,120,119,120,54,119,120,54,119,120,54,119,120,54,119,120,54,54,119,119,120,120,54,54,54,54,54,119,119,120,54,119,120,54,119,120,54,119,120,54,119,120,54,119,120,54,119,120,54,119,119,120,54,119,120,54,119,120,54,119,120,54,119,120,54,119,120,54,119,120,54,119,120,54,119,120,41,124,0,0,0,0,0,124,41,0,0,124,0,51,124,49,41,51,124,127,50,125,49,41,51,124,127,50,125,49,41,51,124,50,49,41,51,124,50,49,49,41,124,49,41,51,124,127,50,125,49,41,51,124,127,50,125,49,41,51,124,124,127,50,125,49,41,51,124,127,50,125,0,49,49,49,41,51,124,50,49,49,49,41,41,41,51,51,51,124,124,124,50,50,50,125,0,49,49,49,49,49,41,51,124,127,50,125,49,41,51,124,124,127,50,125,125,41,125,49,51,49,41,51,124,127,50,125,125,51,51,49,49,41,51,124,127,50,125,127,274,49,51,124,41,274,49,124,124,41,274,49,124,125,0,49,41,51,124,127,50,125,274,49,51,49,51,125,127,51,51,49,41,51,124,127,50,125,51,274,49,124,51,274,49,124,49,49,41,51,124,50,49,49,49,41,51,124,127,50,125,49,41,51,124,127,50,125,49,41,51,124,127,50,125,49,41,51,124,127,50,125,49,41,51,124,127,50,125,49,41,51,124,127,50,125,49,41,51,124,127,50,125,51,0,0,132,0,0,53,53,53,132,133,132,53,129,133,132,53,129,133,132,53,133,132,53,53,53,53,133,132,53,129,133,132,53,129,133,133,132,132,53,53,129,133,132,53,129,133,132,132,132,132,132,133,132,53,129,133,132,132,53,129,129,53,53,53,53,53,132,53,133,132,53,129,133,132,53,129,53,53,133,132,53,129,53,53,53,53,129,53,133,132,53,129,133,132,53,133,132,132,132,132,132,133,132,53,133,132,53,129,133,132,53,129,133,132,53,129,133,132,53,129,133,132,53,129,133,132,53,129,133,132,53,129,136,136,136,136,0,136,136,136,136,136,136,136,136,0,136,136,135,135,135,136,135,136,135,136,135,136,135,135,136,135,136,135,136,135,136,135,136,135,136,136,136,135,135,135,136,136,135,136,135,135,135,135,136,135,136,135,136,136,136,136,136,136,136,136,136,135,136,135,136,135,136,135,136,135,136,135,136,135,136,135,136,135,135,136,135,137,137,3,0,137,0,0,3,137,137,137,138,137,138,137,138,137,138,137,138,138,137,137,138,137,138,137,137,138,138,137,138,137,138,137,137,137,138,138,138,137,137,138,137,138,3,3,3,3,3,3,3,3,3,3,138,138,137,3,137,138,137,138,3,137,138,3,3,138,137,138,137,138,3,3,3,3,3,3,137,138,137,137,3,3,3,3,3,3,3,3,137,138,137,138,137,138,137,138,137,138,137,138,137,137,138,153,152,153,152,153,152,153,152,0,0,0,0,0,0,153,152,117,115,116,153,152,117,115,116,117,117,117,117,152,153,117,115,153,117,115,115,117,115,116,117,115,116,153,152,117,115,116,153,152,117,115,116,153,152,117,115,116,153,152,117,115,116,153,152,117,115,116,153,153,152,117,115,116,116,115,115,115,115,153,152,117,115,116,116,153,152,117,115,116,71,153,152,117,115,116,153,152,117,115,116,153,117,115,153,152,117,115,116,153,152,117,115,116,153,152,117,115,116,153,152,117,115,116,153,152,117,115,116,153,152,117,115,116,153,152,117,115,116,75,74,74,157,167,159,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,157,167,159,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,0,0,0,0,74,74,74,75,75,0,0,75,74,75,74,74,75,75,0,0,0,0,163,0,74,74,74,74,157,167,159,0,154,154,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,158,164,157,159,160,154,160,154,158,164,161,59,60,161,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,165,157,159,158,164,160,154,165,166,166,74,75,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,159,158,166,74,75,154,161,159,159,159,158,158,158,166,166,166,74,74,74,75,75,75,154,154,154,160,154,167,159,168,154,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,161,154,74,75,74,75,59,60,161,155,74,75,159,158,164,165,166,74,75,154,161,167,159,168,154,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,154,161,59,60,161,154,154,154,159,158,164,165,166,74,75,154,161,275,163,158,164,165,166,160,168,154,157,159,160,154,154,154,163,158,166,159,158,164,165,166,74,75,154,161,163,159,158,166,154,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,159,158,164,165,166,74,75,154,161,0,178,178,0,178,178,178,178,178,174,178,178,0,178,178,178,178,178,178,178,178,174,0,178,177,0,178,178,177,177,178,178,178,175,0,174,174,178,178,177,175,178,175,0,178,0,170,170,170,170,173,174,175,176,177,178,170,173,174,175,176,177,178,170,170,170,0,170,173,174,175,176,177,178,170,173,174,175,176,177,178,176,170,173,174,175,176,177,178,170,173,174,175,176,177,178,170,173,174,174,175,176,177,178,170,173,174,175,176,177,178,170,173,174,175,176,177,178,170,170,170,173,173,173,174,174,174,175,175,175,176,176,176,177,177,177,178,178,178,0,170,173,173,174,174,175,176,177,178,170,173,174,175,176,177,178,174,175,173,174,175,173,174,175,173,174,170,173,174,175,176,177,178,170,0,170,173,174,175,176,177,178,170,173,174,175,176,177,178,0,173,170,170,173,170,170,170,170,173,174,175,176,177,178,0,174,170,0,170,170,174,174,170,173,174,175,176,177,178,175,173,174,170,173,174,174,175,176,177,178,170,173,174,175,176,177,178,170,173,174,175,176,177,178,170,170,173,174,175,176,177,178,170,173,174,175,176,177,178,170,173,174,175,176,177,178,170,173,174,175,176,177,178,0,180,180,0,180,180,0,0,181,182,181,180,97,182,181,180,97,0,180,180,97,182,181,180,97,182,181,180,97,182,181,180,97,182,181,180,97,182,181,180,97,97,182,181,180,97,182,181,180,97,182,181,180,97,182,181,180,97,180,182,181,180,97,182,181,180,97,182,181,180,97,182,181,180,97,182,181,180,97,182,181,180,97,182,181,180,97,181,0,0,0,0,0,0,183,0,0,183,0,171,171,172,172,183,171,172,183,171,172,171,183,171,172,183,171,172,171,171,171,172,183,171,172,183,171,172,183,171,172,183,171,172,172,171,172,183,171,172,171,171,171,172,183,171,172,172,172,183,171,172,183,171,172,171,172,172,172,183,171,172,183,171,172,183,171,172,183,171,172,183,171,172,183,171,172,183,171,172,183,171,172,183,171,172,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,63,185,0,63,185,63,185,63,185,0,0,63,185,63,185,63,63,63,63,63,63,63,185,63,185,63,63,185,185,63,185,186,63,63,63,63,63,63,185,63,63,185,63,63,63,63,63,63,63,185,63,185,63,63,63,63,185,63,63,63,63,185,63,185,63,63,63,185,63,185,63,185,63,63,185,63,185,63,185,63,185,0,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,0,0,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,193,0,0,189,193,0,0,189,189,0,189,189,189,189,189,189,189,189,0,188,189,189,189,189,189,189,189,189,189,0,0,0,189,189,189,189,189,189,189,189,189,192,192,192,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,0,192,0,0,0,0,0,0,0,192,192,192,192,192,192,192,192,192,192,199,199,199,199,199,199,199,0,0,199,199,195,195,199,195,199,195,199,195,199,195,199,195,199,195,199,195,199,195,199,195,199,199,199,195,195,195,195,195,199,199,195,195,199,195,195,199,195,199,195,195,199,195,199,199,195,0,195,195,195,199,195,195,195,199,195,199,195,199,195,199,195,199,195,199,195,199,195,199,195,199,195,201,0,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,276,276,276,276,276,276,202,202,202,0,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,0,0,0,0,0,0,0,0,202,202,202,202,202,202,202,202,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,0,205,277,205,277,205,0,278,0,205,0,0,0,0,277,205,279,205,205,205,205,205,280,205,280,279,280,279,205,205,277,205,279,277,277,278,205,279,205,279,279,279,279,0,279,278,205,205,277,281,281,277,281,279,205,0,205,0,0,0,56,56,56,56,208,0,0,0,0,56,0,56,0,0,0,0,0,208,0,0,206,208,209,206,208,209,282,0,0,206,206,208,282,206,208,209,206,208,209,206,206,208,208,209,206,208,209,206,209,206,206,209,282,282,206,208,209,206,208,209,282,206,208,209,209,206,208,209,282,209,282,282,206,208,209,209,208,0,209,209,206,208,282,206,206,208,209,206,208,209,206,208,209,206,208,209,206,208,209,206,208,209,208,206,208,209,0,214,0,39,39,0,0,214,0,0,0,215,214,217,39,215,214,217,39,0,0,39,283,39,39,215,214,217,39,215,214,217,39,215,214,214,217,39,215,215,214,217,39,217,217,39,215,214,217,39,215,215,214,217,39,215,214,217,39,217,39,215,214,217,39,217,39,39,39,215,214,217,39,215,217,214,0,217,217,39,214,39,215,214,217,39,215,214,217,39,215,214,217,39,215,214,217,39,215,214,217,39,215,214,217,39,214,215,214,217,39,0,0,221,221,221,0,0,0,48,70,220,48,220,220,220,221,220,221,220,220,221,220,221,220,221,221,220,221,220,221,220,221,220,221,220,221,221,221,220,220,220,48,70,221,220,48,221,220,221,220,221,220,221,220,221,220,221,220,220,220,70,220,284,48,220,220,221,221,220,284,48,284,48,221,220,70,221,220,220,220,221,221,221,220,48,70,220,48,70,220,221,220,221,220,221,220,221,220,221,220,221,220,221,220,221,220,0,0,0,0,0,0,0,0,223,0,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,0,0,0,228,228,228,222,222,229,222,228,229,222,228,229,222,229,222,228,229,228,229,222,222,228,229,222,228,229,222,228,228,229,229,222,228,229,228,229,228,228,228,229,229,229,222,228,229,222,228,229,222,228,229,222,228,229,222,222,229,222,222,229,222,228,229,222,222,222,228,229,222,229,222,228,229,228,229,222,228,229,222,228,229,222,228,229,222,228,229,222,228,229,222,228,229,222,228,229,0,0,0,231,233,231,233,231,231,234,231,231,231,233,231,233,231,233,231,233,231,231,231,233,231,233,234,234,234,234,231,234,231,231,233,231,233,231,231,233,231,234,231,234,231,231,233,231,233,234,231,234,231,0,0,0,233,231,231,233,231,233,231,233,231,233,231,233,231,233,231,233,0,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,0,94,94,94,94,94,0,0,94,94,94,94,94,94,94,94,94,94,94,94,0,94,0,0,0,0,122,34,237,237,34,34,34,122,236,237,34,122,236,237,34,34,34,34,237,34,34,237,237,122,236,237,122,236,237,237,34,34,237,34,237,34,34,34,237,34,34,34,34,122,236,237,34,122,236,237,34,122,236,237,237,34,122,236,237,237,237,34,237,237,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,122,122,236,237,34,122,236,237,34,34,34,34,34,34,34,34,34,34,34,34,34,237,237,34,34,34,34,122,34,34,237,34,34,237,34,122,34,122,236,237,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,122,236,237,34,34,237,34,122,236,237,237,237,237,34,237,34,34,34,34,237,34,237,34,237,34,237,237,34,34,34,34,237,34,34,122,236,237,34,237,236,34,34,237,237,34,34,34,34,34,237,34,34,34,34,237,34,237,34,34,34,237,34,34,122,236,237,122,34,34,34,34,122,236,237,34,122,236,237,34,122,236,237,237,34,34,34,122,236,237,34,122,236,237,34,122,236,237,34,236,34,122,236,237,34,34,34,34,236,0,0,0,0,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,187,187,187,187,187,187,187,0,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,142,143,93,93,93,93,93,142,142,141,142,141,142,142,141,143,0,141,93,143,93,93,142,143,93,142,143,0,141,143,143,143,93,141,143,143,93,93,93,143,141,141,142,143,0,0,0,142,93,143,143,142,141,143,143,141,0,93,93,141,141,142,93,285,142,143,285,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,141,141,93,93,142,142,143,143,141,93,142,143,141,93,142,143,141,141,141,93,93,93,142,142,142,143,143,143,141,141,93,93,142,142,143,143,141,93,142,143,68,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,141,143,141,141,141,93,142,143,142,143,141,93,142,143,141,93,142,143,285,142,143,285,142,143,68,141,93,142,143,68,141,93,142,143,141,93,142,143,141,93,142,143,141,141,93,93,142,142,143,143,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,141,93,142,143,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,286,286,286,243,243,0,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,0,243,243,243,243,243,243,0,243,243,243,243,243,243,243,0,243,243,243,243,243,243,243,0,0,0,0,244,0,244,244,244,244,244,244,0,244,244,244,244,244,244,244,0,244,244,244,244,244,244,0,244,0,244,244,244,244,244,244,244,0,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,0,245,245,245,245,245,245,245,245,245,245,245,245,245,0,0,0,0,0,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,247,247,247,248,249,250,250,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,251,251,247,248,249,250,251,247,248,249,250,251,251,251,247,247,251,251,247,249,250,250,251,251,251,251,248,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,248,0,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,251,247,248,249,250,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,0,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,287,288,289,290,291,292,293,294,295,296,297,287,288,298,296,291,294,295,296,289,290,291,292,293,295,287,288,290,295,297,287,288,240,240,240,240,240,240,240,240,240,240,240,240,240,240,0,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,299,299,299,0,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,77,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238],"f":[0,0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[1,[-1]]],[[1,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[1,[-2]]]]],8,3],[[[1,[-1]],[1,[-1]]],2,3],[5,2],[[[1,[-1]],[1,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,0,0,[[[1,[-1]],11],12,[13,3]],[[[1,[-1]],11],12,3],[14,[[1,[-1]]],3],[-1,-1,[]],[15,[[1,[-1]]],3],[-1,[[1,[-1]]],3],0,[[-1,-2],14,[16,17],18],0,[[[1,[-1]],-2],2,3,19],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],9,3],[[[1,[-1]]],9,3],0,[[],[[7,[24,25]]]],0,0,0,0,[[],[[1,[-1]]],3],[[],[[1,[-1]]],3],[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,[[[1,[-1]],[1,[-1]]],[[27,[26]]],3],[[]],0,0,0,0,[[[1,[-1]],-2],7,3,28],0,0,0,[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[],5],[[-1,[34,[-2]]],[[35,[-2]]],[],[]],0,0,[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[],[[38,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]],5],[[36,[-1,-2]]],3,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1,-2]]],[[27,[[42,[-1]]]]],3,[[37,[-1]]]],0,[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[38,[-1,-2]]],[[38,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[[36,[-1,-2]]],[[36,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[36,[-1,-2]]],[[42,[-1]]],3,[[37,[-1]]]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-2,[34,[-1]],[43,[-1]],5,[44,[-1]]],[[7,[[2,[[35,[[44,[-1]]]],[45,[-1]]]],46]]],3,[[47,[-1]]]],[5,2],[5,2],[[],[[35,[[48,[-1]]]]],3],[[[38,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[36,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],0,[[[36,[-1,-2]]],[[27,[35]]],3,[[37,[-1]]]],0,[-1,-1,[]],[-1,-1,[]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]],[34,[-1]]],[[38,[-1,-2]]],3,[[37,[-1]]]],[[5,[52,[[51,[[49,[-1]],[50,[-1]],-1,-2]]]],[34,[-1]],[40,[[39,[-1,-2]]]]],[[35,[[36,[-1,-2]]]]],3,[[37,[-1]]]],[[5,52,[40,[[39,[-1,-2]]]]],[[35,[[36,[-1,-2]]]]],3,[[37,[-1]]]],[[-1,[48,[-2]],[48,[-2]],5,[53,[-2,-3]]],[[7,[[35,[[51,[[49,[-2]],[50,[-2]],-2,-3]]]],54]]],55,3,[[37,[-2]]]],[[[36,[-1,-2]]],[[34,[-1]]],3,[[37,[-1]]]],[[],5],[[],5],[[[38,[-1,-2]]],[],3,[[37,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[[35,[-1]]]]],3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[27,[[38,[-1,-2]]]],[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],0,0,[[[36,[-1,-2]]],5,[56,3],[[37,[-1]]]],[[[38,[-1,-2]]],[],3,[[37,[-1]]]],[[[36,[-1,-2]]],27,3,[[37,[-1]]]],0,0,[[]],[[]],[[[38,[-1,-2]],[38,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],[36,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],[36,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],5],[[36,[-1,-2]]],[56,3],[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],[[35,[-1]]],3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],[[57,[-1]]],[56,3],[[37,[-1]]]],[52,5],0,0,[[[36,[-1,-2]],-3,[27,[[45,[-1]]]],[52,[[45,[-1]]]]],[[7,[[2,[[27,[[45,[-1]]]],[35,[[45,[-1]]]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[52,[[45,[-1]]]]],[[7,[[35,[[45,[-1]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3],[[7,[2,46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[58,[-1]],[52,[[38,[-1,-2]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,52,[43,[-1]]],[[7,[46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[58,[-1]],[52,[[38,[-1,-2]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[58,[-1]],[52,[[38,[-1,-2]]]],[27,[[35,[[2,[[59,[-1]],[60,[-1]]]]]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,[52,[[44,[-2]]]]],[[35,[[2,[29,[35,[-2]]]]]]],[],[]],[-1,61,[]],[[-1,[34,[-2]],[52,[[48,[-2]]]]],[[48,[-2]]],[],[]],[[-1,[62,[-2]],[52,[[63,[-2]]]]],[[63,[-2]]],[],[]],[[-2,[45,[-1]],[45,[-1]]],[[7,[64,46]]],65,[[47,[-1]]]],0,[[-2,-1],[[45,[-1]]],3,[[47,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[43,[-1]]],[[43,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,0,0,0,0,0,[[[43,[-1]],11],12,[13,3]],[-1,-1,[]],0,0,[[],5],[-1,-2,[],[]],0,[[],[[7,[24,25]]]],0,0,0,[[-2,[34,[-1]]],[[7,[[43,[-1]],46]]],3,[[47,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[[-2,-3],[[7,[[44,[-1]],46]]],3,[[47,[-1]]],66],[[-2,-3],[[7,[[58,[-1]],46]]],3,[[47,[-1]]],66],[[-2,[67,[-3,-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]],68],[[-2,[69,[-1]]],[[7,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[70,[-1]]],[[7,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[48,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],-3],[[7,[[58,[-1]],46]]],3,[[47,[-1]]],66],[[[44,[-1]],-2,[44,[-1]]],[[7,[64,46]]],3,[[47,[-1]]]],[[[58,[-1]],-2,[58,[-1]]],[[7,[64,46]]],3,[[47,[-1]]]],[[-2,-3],[[7,[[44,[-1]],46]]],3,[[47,[-1]]],[[71,[-1]]]],[[[44,[-1]],-2,-1],[[7,[64,46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],-3],[[7,[[44,[-1]],46]]],3,[[47,[-1]]],66],[[-2,-1,[45,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,-1],[[7,[64,46]]],3,[[47,[-1]]]],[[[58,[-1]],-2,-1],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,[34,[-1]]],[[7,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[-1,[[72,[[45,[-2]]]]],[],[]],[[[44,[-1]]],[[72,[[45,[-1]]]]],3],[[[58,[-1]]],[[72,[[45,[-1]]]]],3],[[-2,[34,[-1]],64],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[27,[[48,[-1]]]],[34,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[27,[[70,[-1]]]],[34,[-1]]],[[7,[[58,[-1]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[52,[[45,[-1]]]]],[[44,[-1]]],3],[[5,[52,[[45,[-1]]]]],[[58,[-1]]],3],[[[44,[-1]]],[[44,[-1]]],[4,65]],[[[58,[-1]]],[[58,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-2,[34,[-1]],[45,[-1]],[72,[73]]],[[7,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[45,[-1]],[44,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[44,[-1]],[44,[-1]],74,[0,[74,[0,[-1,[44,[-1]]]]]],64],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,75,[45,[-1]],[72,[73]],[0,[75,[0,[-1,[45,[-1]]]]]],64],[[7,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,75,[45,[-1]],[72,[73]],[0,[75,[0,[-1,[45,[-1]]]]]]],[[7,[[2,[[58,[-1]],[45,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[58,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[44,[-1]],-2,[44,[-1]]],2,3,[[47,[-1]]]],[[[58,[-1]],-2,[58,[-1]]],2,3,[[47,[-1]]]],[[[58,[-1]],[34,[-1]]],29,3],[[[44,[-1]],[34,[-1]]],29,3],[[[44,[-1]],11],12,3],[[[58,[-1]],11],12,3],[[[58,[-1]]],[[44,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[[44,[-1]]],[[58,[-1]]],3],[[[45,[-1]],[45,[-1]]],[[44,[-1]]],3],[[[58,[-1]],[34,[-1]]],[[27,[[76,[-1]]]]],3],[[[58,[-1]],[34,[-1]]],[[27,[[70,[-1]]]]],3],[[[58,[-1]],[34,[-1]]],[[27,[[69,[-1]]]]],3],[[[44,[-1]]],[[45,[-1]]],3],[[[58,[-1]]],[[45,[-1]]],3],[[[44,[-1]],-2,64,[44,[-1]]],2,3,[[47,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,[43,[-1]]],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[-2,64,[44,[-1]],[44,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,64,[58,[-1]],[58,[-1]]],[[7,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,64,[77,[-1]],[77,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[]],[[]],[[[44,[-1]],[34,[-1]]],[[27,[[48,[-1]]]]],3],[[[44,[-1]]],[[45,[-1]]],3],[[[58,[-1]]],[[45,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]],[34,[-1]]],[[27,[[77,[-1]]]]],3],0,0,[[],[[78,[2]]]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[79,79],[[-1,-2],2,[],[]],[[],79],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[79]]],8],[5,2],[[79,79],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[79,11],12],[[79,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[79,[[27,[80]]]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[],[[52,[79]]]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[[27,[81]],[27,[[82,[61,29]]]]],83],0,[[],83],[5,-1,[]],[5,-1,[]],[-1,[[7,[83]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,[[83,11],12],[-1,-1,[]],[[81,[27,[[82,[61,29]]]]],[[7,[83,84]]]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],0,[[]],0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[],81],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[86,[85]],87],[[78,[2]]]],[[[62,[85]],5,5,79],[[86,[85]]]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[88,5,5],5],[[],89],[[],90],[[],91],[[],92],[[],88],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[89]]],8],[-1,[[7,[90]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[89,89],9],[[90,90],9],[[91,91],9],[[92,92],9],[[88,88],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[89,11],12],[[90,11],12],[[91,11],12],[[92,11],12],[[88,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[81,[27,[[82,[61,29]]]]],[[7,[89,84]]]],[[],81],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[88,9],[88,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[27,[81]],[27,[[82,[61,29]]]]],89],[[[27,[81]]],81],[88,5],0,0,[[]],[[]],[[]],[[]],[[]],0,0,[[],81],0,0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[76,[-1]]],[[76,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[[76,[-1]]],93,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[76,[-1]],[76,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[76,[-1]],[34,[-1]],94,-2],[[95,[2]]],3,96],[[[76,[-1]],11],12,[13,3]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[[76,[-1]]],[[70,[-1]]],3],[[[76,[-1]],-2],2,[16,3],19],[[],5],[[[76,[-1]],[34,[-1]]],[[2,[5,9]]],3],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],0,[-1,5,[]],[[-1,[34,[-2]],[48,[-2]],[48,[-2]],[70,[-2]]],[[49,[-2]]],[],[]],[[-1,[62,[-2]],[52,[[63,[-2]]]],[63,[-2]],[63,[-2]]],[[35,[[63,[-2]]]]],[],[]],[[-1,[62,[-2]],[52,[[63,[-2]]]]],[[35,[[63,[-2]]]]],[],[]],[[-1,[62,[-2]],[52,[[63,[-2]]]]],[[63,[-2]]],[],[]],[-1,9,[]],0,[[-1,[34,[-2]],[52,[[48,[-2]]]]],[[48,[-2]]],[],[]],[[-1,-3,[43,[-2]],[34,[-2]],[52,[[44,[-2]]]],[44,[-2]],[58,[-2]],64],[[7,[[2,[[44,[-2]],[44,[-2]],[58,[-2]]]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[97,[-2]],[62,[-2]],64,[52,[[44,[-2]]]],[44,[-2]],[44,[-2]]],[[7,[[35,[[44,[-2]]]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[97,[-2]],[62,[-2]],64,[52,[[44,[-2]]]]],[[7,[[35,[[44,[-2]]]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[97,[-2]],[62,[-2]],64,[52,[[44,[-2]]]]],[[7,[[44,[-2]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[34,[-2]],[43,[-2]],[77,[-2]],[44,[-2]],[44,[-2]],[58,[-2]],64],[[7,[[2,[[44,[-2]],[44,[-2]],[58,[-2]]]],46]]],[],[],[[47,[-2]]]],0,0,0,[[[98,[-1,-2]]],5,3,[[99,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[98,[-1,-2]]],[[98,[-1,-2]]],3,[[99,[-1]]]],[[-1,-2],2,[],[]],[-2,[[78,[[98,[-1,-2]]]]],3,[[99,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[98,[-1,-2]]],5,3,[[99,[-1]],13]],[[[98,[-1,-2]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3,[[99,[-1]],13]],[[[98,[-1,-2]],11],12,[13,3],[13,[99,[-1]]]],[-1,-1,[]],[[[98,[-1,-2]]],9,3,[[99,[-1]],13]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[98,[-1,-2]]],61,3,[[99,[-1]]]],[-2,[[98,[-1,-2]]],3,[[99,[-1]]]],[[]],[[[98,[-1,-2]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3,[[99,[-1]],13]],[[[98,[-1,-2]],-3,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[78,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[99,[-1]]],[[47,[-1]]]],[[[98,[-1,-2]],-3,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[44,[-1]],46]]],3,[[99,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[[[100,[-1]]],5,3],[[[101,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[100,[-1]]],[[100,[-1]]],[4,3]],[[[101,[-1]]],[[101,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[100,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[101,[-2]]]]],8,[102,3]],[5,2],[5,2],[[[100,[-1]]],5,3],[[[101,[-1]]],5,3],[[[101,[-1]],[34,[-1]],[48,[-1]],[48,[-1]],[70,[-1]]],[[49,[-1]]],3],[[[101,[-1]],[62,[-1]],[52,[[63,[-1]]]],[63,[-1]],[63,[-1]]],[[35,[[63,[-1]]]]],3],[[[101,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[35,[[63,[-1]]]]],3],[[[100,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[101,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[100,[-1]],11],12,[13,3]],[[[101,[-1]],11],12,[13,3]],[-1,-1,[]],[[[100,[-1]]],[[101,[-1]]],3],[-1,-1,[]],[[[100,[-1]]],9,3],[[[101,[-1]]],9,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[5,[[100,[-1]]],3],[[]],[[]],[[[100,[-1]],-2],7,3,28],[[[101,[-1]],-2],7,[103,3],28],[[[100,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[101,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[100,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[7,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[101,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[7,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[101,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]],[44,[-1]],[44,[-1]]],[[7,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[101,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[100,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[[101,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[104,[-1]]],5,3],[[[105,[-1]]],5,3],[[[106,[-1]]],5,3],[[[107,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[104,[-1]]],[[104,[-1]]],[4,3]],[[[105,[-1]]],[[105,[-1]]],[4,3]],[[[106,[-1]]],[[106,[-1]]],[4,3]],[[[107,[-1]]],[[107,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[105,[-1]]],[108,3]],[[],[[106,[-1]]],[108,3]],[[],[[107,[-1]]],[108,3]],[[],[[109,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[105,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[106,[-2]]]]],8,3],[-1,[[7,[[107,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[109,[-1]]],-1,3],[[[104,[-1]]],5,3],[[[105,[-1]]],5,3],[[[106,[-1]]],5,3],[[[107,[-1]]],5,3],[[[104,[-1]],[34,[-1]],[48,[-1]],[48,[-1]],[70,[-1]]],[[49,[-1]]],3],[[[104,[-1]],[62,[-1]],[52,[[63,[-1]]]],[63,[-1]],[63,[-1]]],[[35,[[63,[-1]]]]],3],[[[104,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[35,[[63,[-1]]]]],3],[[[104,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[105,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[106,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[107,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[110,[-1]],11],12,13],[[[104,[-1]],11],12,[13,3]],[[[105,[-1]],11],12,[13,3]],[[[106,[-1]],11],12,[13,3]],[[[107,[-1]],11],12,[13,3]],[[[109,[-1]],11],12,[13,3]],[[[111,[-1]],11],12,[13,3]],[[[112,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[106,[-1]]],[[104,[-1]]],3],[[[105,[-1]]],[[104,[-1]]],3],[[[107,[-1]]],[[104,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[104,[-1]]],9,3],[[[105,[-1]]],9,3],[[[106,[-1]]],9,3],[[[107,[-1]]],9,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[109,[-1]],-1,-1],[[7,[9,[110,[-1]]]]],3],[[[34,[-1]],[114,[[113,[94]]]],[53,[-1,[104,[-1]]]]],2,3],[[[62,[-1]],[114,[[113,[94]]]],[53,[-1,[104,[-1]]]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[109,[-1]]],5,3],[[[109,[-1]],-1],[[7,[[27,[-1]],[110,[-1]]]]],3],[[[115,[-1]],[116,[-1]]],[[109,[-1]]],3],[[[115,[-1]],[116,[-1]],5],[[109,[-1]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[109,[-1]],-1,-1],[[7,[[2,[[112,[-1]],9]],[110,[-1]]]]],3],[[[109,[-1]],-1],[[7,[[111,[-1]],[110,[-1]]]]],3],[[[109,[-1]]],-1,3],[[[109,[-1]],5],5,3],[[[105,[-1]],-2],7,3,28],[[[106,[-1]],-2],7,3,28],[[[107,[-1]],-2],7,3,28],[[[104,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[105,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[106,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[107,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[104,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[7,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[105,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[7,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[106,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[7,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[107,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[7,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[109,[-1]],-2,[117,[-1]],[45,[-1]],[45,[-1]],[45,[-1]]],[[7,[[45,[-1]],46]]],3,[[47,[-1]]]],[[[104,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]],[44,[-1]],[44,[-1]]],[[7,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[104,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[104,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[[105,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[[106,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[[107,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[111,[-1]],-1,-1,-1,[115,[-1]]],9,3],[[[112,[-1]],-1,-1,-1,[27,[-1]],-1,[115,[-1]]],9,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,118,[]],[-1,118,[]],[-1,118,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[119,119],[[[120,[-1]]],[[120,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[54,11],12],[[54,11],12],[[119,11],12],[[119,11],12],[[[120,[-1]],11],12,[13,3]],[[[120,[-1]],11],12,3],[121,54],[46,54],[122,54],[-1,-1,[]],[119,54],[-1,-1,[]],[122,119],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[54,[[27,[118]]]],[119,[[27,[118]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[49,[-1]]],[[49,[-1]]],[4,3]],[[[41,[-1]]],[[41,[-1]]],[4,3]],[[[51,[-1,-2,-3,-4]]],[[51,[-1,-2,-3,-4]]],[4,123],[4,123],[4,3],4],[124,124],[[[50,[-1]]],[[50,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[49,[-1]]],[[70,[-1]]],3],0,[[],[[41,[-1]]],3],[[],124],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[124]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[34,[-1]]],[[48,[-1]]],3],[[[49,[-1]]],[[48,[-1]]],3],0,[[[49,[-1]],[49,[-1]]],9,[10,3]],[[[41,[-1]],[41,[-1]]],9,[10,3]],[[[51,[-1,-2,-3,-4]],[51,[-1,-2,-3,-4]]],9,[10,123],[10,123],[10,3],10],[[124,124],9],[[[50,[-1]],[50,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[125,[-1,-2]]],[[7,[[2,[[49,[-1]],5,[35,[[48,[-1]]]]]],119]]],3,[[37,[-1]]]],[[[34,[-1]],61],[[7,[[48,[-1]],119]]],3],[[[49,[-1]]],[[48,[-1]]],3],0,[[[49,[-1]],11],[[7,[2,126]]],3],[[[49,[-1]],11],12,[13,3]],[[[49,[-1]],[34,[-1]],94,-2],[[95,[2]]],3,96],[[[41,[-1]],11],12,[13,3]],[[[51,[-1,-2,-3,-4]],11],12,[13,123],[13,123],[13,3],13],[[124,11],12],[[[127,[-1,-2,-3]],11],12,[13,123],[13,3],[13,[37,[-2]]]],[[[50,[-1]],11],12,[13,3]],[[[125,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[70,[-1]]],124,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[48,[-1]],[48,[-1]],[34,[-1]],5,-2,[53,[-1,-3]]],[[7,[[35,[[51,[[49,[-1]],[50,[-1]],-1,-3]]]],119]]],3,55,[[37,[-1]]]],[[[41,[-1]]],[[27,[[77,[-1]]]]],3],[[[125,[-1,-2]]],[[7,[[35,[[51,[[49,[-1]],[50,[-1]],-1,-2]]]],119]]],3,[[37,[-1]]]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[125,[-1,-2]]],[[49,[-1]]],3,[[37,[-1]]]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]]],[],3,[[37,[-1]]]],0,[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[[49,[-1]]],9,3],[[[51,[[49,[-1]],-2,-1,-3]]],9,3,123,[[37,[-1]]]],[124,9],[[[41,[-1]]],9,3],[-1,9,[]],[[[49,[-1]]],9,3],[124,9],[124,9],[[[41,[-1]]],9,3],[-1,9,[]],[[[49,[-1]]],9,3],[124,9],[[[125,[-1,-2]]],[[7,[[128,[[127,[[50,[-1]],-1,-2]]]],119]]],3,[[37,[-1]]]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[-1,[34,[-2]],5],2,[],[]],[[[49,[-1]],[34,[-1]],5],2,3],[[[51,[[49,[-1]],-2,-1,-3]],[34,[-1]]],2,3,123,[[37,[-1]]]],[[[49,[-1]],[34,[-1]]],[[27,[[48,[-1]]]]],3],0,[[[48,[-1]],[48,[-1]],[34,[-1]],5,[53,[-1,-2]]],[[125,[-1,-2]]],3,[[37,[-1]]]],[[[127,[[50,[-1]],-1,-2]]],27,3,[[37,[-1]]]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]]],[],3,[[37,[-1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[[49,[-1]],-2,-1,-3]],[51,[[49,[-1]],-2,-1,-3]]],9,3,123,[[37,[-1]]]],[[-1,[34,[-2]],[53,[-2,-3]]],[[7,[[2,[-1,-4,[41,[-2]]]],119]]],17,[],[],[]],[[[49,[-1]],[34,[-1]],[53,[-1,-2]]],[[7,[[2,[[49,[-1]],[50,[-1]],[41,[-1]]]],119]]],3,[[37,[-1]]]],[[124,-1],7,28],[[[52,[[51,[[49,[-1]],-2,-1,-3]]]]],5,3,123,[[37,[-1]]]],[-1,124,[]],[[[49,[-1]]],124,3],[[124,[34,[-1]]],[[27,[[70,[-1]]]]],3],[[[49,[-1]],[34,[-1]]],[[35,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[49,[-1]],[34,[-1]]],[[7,[[35,[-1]],122]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[53,[-1,-2]],-3,[34,[-1]]],2,3,[[37,[-1]]],[[130,[[129,[-1,-2]]]]]],[[[53,[-1,-2]],-3,-4,[34,[-1]]],2,3,[[37,[-1]]],[[130,[131]]],[[130,[-2]]]],[[[53,[-1,-2]],-3,-4,[62,[-1]]],2,3,[[37,[-1]]],[[130,[131]]],[[130,[-2]]]],[[[132,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[133,[-1]]],[[133,[-1]]],[4,3]],[[[132,[-1]]],[[132,[-1]]],[4,3]],[[[53,[-1,-2]]],[[53,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[53,[-1,-2]]],5,3,[[37,[-1]]]],[[[53,[-1,-2]]],[[134,[131,[2,[-2,[77,[-1]]]]]]],3,[[37,[-1]]]],[[],[[53,[-1,-2]]],[108,3],[108,[37,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[133,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[132,[-2]]]]],8,[102,3]],[-1,[[7,[[53,[-2,-3]]]]],8,[102,3],[102,[37,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[133,[-1]]],5,3],[[[132,[-1]]],5,3],[[[132,[-1]],[34,[-1]],[48,[-1]],[48,[-1]],[70,[-1]]],[[49,[-1]]],3],[[[132,[-1]],[62,[-1]],[52,[[63,[-1]]]],[63,[-1]],[63,[-1]]],[[35,[[63,[-1]]]]],3],[[[132,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[35,[[63,[-1]]]]],3],[[[132,[-1]],[62,[-1]],[52,[[63,[-1]]]]],[[63,[-1]]],3],[[[133,[-1]],11],12,[13,3]],[[[132,[-1]],11],12,[13,3]],[[[53,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[129,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[[[133,[-1]]],[[132,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-3]]],[[129,[-2,-3]]],[[130,[131]]],3,[[37,[-2]]]],[[[53,[-1,-2]],5],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]],[77,[-1]]],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]],5],[[27,[[77,[-1]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]],[77,[-1]]],[[27,[5]]],3,[[37,[-1]]]],[[[53,[-1,-2]],131],[[27,[5]]],3,[[37,[-1]]]],[[[132,[-1]]],9,3],[[[53,[-1,-2]]],9,3,[[37,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2]]],9,3,[[37,[-1]]]],[[[53,[-1,-2]]],29,3,[[37,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[53,[-1,-2]],[34,[-1]],[48,[-1]]],[[27,[[2,[-2,[77,[-1]]]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]],131],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]]],5,3,[[37,[-1]]]],[[],[[53,[-1,-2]]],3,[[37,[-1]]]],[[-1,-4],[[129,[-2,-3]]],[[130,[131]]],3,[[37,[-2]]],[[130,[-3]]]],[[[34,[-1]],[35,[-3]]],[[53,[-1,-2]]],3,[[37,[-1]]],[[130,[[129,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[133,[-1]],-2],7,3,28],[[[132,[-1]],-2],7,[103,3],28],[[[53,[-1,-2]],-3],7,[103,3],[103,[37,[-1]]],28],[[[133,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[132,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[132,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]],64],[[7,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[[132,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]],[44,[-1]],[44,[-1]]],[[7,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[132,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[35,[[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[132,[-1]],-2,[97,[-1]],[62,[-1]],64,[52,[[44,[-1]]]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[135,[-1]],-2,[34,[-1]]],[[7,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]]],[[7,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[27,[[135,[-1]]]],[34,[-1]]],[[7,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[136,[-1]]],[[136,[-1]]],[4,3]],[[[135,[-1]]],[[135,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[136,[-1]],[136,[-1]]],9,[10,3]],[[[135,[-1]],[135,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[136,[-1]],[34,[-1]],94,-2],[[95,[2]]],3,96],[[[136,[-1]],11],12,[13,3]],[[[135,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[[135,[-1]],-2],2,3,19],[[-2,[34,[-1]],[44,[-1]],[58,[-1]]],[[7,[[45,[-1]],46]]],3,[[47,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[136,[-1]]],9,3],[[[136,[-1]]],9,3],[[[136,[-1]]],9,3],[[[136,[-1]]],9,3],[[[136,[-1]]],9,3],[[[136,[-1]]],9,3],[[[136,[-1]]],9,3],[[[136,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[137,137],[[[138,[-1]]],[[138,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[138,[-1]],[138,[-1]]],26,3],[[],137],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[137]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[138,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[137,137],9],[[[138,[-1]],[138,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[137,11],12],[[137,11],12],[[[138,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[52,[139]]],[[27,[-1]]],[]],[140,-1,[]],[93,-1,[]],[141,-1,[]],[142,-1,[]],[143,-1,[]],[144,-1,[]],[145,-1,[]],[14,-1,[]],[-1,137,[]],[[-1,-2],14,[16,17],18],[[[138,[-1]],-2],2,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,29,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],-1,[]],[[],-1,[]],[[[138,[-1]],[138,[-1]]],[[27,[26]]],3],[[]],[[]],[[137,-1],7,28],[[[138,[-1]],-2],7,3,28],[-1,[[35,[139]]],[]],[-1,[[27,[140]]],[]],[-1,[[27,[93]]],[]],[-1,[[27,[141]]],[]],[-1,[[27,[142]]],[]],[-1,[[27,[143]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[137,[[27,[80]]]],[-1,29,[]],[-1,[[27,[146]]],[]],[-1,146,[]],[-1,[[27,[144]]],[]],[-1,[[27,[145]]],[]],[-1,145,[]],[-1,[[27,[14]]],[]],[-1,14,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[],[[52,[137]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[117,[-1]]],[[148,[-1,147]]],3],[[[117,[-1]]],[[148,[-1,149]]],3],[[[117,[-1]]],[[148,[-1,150]]],3],[[[117,[-1]]],[[148,[-1,151]]],3],[[[152,[-1]],[52,[-1]]],[[2,[[35,[-1]],-1]]],3],[153,153],[[[117,[-1]]],[[117,[-1]]],[4,3]],[[[115,[-1]]],[[115,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[115,[-1]],[72,[-1]]],-1,3],[[[117,[-1]],153],[[152,[-1]]],3],0,0,[[],[[117,[-1]]],3],[[],[[115,[-1]]],[108,3]],[[],[[116,[-1]]],[108,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[153,11],12],[[[152,[-1]],11],12,[13,3]],[[[117,[-1]],11],12,[13,3]],[[[115,[-1]],11],12,[13,3]],[[[116,[-1]],11],12,[13,3]],[-1,-1,[]],[5,153],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[116,[-1]],[138,[-1]]],[[27,[[72,[-1]]]]],3],[[[115,[-1]],[72,[-1]]],-1,3],[[[115,[-1]],[72,[-1]]],-1,3],[[[115,[-1]],[72,[-1]]],-1,3],[[[115,[-1]],[72,[-1]]],-1,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[[116,[-1]],[138,[-1]],[72,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[72,[-2]]],[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[154,[-1,-2,-3]]],[[35,[-1]]],[155,108,123,156,13],123,3],[[[154,[-1,-2,-3]],[34,[-3]]],2,[155,108,123,156,13],123,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[157,[-1]],[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],122]]],3],[[[159,[[158,[-1]]]],[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],122]]],3],[[[160,[-1]],74,[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],122]]],3],[[[154,[74,[158,[-1]],-1]],74,[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],122]]],3],[[[160,[-1]],74,[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],119]]],3],[[[154,[74,[158,[-1]],-1]],74,[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],119]]],3],0,0,[[[161,[-1,-3,-2]],[34,[-2]],[152,[-2]]],[[162,[-2]]],155,3,[[163,[-2]]]],0,0,0,[[[159,[-1]]],[[159,[-1]]],4],[[[158,[-1]]],[[158,[-1]]],[4,3]],[[[164,[-1]]],[[164,[-1]]],[4,3]],[[[165,[-1]]],[[165,[-1]]],[4,3]],[[[166,[-1]]],[[166,[-1]]],[4,3]],[74,74],[75,75],[[[154,[-1,-2,-3]]],[[154,[-1,-2,-3]]],[4,155],4,[4,3]],[[[161,[-1,-3,-2]]],[[161,[-1,-3,-2]]],[4,155],[4,3],[4,[163,[-2]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[157,[-1]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[159,[[158,[-1]]]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,0,[[[160,[-1]],74,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[154,[74,[158,[-1]],-1]],74,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,0,0,[[],74],[[],75],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[159,[-1]],[159,[-1]]],9,10],[[[158,[-1]],[158,[-1]]],9,[10,3]],[[[166,[-1]],[166,[-1]]],9,[10,3]],[[74,74],9],[[75,75],9],[[[154,[-1,-2,-3]],[154,[-1,-2,-3]]],9,[10,155],10,[10,3]],[[[161,[-1,-3,-2]],[161,[-1,-3,-2]]],9,[10,155],[10,3],[10,[163,[-2]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[160,[-1]],74,[48,[-1]],[48,[-1]],[48,[-1]],[34,[-1]]],[[48,[-1]]],3],[[[154,[74,[158,[-1]],-1]],74,[48,[-1]],[48,[-1]],[48,[-1]],[34,[-1]]],[[48,[-1]]],3],[[[167,[-1]],[34,[-1]],[70,[-1]]],[[27,[[76,[-1]]]]],3],[[[159,[[166,[-1]]]],[34,[-1]],[70,[-1]]],[[27,[[76,[-1]]]]],3],[[[168,[-1]],75,[34,[-1]],[70,[-1]]],[[27,[[76,[-1]]]]],3],[[[154,[75,[166,[-1]],-1]],75,[34,[-1]],[70,[-1]]],[[27,[[76,[-1]]]]],3],[[[159,[-1]],11],12,13],[[[158,[-1]],11],12,[13,3]],[[[164,[-1]],11],12,[13,3]],[[[165,[-1]],11],12,[13,3]],[[[166,[-1]],11],12,[13,3]],[[74,11],12],[[75,11],12],[[[154,[-1,-2,-3]],11],12,[13,155],13,[13,3]],[[[161,[-1,-3,-2]],11],12,[13,155],[13,3],[13,[163,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[154,[-1,-3,-2]]],[[161,[-1,-3,-2]]],155,3,[[163,[-2]]]],[[[154,[-1,-2,-3]],-1],[[159,[-2]]],[155,108,123,156,13],123,3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[74,-1],2,19],[[75,-1],2,19],0,0,0,[-1,5,[]],[74,5],[75,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[167,[-1]],[34,[-1]],[76,[-1]]],[[70,[-1]]],3],[[[159,[[166,[-1]]]],[34,[-1]],[76,[-1]]],[[70,[-1]]],3],[[[168,[-1]],75,[34,[-1]],[76,[-1]]],[[70,[-1]]],3],[[[154,[75,[166,[-1]],-1]],75,[34,[-1]],[76,[-1]]],[[70,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],5],[[[161,[-1,-3,-2]],[34,[-2]]],[[35,[[2,[-1,27]]]]],155,3,[[163,[-2]]]],0,0,0,[[],[[154,[-1,-2,-3]]],[155,108,123,156,13],123,3],[[],[[154,[-1,-2,-3]]],[155,108,123,156,13],123,3],[[[159,[-1]]],[[154,[-2,-1,-3]]],123,[155,108,123,156,13],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[169,[-2]]],[],[]],[[-1,[34,[-2]]],[[78,[[169,[-2]]]]],[],[]],[[[158,[-1]],[34,[-1]]],[[78,[[169,[-1]]]]],3],[[[164,[-1]]],[[169,[-1]]],3],[[[165,[-1]]],[[169,[-1]]],3],[[[166,[-1]],[34,[-1]]],[[78,[[169,[-1]]]]],3],0,0,0,[[[157,[-1]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[159,[[158,[-1]]]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[160,[-1]],74,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[154,[74,[158,[-1]],-1]],74,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[154,[-1,-2,-3]]],[[35,[[159,[-2]]]]],[155,108,123,156,13],123,3],[[[154,[-1,-2,-3]]],5,[155,108,123,156,13],123,3],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[34,[-2]]],27,[],[]],[[[159,[-2]],[34,[-1]]],27,3,[[163,[-1]]]],[[[158,[-1]],[34,[-1]]],27,3],[[[166,[-1]],[34,[-1]]],27,3],[[[154,[-1,-2,-3]]],5,[155,108,123,156,13],123,3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[170,-2,[62,[-1]]],[[78,[[97,[-1]],46]]],3,[[47,[-1]]]],[[170,[52,[0]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[170,[52,[[63,[-1]]]],[62,[-1]],[171,[-1]],[35,[[63,[-1]]]],[53,[-1,-2]],5],[[78,[[2,[[172,[-1]],0]]]]],3,[[37,[-1]]]],[[170,[52,[[63,[-1]]]],[62,[-1]],[53,[-1,-2]],5],[[78,[[172,[-1]]]]],3,[[37,[-1]]]],[170,[[78,[2]]]],0,[170,170],[173,173],[174,174],[175,175],[176,176],[177,177],[178,178],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[174]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[170,170],9],[[173,173],9],[[174,174],9],[[175,175],9],[[176,176],9],[[177,177],9],[[178,178],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[170,11],12],[[173,11],12],[[173,11],12],[[174,11],12],[[174,11],12],[[175,11],12],[[176,11],12],[[177,11],12],[[178,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[174]]],3],[[[63,[-1]],[62,[-1]]],[[27,[175]]],3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[173,-1],2,19],[[174,-1],2,19],[[175,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[173,179],0,[[29,[35,[173]],5,176],[[78,[170]]]],[61,173],[[170,[62,[-1]]],5,3],[170,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[174,-1],7,28],0,0,[[170,-2,[62,[-1]],[172,[-1]],[97,[-1]],[0,[[180,[-1]]]],[53,[-1,-3]],[27,[[52,[[40,[[181,[-1]]]]]]]]],[[78,[[35,[[44,[-1]]]]]]],3,[[47,[-1]]],[[37,[-1]]]],[[170,-2,[62,[-1]],[172,[-1]],[53,[-1,-3]]],[[78,[2]]],3,[[47,[-1]]],[[37,[-1]]]],[174,-1,3],[174,-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[175,[62,[-1]]],[[63,[-1]]],3],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[144,[[78,[174]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[170,5],[[78,[170]]]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[180,[-1]]],[[180,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[],[[97,[-1]]],[108,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[97,[-1]],-1],[[78,[[45,[-1]]]]],3],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],170],[[[27,[[2,[170,[53,[-1,-2]]]]]],[63,[-1]],[62,[-1]],5],[[78,[[2,[[35,[[172,[-1]]]],5]]]]],3,[[37,[-1]]]],[[[27,[[2,[170,[53,[-1,-2]]]]]],[63,[-1]],[62,[-1]],5],[[78,[[2,[[35,[[63,[-1]]]],5,[35,[[63,[-1]]]]]]]]],3,[[37,[-1]]]],[[[27,[[2,[170,[53,[-1,-2]]]]]],[63,[-1]],[63,[-1]],[63,[-1]],[62,[-1]],5],[[78,[[2,[[35,[[172,[-1]]]],5]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]]],[[40,[[52,[170]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]],9],170,3,[[37,[-1]]]],0,0,0,0,0,0,[170,[[171,[-1]]],3],[[170,5],[[172,[-1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[183,[-1]]],[[183,[-1]]],[4,3]],[[[171,[-1]]],[[171,[-1]]],[4,3]],[[[172,[-1]]],[[172,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[],[[171,[-1]]],[108,3]],[[],[[172,[-1]]],[108,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],0,[[[171,[-1]],11],12,[13,3]],[[[172,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,0,[[],5],[[],5],[[],5],[[[172,[-1]]],[],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[170,[[171,[-1]]],3],[[[172,[-1]]],[],3],0,0,[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[184,[-1,-2]]],5,3,[[37,[-1]]]],[[[184,[-1,-2]]],5,3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]],5],[[184,[-1,-2]]],3,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[184,[-1,-2]]],[[27,[[42,[-1]]]]],3,[[37,[-1]]]],[[[184,[-1,-2]]],5,3,[[37,[-1]]]],[[[184,[-1,-2]]],[[184,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[[184,[-1,-2]],[62,[-1]]],[[42,[-1]]],3,[[37,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[62,[-1]]],[[35,[[63,[-1]]]]],3],[[[184,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[184,[-1,-2]]],[[27,[35]]],3,[[37,[-1]]]],[-1,-1,[]],[[5,[52,[[172,[-1]]]],[40,[[39,[-1,-2]]]]],[[35,[[184,[-1,-2]]]]],3,[[37,[-1]]]],[[-1,5,[53,[-2,-3]]],[[78,[35,54]]],55,3,[[37,[-2]]]],[[],5],[-1,-2,[],[]],[[],[[78,[[35,[-1]]]]],3],[[],[[7,[24,25]]]],[[5,27,[40,[[39,[-1,-2]]]],[41,[-1]]],[[184,[-1,-2]]],3,[[37,[-1]]]],[[[184,[-1,-2]]],5,[56,3],[[37,[-1]]]],[[[184,[-1,-2]]],27,3,[[37,[-1]]]],[[]],[[[184,[-1,-2]],[184,[-1,-2]]],9,3,[[37,[-1]]]],[[[184,[-1,-2]],5],[[184,[-1,-2]]],[56,3],[[37,[-1]]]],[[[184,[-1,-2]]],5,3,[[37,[-1]]]],[[[184,[-1,-2]]],[[35,[-1]]],3,[[37,[-1]]]],[[[184,[-1,-2]]],5,3,[[37,[-1]]]],[[[184,[-1,-2]]],[[57,[-1]]],[56,3],[[37,[-1]]]],[52,5],[[[184,[-1,-2]],-3,[27,[[45,[-1]]]],[52,[[45,[-1]]]]],[[78,[[2,[[27,[[45,[-1]]]],[35,[[45,[-1]]]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[184,[-1,-2]],-3],[[78,[2,46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[184,[-1,-2]],-3,[52,[[45,[-1]]]]],[[78,[[35,[[45,[-1]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[184,[-1,-2]],-3,52],[[78,[46]]],3,[[37,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1]],174],[[63,[-1]]],3],[140,[[63,[-1]]],3],[[[63,[-1]]],[[63,[-1]]],[4,3]],[[-1,-2],2,[],[]],[-1,[[63,[-1]]],3],[[[63,[-1]],[62,[-1]]],29,3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[63,[-2]]]]],8,[102,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[185,[-2]]]]],8,[102,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[],[[186,[-1]]],3],[[],[[63,[-1]]],3],[[[63,[-1]],[63,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[63,[-1]],11],12,[13,3]],[[[185,[-1]],11],12,[13,3]],[[[63,[-1]],[62,[-1]],94],29,3],[-1,-1,[]],[-1,-1,[]],[[[63,[-1]]],[[27,[-1]]],3],[[-1,-2],14,[16,17],18],[[[63,[-1]]],[[27,[5]]],3],[[[63,[-1]]],[[27,[5]]],3],[[[63,[-1]]],[[27,[5]]],3],[[[63,[-1]],-2],2,3,19],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[63,[-1]]],9,3],[[[63,[-1]]],9,3],[[[63,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[174,[[63,[-1]]],3],[-1,[[63,[-1]]],3],[14,[[63,[-1]]],3],[[]],[[]],[[[63,[-1]],-2],7,[103,3],28],[[[185,[-1]],-2],7,[103,3],28],[[[63,[-1]]],174,3],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[14,[[63,[-1]]],3],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[62,[-1]],-1,-1,[63,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[[[62,[-1]],[63,[-1]]],[[78,[[2,[[63,[-1]],[63,[-1]]]]]]],3],[[[62,[-1]],[63,[-1]]],[[78,[[63,[-1]]]]],3],[[[62,[-1]],[63,[-1]],[63,[-1]]],[[63,[-1]]],3],[[],[[62,[-1]]],[108,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[62,[-1]],5],[[27,[[2,[[63,[-1]],[63,[-1]]]]]]],3],[[[62,[-1]],5],[[27,[[2,[[63,[-1]],[63,[-1]],[63,[-1]]]]]]],3],[[[62,[-1]],5],[[27,[[2,[[63,[-1]],[63,[-1]],[63,[-1]],[63,[-1]]]]]]],3],[[[62,[-1]],[63,[-1]]],[[27,[131]]],3],[[[62,[-1]],[63,[-1]]],[[27,[29]]],3],[[[62,[-1]],[63,[-1]]],[[27,[131]]],3],[[[62,[-1]],[63,[-1]]],[[27,[131]]],3],[[[62,[-1]],5],[[27,[[35,[29]]]]],3],[[[62,[-1]],11],12,[13,3]],[-1,-1,[]],[[[62,[-1]]],[],3],[[[62,[-1]],[63,[-1]]],[[78,[[186,[-1]]]]],3],[[[62,[-1]],-1,[63,[-1]]],[[78,[[63,[-1]]]]],3],[[[62,[-1]],-1,[63,[-1]]],[[78,[[2,[-1,[186,[-1]]]]]]],3],[[[62,[-1]]],2,3],[[[62,[-1]]],2,3],[[],5],[[[62,[-1]]],[],3],[[[62,[-1]],174,[63,[-1]],[63,[-1]]],[[63,[-1]]],3],[[[62,[-1]],174,[63,[-1]],[63,[-1]],[186,[-1]]],[[63,[-1]]],3],[[[62,[-1]],174,[63,[-1]],[63,[-1]],[63,[-1]]],[[63,[-1]]],3],[[[62,[-1]],174,[63,[-1]],[63,[-1]],[63,[-1]],[186,[-1]]],[[63,[-1]]],3],[[[62,[-1]],174,[63,[-1]],[63,[-1]],[63,[-1]],[63,[-1]]],[[63,[-1]]],3],[[[62,[-1]],174,[63,[-1]],[63,[-1]],[63,[-1]],[63,[-1]],[186,[-1]]],[[63,[-1]]],3],[[[62,[-1]],[63,[-1]],[63,[-1]],[63,[-1]]],[[63,[-1]]],3],[[[62,[-1]],61],[[63,[-1]]],3],[[[62,[-1]]],[[63,[-1]]],3],[[[62,[-1]],61],[[63,[-1]]],3],[[[62,[-1]],131],[[63,[-1]]],3],[[[62,[-1]],[52,[29]]],[[63,[-1]]],3],[[[62,[-1]],[187,[-1]]],[[63,[-1]]],3],[[[62,[-1]],61],[[63,[-1]]],3],[-1,-2,[],[]],0,[[[62,[-1]],61],[[63,[-1]]],3],[[],[[7,[24,25]]]],[[[62,[-1]],[35,[[63,[-1]]]]],[[63,[-1]]],3],[[[62,[-1]],-1],[[27,[[2,[-1,[63,[-1]]]]]]],3],[[]],0,[[[62,[-1]],[63,[-1]],[63,[-1]]],[[78,[9]]],3],[[[62,[-1]]],[[78,[9]]],3],[[[62,[-1]],61],78,3],[[[62,[-1]],[114,[[113,[94]]]],61],[[78,[[63,[-1]]]]],3],[[[62,[-1]],[114,[[113,[94]]]],61],[[78,[[2,[188,[63,[-1]],9]],189]]],3],[[[62,[-1]],61],[[78,[[63,[-1]]]]],3],[[[62,[-1]],[52,[[63,[-1]]]]],[[78,[[35,[-1]]]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[190,11],12],[[190,191],29],[-1,-1,[]],[[190,[52,[191]]],[[78,[2]]]],[[],5],[[190,-1],191,[[130,[29]]]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[190,191],[191,190],[[]],[[190,61],[[27,[191]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[190,190],[[78,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,118,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[189,189],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,[[189,11],12],[[189,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[192,61],[-1,-2,[],[]],[-1,-2,[],[]],[192,192],[[-1,-2],2,[],[]],[192,140],[[192,188],[[193,[-1,[35,[139]]]]],3],[[],192],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[192,-1],29,[[194,[[52,[139]]]]]],[[192,192],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[192,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[192,140],9],[[],[[7,[24,25]]]],[[],[[0,[55]]]],[188,[[193,[-1,192]]],3],[[],[[0,[55]]]],[[],[[0,[55]]]],[192,[[0,[55]]]],[[],[[0,[55]]]],[192,[[32,[55]]]],[192,[[0,[55]]]],[[],[[0,[55]]]],[[]],[192,145],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,61,[195,[-1,-2]]],[[195,[-1,-2]]],[196,4,197],3],[[-1,198,[195,[-1,-2]]],[[195,[-1,-2]]],[196,4,197],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[199,[-1]]],[[199,[-1]]],[4,3]],[[[195,[-1,-2]]],[[195,[-1,-2]]],[4,197],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[199,[-1]],[199,[-1]]],9,[10,3]],[[[195,[-1,-2]],[195,[-1,-2]]],9,[10,197],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[[199,[-1]],11],12,3],[[[199,[-1]],11],12,[13,3]],[[[195,[188,-1]],11],12,3],[[[195,[-1,-2]],11],12,[13,197],[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,198],[[195,[-1,-2]]],[196,4,197],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[199,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[200,[-1,-2,[195,[-1,-3]]]],-4],[[200,[-1,-2,[195,[-1,-3]]]]],197,[],3,55],[[-1,[199,[-2]]],[[195,[-1,-2]]],197,3],[[[27,[-1]],-2,[199,[-3]]],[[200,[-2,-1,[195,[-2,-3]]]]],[],197,3],[[[195,[-1,-2]],[195,[-1,-2]]],[[195,[-1,-2]]],[196,4,197],3],[[]],[[]],[[[7,[-1,-2]],-3,-4],[[200,[-3,-1,[195,[-3,-5]]]]],[],[],197,55,3],[[-1,[199,[-2]]],[[200,[-1,-3,[195,[-1,-2]]]]],197,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[201,201],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[201,201],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[201,11],12],[-1,-1,[]],[[188,188],201],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[61,5,5,5,5],29],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[202,202],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[202,202],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[202,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[140,61],[[0,[55]]]],[[],[[0,[55]]]],[[140,9,61],[[0,[55]]]],[[140,9,61],[[0,[55]]]],[140,[[0,[55]]]],[[140,9,61],[[0,[55]]]],[[140,9,61],[[0,[55]]]],[[],[[0,[55]]]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[114,[[113,[94]]]],9],[[0,[55]]]],[[],[[0,[55]]]],[[],[[0,[55]]]],[188,[[193,[-1,188]]],3],[[[114,[[113,[94]]]],9,9],[[0,[55]]]],[[[114,[[113,[94]]]],9],[[0,[55]]]],[[],[[0,[55]]]],[192,[[0,[55]]]],[[[114,[[113,[94]]]],9],[[0,[55]]]],[[[114,[[113,[94]]]],9],[[0,[55]]]],[[[114,[[113,[94]]]],9],[[0,[55]]]],[[[114,[[113,[94]]]],9],[[0,[55]]]],[188,[[193,[-1,[35,[188]]]]],3],[188,[[193,[-1,[35,[188]]]]],3],[[],[[0,[55]]]],[[[114,[[113,[94]]]],9],[[0,[55]]]],[61,[[0,[55]]]],[61,[[0,[55]]]],[[],[[0,[55]]]],[[[114,[[113,[94]]]],9,9],[[0,[55]]]],[[],[[0,[55]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[40,[[39,[-1,-2]]]],[41,[-1]],5],-3,[],[],[]],[-1,[[27,[[42,[-2]]]]],[],[]],[-1,[[42,[-2]]],[],[]],[-1,-2,[],[]],[[],35],[-1,-2,[],[]],[[-1,5],5,[]],[-1,-2,[],[]],[[-1,5],5,[]],[-1,[[27,[35]]],[]],[[5,52,[40,[[39,[-1,-2]]]]],[[35,[-3]]],[],[],[]],[-1,[],[]],[[-1,5,[53,[-2,-3]]],[[7,[35,54]]],55,[],[]],[[-1,[48,[-2]],[48,[-2]],[34,[-2]],5,[40,[[53,[-2,-3]]]]],[[7,[[35,[[51,[[49,[-2]],[50,[-2]],-2,-3]]]],54]]],[],[],[]],[-1,2,[]],[-1,[],[]],[-1,[],[]],[[],[[7,[[35,[-1]]]]],[]],[-1,[[53,[-2,-3]]],[],[],[]],[[5,27,[40,[[39,[-1,-2]]]],[41,[-1]]],-3,[],[],[]],[[-1,5],5,[]],[[-1,5],9,[]],[[-1,5],9,[]],[[5,[53,[-1,-2]]],-3,[],[],[]],0,[[-1,[52,[-2]]],[[7,[[35,[[2,[-2,[203,[-3]]]]]],46]]],[],[],[]],[-1,[],[]],[-1,27,[]],[[-1,-1],9,[]],[-1,[[7,[9]]],[]],[-1,5,[]],[-1,[[35,[-2]]],[],[]],[[-1,61],7,[]],[-1,5,[]],[-1,5,[]],[52,5],0,[[-1,-3,52],[[7,[46]]],[],[],[[47,[-2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[5,[40,[[53,[-1,-2]]]]],-1,56,[[37,[-1]]]],[[5,[40,[[53,[-1,-2]]]]],[[2,[-3,[204,[-1]]]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[[[206,[-1,-2]]],[[206,[-1,-2]]],[56,4],[4,[207,[-1]]]],[[-1,-2],2,[],[]],[[[208,[-1,-2,-3]],[206,[-1,-3]]],[[7,[[208,[-1,-2,-3]],54]]],56,[[37,[-1]]],[[205,[-1,-2]]]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[206,[-2,-3]]]]],8,56,[[207,[-2]]]],[-1,[[7,[[208,[-2,-3,-4]]]]],8,56,[[37,[-2]]],[[205,[-2,-3]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[206,[-1,-2]],-3],[[95,[2]]],56,[[207,[-1]]],96],[[[209,[-1,-2,-3]],[206,[-1,-3]],5,[40,[[53,[-1,-2]]]]],[[7,[[2,[[208,[-1,-2,-3]],[35,[-1]],[35,[-1]],5]],54]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[[[206,[-1,-2]],[52,[139]]],[[27,[[52,[139]]]]],56,[[207,[-1]]]],[[[206,[-1,-2]]],5,56,[[207,[-1]]]],[[[209,[-1,-2,-3]],11],12,[13,56],[13,[37,[-1]]],[13,[205,[-1,-2]]]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[209,[-1,-2,-3]]],[[53,[-1,-2]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[[5,[53,[-1,-2]]],[[209,[-1,-2,-3]]],56,[[37,[-1]]],[[205,[-1,-2]]]],0,0,[[]],[[]],[[]],[[[209,[-1,-2,-3]],[206,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[7,[[2,[[208,[-1,-2,-3]],[35,[-1]],[35,[-1]],5]],54]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[[[206,[-1,-3]],[27,[[212,[[210,[-1]],[211,[-1]],-3,[204,[-1]]]]]],[52,[-3]],5,[35,[-1]],[40,[[53,[-1,-2]]]]],[[7,[[208,[-1,-2,-3]],54]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[[5,[40,[[53,[-1,-2]]]]],[[206,[-1,-3]]],56,[[37,[-1]]],[[207,[-1]],[205,[-1,-2]]]],[[[209,[-1,-2,-3]],[206,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[7,[[2,[[212,[[210,[-1]],[211,[-1]],-3,[204,[-1]]]],[35,[-3]],[35,[-1]],[35,[-1]],5]],54]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[[[209,[-1,-2,-3]]],5,56,[[37,[-1]]],[[205,[-1,-2]]]],[[[206,[-1,-2]],-3],7,56,[[207,[-1]]],28],[[[208,[-1,-2,-3]],-4],7,56,[[37,[-1]]],[[205,[-1,-2]]],28],0,[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[208,[-1,-2,-3]],[206,[-1,-3]],5,[52,[-1]],[52,[-1]]],[[7,[9,121]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[40,[[53,[-1,-2]]]],5],-1,56,[[37,[-1]]]],[[5,[40,[[53,[-1,-2]]]]],[[213,[[210,[-1]]]]],56,[[37,[-1]]]],[[[39,[-1,-2]],[41,[-1]]],5,3,[[37,[-1]]]],0,[[[39,[-1,-2]]],[[39,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[214,[-2,-3,-4]]]]],8,[102,56],[[37,[-2]]],[[205,[-2,-3]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[[215,[-1,-2]]],-1,56,[[216,[-1]]]],[5,2],[5,2],[5,2],[5,2],[[[217,[-1,-2,-3]],[215,[-1,-3]],5,[40,[[53,[-1,-2]]]]],[[7,[[2,[[214,[-1,-2,-3]],[35,[-1]],[35,[-1]],5,5]],54]]],56,[[37,[-1]]],[]],[[[217,[-1,-2,-3]],11],12,[13,56],[13,[37,[-1]]],[13,[205,[-1,-2]]]],[[[39,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[215,[-1,-2]],5],[],56,[[216,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[217,[-1,-2,-3]]],[[53,[-1,-2]]],56,[[37,[-1]]],[[205,[-1,-2]],[216,[-1]]]],[[[39,[-1,-2]]],[[40,[[53,[-1,-2]]]]],3,[[37,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[53,[-1,-2]]],[[217,[-1,-2,-3]]],56,[[37,[-1]]],[[205,[-1,-2]],[216,[-1]]]],[[[40,[[53,[-1,-2]]]],5],[[39,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[53,[-1,-2]]]],5],[[39,[-1,-2]]],3,[[37,[-1]]]],[[[39,[-1,-2]]],5,3,[[37,[-1]]]],[[]],[[]],[[]],[[]],0,[[[217,[-1,-2,-3]],[215,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[7,[[2,[[214,[-1,-2,-3]],[35,[-1]],[35,[-1]],5,5]],54]]],56,[[37,[-1]]],[]],[[[215,[-1,-3]],[27,[[218,[[210,[-1]],[211,[-1]]]]]],[52,[-3]],[35,[-1]]],[[7,[[2,[[214,[-1,-2,-3]],5]],54]]],56,[[37,[-1]]],[]],[[5,[40,[[53,[-1,-2]]]]],[[215,[-1,-3]]],56,[[37,[-1]]],[]],[[[217,[-1,-2,-3]],[215,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[7,[[2,[[218,[[210,[-1]],[211,[-1]]]],[35,[-1]],[35,[-1]],5]],54]]],56,[[37,[-1]]],[]],[[[217,[-1,-2,-3]]],5,56,[[37,[-1]]],[[205,[-1,-2]],[216,[-1]]]],[[[39,[-1,-2]]],5,3,[[37,[-1]]]],[[[214,[-1,-2,-3]],-4],7,[103,56],[[37,[-1]]],[[205,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[214,[-1,-2,-3]],[215,[-1,-3]],5,5,[52,[-1]],[52,[-1]]],[[7,[9,219]]],56,[[37,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-2,[34,[-1]],[27,[[48,[-1]]]]],[[7,[[2,[[45,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[27,[[48,[-1]]]]],[[7,[[2,[[45,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[220,[-1,141]]],[[27,[[220,[-1,141]]]]],3],[[[220,[-1,141]]],[[27,[[220,[-1,141]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[220,[-1,141]],141],[[220,[-1,141]]],3],[221,221],[[[220,[-1,-2]]],[[220,[-1,-2]]],[4,3],[4,68]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[221,221],26],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[221,221],9],[[[220,[-1,-2]],[220,[-1,-2]]],9,[10,3],[10,68]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[48,[-1]],[34,[-1]],94,-2],[[95,[2]]],3,96],[[[70,[-1]],[34,[-1]],94,-2],[[95,[2]]],3,96],[[221,11],12],[[[220,[-1,-2]],11],12,[13,3],[13,68]],[140,[[48,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[221,-1],2,19],[[[220,[-1,-2]],-3],2,3,68,19],[221,[[27,[5]]]],[[-1,5],[[220,[-2,-1]]],68,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[220,[-1,141]]],9,3],[[[220,[-1,141]]],9,3],[[[70,[-1]]],9,3],[[[220,[-1,93]]],9,3],[-1,9,[]],[[[48,[-1]]],9,3],[[[220,[-1,141]]],9,3],[[[220,[-1,141]]],9,3],[221,9],[221,9],[[[220,[-1,-2]]],9,3,68],[[-1,141],9,[]],[[[48,[-1]],141],9,3],[-1,9,[]],[[[48,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[93,221],[[70,[-1]]],3],[5,221],[[93,221],[[220,[-1,93]]],3],[-1,[[220,[-2,-1]]],68,3],[[-1,5],[[220,[-2,-1]]],68,3],[221,[[27,[5]]]],[[221,221],[[27,[26]]]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[222,[-1,-2,-3]]],[[7,[[40,[[206,[-1,-3]]]],223]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[[[222,[-1,-2,-3]]],[[7,[[224,[-1]],223]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[[[222,[-1,-2,-3]]],[[7,[[225,[-1]],223]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[[[222,[-1,-2,-3]]],[[7,[[215,[-1,-3]],223]]],56,[[37,[-1]]],[]],[[[222,[-1,-2,-3]],-4],[[7,[-5,223]]],56,[[37,[-1]]],[[205,[-1,-2]]],66,[]],0,0,0,0,[-1,118,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[223,11],12],[[223,11],12],[226,223],[-1,-1,[]],[227,223],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[223,[[27,[118]]]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[222,[-1,-2,-3]]],[[35,[[222,[-1,-2,-3]]]]],56,[[37,[-1]]],[]],[228,228],[229,229],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[222,[-1,-2,-3]],87],[[95,[230]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[228]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[229]]],8],[5,2],[5,2],[5,2],[[228,228],9],[[229,229],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[222,[-1,-2,-3]],11],12,[13,56],[13,[37,[-1]]],[13,[205,[-1,-2]]]],[[228,11],12],[[229,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[222,[-1,-2,-3]]],29,56,[[37,[-1]]],[[205,[-1,-2]]]],0,0,[[[222,[-1,-2,-3]]],[[40,[[53,[-1,-2]]]]],56,[[37,[-1]]],[[205,[-1,-2]]]],0,0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[40,[[53,[-1,-2]]]],9,228],[[222,[-1,-2,-3]]],56,[[37,[-1]]],[]],[[[222,[-1,-2,-3]],87],[[95,[230]]],56,[[37,[-1]]],[[205,[-1,-2]]]],[[]],[[]],[[]],0,0,[[[222,[-1,-2,-3]],5],[[222,[-1,-2,-3]]],56,[[37,[-1]]],[]],[[228,-1],7,28],[[229,-1],7,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[231,[-1,-2]]],[[231,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[],232],[[],232],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],0,[[[231,[-1,-2]],[48,[-1]],[34,[-1]]],[[78,[[2,[[48,[-1]],5,[70,[-1]],[35,[[48,[-1]]]]]]]]],3,[[37,[-1]]]],[[[231,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[233,[-1,-3,-2]],11],12,[13,3],[13,[37,[-1]]],[13,[234,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[[-1,[34,[-2]],[114,[[113,[94]]]],-3],[[78,[2]]],[],[],[[194,[235]],123]],[[-1,[34,[-2]],[114,[[113,[94]]]],188,-3],[[78,[188]]],[],[],[[194,[235]],123]],[[-1,[34,[-2]],[114,[[113,[94]]]],-3],[[78,[2]]],[],[],[[194,[235]]]],[[-1,[34,[-2]],[114,[[113,[94]]]],[48,[-2]],-3],[[78,[2]]],[],[],[[194,[235]],123]],[[[231,[-1,-2]],[34,[-1]],[114,[[113,[94]]]],[48,[-1]],-3],[[78,[2]]],3,[[37,[-1]]],[[194,[235]],123]],[[-1,[34,[-2]],94,[48,[-2]]],[[78,[[2,[[49,[-2]],[49,[-2]],5]]]]],[],[]],[[[231,[-1,-2]],[34,[-1]],94,[48,[-1]]],[[78,[[2,[[49,[-1]],[49,[-1]],5]]]]],3,[[37,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[[],29],[[],29],[[[34,[-1]],5,[27,[232]],[53,[-1,-2]]],-3,[],[],[]],[[[34,[-1]],5,[27,[232]],[53,[-1,-2]]],[[231,[-1,-2]]],3,[[37,[-1]]]],[[[34,[-1]],5,[27,[232]],[53,[-1,-2]]],[[231,[-1,-2]]],3,[[37,[-1]]]],[[[34,[-1]],5,[27,[232]],[53,[-1,-2]]],[[78,[[233,[-1,-3,-2]]]]],3,[[37,[-1]]],[[234,[-1,-2]]]],[[]],[[]],[[-1,29],29,[]],[[[231,[-1,-2]],29],29,3,[[37,[-1]]]],[-1,29,[]],[[[231,[-1,-2]]],29,3,[[37,[-1]]]],[[[27,[-1]],[53,[-2,-3]]],[[78,[2]]],[[194,[235]]],[3,102],[[37,[-2]]]],[[[53,[-1,-2]]],[[78,[2]]],[3,102],[[37,[-1]]]],[[[34,[-1]],[233,[-1,-3,-2]],[27,[-4]]],[[78,[2]]],3,[[37,[-1]]],[[234,[-1,-2]]],[[194,[235]]]],[[[233,[-1,-3,-2]]],[[78,[2]]],3,[[37,[-1]]],[[234,[-1,-2]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[94,190],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],94],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[94,11],12],[[94,191],29],[-1,-1,[]],[94,191],[[94,[52,[191]]],[[78,[2]]]],[[],5],[[],94],[[],94],[[94,-1],191,[[194,[61]]]],[[94,[52,[-1]],9,9],[[78,[191]]],[[194,[61]]]],[[94,[52,[-1]],9],[[78,[191]]],[[194,[61]]]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[61,131],[[],131],[190,94],[[]],[94,[[114,[[113,[94]]]]]],[[94,61],[[27,[191]]]],[[94,191],[[78,[2]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[94,190],[[78,[2]]]],[61,131],[-1,-2,[],[]],0,0,0,0,[-1,118,[]],[[[34,[-1]],9],[[48,[-1]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[34,[-1]],[48,[-1]]],[[7,[[48,[-1]],122]]],3],0,[[[34,[-1]],[48,[-1]]],[[7,[[2,[[48,[-1]],[48,[-1]]]],122]]],3],[[[34,[-1]],[48,[-1]]],[[7,[[48,[-1]],122]]],3],0,0,[122,122],[[[236,[-1]]],[[236,[-1]]],[4,3]],[[[237,[-1]]],[[237,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[34,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],9,3],0,0,0,[[],[[34,[-1]]],3],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],0,[5,2],[5,2],[5,2],[5,2],0,0,0,0,0,[[[34,[-1]]],[[237,[-1]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[136,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[140]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[138,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[70,[-1]]],[[27,[[76,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[131]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[35,[[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[131]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[1,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[29]]],3],[[[34,[-1]],[48,[-1]]],[[27,[131]]],3],[[[34,[-1]],[48,[-1]]],[[27,[131]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[135,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[15]]],3],[[[34,[-1]],[69,[-1]]],[[27,[[70,[-1]]]]],3],[[[34,[-1]],[77,[-1]]],[[27,[[48,[-1]]]]],3],[[[34,[-1]],11],12,[13,3]],[[122,11],12],[[122,11],12],[[[236,[-1]],11],12,[13,3]],[[[237,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[34,[-1]]],[[70,[-1]]],3],[[[34,[-1]]],[[70,[-1]]],3],[[[34,[-1]]],[[70,[-1]]],3],[[[34,[-1]]],[],3],[[[34,[-1]]],[[70,[-1]]],3],[[[34,[-1]],[70,[-1]]],[[27,[[72,[-1]]]]],3],[[[34,[-1]],[135,[-1]]],[[27,[[72,[-1]]]]],3],[[[34,[-1]],141,-1],[[27,[[48,[-1]]]]],3],[[[34,[-1]],-2],[[27,[[48,[-1]]]]],3,[[130,[[1,[-1]]]]]],[[[34,[-1]],[48,[-1]]],[[27,[[77,[-1]]]]],3],[[[34,[-1]],[70,[-1]],[27,[[238,[-1]]]]],[[7,[[2,[[69,[-1]],[27,[[239,[-1]]]]]],122]]],3],[[[34,[-1]],[48,[-1]],[27,[[238,[-1]]]]],[[7,[[2,[[77,[-1]],[27,[[240,[-1]]]]]],122]]],3],0,0,[[[34,[-1]],[70,[-1]]],[[27,[[69,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[77,[-1]]]]],3],[[[34,[-1]],61],[[77,[-1]]],3],[[[34,[-1]],131],[[77,[-1]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[[34,[-1]],-1,[48,[-1]]],[[27,[[48,[-1]]]]],3],[[[34,[-1]],-1,[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]]],2,3],[[[34,[-1]]],2,3],0,0,[-1,[],[]],[[],5],[[],5],[[],5],[[],5],[[[34,[-1]]],[],3],[[[34,[-1]],140],[[48,[-1]]],3],[[[34,[-1]],-1,[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]]],[[70,[-1]]],3],[[[34,[-1]]],[[70,[-1]]],3],[[[34,[-1]]],[[70,[-1]]],3],[[[34,[-1]]],[[70,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[34,[-1]],141,-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-2],[[48,[-1]]],3,[[130,[[1,[-1]]]]]],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],61],[[48,[-1]]],3],[[[34,[-1]],131],[[48,[-1]]],3],[[[34,[-1]],[52,[29]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],9],[[48,[-1]]],3],[[[34,[-1]],[187,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[135,[-1]]],[[48,[-1]]],3],[[[34,[-1]],14],[[48,[-1]]],3],[[[34,[-1]],15],[[48,[-1]]],3],[[[34,[-1]],[69,[-1]],[238,[-1]]],[[27,[[70,[-1]]]]],3],[[[34,[-1]],[77,[-1]],[238,[-1]]],[[27,[[48,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[194,[61]]]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,0,0,0,0,0,[[[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],0,[[[34,[-1]],[70,[-1]]],[[70,[-1]]],3],0,[[],[[34,[-1]]],3],[[[34,[-1]]],[[237,[-1]]],3],[[[34,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[130,[[1,[-1]]]]]],0,0,0,0,0,[[[34,[-1]],[48,[-1]]],[[27,[[2,[-1,[48,[-1]]]]]]],3],0,[[[34,[-1]],[48,[-1]]],[[7,[[2,[-1,[48,[-1]]]],122]]],3],[[]],[[]],[[]],[[]],0,0,[[[236,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[7,[9,122]]],3],[[[34,[-1]]],[[7,[9]]],3],0,0,[[[34,[-1]],61],7,3],[[[34,[-1]],61],[[7,[[48,[-1]],189]]],3],[[[34,[-1]],[114,[[113,[94]]]],188],[[7,[[2,[188,[48,[-1]],9]],189]]],3],[[[34,[-1]],[114,[[113,[94]]]],61],[[7,[[48,[-1]],189]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[48,[-1]]]]],3],0,[[[34,[-1]],[48,[-1]]],[[7,[[48,[-1]],122]]],3],[[[34,[-1]],61],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[194,[61]]]],0,[[[34,[-1]]],[[48,[-1]]],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[34,[-1]],[70,[-1]]],[[27,[[239,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[240,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[7,[[2,[[238,[-1]],[77,[-1]]]],122]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[[[34,[-1]],14],[[48,[-1]]],3],0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[34,[-1]],61],[[48,[-1]]],3],[[[236,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[34,[-1]],-1,-1],[[7,[[69,[-1]],122]]],3],0,[[[34,[-1]],-1,-1],[[7,[[77,[-1]],122]]],3],0,[[[236,[-1]]],[[77,[-1]]],3],0,0,0,0,0,[[]],[[131,131],[[27,[131]]]],[-1,-2,[],[]],[-1,-2,[],[]],[131,131],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[131]]],8],[[131,61],131],[131,[[27,[131]]]],[5,2],[[131,131],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[131,[52,[-1]]],131,[[194,[61]]]],[[131,11],12],[[131,11],12],[61,29],[131,29],[131,29],[131,29],[61,131],[-1,-1,[]],[61,[[27,[131]]]],[[-1,-2],14,[16,17],18],[[131,131],9],[[131,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[131,9],[131,9],[131,9],[131,9],[140,9],[[[52,[-1]]],131,[[194,[61]]]],[[[35,[29]]],131],[[],[[7,[24,25]]]],[131,[[78,[61]]]],[[[52,[-1]],9],131,[[194,[61]]]],[[[35,[29]],9],131],[[131,131],[[27,[26]]]],[131,[[52,[29]]]],[[]],[131,9],[9,131],[[],131],[[],131],[[131,-1],7,28],[131,2],[[[52,[-1]]],131,[[194,[61]]]],[[[35,[29]]],131],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[187,[-1]]],[[187,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[187,[-1]],[187,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[187,[-1]],11],12,3],[[[187,[-1]],11],12,[13,3]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[35,[-1]]],[]],[[],[[35,[142]]]],[[],[[35,[143]]]],[[],[[35,[61]]]],[[141,-2],[[45,[-1]]],3,[[47,[-1]]]],[[93,-2],[[45,[-1]]],3,[[47,[-1]]]],[[142,-2],[[45,[-1]]],3,[[47,[-1]]]],[[143,-2],[[45,[-1]]],3,[[47,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[141,141],[93,93],[142,142],[143,143],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[141]]],8],[-1,[[7,[93]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[142]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[143]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[141,141],9],[[93,93],9],[[142,142],9],[[143,143],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[141,11],12],[[141,11],12],[[93,11],12],[[93,11],12],[[142,11],12],[[142,11],12],[[143,11],12],[[143,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[-2]]],3,[]],[-1,[[27,[141]]],3],[-1,[[27,[93]]],3],[-1,[[27,[142]]],3],[-1,[[27,[143]]],3],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[-1,-2],14,[16,17],18],[[141,-1],2,19],[[93,-1],2,19],[[142,-1],2,19],[[143,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[141,9],[143,9],[[141,141],9],[141,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[142,142],[[27,[26]]]],[[143,143],[[27,[26]]]],[[]],[[]],[[]],[[]],[[141,-1],7,28],[[93,-1],7,28],[[142,-1],7,28],[[143,-1],7,28],[[-1,5],9,[]],[[142,5],9],[[143,5],9],[-1,61,[]],[142,61],[143,61],[-1,-2,[],3],[141,-1,3],[93,-1,3],[142,-1,3],[143,-1,[[241,[14]],242]],[-1,[],[]],[141],[93],[142],[143],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[144,[[7,[141]]]],[-1,[[7,[-2]]],[],[]],[144,[[7,[93]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[144,[[7,[142]]]],[-1,[[7,[-2]]],[],[]],[144,[[7,[143]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[15,15],15],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[15,15],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[15]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[15,15],15],[5,2],[[15,15],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[15,11],12],[[15,11],12],[-1,-1,[]],[14,15],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[15,9],[[],[[7,[24,25]]]],[[15,15],15],[[15,15],[[27,[26]]]],[[]],[[15,15],15],[[15,-1],7,28],[[15,15],15],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[[-1,[34,[-2]],94,-3],[[95,[2]]],[],[],96],[[-1,[34,[-2]],94],29,[],[]],[[-1,[34,[-2]]],29,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,139],[243,243],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[243,243],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[243,11],12],[[243,11],12],[-1,-1,[]],[[[52,[139]]],[[78,[243]]]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[52,[139]]],[[27,[5]]]],0,[243,139],[139,9],[139,9],[243,[[35,[139]]]],[-1,-2,[],[]],[-1,29,[]],[5,[[35,[139]]]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,118,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,244,21],[-1,244,21],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[244,11],12],[[244,11],12],[-1,-1,[]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],0,[-1,29,[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,61,[52,[61]],-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,61,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,61,[52,[61]],-1],7,246],[[245,5,-1],7,246],[[245,61,5,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,-1],7,246],[[245,61,-1],7,246],[5,2],[[245,11],12],[-1,-1,[]],[243,[[7,[-1,244]]],102],[243,245],[[],5],[-1,-2,[],[]],[245,9],[[],[[7,[24,25]]]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[247,7],[247,7],[247,7],[248,7],[249,7],[250,7],[250,7],[[251,11],12],[[247,11],12],[[248,11],12],[[249,11],12],[[250,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[251,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[[251,9],7],[[251,[52,[139]]],7],[[251,140],7],[[247,-1],[[7,[2]]],[103,17]],[[247,-1],[[7,[2]]],[103,17]],[[251,252],7],[[251,253],7],[[247,-1],[[7,[2]]],[103,17]],[[249,-1],[[7,[2]]],[103,17]],[[250,61,-1],[[7,[2]]],[103,17]],[[250,61,-1],[[7,[2]]],[103,17]],[[251,254],7],[[251,255],7],[[251,256],7],[[251,257],7],[[248,-1],[[7,[2]]],[103,17]],[[251,[27,[5]]],7],[[251,61,-1],7,[103,17]],[[251,61,145,61,-1],7,[103,17]],[251,7],[[251,[27,[5]]],7],[[251,-1],7,[103,17]],[[251,61],7],[[251,61,5],7],[[251,61,145,61,5],7],[[251,5],7],[[251,61,5],7],[[251,61,145,61,5],7],[[251,144],7],[[251,145],7],[[251,14],7],[[251,139],7],[251,7],[[251,61],7],[[251,61,145,61],7],[[248,-1],[[7,[2]]],[103,17]],[-1,[[7,[243,244]]],103],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[239,[-1]]],[[239,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[239,[-2]]]]],8,[102,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[239,[-1]],[239,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[239,[-1]],11],12,[13,3]],[-1,-1,[]],[[[239,[-1]]],[[72,[-1]]],3],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[239,[-1]],-2],7,[103,3],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[239,[-1]],[115,[-1]]],[[69,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[240,[-1]]],[[240,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[240,[-2]]]]],8,[102,3]],[5,2],[[[240,[-1]],[240,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[240,[-1]],11],12,3],[[[240,[-1]],11],12,[13,3]],[-1,-1,[]],[[[34,[-1]],[48,[-1]]],[[27,[[240,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[240,[-1]],-2],7,[103,3],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[240,[-1]],[115,[-1]]],[[77,[-1]]],3],0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[67,[-1,-2]]],[[67,[-1,-2]]],[4,68],[4,3]],[[-1,-2],2,[],[]],[[[67,[-1,-2]],[67,[-1,-2]]],26,68,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[67,[-2,-3]]]]],8,[102,68],[102,3]],[5,2],[[],[[67,[174,-1]]],3],[[[67,[-1,-2]],[67,[-1,-2]]],9,[10,68],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[67,[-1,-2]],11],12,[68,21],3],[[[67,[-1,-2]],11],12,[13,68],[13,3]],[-1,-1,[]],[61,[[7,[[67,[-1,-2]],258]]],68,3],[61,[[7,[[77,[-1]],122]]],3],[61,[[7,[[67,[141,-1]],122]]],3],[[-1,-2],[[67,[-1,-2]]],68,3],[[-1,-2],14,[16,17],18],[[[67,[-1,-2]],-3],2,68,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[67,[-1,-2]]],[[72,[-2]]],68,3],[[],[[7,[24,25]]]],[[[67,[-1,-2]],[67,[-1,-2]]],[[27,[26]]],68,3],[[[67,[-1,-2]]],[[2,[-2,-2]]],68,3],[[]],[[[67,[-1,-2]],-3],7,[103,68],[103,3],28],[[[67,[-1,-2]]],-1,68,3],[[[67,[-1,-2]]],-2,68,3],[[[67,[-1,-2]]],29,68,3],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[[67,[-1,-2]]],-2,68,3],[-1,-2,[],[]],0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[238,[-1]]],[[238,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,[[],[[238,[-1]]],[108,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[238,[-2]]]]],8,[102,3]],[5,2],[[[238,[-1]],[238,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[238,[-1]],11],12,[13,3]],[-1,-1,[]],[[[238,[-1]],[69,[-1]]],[[27,[[239,[-1]]]]],3],[[[238,[-1]],[77,[-1]]],[[27,[[240,[-1]]]]],3],[[[77,[-1]]],[[27,[[240,[-1]]]]],3],[[],5],[[[238,[-1]],[34,[-1]],[48,[-1]]],[[27,[[77,[-1]]]]],3],[[[238,[-1]],[77,[-1]],[27,[[240,[-1]]]]],[[27,[[27,[[240,[-1]]]]]]],3],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[238,[-1]]],3],[[[34,[-1]],[48,[-1]]],[[2,[[238,[-1]],[27,[[77,[-1]]]]]]],3],[[[238,[-1]],[115,[-1]]],[[77,[-1]]],3],[[]],[[[238,[-1]],61,[115,[-1]]],[[2,[[77,[-1]],[240,[-1]]]]],3],[[[238,[-1]],131,[115,[-1]]],[[2,[[77,[-1]],[240,[-1]]]]],3],[[[238,[-1]],-2],7,[103,3],28],[-1,-2,[],[]],[[[238,[-1]]],[[34,[-1]]],3],[[[238,[-1]],[77,[-1]]],[[7,[[2,[[34,[-1]],[48,[-1]]]],122]]],3],[[[34,[-1]]],[[238,[-1]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Num",0],[15,"tuple"],[8,"LurkField",1657],[8,"Clone",5026],[15,"usize"],[3,"With",5027],[4,"Result",5028],[8,"Deserializer",5029],[15,"bool"],[8,"PartialEq",5030],[3,"Formatter",5031],[6,"Result",5031],[8,"Debug",5031],[15,"u64"],[4,"UInt",4474],[8,"Hash",5032],[8,"Sized",5033],[8,"BuildHasher",5032],[8,"Hasher",5032],[3,"IndentedSection",5034],[8,"Display",5031],[8,"Send",5033],[8,"Sync",5033],[3,"Layout",5035],[3,"LayoutError",5035],[4,"Ordering",5030],[4,"Option",5036],[8,"Serializer",5037],[3,"String",5038],[3,"TypeId",5039],[3,"Global",5040],[3,"Box",5041],[8,"Any",5039],[3,"Store",3857],[3,"Vec",5042],[3,"MultiFrame",105],[8,"Coprocessor",735],[3,"CircuitFrame",105],[4,"FoldingConfig",3392],[3,"Arc",5043],[4,"Meta",1196],[3,"WitnessCS",5044],[3,"GlobalAllocations",213],[3,"AllocatedPtr",300],[3,"AllocatedNum",5045],[4,"SynthesisError",5046],[8,"ConstraintSystem",5046],[6,"Ptr",3503],[3,"IO",1196],[3,"Witness",1196],[3,"Frame",1196],[15,"slice"],[3,"Lang",1440],[4,"ProofError",1101],[8,"Fn",5047],[8,"CurveCycleEquipped",3283],[6,"C2",3392],[3,"AllocatedContPtr",300],[6,"ConsCircuitWitness",1901],[6,"ContCircuitWitness",1901],[15,"str"],[3,"Store",2864],[4,"Ptr",2783],[4,"Boolean",5048],[8,"PrimeField",5049],[8,"FnOnce",5047],[3,"ZPtr",4930],[8,"Tag",4236],[6,"ZContPtr",4930],[6,"ContPtr",3503],[8,"IntoHashComponents",1763],[15,"array"],[8,"AsAllocatedHashComponents",300],[4,"ConsName",1901],[4,"ContName",1901],[4,"Continuation",654],[6,"ZExprPtr",4930],[6,"Result",5050],[4,"Backend",416],[3,"PossibleValue",5051],[3,"Utf8PathBuf",5052],[3,"HashMap",5053],[3,"CliSettings",451],[4,"ConfigError",5054],[6,"Scalar",5055],[3,"Repl",484],[3,"Utf8Path",5052],[4,"Flow",505],[3,"Settings",505],[3,"PerfConfig",505],[3,"ParallelConfig",505],[3,"WitnessGeneration",505],[4,"ContTag",4236],[3,"State",3819],[6,"Result",5056],[8,"Write",5057],[3,"GlobalAllocator",2551],[3,"CircomCoprocessor",754],[8,"CircomGadget",207],[3,"Sha256Coprocessor",787],[4,"Sha256Coproc",787],[8,"Deserialize",5029],[8,"Serialize",5037],[4,"TrieCoproc",859],[3,"NewCoprocessor",859],[3,"LookupCoprocessor",859],[3,"InsertCoprocessor",859],[8,"Default",5058],[3,"Trie",859],[4,"Error",859],[3,"LookupProof",859],[3,"InsertProof",859],[3,"RefCell",5059],[3,"Rc",5060],[3,"PoseidonCache",1763],[3,"InversePoseidonCache",1763],[3,"HashConstants",1763],[8,"Error",5061],[4,"ReductionError",1101],[4,"LurkError",1101],[4,"NovaError",5062],[3,"Error",3857],[8,"Copy",5033],[4,"Status",1196],[3,"Evaluator",1196],[3,"Error",5031],[3,"FrameIt",1196],[3,"Take",5063],[3,"Binding",1440],[8,"Into",5064],[3,"Symbol",4128],[4,"Coproc",1440],[3,"DummyCoprocessor",1440],[3,"IndexMap",5065],[3,"Thunk",1572],[4,"Expression",1572],[4,"LanguageField",1657],[3,"FWrap",1657],[15,"u8"],[15,"char"],[4,"ExprTag",4236],[4,"Op1",4236],[4,"Op2",4236],[15,"u16"],[15,"u32"],[15,"u128"],[6,"U3",5066],[3,"PoseidonConstants",5067],[6,"U4",5066],[6,"U6",5066],[6,"U8",5066],[4,"HashConst",1763],[4,"HashArity",1763],[3,"HashWitness",1901],[8,"HashName",1901],[8,"Eq",5030],[6,"ConsStub",1901],[3,"Cons",1901],[4,"Stub",1901],[6,"ConsWitness",1901],[3,"CircuitHashWitness",1901],[6,"HashCircuitWitnessBlocks",1901],[8,"ContentAddressed",1901],[3,"ScalarCons",1901],[3,"ScalarCont",1901],[3,"Cont",1901],[6,"ContStub",1901],[6,"ContWitness",1901],[6,"Preimage",1901],[3,"Func",2278],[3,"Hints",2645],[3,"Frame",2645],[3,"Var",2278],[4,"Tag",2278],[4,"Lit",2278],[3,"Block",2278],[4,"Ctrl",2278],[4,"Op",2278],[6,"AString",2278],[4,"AllocatedVal",2551],[3,"SlotWitness",2551],[3,"SlotsAllocations",2551],[4,"Val",2645],[3,"MultiFrame",2735],[4,"ZChildren",2783],[6,"ZPtr",2783],[4,"Syntax",4197],[6,"Span",2958],[4,"Error",2958],[3,"Package",2930],[6,"SymbolRef",2930],[4,"LitBase",2999],[6,"ParseResult",2958],[8,"AsRef",5064],[3,"ParseError",3046],[8,"InputLength",5068],[8,"AsBytes",5068],[4,"ErrorKind",5069],[4,"ParseErrorKind",3046],[6,"IResult",5070],[4,"Pos",3128],[4,"StringFragment",3166],[3,"TestConstraintSystem",5071],[6,"C2",3283],[8,"MultiFrameTrait",3225],[3,"PublicParams",3283],[8,"StepCircuit",5072],[4,"Proof",3283],[3,"NovaProver",3283],[6,"G1",3283],[6,"G2",3283],[3,"RecursiveSNARK",5073],[3,"CircuitDigests",5074],[4,"Proof",3392],[3,"PublicParams",3392],[8,"StepCircuit",5075],[3,"SuperNovaProver",3392],[3,"RecursiveSNARK",5074],[4,"SuperNovaError",5076],[3,"GPtr",3503],[4,"RawPtr",3503],[3,"Instance",3648],[4,"Error",3617],[6,"SuperNovaAuxParams",3392],[6,"NovaCircuitShape",3283],[3,"Error",5077],[3,"Error",5056],[4,"Kind",3648],[3,"Metadata",3648],[3,"File",5078],[3,"ReplState",3747],[3,"Command",5079],[3,"Repl",3747],[8,"ReplTrait",3747],[3,"Path",5080],[3,"ConstantPtrs",3857],[3,"NamedConstants",3857],[3,"ZStore",4980],[4,"ZCont",4798],[4,"ZExpr",4878],[8,"From",5064],[8,"Field",5049],[4,"ZData",4520],[4,"SerdeError",4568],[3,"Deserializer",4601],[8,"Visitor",5029],[3,"SerializeCell",4653],[3,"SerializeMap",4653],[3,"SerializeTupleVariant",4653],[3,"StructSerializer",4653],[3,"Serializer",4653],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"Error",5050],[8,"ToInputs",100],[13,"Let",703],[13,"LetRec",703],[13,"Call0",703],[13,"Call",703],[13,"Call2",703],[13,"Tail",703],[13,"Lookup",703],[13,"Unop",703],[13,"Binop",703],[13,"Binop2",703],[13,"If",703],[13,"Emit",703],[8,"CoCircuit",735],[6,"ChildMap",859],[8,"Evaluable",1196],[8,"CAddr",1901],[13,"Pos",3160],[8,"EvaluationStore",3225],[8,"FrameLike",3225],[8,"Prover",3225],[8,"CEKState",3225],[8,"Provable",3225],[6,"C1Lurk",3283],[6,"SuperNovaPublicParams",3392],[8,"TypePredicates",3503],[8,"Op",4236],[8,"Write",4516],[13,"Let",4846],[13,"LetRec",4846],[13,"Call0",4846],[13,"Call",4846],[13,"Call2",4846],[13,"Tail",4846],[13,"Lookup",4846],[13,"Unop",4846],[13,"Binop",4846],[13,"Binop2",4846],[13,"If",4846],[13,"Emit",4846],[13,"Fun",4927]],"b":[[34,"impl-Debug-for-Num%3CF%3E"],[35,"impl-Display-for-Num%3CF%3E"],[36,"impl-From%3Cu64%3E-for-Num%3CF%3E"],[38,"impl-From%3CUInt%3E-for-Num%3CF%3E"],[107,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[108,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'_,+F,+C%3E"],[110,"impl-MultiFrame%3C\'a,+F,+C%3E"],[111,"impl-MultiFrameTrait%3C\'a,+F,+C%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[118,"impl-MultiFrame%3C\'a,+F,+C%3E"],[119,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'_,+F,+C%3E"],[144,"impl-MultiFrame%3C\'a,+F,+C%3E"],[145,"impl-MultiFrameTrait%3C\'a,+F,+C%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[169,"impl-MultiFrame%3C\'_,+F,+C%3E"],[170,"impl-MultiFrameTrait%3C\'a,+F,+C%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[179,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'_,+F,+C%3E"],[180,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[181,"impl-Circuit%3CF%3E-for-MultiFrame%3C\'_,+F,+C%3E"],[182,"impl-MultiFrame%3C\'a,+F,+C%3E"],[183,"impl-MultiFrameTrait%3C\'a,+F,+C%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[432,"impl-Debug-for-Backend"],[433,"impl-Display-for-Backend"],[684,"impl-Write%3CF%3E-for-Continuation%3CF%3E"],[685,"impl-Debug-for-Continuation%3CF%3E"],[965,"impl-From%3CLookupCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[966,"impl-From%3CNewCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[967,"impl-From%3CInsertCoprocessor%3CF%3E%3E-for-TrieCoproc%3CF%3E"],[1136,"impl-Display-for-ProofError"],[1137,"impl-Debug-for-ProofError"],[1138,"impl-Debug-for-ReductionError"],[1139,"impl-Display-for-ReductionError"],[1140,"impl-Debug-for-LurkError%3CF%3E"],[1141,"impl-Display-for-LurkError%3CF%3E"],[1142,"impl-From%3CNovaError%3E-for-ProofError"],[1143,"impl-From%3CSynthesisError%3E-for-ProofError"],[1144,"impl-From%3CError%3E-for-ProofError"],[1146,"impl-From%3CReductionError%3E-for-ProofError"],[1295,"impl-Display-for-IO%3CF%3E"],[1296,"impl-Debug-for-IO%3CF%3E"],[1297,"impl-Write%3CF%3E-for-IO%3CF%3E"],[1616,"impl-Write%3CF%3E-for-Expression%3CF%3E"],[1617,"impl-Debug-for-Expression%3CF%3E"],[1697,"impl-Display-for-LanguageField"],[1698,"impl-Debug-for-LanguageField"],[2419,"impl-Debug-for-Var"],[2420,"impl-Display-for-Var"],[2421,"impl-Debug-for-Tag"],[2422,"impl-Display-for-Tag"],[2488,"impl-Tag-for-Tag"],[2489,"impl-Tag"],[2736,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2737,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2771,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2772,"impl-Circuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2773,"impl-StepCircuit%3CF%3E-for-MultiFrame%3C\'a,+F,+C%3E"],[2890,"impl-Store%3CF%3E"],[2891,"impl-EvaluationStore-for-Store%3CF%3E"],[2916,"impl-Store%3CF%3E"],[2917,"impl-EvaluationStore-for-Store%3CF%3E"],[2918,"impl-EvaluationStore-for-Store%3CF%3E"],[2919,"impl-Store%3CF%3E"],[2978,"impl-Display-for-Error"],[2979,"impl-Debug-for-Error"],[3085,"impl-Display-for-ParseErrorKind%3CF%3E"],[3086,"impl-Debug-for-ParseErrorKind%3CF%3E"],[3087,"impl-Display-for-ParseError%3CLocatedSpan%3C%26str%3E,+F%3E"],[3088,"impl-Debug-for-ParseError%3CI,+F%3E"],[3628,"impl-Display-for-Error"],[3629,"impl-Debug-for-Error"],[3630,"impl-From%3CError%3E-for-Error"],[3632,"impl-From%3CError%3E-for-Error"],[3791,"impl-ReplState%3CF,+C%3E"],[3792,"impl-ReplTrait%3CF,+C%3E-for-ReplState%3CF,+C%3E"],[3946,"impl-Debug-for-Error"],[3947,"impl-Display-for-Error"],[3958,"impl-EvaluationStore-for-Store%3CF%3E"],[3959,"impl-Store%3CF%3E"],[4060,"impl-Store%3CF%3E"],[4061,"impl-EvaluationStore-for-Store%3CF%3E"],[4064,"impl-EvaluationStore-for-Store%3CF%3E"],[4065,"impl-Store%3CF%3E"],[4151,"impl-Display-for-Symbol"],[4152,"impl-Debug-for-Symbol"],[4219,"impl-Display-for-Syntax%3CF%3E"],[4220,"impl-Debug-for-Syntax%3CF%3E"],[4363,"impl-Display-for-ExprTag"],[4364,"impl-Debug-for-ExprTag"],[4365,"impl-Display-for-ContTag"],[4366,"impl-Debug-for-ContTag"],[4367,"impl-Debug-for-Op1"],[4368,"impl-Display-for-Op1"],[4369,"impl-Display-for-Op2"],[4370,"impl-Debug-for-Op2"],[4492,"impl-Display-for-UInt"],[4493,"impl-Debug-for-UInt"],[4537,"impl-Display-for-ZData"],[4538,"impl-Debug-for-ZData"],[4574,"impl-Error-for-SerdeError"],[4575,"impl-Error-for-SerdeError"],[4581,"impl-Debug-for-SerdeError"],[4582,"impl-Display-for-SerdeError"],[4688,"impl-SerializeTuple-for-SerializeCell"],[4689,"impl-SerializeSeq-for-SerializeCell"],[4690,"impl-SerializeTupleStruct-for-SerializeCell"],[4693,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4694,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4729,"impl-SerializeSeq-for-SerializeCell"],[4730,"impl-SerializeTuple-for-SerializeCell"],[4735,"impl-SerializeStruct-for-StructSerializer%3C\'a%3E"],[4736,"impl-SerializeStructVariant-for-StructSerializer%3C\'a%3E"],[4907,"impl-Display-for-ZExpr%3CF%3E"],[4908,"impl-Debug-for-ZExpr%3CF%3E"],[4949,"impl-Display-for-ZPtr%3CE,+F%3E"],[4950,"impl-Debug-for-ZPtr%3CE,+F%3E"]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[],"b":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"MetricsSinkHandle",0],[15,"tuple"],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
