var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLFLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","deserialize","drop","from","handle_meta","handle_non_meta","init","into","layout_raw","name","new","pointer_metadata","process_line","prompt","public_param_dir","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"clutch"],[27,"clap_builder::builder::command"],[28,"rkyv::with"],[29,"core::result"],[30,"pasta_curves::pallas"],[31,"lurk::eval::lang"],[32,"lurk::store"],[33,"lurk::state"],[34,"core::cell"],[35,"alloc::rc"],[36,"lurk::ptr"],[37,"anyhow"],[38,"std::path"],[39,"core::convert"],[40,"core::marker"],[41,"lurk::eval"],[42,"core::alloc::layout"],[43,"core::alloc::layout"],[44,"core::option"],[45,"lurk::eval::lang"],[46,"core::any"],[47,"alloc::alloc"],[48,"alloc::boxed"],[49,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[-1,-1,[]],[[[8,[6,[7,[6]]]],[9,[6]],[12,[[11,[10]]]],[13,[6]],-1],[[14,[5]]],[[16,[15]],17]],[[[8,[6,[7,[6]]]],[9,[6]],10,[13,[6]]],[[14,[[5,[[18,[6]],[18,[6]],2]]]]]],[[],2],[-1,-2,[],[]],[[],[[4,[19,20]]]],[[],21],[[[9,[6]],2,[22,[1]],[23,[6,[7,[6]]]]],[[8,[6,[7,[6]]]]]],[[]],[[[8,[6,[7,[6]]]],21],21],[[[8,[6,[7,[6]]]]],21],[[],24],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,25,[]],[[[27,[-1,26]]],[[27,[28,26]]],[]],[-1,28,[]],[-1,28,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Command",27],[15,"usize"],[3,"With",28],[4,"Result",29],[15,"tuple"],[6,"Scalar",30],[4,"Coproc",31],[3,"ClutchState",0],[3,"Store",32],[3,"State",33],[3,"RefCell",34],[3,"Rc",35],[6,"Ptr",36],[6,"Result",37],[3,"Path",38],[8,"AsRef",39],[8,"Copy",40],[3,"IO",41],[3,"Layout",42],[3,"LayoutError",42],[3,"String",43],[4,"Option",44],[3,"Lang",31],[3,"Utf8PathBuf",45],[3,"TypeId",46],[3,"Global",47],[3,"Box",48],[8,"Any",46]]},\
"fcomm":{"doc":"","t":"DEDDGRNDNDNEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMFMLLLLMLLLLLLLLLLLLLLLLMMLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLFLLLLLLLLLLLLKKKLLLLLLLLKK","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","file_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_param_dir","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","from","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","FileMap","FileStore","borrow","borrow_mut","data_dir","deref","deref_mut","deserialize","drop","fmt","from","get","init","into","layout_raw","new","pointer_metadata","read_from_json_path","read_from_path","read_from_stdin","set","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","write_to_json_path","write_to_path"],"q":[[0,"fcomm"],[639,"fcomm::error"],[684,"fcomm::file_map"],[714,"lurk::store"],[715,"lurk::ptr"],[716,"lurk::eval::lang"],[717,"lurk::eval::lang"],[718,"lurk::circuit::circuit_frame"],[719,"lurk::proof::nova"],[720,"lurk::proof::nova"],[721,"core::clone"],[722,"lurk::field"],[723,"lurk::ptr"],[724,"serde::de"],[725,"core::default"],[726,"rkyv::with"],[727,"serde::de"],[728,"core::option"],[729,"lurk::eval"],[730,"core::fmt"],[731,"core::fmt"],[732,"core::hash"],[733,"core::marker"],[734,"core::hash"],[735,"core::alloc::layout"],[736,"camino"],[737,"lurk::public_parameters::error"],[738,"std::path"],[739,"serde::ser"],[740,"core::any"],[741,"alloc::alloc"],[742,"alloc::boxed"],[743,"core::any"],[744,"lurk::z_data::serde"],[745,"std::io::error"],[746,"anyhow"],[747,"hex::error"],[748,"bellpepper_core::constraint_system"],[749,"lurk::store"],[750,"core::fmt"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,29,0,9,0,17,0,0,0,17,17,0,9,0,29,0,0,9,0,0,28,17,29,0,0,0,0,28,25,25,18,19,22,25,26,27,28,29,4,9,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,23,16,30,17,18,19,22,23,24,25,26,27,28,29,4,9,30,17,18,19,22,23,24,25,26,27,28,29,4,9,30,22,23,25,4,0,18,19,18,19,29,17,18,19,28,29,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,17,18,18,19,19,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,4,4,40,40,16,16,9,9,30,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,18,19,18,19,17,18,19,22,23,24,25,26,27,28,29,4,9,30,17,17,17,18,18,18,19,19,19,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,4,4,4,9,9,9,30,30,30,0,18,24,16,0,9,16,18,19,24,4,18,19,4,0,17,18,19,22,23,24,25,26,27,28,29,4,40,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,22,29,22,28,22,22,17,17,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,23,25,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,9,9,18,19,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,25,0,16,25,25,9,16,25,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,30,9,16,22,28,9,16,0,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,4,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,30,18,19,25,17,18,19,22,23,24,25,26,27,28,29,4,9,30,22,17,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,40,30,30,16,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,80,80,0,80,80,80,80,80,80,80,80,80,80,80,80,82,82,82,80,80,80,80,80,80,80,80,82,82],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[17,17],[18,18],[[[19,[-1]]],[[19,[-1]]],[20,21]],[[[22,[-1]]],[[22,[-1]]],[20,21]],[[[23,[-1]]],[[23,[-1]]],[20,21]],[[[24,[-1]]],[[24,[-1]]],[20,21]],[[[25,[-1]]],[[25,[-1]]],[20,21]],[26,26],[[[27,[-1]]],[[27,[-1]]],[20,21]],[[[28,[-1]]],[[28,[-1]]],[20,21]],[29,29],[[[4,[-1]]],[[4,[-1]]],[20,21]],[[[9,[-1]]],[[9,[-1]]],[20,21]],[[[30,[-1]]],[[30,[-1]]],[20,21]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],0,0,0,0,[[],32],0,0,0,0,[[29,[2,[-1]]],[[33,[-1]]],[21,34,35]],[17,5],[[],18],[[],[[19,[-1]]],[36,21]],[[],[[28,[-1]]],21],[[],29],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[17]]],38],[-1,[[11,[18]]],38],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[19,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[22,[-2]]]]],38,21],[-1,[[11,[[23,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[24,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[25,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[26]]],38],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[27,[-2]]]]],38,[39,21]],[-1,[[11,[[28,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[29]]],38],[-1,[[11,[[4,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[40]]],38],[-1,[[11,[[16,[-2]]]]],38,[39,41]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[9,[-2]]]]],38,[39,21]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[30,[-2]]]]],38,[39,21]],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],0,0,0,0,[[17,17],6],[[18,18],6],[[[19,[-1]],[19,[-1]]],6,[42,21]],[[[22,[-1]],[22,[-1]]],6,[42,21]],[[[23,[-1]],[23,[-1]]],6,[42,21]],[[[24,[-1]],[24,[-1]]],6,[42,21]],[[[25,[-1]],[25,[-1]]],6,[42,21]],[[26,26],6],[[[27,[-1]],[27,[-1]]],6,[42,21]],[[[28,[-1]],[28,[-1]]],6,[42,21]],[[29,29],6],[[[4,[-1]],[4,[-1]]],6,[42,21]],[[[9,[-1]],[9,[-1]]],6,[42,21]],[[[30,[-1]],[30,[-1]]],6,[42,21]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[[2,[-1]],[3,[-1]],5],[[11,[18,10]]],[21,34]],[[[24,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[21,34,35]],[[[2,[1]],[3,[1]],[43,[[3,[1]]]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[2,[-1]],[3,[-1]],[43,[[3,[-1]]]],5,[8,[-1,[7,[-1]]]]],[[11,[[31,[[44,[-1]],5]],10]]],21],[[[9,[-1]]],[[43,[18]]],21],[[[16,[1]],[2,[1]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],0,0,0,0,0,0,[[[4,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[21,34,35]],0,[[17,45],46],[[18,45],46],[[[19,[-1]],45],46,[47,21]],[[[22,[-1]],45],46,[47,21]],[[[23,[-1]],45],46,[47,21]],[[[24,[-1]],45],46,[47,21]],[[[25,[-1]],45],46,[47,21]],[[26,45],46],[[[27,[-1]],45],46,[47,21]],[[[28,[-1]],45],46,[47,21]],[[29,45],46],[[[4,[-1]],45],46,[47,21]],[[40,45],46],[[[9,[-1]],45],46,[47,21]],[[[30,[-1]],45],46,[47,21]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1]],[3,[-1]]],[[11,[[22,[-1]],10]]],[21,34,35]],[[[2,[-1]],[33,[-1]]],29,[21,34]],[-1,[[11,[[22,[-2]]]]],[[50,[[49,[48]]]]],21],[[[2,[-1]],[3,[-1]]],[[28,[-1]]],[21,34,35]],[[[2,[-1]],[3,[-1]],-1],[[11,[[22,[-1]],10]]],[21,34,35]],[[[2,[-1]],[3,[-1]]],[[11,[[31,[[22,[-1]],-1]],10]]],[21,34,35]],[[-1,-2],51,[52,53],54],[[17,-1],31,55],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],[[[9,[-1]]],6,21],[[[9,[-1]]],6,21],0,0,[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],0,[5,58],0,[[[2,[1]],[23,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[23,[1]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[9,[-1]]],[[43,[[25,[-1]]]]],21],[[[16,[1]],[2,[1]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[9,[-1]]],[[11,[[59,[-1]],10]]],[21,34,39]],[[[2,[1]],[9,[1]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[22,[-1]],[2,[-1]]],[[3,[-1]]],[21,34,35]],[[[28,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[3,[-1]]],[21,34,35]],[[[9,[-1]]],[[43,[[19,[-1]]]]],21],[[[16,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],[[],60],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],0,0,[[17,-1],11,63],[[18,-1],11,63],[[[19,[-1]],-2],11,[34,21],63],[[[22,[-1]],-2],11,21,63],[[[23,[-1]],-2],11,[34,21],63],[[[24,[-1]],-2],11,[34,21],63],[[[25,[-1]],-2],11,[34,21],63],[[26,-1],11,63],[[[27,[-1]],-2],11,[34,21],63],[[[28,[-1]],-2],11,[34,21],63],[[29,-1],11,63],[[[4,[-1]],-2],11,[34,21],63],[[40,-1],11,63],[[[16,[-1]],-2],11,[34,41],63],[[[9,[-1]],-2],11,[34,21],63],[[[30,[-1]],-2],11,[34,21],63],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],64,21],[-1,[[11,[-2]]],[],[]],[5,[[11,[17]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],0,0,0,[[[16,[1]],[14,[1,[12,[1,[7,[1]]]]]],[8,[1,[7,[1]]]]],[[11,[40,10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,69,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[5,31],[[10,45],46],[[10,45],46],[70,10],[-1,-1,[]],[71,10],[72,10],[73,10],[74,10],[61,10],[75,10],[[-1,-2],[[76,[-2,-3]]],[],[77,78,79],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[11,[56,57]]]],[[]],[10,[[43,[69]]]],[-1,64,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,65,[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[-1,68,[]],[-1,68,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],60],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[5,31],[[[80,[-1,-2]],45],46,[47,81],[47,82]],[-1,-1,[]],[[[80,[-1,-2]],-1],[[43,[-2]]],81,82],[[],5],[-1,-2,[],[]],[[],[[11,[56,57]]]],[-1,[[11,[[80,[-2,-3]],61]]],[[50,[62]]],81,82],[[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[[],[[11,[-1,61]]],[]],[[[80,[-1,-2]],-1,-2],[[11,[31,61]]],81,82],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,65,[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[-1,68,[]],[-1,68,[]],[-1,-2,[],[]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]]],"c":[],"p":[[6,"S1",0],[3,"Store",714],[6,"Ptr",715],[3,"CommittedExpression",0],[15,"usize"],[15,"bool"],[4,"Coproc",716],[3,"Lang",716],[4,"Claim",0],[4,"Error",639],[4,"Result",717],[3,"MultiFrame",718],[3,"NovaProver",719],[3,"PublicParams",719],[3,"Arc",720],[3,"Proof",0],[4,"ReductionCount",0],[3,"Evaluation",0],[3,"PtrEvaluation",0],[8,"Clone",721],[8,"LurkField",722],[3,"Commitment",0],[3,"OpeningRequest",0],[3,"Expression",0],[3,"Opening",0],[3,"ZBytes",0],[3,"ZStorePtr",0],[4,"LurkPtr",0],[4,"LurkCont",0],[3,"Cert",0],[15,"tuple"],[6,"CommittedExpressionMap",0],[6,"ContPtr",715],[8,"Serialize",723],[8,"DeserializeOwned",724],[8,"Default",725],[3,"With",726],[8,"Deserializer",724],[8,"Deserialize",724],[3,"VerificationResult",0],[8,"CurveCycleEquipped",719],[8,"PartialEq",727],[4,"Option",728],[3,"IO",729],[3,"Formatter",730],[6,"Result",730],[8,"Debug",730],[15,"u8"],[15,"slice"],[8,"AsRef",731],[15,"u64"],[8,"Hash",732],[8,"Sized",733],[8,"BuildHasher",732],[8,"Hasher",732],[3,"Layout",734],[3,"LayoutError",734],[6,"NovaProofCache",0],[6,"ZExprPtr",735],[3,"Utf8PathBuf",736],[4,"Error",737],[3,"Path",738],[8,"Serializer",723],[3,"String",739],[3,"TypeId",740],[3,"Global",741],[3,"Box",742],[8,"Any",740],[8,"Error",743],[4,"SerdeError",744],[3,"Error",745],[3,"Error",746],[4,"FromHexError",747],[4,"SynthesisError",748],[3,"Error",714],[3,"IndentedSection",749],[8,"Display",730],[8,"Send",733],[8,"Sync",733],[3,"FileMap",684],[8,"ToString",739],[8,"FileStore",684]]},\
"lurk":{"doc":"","t":"ENCRNCLLOLLOAALLAAAOLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCIAAKKDDLLLLLLLLLLMLLLLLLLMLLLLLLFLLLLLMLMLLLLLLLLLLMMLLLLLLMMLLLMMLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMAAAAIKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFFAAENNLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLHDENDNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLLLLKLLLLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGDELLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNIDDDDNNEENDMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLMLLLLLLLLLLLLLLLLLLLLLFLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLKLLLLKLLLLKLLLALLLLLLLKLLLMLLLMLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNNNNNENNNNNNNNNDNNENNNNNNNNENNNNNNNNENDLLMLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLALMLLLLMLLLLLLLALMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAENDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFNNNDNEDNELLMLLLLLLLLMLLLLLLMMLLLLLLLLLLLLLLLLLLMLLLLLLLMMMLLLLLMLLLLLLLLMLLMMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLMLLLLLLLMLLLLMLLMLMLLMLLLLLMLMLLLLLLLLLLLNNENNNNNNEGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLFFLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFQIQQQQQIQIQIIIIQQQQQKKKKKKLKLKKKKLAKKKKKLLLKALKKKKKKKKKKAKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLGGGQQQQNIGGGQGQGDGEDNGGLLLLLLMMFFLLLMMLLLLLLLLLLLLLLLLLLLMMMLLLLLLMMLLLLMLLLMMLMMMLLLLLFLMLLMMLLLLLLLLLLLLLLLLLLLLLLLGNENNEDNGDGLLLLLLLLFFLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAAAFFFFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDEDNNNMMLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLLLMLLLLLLLLKLKLLLLLMLLMKLKLLLLLKLKLFFFLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMLMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLLMMLLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLNNELLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","repl","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","arity","blank","blank","blank","borrow","borrow","borrow_mut","borrow_mut","cached_witness","cached_witness","circuit_index","circuit_index","clone","clone","clone_into","clone_into","compute_witness","count","deref","deref","deref_mut","deref_mut","deserialize","deserialize","destructure_list","drop","drop","emitted","fmt","fmt","folding_config","frames","frames","from","from","from_frame","from_frames","from_frames","get_evaluation_frames","get_store","init","init","input","input","input","into","into","io_to_scalar_vector","layout_raw","layout_raw","make_dummy","meta","next_pc","num_circuits","output","output","output","output","pointer_metadata","pointer_metadata","precedes","precedes","precedes","primary_circuit","public_input_size","public_inputs","reduction_count","secondary_circuit","significant_frame_count","store","store","synthesize","synthesize","synthesize","synthesize_frames","synthesize_frames","synthesize_frames_parallel","synthesize_frames_sequential","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","verify_groth16_proof","vzip","vzip","witness","circom","constraints","data","pointer","CircomGadget","into_circom_input","name","simple_evaluate","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","quote_ptr","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","get_config","parse_and_run","paths","repl","Backend","Nova","SnarkPackPlus","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","from","header","init","into","layout_raw","pointer_metadata","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","CONFIG","Config","Flow","Parallel","ParallelConfig","ParallelN","Sequential","WitnessGeneration","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","num_threads","parallelism","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","evaluate_lem","evaluate_lem_internal","evaluate_lem_simple","has_circuit","simple_evaluate","synthesize","synthesize_lem","synthesize_lem_internal","synthesize_lem_simple","synthesize_step_circuit","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","simple_evaluate","synthesize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","Trie","TrieCoproc","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Coprocessor","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Lurk","Meta","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","cont","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_sym_env","env","env","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_frames","get_coprocessor_z_ptr","get_frames","header","i","init","init","init","init","init","init","init","initial","input","input","input_size","into","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_coprocessor","is_error","is_error","is_error","is_incomplete","is_lurk","is_terminal","is_terminal","is_terminal","iter","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","log","log","log","maybe_emitted_expression","meta","new","next","output","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","add_coprocessor_lem","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_coprocessor","get_coprocessor_from_zptr","get_coprocessor_z_ptr","get_index","get_index_by_symbol","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup","lookup_by_sym","max_coprocessor_arity","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BLS12_381","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","length","names_and_ptrs","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_blank","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Cproc","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Null","Num","Op","Op1","Op2","Open","Or","Return","String","Sub","Symbol","Tag","Trunc","Var","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_field","from_ptr","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","input_params","interpreter","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","multiframe","name","name","new","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slot","store","synthesize_frame","synthesize_frame_aux","to_field","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zstore","AllocatedVal","Boolean","GlobalAllocator","Number","Pointer","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","get_allocated_const","init","init","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","build_frames","eval_step","evaluate","evaluate_simple","evaluate_with_env_and_cont","make_eval_step","make_eval_step_from_lang","traverse_frames","Boolean","FPair","FPtr","Frame","Pointer","PreimageData","Preimages","PtrVec","Val","blank","blank","blank","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone","clone_into","clone_into","clone_into","commitment","cproc_outputs","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","emitted","fmt","fmt","fmt","from","from","from","from","hash4","hash6","hash8","init","init","init","init","input","input","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","less_than","new_from_func","output","output","pc","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimages","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","MultiFrame","arity","blank","borrow","borrow_mut","cached_witness","cached_witness","clone","clone_into","compute_witness","cprocs","deref","deref_mut","deserialize","drop","emitted","fmt","frames","frames","from","from_frames","get_evaluation_frames","init","input","into","io_to_scalar_vector","lang","layout_raw","lurk_step","make_dummy","output","output","pointer_metadata","precedes","public_input_size","public_inputs","reduction_count","reduction_count","significant_frame_count","store","synthesize","synthesize","synthesize_frames","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Atom","Ptr","Tuple2","Tuple2","Tuple3","Tuple3","Tuple4","Tuple4","ZChildren","ZPtr","borrow","borrow","borrow_mut","borrow_mut","cast","char","clone","clone_into","comm","dbg_display","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","dummy","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt_to_string","from","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","init","into","into","is_nil","is_null","layout_raw","layout_raw","null","num","num_u64","pointer_metadata","pointer_metadata","serialize","serialize","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u64","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Store","borrow","borrow_mut","car_cdr","commit","cons","default","deref","deref_mut","deserialize","drop","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_string","fetch_sym","fetch_symbol","fetch_symbol_path","fmt","from","get_cont_terminal","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","init","initial_empty_env","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_fun","intern_lurk_symbol","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","intern_user_symbol","into","key","layout_raw","list","open","pointer_metadata","poseidon_cache","ptr_eq","ptr_eq","read","read","read_maybe_meta","read_with_default_state","to_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ZStore","add_comm","borrow","borrow_mut","default","deref","deref_mut","deserialize","deserialize","drop","fmt","from","get_children","init","into","layout_raw","open","pointer_metadata","populate_store","populate_z_store","serialize","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","from_upto","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","AllocatedIO","CEKState","CircuitFrame","ContPtr","ContPtr","Error","EvalFrame","EvaluationStore","FrameIO","FrameLike","GlobalAllocation","MultiFrameTrait","NIVCProver","Provable","Prover","Ptr","Ptr","PublicParams","Store","StoreError","blank","cached_witness","compute_witness","cont","emitted","env","expected_total_iterations","expr","frame_padding_count","frames","from_frames","get_cont_terminal","get_evaluation_frames","get_evaluation_frames","groth16","initial_empty_env","input","io_to_scalar_vector","lang","make_dummy","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","output","output","precedes","ptr_eq","public_input_size","public_inputs","read","reduction_count","reduction_count","significant_frame_count","supernova","synthesize_frames","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","outer_prove","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_count","prove","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify_groth16_proof","vzip","vzip","vzip","C1LEM","C1Lurk","C2","CE1","CE2","CK1","CK2","Compressed","CurveCycleEquipped","EE1","EE2","G1","G1","G2","G2","NovaCircuitShape","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached_witness","cached_witness","circuit_cache_key","circuits","clone","clone_into","compress","count","cprocs","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","folding_config","frames","frames","from","from","from","init","init","init","input","input","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","lurk_step","meta","new","next_pc","output","output","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","reduction_count","reduction_count","serialize","serialize","store","store","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","C2","Compressed","FoldingConfig","IVC","NIVC","Proof","PublicParams","Recursive","SuperNovaAuxParams","SuperNovaProver","SuperNovaPublicParams","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_cache_key","circuit_cache_keys","circuit_index","circuit_shapes","clone","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","digest","drop","drop","drop","drop","evaluate_and_prove","fmt","fmt","from","from","from","from","index","init","init","init","init","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pp","prove","prove_recursively","public_params","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","allocate_maybe_fun_unconstrained","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","disk_cache","error","instance","public_params","public_params_default_dir","supernova_aux_params","supernova_circuit_params","supernova_public_params","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Instance","Kind","Metadata","NovaPublicParams","SuperNovaAuxParams","SuperNovaCircuitParams","abomonated","abomonated","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cache_key","cache_key","circuit_param_instances","clone","clone","clone_into","clone_into","create","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","key","kind","kind","lang","lang","lang","layout_raw","layout_raw","layout_raw","new","open","pointer_metadata","pointer_metadata","pointer_metadata","rc","rc","reindex","serialize","serialize","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","env","eval_expr","fmt","fmt","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","layout_raw","layout_raw","limit","name","name","new","new","new","new","pointer_metadata","pointer_metadata","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","initial_empty_env","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","ptr_eq","quote","quotient","read","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","fmt_to_string_raw","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Cproc","Cproc","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[100,"lurk::circuit"],[105,"lurk::circuit::circuit_frame"],[204,"lurk::circuit::gadgets"],[208,"lurk::circuit::gadgets::circom"],[212,"lurk::circuit::gadgets::constraints"],[213,"lurk::circuit::gadgets::data"],[300,"lurk::circuit::gadgets::pointer"],[410,"lurk::cli"],[415,"lurk::cli::backend"],[439,"lurk::cli::repl"],[460,"lurk::config"],[558,"lurk::cont"],[607,"lurk::cont::Continuation"],[639,"lurk::coprocessor"],[656,"lurk::coprocessor::circom"],[657,"lurk::coprocessor::circom::non_wasm"],[688,"lurk::coprocessor::trie"],[906,"lurk::error"],[1001,"lurk::eval"],[1245,"lurk::eval::lang"],[1371,"lurk::expr"],[1456,"lurk::field"],[1559,"lurk::hash"],[1697,"lurk::hash_witness"],[2074,"lurk::lem"],[2346,"lurk::lem::circuit"],[2389,"lurk::lem::eval"],[2397,"lurk::lem::interpreter"],[2510,"lurk::lem::multiframe"],[2561,"lurk::lem::pointers"],[2640,"lurk::lem::store"],[2703,"lurk::lem::zstore"],[2731,"lurk::package"],[2759,"lurk::parser"],[2800,"lurk::parser::base"],[2847,"lurk::parser::error"],[2929,"lurk::parser::position"],[2961,"lurk::parser::position::Pos"],[2967,"lurk::parser::string"],[3005,"lurk::parser::syntax"],[3026,"lurk::proof"],[3085,"lurk::proof::groth16"],[3162,"lurk::proof::nova"],[3279,"lurk::proof::supernova"],[3389,"lurk::ptr"],[3495,"lurk::public_parameters"],[3504,"lurk::public_parameters::error"],[3535,"lurk::public_parameters::instance"],[3633,"lurk::repl"],[3705,"lurk::state"],[3743,"lurk::store"],[4013,"lurk::symbol"],[4082,"lurk::syntax"],[4121,"lurk::tag"],[4359,"lurk::uint"],[4401,"lurk::writer"],[4404,"lurk::z_data"],[4452,"lurk::z_data::serde"],[4485,"lurk::z_data::serde::de"],[4537,"lurk::z_data::serde::ser"],[4682,"lurk::z_data::z_cont"],[4730,"lurk::z_data::z_cont::ZCont"],[4762,"lurk::z_data::z_expr"],[4811,"lurk::z_data::z_expr::ZExpr"],[4814,"lurk::z_data::z_ptr"],[4863,"lurk::z_data::z_store"],[4909,"core::clone"],[4910,"core::result"],[4911,"serde::de"],[4912,"rkyv::with"],[4913,"core::cmp"],[4914,"core::fmt"],[4915,"core::fmt"],[4916,"core::marker"],[4917,"core::hash"],[4918,"core::fmt"],[4919,"core::alloc::layout"],[4920,"serde::ser"],[4921,"alloc::string"],[4922,"core::any"],[4923,"alloc::alloc"],[4924,"alloc::boxed"],[4925,"core::any"],[4926,"alloc::sync"],[4927,"bellpepper::util_cs::witness_cs"],[4928,"bellpepper_core::gadgets::num"],[4929,"bellpepper_core::constraint_system"],[4930,"bellpepper_core::constraint_system"],[4931,"blstrs"],[4932,"bellperson::groth16::verifying_key"],[4933,"bellperson::groth16::proof"],[4934,"blstrs::scalar"],[4935,"bellpepper_core::gadgets::boolean"],[4936,"ff"],[4937,"core::ops::function"],[4938,"std::collections::hash::map"],[4939,"anyhow"],[4940,"pasta_curves::pallas"],[4941,"camino"],[4942,"std::io"],[4943,"core::default"],[4944,"core::cell"],[4945,"alloc::rc"],[4946,"core::error"],[4947,"nova_snark::errors"],[4948,"core::marker"],[4949,"core::convert"],[4950,"indexmap::map"],[4951,"serde::de"],[4952,"neptune::poseidon"],[4953,"typenum::generated::consts"],[4954,"nom::traits"],[4955,"nom::internal"],[4956,"bellpepper_core::util_cs::test_cs"],[4957,"pairing"],[4958,"pairing"],[4959,"bellperson::groth16::aggregate::srs"],[4960,"rand_core"],[4961,"bellperson::groth16::aggregate::srs"],[4962,"nova_snark::traits::circuit"],[4963,"nova_snark::supernova"],[4964,"nova_snark::traits::circuit_supernova"],[4965,"nova_snark::supernova::error"],[4966,"nova_snark::supernova"],[4967,"std::fs"],[4968,"clap_builder::builder::command"],[4969,"std::path"],[4970,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","Global config for parallelism.","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","","Returns the argument unchanged.","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","","","","","","","","","","","","","","","","","","Return the circuit index assigned to this <code>MultiFrame</code>’s …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Make a dummy <code>MultiFrame</code>, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","","","","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Precompute the witness blocks for all the named hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","<code>Cproc(ys, c, xs)</code> binds <code>ys</code> to the results of coprocessor <code>c</code> …","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","LEM tags","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","LEM variables","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Cached version of Lurk’s default step function (IVC, no …","","","","","","Faster version of <code>build_frames</code> that doesn’t accumulate …","","","","A <code>Frame</code> carries the data that results from interpreting a …","","","<code>Preimages</code> hold the non-deterministic advices for hashes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","Make a dummy instance, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","","","","<code>ZChildren</code> keeps track of the children of <code>ZPtr</code>s, in case …","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Recursively hashes the children of a <code>Ptr</code> in order to …","","","Hashes <code>Ptr</code> trees from the bottom to the top, avoiding deep …","","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","The associated type of allocated input and output to the …","The State of a CEK machine.","The associated <code>CircuitFrame</code> type","the type for the Store’s continuation poitners","The associated <code>ContPtr</code> type","the type for the Store’s errors","The associated <code>Frame</code> type","A trait for a store of expressions","the type for the Frame’s IO","A Frame of evaluation in a CEK machine.","The associated type which manages global allocations","Trait to support multiple <code>MultiFrame</code> implementations.","Supertrait for <code>Prover</code> that also supports NIVC.","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","the type for the Store’s pointers","The associated <code>Ptr</code> type","The associated public parameters type for the prover.","The associated <code>Store</code> type","The error type for the Store type","Synthesize a blank circuit.","Returns a reference to the cached witness values","Populates a WitnessCS with the witness values for the …","the continuation (K)","the emitted frames","the environment (E)","Returns the expected total number of iterations for the …","the expression, or control word (C)","Returns the number of padding frames needed for a given …","Iterates through the Self::CircuitFrame instances","Create an instance from some <code>Self::Frame</code>s.","getting the terminal continuation pointer","Evaluates and generates the frames of the computation …","Evaluates and generates the <code>Frame</code>s of the computation …","An adapter to a Groth16 proving system implementation.","getting a pointer to the initial, empty environment","the input of the frame","Returns a public IO vector when equipped with the local …","Returns a reference to the Prover’s Lang.","Make a dummy instance, duplicating <code>self</code>’s final …","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","the output of the frame","The output of the last frame","Returns true if the supplied instance directly precedes …","hash-equality of the expressions represented by Ptrs","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","interpreting a string representation of an expression","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Counting the number of non-trivial frames in the evaluation","An adapter to a SuperNova proving system implementation.","Synthesize some frames.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Generates an outer Groth16 proof using the given …","","","","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","The number of reductions used in the proof.","","","","","","","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","LEM’s version of C1","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","The commitment engine type for the first curve in the …","The commitment engine type for the second curve in the …","Why the next 4 types?","The type of the commitment key used for points of the …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","Type alias for Nova Circuit Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","","Computes a cache key of the primary circuit. The point is …","Generates the circuits for the Nova proving system.","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Folding configuration specifies <code>Lang</code> and can be either <code>IVC</code> …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the SuperNova …","A proof for the intermediate steps of a recursive …","Type alias for SuperNova Aux Parameters with the curve …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","Computes a cache key of a supernova primary circuit. The …","Collects all the cache keys of supernova instance. We need …","Return the circuit index assigned in this <code>FoldingConfig</code> to …","The internal circuit shapes","","","","","","","","","","","","","","","","return the digest","","","","","Evaluates and proves the computation given the public …","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","","","","Public params for SuperNova.","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the running claim params for the SuperNova …","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the claim, which (for now), …","","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","Instances","","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Instances compute a cache-key for the objects they …","From ::nova, there are 3 “kinds” of public param …","What we put into the cache","Tag for nova::NovaPublicParams instances","Tag for supernova::SuperNovaAuxParams instances","Tag for [supernova::SuperNovaCircuitParams] instances","","","","","","","","","","","If this Instance is of Kind::SuperNovaAuxParams, then …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The key (or cache_key) of this Instance used to retrieve …","","","The key (or cache_key) of this Instance used to retrieve …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","","","","",""],"if":[0,0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[1,[-1]]],[[1,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,0,[5,-1,[]],[5,-1,[]],[-1,[[6,[[1,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[[1,[-1]],[1,[-1]]],2,3],[5,2],[[[1,[-1]],[1,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,0,0,[[[1,[-1]],11],12,3],[[[1,[-1]],11],12,[13,3]],[14,[[1,[-1]]],3],[15,[[1,[-1]]],3],[-1,-1,[]],[-1,[[1,[-1]]],3],0,[[-1,-2],15,[16,17],18],0,[[[1,[-1]],-2],2,3,19],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],9,3],[[[1,[-1]]],9,3],0,[[],[[6,[24,25]]]],0,0,0,0,[[],[[1,[-1]]],3],[[],[[1,[-1]]],3],[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,[[[1,[-1]],[1,[-1]]],[[27,[26]]],3],[[]],0,0,0,0,[[[1,[-1]],-2],6,3,28],0,0,0,[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[],5],[[-1,[34,[-2]]],[[35,[-2]]],[],[]],0,0,[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[],[[38,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1,-2]]],[[27,[[42,[-1]]]]],3,[[37,[-1]]]],0,[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[38,[-1,-2]]],[[38,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[[36,[-1,-2]]],[[36,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[36,[-1,-2]]],[[42,[-1]]],3,[[37,[-1]]]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-2,[34,[-1]],[43,[-1]],5,[44,[-1]]],[[6,[[2,[[35,[[44,[-1]]]],[45,[-1]]]],46]]],3,[[47,[-1]]]],[5,2],[5,2],[[],[[35,[[48,[-1]]]]],3],[[[38,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[36,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],0,[[[36,[-1,-2]]],[[27,[35]]],3,[[37,[-1]]]],0,[-1,-1,[]],[-1,-1,[]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]],[34,[-1]]],[[38,[-1,-2]]],3,[[37,[-1]]]],[[5,52,[40,[[39,[-1,-2]]]]],[[35,[[36,[-1,-2]]]]],3,[[37,[-1]]]],[[5,[52,[[51,[[49,[-1]],[50,[-1]],-1,-2]]]],[34,[-1]],[40,[[39,[-1,-2]]]]],[[35,[[36,[-1,-2]]]]],3,[[37,[-1]]]],[[-1,[48,[-2]],[48,[-2]],5,[53,[-2,-3]]],[[6,[[35,[[51,[[49,[-2]],[50,[-2]],-2,-3]]]],54]]],55,3,[[37,[-2]]]],[[[36,[-1,-2]]],[[34,[-1]]],3,[[37,[-1]]]],[[],5],[[],5],[[[38,[-1,-2]]],[],3,[[37,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[[35,[-1]]]]],3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[27,[[38,[-1,-2]]]],[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],0,0,[[[36,[-1,-2]]],5,[56,3],[[37,[-1]]]],[[[38,[-1,-2]]],[],3,[[37,[-1]]]],[[[36,[-1,-2]]],27,3,[[37,[-1]]]],0,0,[[]],[[]],[[[38,[-1,-2]],[38,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],[36,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],[36,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],5],[[36,[-1,-2]]],[56,3],[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],[[35,[-1]]],3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[36,[-1,-2]]],[[57,[-1]]],[56,3],[[37,[-1]]]],[52,5],0,0,[[[36,[-1,-2]],-3,[27,[[45,[-1]]]],[52,[[45,[-1]]]]],[[6,[[2,[[27,[[45,[-1]]]],[35,[[45,[-1]]]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3],[[6,[2,46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[52,[[45,[-1]]]]],[[6,[[35,[[45,[-1]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,52,[43,[-1]]],[[6,[46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[58,[-1]],[52,[[38,[-1,-2]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[58,[-1]],[52,[[38,[-1,-2]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[58,[-1]],[52,[[38,[-1,-2]]]],[27,[[35,[[2,[[59,[-1]],[60,[-1]]]]]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[36,[-1]],[62,[61]],[63,[61]]],[[6,[9,46]]],[[37,[64]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,[52,[[44,[-2]]]]],[[35,[[2,[29,[35,[-2]]]]]]],[],[]],[-1,65,[]],[[-1,[34,[-2]],[52,[[48,[-2]]]]],[[48,[-2]]],[],[]],[[-2,[45,[-1]],[45,[-1]]],[[6,[66,46]]],67,[[47,[-1]]]],0,[[-2,-1],[[45,[-1]]],3,[[47,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[43,[-1]]],[[43,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,0,0,0,0,0,[[[43,[-1]],11],12,[13,3]],[-1,-1,[]],0,0,[[],5],[-1,-2,[],[]],0,[[],[[6,[24,25]]]],0,0,0,[[-2,[34,[-1]]],[[6,[[43,[-1]],46]]],3,[[47,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[[-2,-3],[[6,[[44,[-1]],46]]],3,[[47,[-1]]],68],[[-2,-3],[[6,[[58,[-1]],46]]],3,[[47,[-1]]],68],[[-2,[69,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[70,[-1]]],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[71,[-1]]],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[48,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],-3],[[6,[[58,[-1]],46]]],3,[[47,[-1]]],68],[[[44,[-1]],-2,[44,[-1]]],[[6,[66,46]]],3,[[47,[-1]]]],[[[58,[-1]],-2,[58,[-1]]],[[6,[66,46]]],3,[[47,[-1]]]],[[-2,-3],[[6,[[44,[-1]],46]]],3,[[47,[-1]]],[[72,[-1]]]],[[[44,[-1]],-2,-1],[[6,[66,46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],-3],[[6,[[44,[-1]],46]]],3,[[47,[-1]]],68],[[-2,-1,[45,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,-1],[[6,[66,46]]],3,[[47,[-1]]]],[[[58,[-1]],-2,-1],[[6,[66,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,[34,[-1]]],[[6,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[-1,[[73,[[45,[-2]]]]],[],[]],[[[44,[-1]]],[[73,[[45,[-1]]]]],3],[[[58,[-1]]],[[73,[[45,[-1]]]]],3],[[-2,[34,[-1]],66],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[27,[[48,[-1]]]],[34,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[27,[[71,[-1]]]],[34,[-1]]],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[52,[[45,[-1]]]]],[[44,[-1]]],3],[[5,[52,[[45,[-1]]]]],[[58,[-1]]],3],[[[44,[-1]]],[[44,[-1]]],[4,67]],[[[58,[-1]]],[[58,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-2,[34,[-1]],[45,[-1]],[73,[74]]],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[45,[-1]],[44,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[44,[-1]],[44,[-1]],75,[0,[75,[0,[-1,[44,[-1]]]]]],66],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,76,[45,[-1]],[73,[74]],[0,[76,[0,[-1,[45,[-1]]]]]],66],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,76,[45,[-1]],[73,[74]],[0,[76,[0,[-1,[45,[-1]]]]]]],[[6,[[2,[[58,[-1]],[45,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[58,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[44,[-1]],-2,[44,[-1]]],2,3,[[47,[-1]]]],[[[58,[-1]],-2,[58,[-1]]],2,3,[[47,[-1]]]],[[[58,[-1]],[34,[-1]]],29,3],[[[44,[-1]],[34,[-1]]],29,3],[[[44,[-1]],11],12,3],[[[58,[-1]],11],12,3],[-1,-1,[]],[-1,-1,[]],[[[45,[-1]],[45,[-1]]],[[44,[-1]]],3],[[[45,[-1]],[45,[-1]]],[[58,[-1]]],3],[[[58,[-1]],[34,[-1]]],[[27,[[77,[-1]]]]],3],[[[58,[-1]],[34,[-1]]],[[27,[[71,[-1]]]]],3],[[[58,[-1]],[34,[-1]]],[[27,[[70,[-1]]]]],3],[[[44,[-1]]],[[45,[-1]]],3],[[[58,[-1]]],[[45,[-1]]],3],[[[44,[-1]],-2,66,[44,[-1]]],2,3,[[47,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]],-2],[[6,[66,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[66,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[66,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[66,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,[43,[-1]]],[[6,[66,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[66,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[66,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[66,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[66,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[6,[66,46]]],3,[[47,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[-2,66,[44,[-1]],[44,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,66,[58,[-1]],[58,[-1]]],[[6,[[58,[-1]],46]]],3,[[47,[-1]]]],[[-2,66,[69,[-1]],[69,[-1]]],[[6,[[44,[-1]],46]]],3,[[47,[-1]]]],[[]],[[]],[[[44,[-1]],[34,[-1]]],[[27,[[48,[-1]]]]],3],[[[44,[-1]]],[[45,[-1]]],3],[[[58,[-1]]],[[45,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]],[34,[-1]]],[[27,[[69,[-1]]]]],3],0,[[[27,[78]]],[[80,[[79,[29,29]]]]]],[[],[[80,[2]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[81,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[83,[82]],84],[[80,[2]]]],[[[34,[82]],5,5,81],[[83,[82]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[85,5,5],5],[[],85],[[],86],[[],87],[[],88],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[85,11],12],[[86,11],12],[[87,11],12],[[88,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[85,9],[85,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[85,5],0,[[]],[[]],[[]],[[]],0,0,0,0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[77,[-1]]],[[77,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[[77,[-1]]],89,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[77,[-1]],[77,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[77,[-1]],11],12,[13,3]],[[[77,[-1]],[34,[-1]],90,-2],[[91,[2]]],3,92],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[[77,[-1]]],[[71,[-1]]],3],[[[77,[-1]],-2],2,[16,3],19],[[],5],[[[77,[-1]],[34,[-1]]],[[2,[5,9]]],3],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],0,[-1,5,[]],[[-1,[34,[-2]],[48,[-2]],[48,[-2]],[71,[-2]]],[[49,[-2]]],[],[]],[[-1,[93,[-2]],[52,[[94,[-2]]]],[94,[-2]],[94,[-2]]],[[35,[[94,[-2]]]]],[],[]],[[-1,[93,[-2]],[52,[[94,[-2]]]]],[[35,[[94,[-2]]]]],[],[]],[[-1,[93,[-2]],[52,[[94,[-2]]]]],[[94,[-2]]],[],[]],[-1,9,[]],[[-1,[34,[-2]],[52,[[48,[-2]]]]],[[48,[-2]]],[],[]],[[-1,-3,[43,[-2]],[34,[-2]],[52,[[44,[-2]]]],[44,[-2]],[58,[-2]]],[[6,[[2,[[44,[-2]],[44,[-2]],[58,[-2]]]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[95,[-2]],[93,[-2]],66,[52,[[44,[-2]]]],[44,[-2]],[44,[-2]]],[[6,[[35,[[44,[-2]]]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[95,[-2]],[93,[-2]],66,[52,[[44,[-2]]]]],[[6,[[35,[[44,[-2]]]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[95,[-2]],[93,[-2]],66,[52,[[44,[-2]]]]],[[6,[[44,[-2]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[34,[-2]],[43,[-2]],[69,[-2]],[44,[-2]],[44,[-2]],[58,[-2]]],[[6,[[2,[[44,[-2]],[44,[-2]],[58,[-2]]]],46]]],[],[],[[47,[-2]]]],0,0,0,[[[96,[-1,-2]]],5,3,[[97,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[96,[-1,-2]]],[[96,[-1,-2]]],3,[[97,[-1]]]],[[-1,-2],2,[],[]],[-2,[[80,[[96,[-1,-2]]]]],3,[[97,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[96,[-1,-2]]],5,3,[[97,[-1]],13]],[[[96,[-1,-2]],11],12,[13,3],[13,[97,[-1]]]],[-1,-1,[]],[[[96,[-1,-2]]],9,3,[[97,[-1]],13]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[96,[-1,-2]]],65,3,[[97,[-1]]]],[-2,[[96,[-1,-2]]],3,[[97,[-1]]]],[[]],[[[96,[-1,-2]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3,[[97,[-1]],13]],[[[96,[-1,-2]],-3,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]]],[[80,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[97,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[98,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[98,[-1]]],[[98,[-1]]],[4,3]],[[[99,[-1]]],[[99,[-1]]],[4,3]],[[[100,[-1]]],[[100,[-1]]],[4,3]],[[[101,[-1]]],[[101,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[99,[-1]]],[102,3]],[[],[[100,[-1]]],[102,3]],[[],[[101,[-1]]],[102,3]],[[],[[103,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[99,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[100,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[101,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[103,[-1]]],-1,3],[[[98,[-1]]],5,3],[[[99,[-1]]],5,3],[[[100,[-1]]],5,3],[[[101,[-1]]],5,3],[[[98,[-1]],[34,[-1]],[48,[-1]],[48,[-1]],[71,[-1]]],[[49,[-1]]],3],[[[104,[-1]],11],12,13],[[[98,[-1]],11],12,[13,3]],[[[99,[-1]],11],12,[13,3]],[[[100,[-1]],11],12,[13,3]],[[[101,[-1]],11],12,[13,3]],[[[103,[-1]],11],12,[13,3]],[[[105,[-1]],11],12,[13,3]],[[[106,[-1]],11],12,[13,3]],[-1,-1,[]],[[[100,[-1]]],[[98,[-1]]],3],[[[99,[-1]]],[[98,[-1]]],3],[[[101,[-1]]],[[98,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[98,[-1]]],9,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[103,[-1]],-1,-1],[[6,[9,[104,[-1]]]]],3],[[[34,[-1]],[108,[[107,[90]]]],[53,[-1,[98,[-1]]]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[103,[-1]]],5,3],[[[103,[-1]],-1],[[6,[[27,[-1]],[104,[-1]]]]],3],[[[34,[-1]]],[[103,[-1]]],3],[[[34,[-1]],5],[[103,[-1]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[103,[-1]],-1,-1],[[6,[[2,[[106,[-1]],9]],[104,[-1]]]]],3],[[[103,[-1]],-1],[[6,[[105,[-1]],[104,[-1]]]]],3],[[[103,[-1]]],-1,3],[[[103,[-1]],5],5,3],[[[99,[-1]],-2],6,3,28],[[[100,[-1]],-2],6,3,28],[[[101,[-1]],-2],6,3,28],[[[98,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[99,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[100,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[101,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[98,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]]],[[6,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[105,[-1]],-1,-1,-1,[109,[-1]]],9,3],[[[106,[-1]],-1,-1,-1,[27,[-1]],-1,[109,[-1]]],9,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,110,[]],[-1,110,[]],[-1,110,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[111,111],[[[112,[-1]]],[[112,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[54,11],12],[[54,11],12],[[111,11],12],[[111,11],12],[[[112,[-1]],11],12,3],[[[112,[-1]],11],12,[13,3]],[-1,-1,[]],[113,54],[111,54],[46,54],[114,54],[113,111],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[54,[[27,[110]]]],[111,[[27,[110]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[49,[-1]]],[[49,[-1]]],[4,3]],[[[41,[-1]]],[[41,[-1]]],[4,3]],[[[51,[-1,-2,-3,-4]]],[[51,[-1,-2,-3,-4]]],[4,115],[4,115],[4,3],4],[116,116],[[[50,[-1]]],[[50,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[49,[-1]]],[[71,[-1]]],3],0,[[],[[41,[-1]]],3],[[],116],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[116]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[34,[-1]]],[[48,[-1]]],3],[[[49,[-1]]],[[48,[-1]]],3],0,[[[49,[-1]],[49,[-1]]],9,[10,3]],[[[41,[-1]],[41,[-1]]],9,[10,3]],[[[51,[-1,-2,-3,-4]],[51,[-1,-2,-3,-4]]],9,[10,115],[10,115],[10,3],10],[[116,116],9],[[[50,[-1]],[50,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[117,[-1,-2]]],[[6,[[2,[[49,[-1]],5,[35,[[48,[-1]]]]]],111]]],3,[[37,[-1]]]],[[[34,[-1]],65],[[6,[[48,[-1]],111]]],3],[[[49,[-1]]],[[48,[-1]]],3],0,[[[49,[-1]],[34,[-1]],90,-2],[[91,[2]]],3,92],[[[49,[-1]],11],[[6,[2,118]]],3],[[[49,[-1]],11],12,[13,3]],[[[41,[-1]],11],12,[13,3]],[[[51,[-1,-2,-3,-4]],11],12,[13,115],[13,115],[13,3],13],[[116,11],12],[[[119,[-1,-2,-3]],11],12,[13,115],[13,3],[13,[37,[-2]]]],[[[50,[-1]],11],12,[13,3]],[[[117,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[71,[-1]]],116,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[48,[-1]],[48,[-1]],[34,[-1]],5,-2,[53,[-1,-3]]],[[6,[[35,[[51,[[49,[-1]],[50,[-1]],-1,-3]]]],111]]],3,55,[[37,[-1]]]],[[[41,[-1]]],[[27,[[69,[-1]]]]],3],[[[117,[-1,-2]]],[[6,[[35,[[51,[[49,[-1]],[50,[-1]],-1,-2]]]],111]]],3,[[37,[-1]]]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[117,[-1,-2]]],[[49,[-1]]],3,[[37,[-1]]]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]]],[],3,[[37,[-1]]]],0,[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[[49,[-1]]],9,3],[[[51,[[49,[-1]],-2,-1,-3]]],9,3,115,[[37,[-1]]]],[116,9],[[[41,[-1]]],9,3],[-1,9,[]],[[[49,[-1]]],9,3],[116,9],[116,9],[[[41,[-1]]],9,3],[-1,9,[]],[[[49,[-1]]],9,3],[116,9],[[[117,[-1,-2]]],[[6,[[120,[[119,[[50,[-1]],-1,-2]]]],111]]],3,[[37,[-1]]]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[-1,[34,[-2]],5],2,[],[]],[[[49,[-1]],[34,[-1]],5],2,3],[[[51,[[49,[-1]],-2,-1,-3]],[34,[-1]]],2,3,115,[[37,[-1]]]],[[[49,[-1]],[34,[-1]]],[[27,[[48,[-1]]]]],3],0,[[[48,[-1]],[48,[-1]],[34,[-1]],5,[53,[-1,-2]]],[[117,[-1,-2]]],3,[[37,[-1]]]],[[[119,[[50,[-1]],-1,-2]]],27,3,[[37,[-1]]]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]]],[],3,[[37,[-1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[[49,[-1]],-2,-1,-3]],[51,[[49,[-1]],-2,-1,-3]]],9,3,115,[[37,[-1]]]],[[-1,[34,[-2]],[53,[-2,-3]]],[[6,[[2,[-1,-4,[41,[-2]]]],111]]],17,[],[],[]],[[[49,[-1]],[34,[-1]],[53,[-1,-2]]],[[6,[[2,[[49,[-1]],[50,[-1]],[41,[-1]]]],111]]],3,[[37,[-1]]]],[[116,-1],6,28],[[[52,[[51,[[49,[-1]],-2,-1,-3]]]]],5,3,115,[[37,[-1]]]],[-1,116,[]],[[[49,[-1]]],116,3],[[116,[34,[-1]]],[[27,[[71,[-1]]]]],3],[[[49,[-1]],[34,[-1]]],[[35,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[49,[-1]],[34,[-1]]],[[6,[[35,[-1]],113]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[53,[-1,-2]],-3,[34,[-1]]],2,3,[[37,[-1]]],[[122,[[121,[-1,-2]]]]]],[[[53,[-1,-2]],-3,-4,[34,[-1]]],2,3,[[37,[-1]]],[[122,[123]]],[[122,[-2]]]],[[[53,[-1,-2]],-3,-4,[93,[-1]]],2,3,[[37,[-1]]],[[122,[123]]],[[122,[-2]]]],[[[124,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[125,[-1]]],[[125,[-1]]],[4,3]],[[[124,[-1]]],[[124,[-1]]],[4,3]],[[[53,[-1,-2]]],[[53,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[53,[-1,-2]]],5,3,[[37,[-1]]]],[[[53,[-1,-2]]],[[126,[123,[2,[-2,[69,[-1]]]]]]],3,[[37,[-1]]]],[[],[[53,[-1,-2]]],[102,3],[102,[37,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[125,[-2]]]]],7,3],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[124,[-2]]]]],7,[127,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[53,[-2,-3]]]]],7,[127,3],[127,[37,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[125,[-1]]],5,3],[[[124,[-1]]],5,3],[[[124,[-1]],[34,[-1]],[48,[-1]],[48,[-1]],[71,[-1]]],[[49,[-1]]],3],[[[125,[-1]],11],12,[13,3]],[[[124,[-1]],11],12,[13,3]],[[[53,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[121,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[[[125,[-1]]],[[124,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-3]]],[[121,[-2,-3]]],[[122,[123]]],3,[[37,[-2]]]],[-1,-1,[]],[[[53,[-1,-2]],5],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]],[69,[-1]]],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]],5],[[27,[[69,[-1]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]],[69,[-1]]],[[27,[5]]],3,[[37,[-1]]]],[[[53,[-1,-2]],123],[[27,[5]]],3,[[37,[-1]]]],[[[124,[-1]]],9,3],[[[53,[-1,-2]]],9,3,[[37,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2]]],9,3,[[37,[-1]]]],[[[53,[-1,-2]]],29,3,[[37,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[53,[-1,-2]],[34,[-1]],[48,[-1]]],[[27,[[2,[-2,[69,[-1]]]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]],123],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]]],5,3,[[37,[-1]]]],[[],[[53,[-1,-2]]],3,[[37,[-1]]]],[[-1,-4],[[121,[-2,-3]]],[[122,[123]]],3,[[37,[-2]]],[[122,[-3]]]],[[[34,[-1]],[35,[-3]]],[[53,[-1,-2]]],3,[[37,[-1]]],[[122,[[121,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[125,[-1]],-2],6,3,28],[[[124,[-1]],-2],6,[128,3],28],[[[53,[-1,-2]],-3],6,[128,3],[128,[37,[-1]]],28],[[[125,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[124,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[124,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[58,[-1]]],[[6,[[2,[[44,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[129,[-1]],-2,[34,[-1]]],[[6,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]]],[[6,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[27,[[129,[-1]]]],[34,[-1]]],[[6,[[2,[[45,[-1]],[44,[-1]],[58,[-1]]]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[130,[-1]]],[[130,[-1]]],[4,3]],[[[129,[-1]]],[[129,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[130,[-1]],[130,[-1]]],9,[10,3]],[[[129,[-1]],[129,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[130,[-1]],[34,[-1]],90,-2],[[91,[2]]],3,92],[[[130,[-1]],11],12,[13,3]],[[[129,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[[129,[-1]],-2],2,3,19],[[-2,[34,[-1]],[44,[-1]],[58,[-1]]],[[6,[[45,[-1]],46]]],3,[[47,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[130,[-1]]],9,3],[[[130,[-1]]],9,3],[[[130,[-1]]],9,3],[[[130,[-1]]],9,3],[[[130,[-1]]],9,3],[[[130,[-1]]],9,3],[[[130,[-1]]],9,3],[[[130,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[131,131],[[[132,[-1]]],[[132,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[132,[-1]],[132,[-1]]],26,3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[131]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[132,[-2]]]]],7,3],[5,2],[5,2],[[131,131],9],[[[132,[-1]],[132,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[131,11],12],[[131,11],12],[[[132,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[52,[133]]],[[27,[-1]]],[]],[134,-1,[]],[89,-1,[]],[135,-1,[]],[136,-1,[]],[137,-1,[]],[138,-1,[]],[139,-1,[]],[15,-1,[]],[-1,131,[]],[[-1,-2],15,[16,17],18],[[[132,[-1]],-2],2,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,29,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],-1,[]],[[],-1,[]],[[[132,[-1]],[132,[-1]]],[[27,[26]]],3],[[]],[[]],[[131,-1],6,28],[[[132,[-1]],-2],6,3,28],[-1,[[35,[133]]],[]],[-1,[[27,[134]]],[]],[-1,[[27,[89]]],[]],[-1,[[27,[135]]],[]],[-1,[[27,[136]]],[]],[-1,[[27,[137]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[27,[140]]],[]],[-1,140,[]],[-1,[[27,[138]]],[]],[-1,[[27,[139]]],[]],[-1,139,[]],[-1,[[27,[15]]],[]],[-1,15,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[141,[-1]]],[[143,[-1,142]]],3],[[[141,[-1]]],[[143,[-1,144]]],3],[[[141,[-1]]],[[143,[-1,145]]],3],[[[141,[-1]]],[[143,[-1,146]]],3],[[[147,[-1]],[35,[-1]]],[[2,[[35,[-1]],-1]]],3],[148,148],[[[141,[-1]]],[[141,[-1]]],[4,3]],[[[109,[-1]]],[[109,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[109,[-1]],[73,[-1]]],-1,3],[[[141,[-1]],148],[[147,[-1]]],3],0,0,[[],[[141,[-1]]],3],[[],[[109,[-1]]],[102,3]],[[],[[149,[-1]]],[102,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[148,11],12],[[[147,[-1]],11],12,[13,3]],[[[141,[-1]],11],12,[13,3]],[[[109,[-1]],11],12,[13,3]],[[[149,[-1]],11],12,[13,3]],[-1,-1,[]],[5,148],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[149,[-1]],[132,[-1]]],[[27,[[73,[-1]]]]],3],[[[109,[-1]],[73,[-1]]],-1,3],[[[109,[-1]],[73,[-1]]],-1,3],[[[109,[-1]],[73,[-1]]],-1,3],[[[109,[-1]],[73,[-1]]],-1,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[[149,[-1]],[132,[-1]],[73,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[73,[-2]]],[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[150,[-1,-2,-3]]],[[35,[-1]]],[151,102,115,152,13],115,3],[[[150,[-1,-2,-3]],[34,[-3]]],2,[151,102,115,152,13],115,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[153,[-1]],[34,[-1]],[48,[-1]]],[[80,[[2,[[48,[-1]],[48,[-1]]]],113]]],3],[[[155,[[154,[-1]]]],[34,[-1]],[48,[-1]]],[[80,[[2,[[48,[-1]],[48,[-1]]]],113]]],3],[[[156,[-1]],75,[34,[-1]],[48,[-1]]],[[80,[[2,[[48,[-1]],[48,[-1]]]],113]]],3],[[[150,[75,[154,[-1]],-1]],75,[34,[-1]],[48,[-1]]],[[80,[[2,[[48,[-1]],[48,[-1]]]],113]]],3],[[[156,[-1]],75,[34,[-1]],[48,[-1]]],[[80,[[2,[[48,[-1]],[48,[-1]]]],111]]],3],[[[150,[75,[154,[-1]],-1]],75,[34,[-1]],[48,[-1]]],[[80,[[2,[[48,[-1]],[48,[-1]]]],111]]],3],0,0,[[[157,[-1,-3,-2]],[34,[-2]],[147,[-2]]],[[158,[-2]]],151,3,[[159,[-2]]]],0,0,0,[[[155,[-1]]],[[155,[-1]]],4],[[[154,[-1]]],[[154,[-1]]],[4,3]],[[[160,[-1]]],[[160,[-1]]],[4,3]],[[[161,[-1]]],[[161,[-1]]],[4,3]],[[[162,[-1]]],[[162,[-1]]],[4,3]],[75,75],[76,76],[[[150,[-1,-2,-3]]],[[150,[-1,-2,-3]]],[4,151],4,[4,3]],[[[157,[-1,-3,-2]]],[[157,[-1,-3,-2]]],[4,151],[4,3],[4,[159,[-2]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[153,[-1]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[155,[[154,[-1]]]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,0,[[[156,[-1]],75,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[150,[75,[154,[-1]],-1]],75,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,0,0,[[],75],[[],76],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[155,[-1]],[155,[-1]]],9,10],[[[154,[-1]],[154,[-1]]],9,[10,3]],[[[162,[-1]],[162,[-1]]],9,[10,3]],[[75,75],9],[[76,76],9],[[[150,[-1,-2,-3]],[150,[-1,-2,-3]]],9,[10,151],10,[10,3]],[[[157,[-1,-3,-2]],[157,[-1,-3,-2]]],9,[10,151],[10,3],[10,[159,[-2]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[156,[-1]],75,[48,[-1]],[48,[-1]],[48,[-1]],[34,[-1]]],[[48,[-1]]],3],[[[150,[75,[154,[-1]],-1]],75,[48,[-1]],[48,[-1]],[48,[-1]],[34,[-1]]],[[48,[-1]]],3],[[[163,[-1]],[34,[-1]],[71,[-1]]],[[27,[[77,[-1]]]]],3],[[[155,[[162,[-1]]]],[34,[-1]],[71,[-1]]],[[27,[[77,[-1]]]]],3],[[[164,[-1]],76,[34,[-1]],[71,[-1]]],[[27,[[77,[-1]]]]],3],[[[150,[76,[162,[-1]],-1]],76,[34,[-1]],[71,[-1]]],[[27,[[77,[-1]]]]],3],[[[155,[-1]],11],12,13],[[[154,[-1]],11],12,[13,3]],[[[160,[-1]],11],12,[13,3]],[[[161,[-1]],11],12,[13,3]],[[[162,[-1]],11],12,[13,3]],[[75,11],12],[[76,11],12],[[[150,[-1,-2,-3]],11],12,[13,151],13,[13,3]],[[[157,[-1,-3,-2]],11],12,[13,151],[13,3],[13,[159,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[150,[-1,-3,-2]]],[[157,[-1,-3,-2]]],151,3,[[159,[-2]]]],[[[150,[-1,-2,-3]],-1],[[155,[-2]]],[151,102,115,152,13],115,3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[75,-1],2,19],[[76,-1],2,19],0,0,0,[-1,5,[]],[75,5],[76,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[163,[-1]],[34,[-1]],[77,[-1]]],[[71,[-1]]],3],[[[155,[[162,[-1]]]],[34,[-1]],[77,[-1]]],[[71,[-1]]],3],[[[164,[-1]],76,[34,[-1]],[77,[-1]]],[[71,[-1]]],3],[[[150,[76,[162,[-1]],-1]],76,[34,[-1]],[77,[-1]]],[[71,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],5],[[[157,[-1,-3,-2]],[34,[-2]]],[[35,[[2,[-1,27]]]]],151,3,[[159,[-2]]]],0,0,0,[[],[[150,[-1,-2,-3]]],[151,102,115,152,13],115,3],[[],[[150,[-1,-2,-3]]],[151,102,115,152,13],115,3],[[[155,[-1]]],[[150,[-2,-1,-3]]],115,[151,102,115,152,13],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[165,[-2]]],[],[]],[[-1,[34,[-2]]],[[80,[[165,[-2]]]]],[],[]],[[[154,[-1]],[34,[-1]]],[[80,[[165,[-1]]]]],3],[[[160,[-1]]],[[165,[-1]]],3],[[[161,[-1]]],[[165,[-1]]],3],[[[162,[-1]],[34,[-1]]],[[80,[[165,[-1]]]]],3],0,0,0,[[[153,[-1]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[155,[[154,[-1]]]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[156,[-1]],75,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[150,[75,[154,[-1]],-1]],75,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[150,[-1,-2,-3]]],[[35,[[155,[-2]]]]],[151,102,115,152,13],115,3],[[[150,[-1,-2,-3]]],5,[151,102,115,152,13],115,3],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[34,[-2]]],27,[],[]],[[[155,[-2]],[34,[-1]]],27,3,[[159,[-1]]]],[[[154,[-1]],[34,[-1]]],27,3],[[[162,[-1]],[34,[-1]]],27,3],[[[150,[-1,-2,-3]]],5,[151,102,115,152,13],115,3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[166,-2,[93,[-1]]],[[80,[[95,[-1]],46]]],3,[[47,[-1]]]],[[166,[52,[0]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[166,[52,[[94,[-1]]]],[93,[-1]],[167,[-1]],[35,[[94,[-1]]]],[53,[-1,-2]],5],[[80,[[2,[[168,[-1]],0]]]]],3,[[37,[-1]]]],[166,[[80,[2]]]],0,[166,166],[169,169],[170,170],[171,171],[172,172],[173,173],[174,174],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[170]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[166,166],9],[[169,169],9],[[170,170],9],[[171,171],9],[[172,172],9],[[173,173],9],[[174,174],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[166,11],12],[[169,11],12],[[169,11],12],[[170,11],12],[[170,11],12],[[171,11],12],[[172,11],12],[[173,11],12],[[174,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[170]]],3],[[[94,[-1]],[93,[-1]]],[[27,[171]]],3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[169,-1],2,19],[[170,-1],2,19],[[171,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[169,175],0,[[29,[35,[169]],5,172],[[80,[166]]]],[65,169],[[166,[93,[-1]]],5,3],[166,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[170,-1],6,28],0,0,[[166,-2,[93,[-1]],[168,[-1]],[95,[-1]],[0,[[176,[-1]]]],[53,[-1,-3]]],[[80,[[35,[[44,[-1]]]]]]],3,[[47,[-1]]],[[37,[-1]]]],[[166,-2,[93,[-1]],[168,[-1]],[53,[-1,-3]]],[[80,[2]]],3,[[47,[-1]]],[[37,[-1]]]],[170,-1,3],[170,-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[171,[93,[-1]]],[[94,[-1]]],3],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[138,[[80,[170]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[166,5],[[80,[166]]]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[95,[-1]]],[102,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[-1,-1,[]],[-1,-1,[]],[[[95,[-1]],-1],[[80,[[45,[-1]]]]],3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[166,[52,[166]],[35,[[94,[-1]]]],[93,[-1]],5,[53,[-1,-2]],-3],[[80,[[2,[[35,[[168,[-1]]]],5]]]]],3,[[37,[-1]]],55],[[],166],[[[27,[[2,[166,[53,[-1,-2]]]]]],[94,[-1]],[93,[-1]],5],[[80,[[2,[[35,[[168,[-1]]]],5]]]]],3,[[37,[-1]]]],[[[27,[[2,[166,[53,[-1,-2]]]]]],[94,[-1]],[93,[-1]],5],[[80,[[2,[[35,[[94,[-1]]]],5,[35,[[94,[-1]]]]]]]]],3,[[37,[-1]]]],[[[27,[[2,[166,[53,[-1,-2]]]]]],[94,[-1]],[94,[-1]],[94,[-1]],[93,[-1]],5],[[80,[[2,[[35,[[168,[-1]]]],5]]]]],3,[[37,[-1]]]],[[[52,[[2,[123,5]]]],9],166],[[[53,[-1,-2]],9],166,3,[[37,[-1]]]],[[166,[52,[166]],[35,[[94,[-1]]]],[93,[-1]],5,[53,[-1,-2]]],[[80,[[2,[[35,[[94,[-1]]]],5,[35,[[94,[-1]]]]]]]]],3,[[37,[-1]]]],0,0,0,0,0,0,0,0,0,[166,[[167,[-1]]],3],[[166,5],[[168,[-1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[177,[-1]]],[[177,[-1]]],[4,3]],[[[167,[-1]]],[[167,[-1]]],[4,3]],[[[168,[-1]]],[[168,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[],[[167,[-1]]],[102,3]],[[],[[168,[-1]]],[102,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],0,[[[177,[-1]],11],12,[13,3]],[[[167,[-1]],11],12,[13,3]],[[[168,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[[],5],[[],5],[[],5],[[],5],[[[168,[-1]]],[],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[166,[[167,[-1]]],3],[[[168,[-1]]],[],3],0,0,[[]],[[]],[[]],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[178,[-1,-2]]],5,3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]]],[[178,[-1,-2]]],3,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[178,[-1,-2]]],[[27,[[42,[-1]]]]],3,[[37,[-1]]]],0,[[[178,[-1,-2]]],[[178,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[[178,[-1,-2]],[93,[-1]]],[[42,[-1]]],3,[[37,[-1]]]],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[93,[-1]]],[[35,[[94,[-1]]]]],3],[[[178,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[178,[-1,-2]]],[[27,[35]]],3,[[37,[-1]]]],0,[-1,-1,[]],[[5,[52,[[168,[-1]]]],[40,[[39,[-1,-2]]]]],[[35,[[178,[-1,-2]]]]],3,[[37,[-1]]]],[[-1,5,[53,[-2,-3]]],[[6,[35,54]]],55,3,[[37,[-2]]]],[[],5],0,[-1,-2,[],[]],[[],[[80,[[35,[-1]]]]],3],0,[[],[[6,[24,25]]]],0,[[5,27,[40,[[39,[-1,-2]]]],[41,[-1]]],[[178,[-1,-2]]],3,[[37,[-1]]]],[[[178,[-1,-2]]],27,3,[[37,[-1]]]],0,[[]],[[[178,[-1,-2]],[178,[-1,-2]]],9,3,[[37,[-1]]]],[[[178,[-1,-2]]],5,3,[[37,[-1]]]],[[[178,[-1,-2]]],[[35,[-1]]],3,[[37,[-1]]]],[[[178,[-1,-2]]],5,3,[[37,[-1]]]],0,[52,5],0,[[[178,[-1,-2]],-3],[[80,[2,46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[178,[-1,-2]],-3,[52,[[45,[-1]]]]],[[80,[[35,[[45,[-1]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[178,[-1,-2]],-3,52],[[80,[46]]],3,[[37,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[94,[-1]],170],[[94,[-1]]],3],[134,[[94,[-1]]],3],[[[94,[-1]]],[[94,[-1]]],[4,3]],[[-1,-2],2,[],[]],[-1,[[94,[-1]]],3],[[[94,[-1]],[93,[-1]]],29,3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[94,[-2]]]]],7,[127,3]],[-1,[[6,[[179,[-2]]]]],7,[127,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[],[[94,[-1]]],3],[[[94,[-1]],[94,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[94,[-1]],11],12,[13,3]],[[[179,[-1]],11],12,[13,3]],[[[94,[-1]],[93,[-1]],90],29,3],[-1,-1,[]],[-1,-1,[]],[[[94,[-1]]],[[27,[-1]]],3],[[-1,-2],15,[16,17],18],[[[94,[-1]]],[[27,[5]]],3],[[[94,[-1]]],[[27,[5]]],3],[[[94,[-1]]],[[27,[5]]],3],[[[94,[-1]],-2],2,3,19],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[94,[-1]]],9,3],[[[94,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[170,[[94,[-1]]],3],[-1,[[94,[-1]]],3],[15,[[94,[-1]]],3],[[]],[[]],[[[94,[-1]],-2],6,[128,3],28],[[[179,[-1]],-2],6,[128,3],28],[[[94,[-1]]],170,3],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[15,[[94,[-1]]],3],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[93,[-1]],[94,[-1]]],[[80,[[2,[[94,[-1]],[94,[-1]]]]]]],3],[[[93,[-1]],[94,[-1]]],[[80,[[94,[-1]]]]],3],[[[93,[-1]],[94,[-1]],[94,[-1]]],[[94,[-1]]],3],[[],[[93,[-1]]],[102,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[93,[-1]],5],[[27,[[2,[[94,[-1]],[94,[-1]]]]]]],3],[[[93,[-1]],5],[[27,[[2,[[94,[-1]],[94,[-1]],[94,[-1]]]]]]],3],[[[93,[-1]],5],[[27,[[2,[[94,[-1]],[94,[-1]],[94,[-1]],[94,[-1]]]]]]],3],[[[93,[-1]],[94,[-1]]],[[27,[123]]],3],[[[93,[-1]],[94,[-1]]],[[27,[29]]],3],[[[93,[-1]],[94,[-1]]],[[27,[123]]],3],[[[93,[-1]],[94,[-1]]],[[27,[123]]],3],[[[93,[-1]],5],[[27,[[35,[29]]]]],3],[[[93,[-1]],11],12,[13,3]],[-1,-1,[]],[[[93,[-1]]],[],3],[[[93,[-1]],[94,[-1]]],[[80,[[180,[-1]]]]],3],[[[93,[-1]],-1,[94,[-1]]],[[80,[[94,[-1]]]]],3],[[[93,[-1]],-1,[94,[-1]]],[[80,[[2,[-1,[180,[-1]]]]]]],3],[[[93,[-1]]],2,3],[[],5],[[[93,[-1]]],[],3],[[[93,[-1]],170,[94,[-1]],[94,[-1]]],[[94,[-1]]],3],[[[93,[-1]],170,[94,[-1]],[94,[-1]],[180,[-1]]],[[94,[-1]]],3],[[[93,[-1]],170,[94,[-1]],[94,[-1]],[94,[-1]]],[[94,[-1]]],3],[[[93,[-1]],170,[94,[-1]],[94,[-1]],[94,[-1]],[180,[-1]]],[[94,[-1]]],3],[[[93,[-1]],170,[94,[-1]],[94,[-1]],[94,[-1]],[94,[-1]]],[[94,[-1]]],3],[[[93,[-1]],170,[94,[-1]],[94,[-1]],[94,[-1]],[94,[-1]],[180,[-1]]],[[94,[-1]]],3],[[[93,[-1]],[94,[-1]],[94,[-1]],[94,[-1]]],[[94,[-1]]],3],[[[93,[-1]],65],[[94,[-1]]],3],[[[93,[-1]]],[[94,[-1]]],3],[[[93,[-1]],65],[[94,[-1]]],3],[[[93,[-1]],123],[[94,[-1]]],3],[[[93,[-1]],[52,[29]]],[[94,[-1]]],3],[[[93,[-1]],[181,[-1]]],[[94,[-1]]],3],[[[93,[-1]],65],[[94,[-1]]],3],[-1,-2,[],[]],[[[93,[-1]],65],[[94,[-1]]],3],[[],[[6,[24,25]]]],[[[93,[-1]],[35,[[94,[-1]]]]],[[94,[-1]]],3],[[[93,[-1]],-1],[[27,[[2,[-1,[94,[-1]]]]]]],3],[[]],0,[[[93,[-1]]],[[80,[9]]],3],[[[93,[-1]],[94,[-1]],[94,[-1]]],[[80,[9]]],3],[[[93,[-1]],[108,[[107,[90]]]],65],[[80,[[94,[-1]]]]],3],[[[93,[-1]],65],80,3],[[[93,[-1]],[108,[[107,[90]]]],65],[[80,[[2,[182,[94,[-1]],9]],183]]],3],[[[93,[-1]],65],[[80,[[94,[-1]]]]],3],[[[93,[-1]],[52,[[94,[-1]]]]],[[80,[[35,[-1]]]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[[[184,[-1]],-1,-1,[180,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[184,[-1]]],[102,3]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[184,[-2]]]]],7,[127,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[184,[-1]],11],12,[13,3]],[-1,-1,[]],[[[184,[-1]],[180,[-1]]],[[27,[[179,[-1]]]]],3],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[[184,[-1]],-1],[[27,[[2,[-1,[180,[-1]]]]]]],3],[[]],[[[93,[-1]],[180,[-1]],[184,[-1]]],[[80,[[94,[-1]]]]],3],[[[184,[-1]],[94,[-1]],[93,[-1]]],[[80,[[180,[-1]]]]],3],[[[184,[-1]],-2],6,[128,3],28],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[185,11],12],[[185,186],29],[-1,-1,[]],[[185,[52,[186]]],[[80,[2]]]],[[],5],[[185,29],186],[-1,-2,[],[]],[[],[[6,[24,25]]]],[185,186],[186,185],[[]],[[185,65],[[27,[186]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[185,185],[[80,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,110,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[183,183],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,[[183,11],12],[[183,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[187,65],[-1,-2,[],[]],[-1,-2,[],[]],[187,187],[[-1,-2],2,[],[]],[187,134],[[187,182],[[188,[-1,[35,[133]]]]],3],[[],187],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[187,-1],29,[[189,[[52,[133]]]]]],[[187,187],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[187,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[187,134],9],[[],[[6,[24,25]]]],[[],[[0,[55]]]],[182,[[188,[-1,187]]],3],[[],[[0,[55]]]],[[],[[0,[55]]]],[187,[[0,[55]]]],[[],[[0,[55]]]],[187,[[32,[55]]]],[187,[[0,[55]]]],[[],[[0,[55]]]],[[]],[187,139],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,65,[190,[-1,-2]]],[[190,[-1,-2]]],[191,4,192],3],[[-1,193,[190,[-1,-2]]],[[190,[-1,-2]]],[191,4,192],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[194,[-1]]],[[194,[-1]]],[4,3]],[[[190,[-1,-2]]],[[190,[-1,-2]]],[4,192],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[194,[-1]],[194,[-1]]],9,[10,3]],[[[190,[-1,-2]],[190,[-1,-2]]],9,[10,192],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[[194,[-1]],11],12,3],[[[194,[-1]],11],12,[13,3]],[[[190,[182,-1]],11],12,3],[[[190,[-1,-2]],11],12,[13,192],[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,193],[[190,[-1,-2]]],[191,4,192],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[194,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[[195,[-1,-2,[190,[-1,-3]]]],-4],[[195,[-1,-2,[190,[-1,-3]]]]],192,[],3,55],[[-1,[194,[-2]]],[[190,[-1,-2]]],192,3],[[[27,[-1]],-2,[194,[-3]]],[[195,[-2,-1,[190,[-2,-3]]]]],[],192,3],[[[190,[-1,-2]],[190,[-1,-2]]],[[190,[-1,-2]]],[191,4,192],3],[[]],[[]],[[[6,[-1,-2]],-3,-4],[[195,[-3,-1,[190,[-3,-5]]]]],[],[],192,55,3],[[-1,[194,[-2]]],[[195,[-1,-3,[190,[-1,-2]]]]],192,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[196,196],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[196,196],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[196,11],12],[-1,-1,[]],[[182,182],196],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[65,5,5,5,5],29],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[197,197],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[197,197],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[197,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[134,65],[[0,[55]]]],[[],[[0,[55]]]],[[134,9,65],[[0,[55]]]],[[134,9,65],[[0,[55]]]],[134,[[0,[55]]]],[[134,9,65],[[0,[55]]]],[[134,9,65],[[0,[55]]]],[[],[[0,[55]]]],[[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[108,[[107,[90]]]],9],[[0,[55]]]],[[],[[0,[55]]]],[[],[[0,[55]]]],[182,[[188,[-1,182]]],3],[[[108,[[107,[90]]]],9,9],[[0,[55]]]],[[[108,[[107,[90]]]],9],[[0,[55]]]],[[],[[0,[55]]]],[187,[[0,[55]]]],[[[108,[[107,[90]]]],9],[[0,[55]]]],[[[108,[[107,[90]]]],9],[[0,[55]]]],[[[108,[[107,[90]]]],9],[[0,[55]]]],[[[108,[[107,[90]]]],9],[[0,[55]]]],[182,[[188,[-1,[35,[182]]]]],3],[182,[[188,[-1,[35,[182]]]]],3],[[],[[0,[55]]]],[[[108,[[107,[90]]]],9],[[0,[55]]]],[65,[[0,[55]]]],[65,[[0,[55]]]],[[],[[0,[55]]]],[[[108,[[107,[90]]]],9,9],[[0,[55]]]],[[],[[0,[55]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[40,[[39,[-1,-2]]]],[41,[-1]]],-3,[],[],[]],[-1,[[27,[[42,[-2]]]]],[],[]],[-1,[[42,[-2]]],[],[]],[-1,-2,[],[]],[[],35],[-1,-2,[],[]],[[-1,5],5,[]],[-1,-2,[],[]],[[-1,5],5,[]],[-1,[[27,[35]]],[]],[[5,52,[40,[[39,[-1,-2]]]]],[[35,[-3]]],[],[],[]],[-1,[],[]],[[-1,5,[53,[-2,-3]]],[[6,[35,54]]],55,[],[]],[[-1,[48,[-2]],[48,[-2]],[34,[-2]],5,[40,[[53,[-2,-3]]]]],[[6,[[35,[[51,[[49,[-2]],[50,[-2]],-2,-3]]]],54]]],[],[],[]],0,[-1,[],[]],[-1,[],[]],[[],[[6,[[35,[-1]]]]],[]],[-1,[[53,[-2,-3]]],[],[],[]],[[5,27,[40,[[39,[-1,-2]]]],[41,[-1]]],-3,[],[],[]],[[-1,5],5,[]],[[-1,5],9,[]],[[-1,5],9,[]],[[5,[53,[-1,-2]]],-3,[],[],[]],0,[[-1,[52,[-2]]],[[6,[[35,[[2,[-2,[198,[-3]]]]]],46]]],[],[],[]],[-1,[],[]],[-1,27,[]],[[-1,-1],9,[]],[-1,[[6,[9]]],[]],[-1,5,[]],[-1,[[35,[-2]]],[],[]],[[-1,65],6,[]],[-1,5,[]],[-1,5,[]],[52,5],0,[[-1,-3,52],[[6,[46]]],[],[],[[47,[-2]]]],[[[35,[[2,[-3,[198,[-1]]]]]]],[[6,[9,46]]],[3,115],[[37,[-1]]],[[199,[-1,-2]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[200,[-1]]],[[200,[-1]]],[4,201,202]],[[-1,-2],2,[],[]],[[5,[40,[[53,[64,-1]]]]],[[6,[[203,[61]],46]]],[[37,[64]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[200,[-2]]]]],7,[201,202]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[200,[-1]],11],12,[13,201,202]],[[[204,[-1,-3,-2,-4]],11],12,[13,202],[13,3],[13,[37,[-2]]],[13,[199,[-2,-3]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[204,[61,-1,64,-2]]],[[53,[64,-1]]],[[37,[64]]],[[199,[64,-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[53,[64,-1]]],[[204,[61,-1,64,-2]]],[[37,[64]]],[[199,[64,-1]]]],[[[204,[61,-1,64,-2]],[205,[61]],[206,[61]],[48,[64]],[48,[64]],[34,[64]],5,-3,[40,[[53,[64,-1]]]]],[[6,[[2,[[200,[61]],[49,[64]],[49,[64]]]],54]]],[[37,[64]]],[[199,[64,-1]]],[207,4]],[[]],[[]],[[]],0,0,[[[204,[61,-1,64,-2]],[36,[64,-1]],[205,[61]],-3],[[6,[[63,[61]],46]]],[[37,[64]]],[[199,[64,-1]]],207],[[[204,[61,-1,64,-2]]],5,[[37,[64]]],[[199,[64,-1]]]],0,[[[200,[-1]],-2],6,[201,202],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[62,[61]],[208,[61]],[52,[64]],[52,[64]],[209,[61]],-1],[[6,[9,46]]],[207,22]],[[[36,[64,-1]],[62,[61]],[63,[61]]],[[6,[9,46]]],[[37,[64]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[5,[40,[[53,[-1,-2]]]]],-1,56,[[37,[-1]]]],[[5,[40,[[53,[-1,-2]]]]],[[2,[-3,[210,[-1]]]]],56,[[37,[-1]]],[[199,[-1,-2]]]],[[[211,[-1,-2]]],[[211,[-1,-2]]],[56,4],[4,[212,[-1]]]],[[-1,-2],2,[],[]],[[[213,[-1,-2,-3]],[211,[-1,-3]]],[[6,[[213,[-1,-2,-3]],54]]],56,[[37,[-1]]],[[199,[-1,-2]]]],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[211,[-2,-3]]]]],7,56,[[212,[-2]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[213,[-2,-3,-4]]]]],7,56,[[37,[-2]]],[[199,[-2,-3]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[211,[-1,-2]],-3],[[91,[2]]],56,[[212,[-1]]],92],[[[214,[-1,-2,-3]],[211,[-1,-3]],5,[40,[[53,[-1,-2]]]]],[[6,[[2,[[213,[-1,-2,-3]],[35,[-1]],[35,[-1]],5]],54]]],56,[[37,[-1]]],[[199,[-1,-2]]]],[[[211,[-1,-2]],[52,[133]]],[[27,[[52,[133]]]]],56,[[212,[-1]]]],[[[211,[-1,-2]]],5,56,[[212,[-1]]]],[[[214,[-1,-2,-3]],11],12,[13,56],[13,[37,[-1]]],[13,[199,[-1,-2]]]],0,0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[214,[-1,-2,-3]]],[[53,[-1,-2]]],56,[[37,[-1]]],[[199,[-1,-2]]]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,0,[[5,[53,[-1,-2]]],[[214,[-1,-2,-3]]],56,[[37,[-1]]],[[199,[-1,-2]]]],0,0,0,[[]],[[]],[[]],[[[214,[-1,-2,-3]],[211,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[6,[[2,[[213,[-1,-2,-3]],[35,[-1]],[35,[-1]],5]],54]]],56,[[37,[-1]]],[[199,[-1,-2]]]],[[[211,[-1,-3]],[52,[-3]],5,[35,[-1]],[40,[[53,[-1,-2]]]]],[[6,[[213,[-1,-2,-3]],54]]],56,[[37,[-1]]],[[199,[-1,-2]]]],[[5,[40,[[53,[-1,-2]]]]],[[211,[-1,-3]]],56,[[37,[-1]]],[[212,[-1]],[199,[-1,-2]]]],[[[214,[-1,-2,-3]]],5,56,[[37,[-1]]],[[199,[-1,-2]]]],0,[[[211,[-1,-2]],-3],6,56,[[212,[-1]]],28],[[[213,[-1,-2,-3]],-4],6,56,[[37,[-1]]],[[199,[-1,-2]]],28],0,0,[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[213,[-1,-2,-3]],[211,[-1,-3]],5,[52,[-1]],[52,[-1]]],[[6,[9,114]]],56,[[37,[-1]]],[[199,[-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[40,[[53,[-1,-2]]]],5],-1,56,[[37,[-1]]]],[[5,[40,[[53,[-1,-2]]]]],[[216,[[215,[-1]]]]],56,[[37,[-1]]]],[[[39,[-1,-2]],[41,[-1]]],5,3,[[37,[-1]]]],0,[[[39,[-1,-2]]],[[39,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[217,[-2,-3,-4]]]]],7,[127,56],[[37,[-2]]],[[199,[-2,-3]]]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[[218,[-1,-2]]],-1,56,[[219,[-1]]]],[5,2],[5,2],[5,2],[5,2],[[[220,[-1,-2,-3]],[218,[-1,-3]],5,[40,[[53,[-1,-2]]]]],[[6,[[2,[[217,[-1,-2,-3]],[35,[-1]],[35,[-1]],5,5]],54]]],56,[[37,[-1]]],[]],[[[220,[-1,-2,-3]],11],12,[13,56],[13,[37,[-1]]],[13,[199,[-1,-2]]]],[[[39,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[218,[-1,-2]],5],[],56,[[219,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[220,[-1,-2,-3]]],[[53,[-1,-2]]],56,[[37,[-1]]],[[199,[-1,-2]],[219,[-1]]]],[[[39,[-1,-2]]],[[40,[[53,[-1,-2]]]]],3,[[37,[-1]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[53,[-1,-2]]],[[220,[-1,-2,-3]]],56,[[37,[-1]]],[[199,[-1,-2]],[219,[-1]]]],[[[40,[[53,[-1,-2]]]],5],[[39,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[53,[-1,-2]]]],5],[[39,[-1,-2]]],3,[[37,[-1]]]],[[[39,[-1,-2]]],5,3,[[37,[-1]]]],[[]],[[]],[[]],[[]],0,[[[220,[-1,-2,-3]],[218,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[6,[[2,[[217,[-1,-2,-3]],[35,[-1]],[35,[-1]],5,5]],54]]],56,[[37,[-1]]],[]],[[[218,[-1,-3]],[52,[-3]],[35,[-1]]],[[6,[[2,[[217,[-1,-2,-3]],5]],54]]],56,[[37,[-1]]],[]],[[5,[40,[[53,[-1,-2]]]]],[[218,[-1,-3]]],56,[[37,[-1]]],[]],[[[220,[-1,-2,-3]]],5,56,[[37,[-1]]],[[199,[-1,-2]],[219,[-1]]]],[[[39,[-1,-2]]],5,3,[[37,[-1]]]],[[[217,[-1,-2,-3]],-4],6,[128,56],[[37,[-1]]],[[199,[-1,-2]]],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[217,[-1,-2,-3]],[218,[-1,-3]],5,5,[52,[-1]],[52,[-1]]],[[6,[9,221]]],56,[[37,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-2,[34,[-1]],[27,[[48,[-1]]]]],[[6,[[2,[[45,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[27,[[48,[-1]]]]],[[6,[[2,[[45,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[222,[-1,135]]],[[27,[[222,[-1,135]]]]],3],[[[222,[-1,135]]],[[27,[[222,[-1,135]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[222,[-1,135]],135],[[222,[-1,135]]],3],[223,223],[[[222,[-1,-2]]],[[222,[-1,-2]]],[4,3],[4,224]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[223,223],26],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[223,223],9],[[[222,[-1,-2]],[222,[-1,-2]]],9,[10,3],[10,224]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[48,[-1]],[34,[-1]],90,-2],[[91,[2]]],3,92],[[[71,[-1]],[34,[-1]],90,-2],[[91,[2]]],3,92],[[223,11],12],[[[222,[-1,-2]],11],12,[13,3],[13,224]],[134,[[48,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[223,-1],2,19],[[[222,[-1,-2]],-3],2,3,224,19],[223,[[27,[5]]]],[[-1,5],[[222,[-2,-1]]],224,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[222,[-1,135]]],9,3],[[[222,[-1,135]]],9,3],[[[71,[-1]]],9,3],[[[222,[-1,89]]],9,3],[-1,9,[]],[[[48,[-1]]],9,3],[[[222,[-1,135]]],9,3],[[[222,[-1,135]]],9,3],[223,9],[223,9],[[[222,[-1,-2]]],9,3,224],[[-1,135],9,[]],[[[48,[-1]],135],9,3],[-1,9,[]],[[[48,[-1]]],9,3],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[89,223],[[71,[-1]]],3],[5,223],[[89,223],[[222,[-1,89]]],3],[-1,[[222,[-2,-1]]],224,3],[[-1,5],[[222,[-2,-1]]],224,3],[223,[[27,[5]]]],[[223,223],[[27,[26]]]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[225,[-1,-2]],84],[[6,[[40,[[211,[-1,-3]]]],226]]],56,[[37,[-1]]],[[199,[-1,-2]]]],[[],78],[[[225,[-1,-2]],84],[[6,[[227,[-1]],226]]],56,[[37,[-1]]]],[[[225,[-1,-2]],84],[[6,[[228,[-1]],226]]],56,[[37,[-1]]]],[[[225,[-1,-2]],84],[[6,[[218,[-1,-3]],226]]],56,[[37,[-1]]],[199,219,229]],[[[225,[-1,-2]],84,-3],[[6,[-4,226]]],56,[[37,[-1]]],68,[]],0,0,0,0,[-1,110,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[226,11],12],[[226,11],12],[230,226],[-1,-1,[]],[231,226],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[226,[[27,[110]]]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[225,[-1,-2]]],[[35,[[225,[-1,-2]]]]],56,[[37,[-1]]]],[232,232],[233,233],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[225,[-1,-2]],84],[[91,[234]]],56,[[37,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[232]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[233]]],7],[5,2],[5,2],[5,2],[[232,232],9],[[233,233],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[225,[-1,-2]],11],12,[13,56],[13,[37,[-1]]]],[[232,11],12],[[233,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[225,[-1,-2]]],29,56,[[37,[-1]]]],0,0,[[[225,[-1,-2]]],[[40,[[53,[-1,-2]]]]],56,[[37,[-1]]]],0,0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[5,[40,[[53,[-1,-2]]]],9,232],[[225,[-1,-2]]],56,[[37,[-1]]]],[[[225,[-1,-2]],84],[[91,[234]]],56,[[37,[-1]]]],[[]],[[]],[[]],0,0,[[[225,[-1,-2]],5],[[225,[-1,-2]]],56,[[37,[-1]]]],[[232,-1],6,28],[[233,-1],6,28],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[235,[-1,-2]]],[[235,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[],236],[[],236],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],0,[[[235,[-1,-2]],[48,[-1]],[34,[-1]]],[[80,[[2,[[48,[-1]],5,[71,[-1]],[35,[[48,[-1]]]]]]]]],3,[[37,[-1]]]],[[[235,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[237,[-1,-3,-2]],11],12,[13,3],[13,[37,[-1]]],[13,[238,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[[-1,[34,[-2]],[108,[[107,[90]]]],-3],[[80,[2]]],[],[],[[189,[239]],115]],[[-1,[34,[-2]],[108,[[107,[90]]]],182,-3],[[80,[182]]],[],[],[[189,[239]],115]],[[-1,[34,[-2]],[108,[[107,[90]]]],-3],[[80,[2]]],[],[],[[189,[239]]]],[[-1,[34,[-2]],[108,[[107,[90]]]],[48,[-2]],-3],[[80,[2]]],[],[],[[189,[239]],115]],[[[235,[-1,-2]],[34,[-1]],[108,[[107,[90]]]],[48,[-1]],-3],[[80,[2]]],3,[[37,[-1]]],[[189,[239]],115]],[[-1,[34,[-2]],90,[48,[-2]]],[[80,[[2,[[49,[-2]],[49,[-2]],5]]]]],[],[]],[[[235,[-1,-2]],[34,[-1]],90,[48,[-1]]],[[80,[[2,[[49,[-1]],[49,[-1]],5]]]]],3,[[37,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,[[],29],[[],29],[[[34,[-1]],5,[27,[236]],[53,[-1,-2]]],-3,[],[],[]],[[[34,[-1]],5,[27,[236]],[53,[-1,-2]]],[[235,[-1,-2]]],3,[[37,[-1]]]],[[[34,[-1]],5,[27,[236]],[53,[-1,-2]]],[[235,[-1,-2]]],3,[[37,[-1]]]],[[[34,[-1]],5,[27,[236]],[53,[-1,-2]]],[[80,[[237,[-1,-3,-2]]]]],3,[[37,[-1]]],[[238,[-1,-2]]]],[[]],[[]],[[-1,29],29,[]],[[[235,[-1,-2]],29],29,3,[[37,[-1]]]],[-1,29,[]],[[[235,[-1,-2]]],29,3,[[37,[-1]]]],[[[27,[-1]],[53,[-2,-3]]],[[80,[2]]],[[189,[239]]],[3,127],[[37,[-2]]]],[[[53,[-1,-2]]],[[80,[2]]],[3,127],[[37,[-1]]]],[[[34,[-1]],[237,[-1,-3,-2]],[27,[-4]]],[[80,[2]]],3,[[37,[-1]]],[[238,[-1,-2]]],[[189,[239]]]],[[[237,[-1,-3,-2]]],[[80,[2]]],3,[[37,[-1]]],[[238,[-1,-2]]]],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[90,185],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],90],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[90,11],12],[[90,186],29],[-1,-1,[]],[90,186],[[90,[52,[186]]],[[80,[2]]]],[[],5],[[],90],[[],90],[[90,-1],186,[[189,[65]]]],[[90,[52,[-1]],9,9],[[80,[186]]],[[189,[65]]]],[[90,[52,[-1]],9],[[80,[186]]],[[189,[65]]]],[-1,-2,[],[]],[[],[[6,[24,25]]]],[65,123],[[],123],[185,90],[[]],[90,[[108,[[107,[90]]]]]],[[90,65],[[27,[186]]]],[[90,186],[[80,[2]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[90,185],[[80,[2]]]],[65,123],[-1,-2,[],[]],0,0,0,0,[-1,110,[]],[[[34,[-1]],9],[[48,[-1]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[34,[-1]],[48,[-1]]],[[6,[[48,[-1]],113]]],3],0,[[[34,[-1]],[48,[-1]]],[[6,[[2,[[48,[-1]],[48,[-1]]]],113]]],3],[[[34,[-1]],[48,[-1]]],[[6,[[48,[-1]],113]]],3],0,0,[113,113],[[[240,[-1]]],[[240,[-1]]],[4,3]],[[[241,[-1]]],[[241,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[34,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],9,3],0,0,0,[[],[[34,[-1]]],3],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],0,[5,2],[5,2],[5,2],[5,2],0,0,0,0,0,[[[34,[-1]]],[[241,[-1]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[130,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[134]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[132,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[71,[-1]]],[[27,[[77,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[123]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[35,[[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[123]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[1,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[29]]],3],[[[34,[-1]],[48,[-1]]],[[27,[123]]],3],[[[34,[-1]],[48,[-1]]],[[27,[123]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[129,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[14]]],3],[[[34,[-1]],[70,[-1]]],[[27,[[71,[-1]]]]],3],[[[34,[-1]],[69,[-1]]],[[27,[[48,[-1]]]]],3],[[[34,[-1]],11],12,[13,3]],[[113,11],12],[[113,11],12],[[[240,[-1]],11],12,[13,3]],[[[241,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[34,[-1]]],[[71,[-1]]],3],[[[34,[-1]]],[[71,[-1]]],3],[[[34,[-1]]],[[71,[-1]]],3],[[[34,[-1]]],[[71,[-1]]],3],[[[34,[-1]]],[],3],[[[34,[-1]],[71,[-1]]],[[27,[[73,[-1]]]]],3],[[[34,[-1]],[129,[-1]]],[[27,[[73,[-1]]]]],3],[[[34,[-1]],135,-1],[[27,[[48,[-1]]]]],3],[[[34,[-1]],-2],[[27,[[48,[-1]]]]],3,[[122,[[1,[-1]]]]]],[[[34,[-1]],[48,[-1]]],[[27,[[69,[-1]]]]],3],[[[34,[-1]],[71,[-1]],[27,[[242,[-1]]]]],[[6,[[2,[[70,[-1]],[27,[[243,[-1]]]]]],113]]],3],[[[34,[-1]],[48,[-1]],[27,[[242,[-1]]]]],[[6,[[2,[[69,[-1]],[27,[[244,[-1]]]]]],113]]],3],0,0,[[[34,[-1]],[71,[-1]]],[[27,[[70,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[69,[-1]]]]],3],[[[34,[-1]],65],[[69,[-1]]],3],[[[34,[-1]],123],[[69,[-1]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[[34,[-1]],-1,[48,[-1]]],[[27,[[48,[-1]]]]],3],[[[34,[-1]],-1,[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]]],2,3],0,0,[-1,[],[]],[[],5],[[],5],[[],5],[[],5],[[[34,[-1]]],[],3],[[[34,[-1]],134],[[48,[-1]]],3],[[[34,[-1]],-1,[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]]],[[71,[-1]]],3],[[[34,[-1]]],[[71,[-1]]],3],[[[34,[-1]]],[[71,[-1]]],3],[[[34,[-1]]],[[71,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[34,[-1]],135,-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-2],[[48,[-1]]],3,[[122,[[1,[-1]]]]]],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],65],[[48,[-1]]],3],[[[34,[-1]],123],[[48,[-1]]],3],[[[34,[-1]],[52,[29]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],9],[[48,[-1]]],3],[[[34,[-1]],[181,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[129,[-1]]],[[48,[-1]]],3],[[[34,[-1]],15],[[48,[-1]]],3],[[[34,[-1]],14],[[48,[-1]]],3],[[[34,[-1]],[70,[-1]],[242,[-1]]],[[27,[[71,[-1]]]]],3],[[[34,[-1]],[69,[-1]],[242,[-1]]],[[27,[[48,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[189,[65]]]],0,[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],0,0,0,0,0,0,[[[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],0,[[[34,[-1]],[71,[-1]]],[[71,[-1]]],3],0,[[],[[34,[-1]]],3],[[[34,[-1]]],[[241,[-1]]],3],[[[34,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[122,[[1,[-1]]]]]],0,0,0,0,0,[[[34,[-1]],[48,[-1]]],[[27,[[2,[-1,[48,[-1]]]]]]],3],0,[[[34,[-1]],[48,[-1]]],[[6,[[2,[-1,[48,[-1]]]],113]]],3],[[]],[[]],[[]],[[]],0,0,[[[240,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[6,[9,113]]],3],[[[34,[-1]]],[[6,[9]]],3],0,0,[[[34,[-1]],65],[[6,[[48,[-1]],183]]],3],[[[34,[-1]],65],6,3],[[[34,[-1]],[108,[[107,[90]]]],182],[[6,[[2,[182,[48,[-1]],9]],183]]],3],[[[34,[-1]],[108,[[107,[90]]]],65],[[6,[[48,[-1]],183]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[48,[-1]]]]],3],0,[[[34,[-1]],[48,[-1]]],[[6,[[48,[-1]],113]]],3],[[[34,[-1]],65],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[189,[65]]]],0,[[[34,[-1]]],[[48,[-1]]],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[34,[-1]],[71,[-1]]],[[27,[[243,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[244,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[6,[[2,[[242,[-1]],[69,[-1]]]],113]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[[[34,[-1]],15],[[48,[-1]]],3],0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[34,[-1]],65],[[48,[-1]]],3],[[[240,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[34,[-1]],-1,-1],[[6,[[70,[-1]],113]]],3],0,[[[34,[-1]],-1,-1],[[6,[[69,[-1]],113]]],3],0,[[[240,[-1]]],[[69,[-1]]],3],0,0,0,0,0,[[]],[[123,123],[[27,[123]]]],[-1,-2,[],[]],[-1,-2,[],[]],[123,123],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[123]]],7],[[123,65],123],[123,[[27,[123]]]],[5,2],[[123,123],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[123,[52,[-1]]],123,[[189,[65]]]],[[123,11],12],[[123,11],12],[65,29],[123,29],[123,29],[123,29],[-1,-1,[]],[65,123],[65,[[27,[123]]]],[[-1,-2],15,[16,17],18],[[123,123],9],[[123,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[123,9],[123,9],[123,9],[123,9],[134,9],[[[52,[-1]]],123,[[189,[65]]]],[[[35,[29]]],123],[[],[[6,[24,25]]]],[123,[[80,[65]]]],[[[52,[-1]],9],123,[[189,[65]]]],[[[35,[29]],9],123],[[123,123],[[27,[26]]]],[123,[[52,[29]]]],[[]],[123,9],[9,123],[[],123],[[],123],[[123,-1],6,28],[123,2],[[[52,[-1]]],123,[[189,[65]]]],[[[35,[29]]],123],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[181,[-1]]],[[181,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[181,[-1]],[181,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[181,[-1]],11],12,3],[[[181,[-1]],11],12,[13,3]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[35,[-1]]],[]],[[],[[35,[136]]]],[[],[[35,[137]]]],[[],[[35,[65]]]],[[135,-2],[[45,[-1]]],3,[[47,[-1]]]],[[89,-2],[[45,[-1]]],3,[[47,[-1]]]],[[136,-2],[[45,[-1]]],3,[[47,[-1]]]],[[137,-2],[[45,[-1]]],3,[[47,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[135,135],[89,89],[136,136],[137,137],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[135]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[89]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[136]]],7],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[137]]],7],[5,2],[5,2],[5,2],[5,2],[[135,135],9],[[89,89],9],[[136,136],9],[[137,137],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[135,11],12],[[135,11],12],[[89,11],12],[[89,11],12],[[136,11],12],[[136,11],12],[[137,11],12],[[137,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[-2]]],3,[]],[-1,[[27,[135]]],3],[-1,[[27,[89]]],3],[-1,[[27,[136]]],3],[-1,[[27,[137]]],3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[135,-1],2,19],[[89,-1],2,19],[[136,-1],2,19],[[137,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[135,9],[137,9],[[135,135],9],[135,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[136,136],[[27,[26]]]],[[137,137],[[27,[26]]]],[[]],[[]],[[]],[[]],[[135,-1],6,28],[[89,-1],6,28],[[136,-1],6,28],[[137,-1],6,28],[[-1,5],9,[]],[[136,5],9],[[137,5],9],[-1,65,[]],[136,65],[137,65],[-1,-2,[],3],[135,-1,3],[89,-1,3],[136,-1,3],[137,-1,[[245,[15]],246]],[-1,[],[]],[135],[89],[136],[137],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[138,[[6,[135]]]],[-1,[[6,[-2]]],[],[]],[138,[[6,[89]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[138,[[6,[136]]]],[-1,[[6,[-2]]],[],[]],[138,[[6,[137]]]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[14,14],14],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[14]]],7],[[14,14],14],[5,2],[[14,14],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[14,11],12],[[14,11],12],[-1,-1,[]],[15,14],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[14,9],[[],[[6,[24,25]]]],[[14,14],14],[[14,14],[[27,[26]]]],[[]],[[14,14],14],[[14,-1],6,28],[[14,14],14],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[[-1,[34,[-2]],90,-3],[[91,[2]]],[],[],92],[[-1,[34,[-2]],90],29,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,133],[247,247],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[247,247],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[247,11],12],[[247,11],12],[-1,-1,[]],[[[52,[133]]],[[80,[247]]]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[52,[133]]],[[27,[5]]]],0,[247,133],[133,9],[133,9],[247,[[35,[133]]]],[-1,-2,[],[]],[-1,29,[]],[5,[[35,[133]]]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,110,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,248,21],[-1,248,21],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[248,11],12],[[248,11],12],[-1,-1,[]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],0,[-1,29,[]],0,[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,65,[52,[65]],-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,65,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,65,[52,[65]],-1],6,250],[[249,5,-1],6,250],[[249,65,5,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,-1],6,250],[[249,65,-1],6,250],[5,2],[[249,11],12],[-1,-1,[]],[247,[[6,[-1,248]]],127],[247,249],[[],5],[-1,-2,[],[]],[249,9],[[],[[6,[24,25]]]],[[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[251,6],[251,6],[251,6],[252,6],[253,6],[254,6],[254,6],[[255,11],12],[[251,11],12],[[252,11],12],[[253,11],12],[[254,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[255,9],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[],[[6,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[[255,9],6],[[255,[52,[133]]],6],[[255,134],6],[[251,-1],[[6,[2]]],[128,17]],[[251,-1],[[6,[2]]],[128,17]],[[255,256],6],[[255,257],6],[[251,-1],[[6,[2]]],[128,17]],[[253,-1],[[6,[2]]],[128,17]],[[254,65,-1],[[6,[2]]],[128,17]],[[254,65,-1],[[6,[2]]],[128,17]],[[255,258],6],[[255,259],6],[[255,260],6],[[255,261],6],[[252,-1],[[6,[2]]],[128,17]],[[255,[27,[5]]],6],[[255,65,-1],6,[128,17]],[[255,65,139,65,-1],6,[128,17]],[255,6],[[255,[27,[5]]],6],[[255,-1],6,[128,17]],[[255,65],6],[[255,65,5],6],[[255,65,139,65,5],6],[[255,5],6],[[255,65,5],6],[[255,65,139,65,5],6],[[255,138],6],[[255,139],6],[[255,15],6],[[255,133],6],[255,6],[[255,65],6],[[255,65,139,65],6],[[252,-1],[[6,[2]]],[128,17]],[-1,[[6,[247,248]]],128],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[243,[-1]]],[[243,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[243,[-2]]]]],7,[127,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[243,[-1]],[243,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[243,[-1]],11],12,[13,3]],[-1,-1,[]],[[[243,[-1]]],[[73,[-1]]],3],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[243,[-1]],-2],6,[128,3],28],[-1,-2,[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[243,[-1]],[109,[-1]]],[[70,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[244,[-1]]],[[244,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[6,[[244,[-2]]]]],7,[127,3]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[5,2],[[[244,[-1]],[244,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[244,[-1]],11],12,3],[[[244,[-1]],11],12,[13,3]],[-1,-1,[]],[[[34,[-1]],[48,[-1]]],[[27,[[244,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[]],[[[244,[-1]],-2],6,[128,3],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[244,[-1]],[109,[-1]]],[[69,[-1]]],3],0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[262,[-1,-2]]],[[262,[-1,-2]]],[4,224],[4,3]],[[-1,-2],2,[],[]],[[[262,[-1,-2]],[262,[-1,-2]]],26,224,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[262,[-2,-3]]]]],7,[127,224],[127,3]],[5,2],[[[262,[-1,-2]],[262,[-1,-2]]],9,[10,224],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[262,[-1,-2]],11],12,[224,21],3],[[[262,[-1,-2]],11],12,[13,224],[13,3]],[-1,-1,[]],[65,[[6,[[262,[-1,-2]],263]]],224,3],[65,[[6,[[69,[-1]],113]]],3],[65,[[6,[[262,[135,-1]],113]]],3],[[-1,-2],[[262,[-1,-2]]],224,3],[[-1,-2],15,[16,17],18],[[[262,[-1,-2]],-3],2,224,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[262,[-1,-2]]],[[73,[-2]]],224,3],[[],[[6,[24,25]]]],[[[262,[-1,-2]],[262,[-1,-2]]],[[27,[26]]],224,3],[[[262,[-1,-2]]],[[2,[-2,-2]]],224,3],[[]],[[[262,[-1,-2]],-3],6,[128,224],[128,3],28],[[[262,[-1,-2]]],-1,224,3],[[[262,[-1,-2]]],-2,224,3],[[[262,[-1,-2]]],29,224,3],[-1,-2,[],[]],[-1,29,[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[[262,[-1,-2]]],-2,224,3],[-1,-2,[],[]],0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[242,[-1]]],[[242,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,[[],[[242,[-1]]],[102,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[6,[[8,[-3,-4]]]]],[],[],[],[]],[-1,[[6,[[242,[-2]]]]],7,[127,3]],[5,2],[[[242,[-1]],[242,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[242,[-1]],11],12,[13,3]],[-1,-1,[]],[[[242,[-1]],[70,[-1]]],[[27,[[243,[-1]]]]],3],[[[242,[-1]],[69,[-1]]],[[27,[[244,[-1]]]]],3],[[[69,[-1]]],[[27,[[244,[-1]]]]],3],[[],5],[[[242,[-1]],[34,[-1]],[48,[-1]]],[[27,[[69,[-1]]]]],3],[[[242,[-1]],[69,[-1]],[27,[[244,[-1]]]]],[[27,[[27,[[244,[-1]]]]]]],3],[-1,-2,[],[]],[[],[[6,[24,25]]]],[[],[[242,[-1]]],3],[[[34,[-1]],[48,[-1]]],[[2,[[242,[-1]],[27,[[69,[-1]]]]]]],3],[[[242,[-1]],[109,[-1]]],[[69,[-1]]],3],[[]],[[[242,[-1]],65,[109,[-1]]],[[2,[[69,[-1]],[244,[-1]]]]],3],[[[242,[-1]],123,[109,[-1]]],[[2,[[69,[-1]],[244,[-1]]]]],3],[[[242,[-1]],-2],6,[128,3],28],[-1,-2,[],[]],[[[242,[-1]]],[[34,[-1]]],3],[[[242,[-1]],[69,[-1]]],[[6,[[2,[[34,[-1]],[48,[-1]]]],113]]],3],[[[34,[-1]]],[[242,[-1]]],3],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Num",0],[15,"tuple"],[8,"LurkField",1456],[8,"Clone",4909],[15,"usize"],[4,"Result",4910],[8,"Deserializer",4911],[3,"With",4912],[15,"bool"],[8,"PartialEq",4913],[3,"Formatter",4914],[6,"Result",4914],[8,"Debug",4914],[4,"UInt",4359],[15,"u64"],[8,"Hash",4915],[8,"Sized",4916],[8,"BuildHasher",4915],[8,"Hasher",4915],[3,"IndentedSection",4917],[8,"Display",4914],[8,"Send",4916],[8,"Sync",4916],[3,"Layout",4918],[3,"LayoutError",4918],[4,"Ordering",4913],[4,"Option",4919],[8,"Serializer",4920],[3,"String",4921],[3,"TypeId",4922],[3,"Global",4923],[3,"Box",4924],[8,"Any",4922],[3,"Store",3743],[3,"Vec",4925],[3,"MultiFrame",105],[8,"Coprocessor",639],[3,"CircuitFrame",105],[4,"FoldingConfig",3279],[3,"Arc",4926],[4,"Meta",1001],[3,"WitnessCS",4927],[3,"GlobalAllocations",213],[3,"AllocatedPtr",300],[3,"AllocatedNum",4928],[4,"SynthesisError",4929],[8,"ConstraintSystem",4929],[6,"Ptr",3389],[3,"IO",1001],[3,"Witness",1001],[3,"Frame",1001],[15,"slice"],[3,"Lang",1245],[4,"ProofError",906],[8,"Fn",4930],[8,"CurveCycleEquipped",3162],[6,"C2",3279],[3,"AllocatedContPtr",300],[6,"ConsCircuitWitness",1697],[6,"ContCircuitWitness",1697],[3,"Bls12",4931],[3,"PreparedVerifyingKey",4932],[3,"Proof",4933],[3,"Scalar",4934],[15,"str"],[4,"Boolean",4935],[8,"PrimeField",4936],[8,"FnOnce",4930],[6,"ZExprPtr",4814],[6,"ZContPtr",4814],[6,"ContPtr",3389],[8,"IntoHashComponents",1559],[15,"array"],[8,"AsAllocatedHashComponents",300],[4,"ConsName",1697],[4,"ContName",1697],[4,"Continuation",558],[3,"Utf8PathBuf",4937],[3,"HashMap",4938],[6,"Result",4939],[4,"Backend",415],[6,"Scalar",4940],[3,"Repl",439],[3,"Utf8Path",4937],[4,"Flow",460],[3,"ParallelConfig",460],[3,"WitnessGeneration",460],[3,"Config",460],[4,"ContTag",4121],[3,"State",3705],[6,"Result",4941],[8,"Write",4942],[3,"Store",2640],[4,"Ptr",2561],[3,"GlobalAllocator",2346],[3,"CircomCoprocessor",657],[8,"CircomGadget",208],[4,"TrieCoproc",688],[3,"NewCoprocessor",688],[3,"LookupCoprocessor",688],[3,"InsertCoprocessor",688],[8,"Default",4943],[3,"Trie",688],[4,"Error",688],[3,"LookupProof",688],[3,"InsertProof",688],[3,"RefCell",4944],[3,"Rc",4945],[3,"PoseidonCache",1559],[8,"Error",4946],[4,"ReductionError",906],[4,"LurkError",906],[3,"Error",3743],[4,"NovaError",4947],[8,"Copy",4916],[4,"Status",1001],[3,"Evaluator",1001],[3,"Error",4914],[3,"FrameIt",1001],[3,"Take",4948],[3,"Binding",1245],[8,"Into",4949],[3,"Symbol",4013],[4,"Coproc",1245],[3,"DummyCoprocessor",1245],[3,"IndexMap",4950],[8,"Deserialize",4911],[8,"Serialize",4920],[3,"Thunk",1371],[4,"Expression",1371],[4,"LanguageField",1456],[3,"FWrap",1456],[15,"u8"],[15,"char"],[4,"ExprTag",4121],[4,"Op1",4121],[4,"Op2",4121],[15,"u16"],[15,"u32"],[15,"u128"],[3,"HashConstants",1559],[6,"U3",4951],[3,"PoseidonConstants",4952],[6,"U4",4951],[6,"U6",4951],[6,"U8",4951],[4,"HashConst",1559],[4,"HashArity",1559],[3,"InversePoseidonCache",1559],[3,"HashWitness",1697],[8,"HashName",1697],[8,"Eq",4913],[6,"ConsStub",1697],[3,"Cons",1697],[4,"Stub",1697],[6,"ConsWitness",1697],[3,"CircuitHashWitness",1697],[6,"HashCircuitWitnessBlocks",1697],[8,"ContentAddressed",1697],[3,"ScalarCons",1697],[3,"ScalarCont",1697],[3,"Cont",1697],[6,"ContStub",1697],[6,"ContWitness",1697],[6,"Preimage",1697],[3,"Func",2074],[3,"Preimages",2397],[3,"Frame",2397],[3,"Var",2074],[4,"Tag",2074],[4,"Lit",2074],[3,"Block",2074],[4,"Ctrl",2074],[4,"Op",2074],[6,"AString",2074],[4,"AllocatedVal",2346],[4,"PreimageData",2397],[3,"MultiFrame",2510],[4,"ZChildren",2561],[6,"ZPtr",2561],[4,"Syntax",4082],[6,"Span",2759],[4,"Error",2759],[3,"ZStore",2703],[3,"Package",2731],[6,"SymbolRef",2731],[4,"LitBase",2800],[6,"ParseResult",2759],[8,"AsRef",4949],[3,"ParseError",2847],[8,"InputLength",4953],[8,"AsBytes",4953],[4,"ErrorKind",4954],[4,"ParseErrorKind",2847],[6,"IResult",4955],[4,"Pos",2929],[4,"StringFragment",2967],[3,"TestConstraintSystem",4956],[8,"MultiFrameTrait",3026],[3,"Proof",3085],[8,"Engine",4957],[8,"MultiMillerLoop",4957],[3,"PublicParams",3085],[3,"Groth16Prover",3085],[3,"Parameters",4958],[3,"GenericSRS",4959],[8,"RngCore",4960],[3,"VerifierSRS",4959],[3,"AggregateProofAndInstance",4961],[6,"C2",3162],[3,"PublicParams",3162],[8,"StepCircuit",4962],[4,"Proof",3162],[3,"NovaProver",3162],[6,"G1",3162],[3,"CircuitDigests",4963],[4,"Proof",3279],[3,"PublicParams",3279],[8,"StepCircuit",4964],[3,"SuperNovaProver",3279],[4,"SuperNovaError",4965],[3,"GPtr",3389],[4,"RawPtr",3389],[8,"Tag",4121],[3,"Instance",3535],[4,"Error",3504],[6,"SuperNovaAuxParams",3279],[6,"NovaCircuitShape",3162],[8,"NonUniformCircuit",4963],[3,"Error",4941],[3,"Error",4966],[4,"Kind",3535],[3,"Metadata",3535],[3,"File",4967],[3,"ReplState",3633],[3,"Command",4968],[3,"Repl",3633],[8,"ReplTrait",3633],[3,"Path",4969],[3,"ConstantPtrs",3743],[3,"NamedConstants",3743],[3,"ZStore",4863],[4,"ZCont",4682],[4,"ZExpr",4762],[8,"From",4949],[8,"Field",4936],[4,"ZData",4404],[4,"SerdeError",4452],[3,"Deserializer",4485],[8,"Visitor",4911],[3,"SerializeCell",4537],[3,"SerializeMap",4537],[3,"SerializeTupleVariant",4537],[3,"StructSerializer",4537],[3,"Serializer",4537],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"ZPtr",4814],[3,"Error",4939],[8,"ToInputs",100],[13,"Let",607],[13,"LetRec",607],[13,"Call0",607],[13,"Call",607],[13,"Call2",607],[13,"Tail",607],[13,"Lookup",607],[13,"Unop",607],[13,"Binop",607],[13,"Binop2",607],[13,"If",607],[13,"Emit",607],[8,"CoCircuit",639],[6,"ChildMap",688],[8,"Evaluable",1001],[8,"CAddr",1697],[4,"Val",2397],[13,"Pos",2961],[8,"EvaluationStore",3026],[8,"FrameLike",3026],[8,"Prover",3026],[8,"CEKState",3026],[8,"Provable",3026],[6,"C1Lurk",3162],[6,"C1LEM",3162],[6,"SuperNovaPublicParams",3279],[8,"TypePredicates",3389],[8,"Op",4121],[8,"Write",4401],[13,"Let",4730],[13,"LetRec",4730],[13,"Call0",4730],[13,"Call",4730],[13,"Call2",4730],[13,"Tail",4730],[13,"Lookup",4730],[13,"Unop",4730],[13,"Binop",4730],[13,"Binop2",4730],[13,"If",4730],[13,"Emit",4730],[13,"Fun",4811]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"MetricsSinkHandle",0],[15,"tuple"],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
