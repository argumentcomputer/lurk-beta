var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLFLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","deserialize","drop","from","handle_meta","handle_non_meta","init","into","layout_raw","name","new","pointer_metadata","process_line","prompt","public_param_dir","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"clutch"],[27,"clap_builder::builder::command"],[28,"rkyv::with"],[29,"core::result"],[30,"pasta_curves::pallas"],[31,"lurk::eval::lang"],[32,"lurk::store"],[33,"lurk::state"],[34,"core::cell"],[35,"alloc::rc"],[36,"lurk::ptr"],[37,"anyhow"],[38,"std::path"],[39,"core::convert"],[40,"core::marker"],[41,"lurk::eval"],[42,"core::alloc::layout"],[43,"core::alloc::layout"],[44,"core::option"],[45,"lurk::eval::lang"],[46,"core::any"],[47,"alloc::alloc"],[48,"alloc::boxed"],[49,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[-1,-1,[]],[[[8,[6,[7,[6]]]],[9,[6]],[12,[[11,[10]]]],[13,[6]],-1],[[14,[5]]],[[16,[15]],17]],[[[8,[6,[7,[6]]]],[9,[6]],10,[13,[6]]],[[14,[[5,[[18,[6]],[18,[6]],2]]]]]],[[],2],[-1,-2,[],[]],[[],[[4,[19,20]]]],[[],21],[[[9,[6]],2,[22,[1]],[23,[6,[7,[6]]]]],[[8,[6,[7,[6]]]]]],[[]],[[[8,[6,[7,[6]]]],21],21],[[[8,[6,[7,[6]]]]],21],[[],24],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,25,[]],[[[27,[-1,26]]],[[27,[28,26]]],[]],[-1,28,[]],[-1,28,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Command",27],[15,"usize"],[3,"With",28],[4,"Result",29],[15,"tuple"],[6,"Scalar",30],[4,"Coproc",31],[3,"ClutchState",0],[3,"Store",32],[3,"State",33],[3,"RefCell",34],[3,"Rc",35],[6,"Ptr",36],[6,"Result",37],[3,"Path",38],[8,"AsRef",39],[8,"Copy",40],[3,"IO",41],[3,"Layout",42],[3,"LayoutError",42],[3,"String",43],[4,"Option",44],[3,"Lang",31],[3,"Utf8PathBuf",45],[3,"TypeId",46],[3,"Global",47],[3,"Box",48],[8,"Any",46]]},\
"fcomm":{"doc":"","t":"DEDDGRNDNDNEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMFMLLLLMLLLLLLLLLLLLLLLLMMLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLFLLLLLLLLLLLLKKKLLLLLLLLKK","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","file_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_param_dir","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","from","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","FileMap","FileStore","borrow","borrow_mut","data_dir","deref","deref_mut","deserialize","drop","fmt","from","get","init","into","layout_raw","new","pointer_metadata","read_from_json_path","read_from_path","read_from_stdin","set","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","write_to_json_path","write_to_path"],"q":[[0,"fcomm"],[639,"fcomm::error"],[684,"fcomm::file_map"],[714,"lurk::store"],[715,"lurk::ptr"],[716,"lurk::eval::lang"],[717,"lurk::eval::lang"],[718,"lurk::circuit::circuit_frame"],[719,"lurk::proof::nova"],[720,"lurk::proof::nova"],[721,"core::clone"],[722,"lurk::field"],[723,"lurk::ptr"],[724,"serde::de"],[725,"core::default"],[726,"serde::de"],[727,"serde::de"],[728,"core::option"],[729,"lurk::eval"],[730,"core::fmt"],[731,"core::fmt"],[732,"core::hash"],[733,"core::marker"],[734,"core::hash"],[735,"core::alloc::layout"],[736,"camino"],[737,"lurk::public_parameters::error"],[738,"std::path"],[739,"serde::ser"],[740,"core::any"],[741,"alloc::alloc"],[742,"alloc::boxed"],[743,"core::any"],[744,"lurk::z_data::serde"],[745,"hex::error"],[746,"std::io::error"],[747,"bellpepper_core::constraint_system"],[748,"lurk::store"],[749,"color_eyre::section"],[750,"core::fmt"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,29,0,9,0,17,0,0,0,17,17,0,9,0,29,0,0,9,0,0,28,17,29,0,0,0,0,28,25,25,18,19,22,25,26,27,28,29,4,9,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,23,16,30,17,18,19,22,23,24,25,26,27,28,29,4,9,30,17,18,19,22,23,24,25,26,27,28,29,4,9,30,22,23,25,4,0,18,19,18,19,29,17,18,19,28,29,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,17,18,18,19,19,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,4,4,40,40,16,16,9,9,30,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,18,19,18,19,17,18,19,22,23,24,25,26,27,28,29,4,9,30,17,17,17,18,18,18,19,19,19,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,29,29,29,4,4,4,9,9,9,30,30,30,0,18,24,16,0,9,16,18,19,24,4,18,19,4,0,17,18,19,22,23,24,25,26,27,28,29,4,40,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,22,29,22,28,22,22,17,17,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,23,25,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,9,9,18,19,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,25,0,16,25,25,9,16,25,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,30,9,16,22,28,9,16,0,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,16,4,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,30,18,19,25,17,18,19,22,23,24,25,26,27,28,29,4,9,30,22,17,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,40,30,30,16,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,17,18,19,22,23,24,25,26,27,28,29,4,40,16,9,30,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,80,80,0,80,80,80,80,80,80,80,80,80,80,80,80,82,82,82,80,80,80,80,80,80,80,80,82,82],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[17,17],[18,18],[[[19,[-1]]],[[19,[-1]]],[20,21]],[[[22,[-1]]],[[22,[-1]]],[20,21]],[[[23,[-1]]],[[23,[-1]]],[20,21]],[[[24,[-1]]],[[24,[-1]]],[20,21]],[[[25,[-1]]],[[25,[-1]]],[20,21]],[26,26],[[[27,[-1]]],[[27,[-1]]],[20,21]],[[[28,[-1]]],[[28,[-1]]],[20,21]],[29,29],[[[4,[-1]]],[[4,[-1]]],[20,21]],[[[9,[-1]]],[[9,[-1]]],[20,21]],[[[30,[-1]]],[[30,[-1]]],[20,21]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],[[-1,-2],31,[],[]],0,0,0,0,[[],32],0,0,0,0,[[29,[2,[-1]]],[[33,[-1]]],[21,34,35]],[17,5],[[],18],[[],[[19,[-1]]],[36,21]],[[],[[28,[-1]]],21],[[],29],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[11,[17]]],37],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[18]]],37],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[19,[-2]]]]],37,[39,21]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[22,[-2]]]]],37,21],[-1,[[11,[[23,[-2]]]]],37,[39,21]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[24,[-2]]]]],37,[39,21]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[25,[-2]]]]],37,[39,21]],[-1,[[11,[26]]],37],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[27,[-2]]]]],37,[39,21]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[28,[-2]]]]],37,[39,21]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[29]]],37],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[4,[-2]]]]],37,[39,21]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[40]]],37],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[16,[-2]]]]],37,[39,41]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[9,[-2]]]]],37,[39,21]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[30,[-2]]]]],37,[39,21]],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],[5,31],0,0,0,0,[[17,17],6],[[18,18],6],[[[19,[-1]],[19,[-1]]],6,[42,21]],[[[22,[-1]],[22,[-1]]],6,[42,21]],[[[23,[-1]],[23,[-1]]],6,[42,21]],[[[24,[-1]],[24,[-1]]],6,[42,21]],[[[25,[-1]],[25,[-1]]],6,[42,21]],[[26,26],6],[[[27,[-1]],[27,[-1]]],6,[42,21]],[[[28,[-1]],[28,[-1]]],6,[42,21]],[[29,29],6],[[[4,[-1]],[4,[-1]]],6,[42,21]],[[[9,[-1]],[9,[-1]]],6,[42,21]],[[[30,[-1]],[30,[-1]]],6,[42,21]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[[2,[-1]],[3,[-1]],5],[[11,[18,10]]],[21,34]],[[[24,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[21,34,35]],[[[2,[1]],[3,[1]],[43,[[3,[1]]]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[2,[-1]],[3,[-1]],[43,[[3,[-1]]]],5,[8,[-1,[7,[-1]]]]],[[11,[[31,[[44,[-1]],5]],10]]],21],[[[9,[-1]]],[[43,[18]]],21],[[[16,[1]],[2,[1]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],0,0,0,0,0,0,[[[4,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[21,34,35]],0,[[17,45],46],[[18,45],46],[[[19,[-1]],45],46,[47,21]],[[[22,[-1]],45],46,[47,21]],[[[23,[-1]],45],46,[47,21]],[[[24,[-1]],45],46,[47,21]],[[[25,[-1]],45],46,[47,21]],[[26,45],46],[[[27,[-1]],45],46,[47,21]],[[[28,[-1]],45],46,[47,21]],[[29,45],46],[[[4,[-1]],45],46,[47,21]],[[40,45],46],[[[9,[-1]],45],46,[47,21]],[[[30,[-1]],45],46,[47,21]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1]],[3,[-1]]],[[11,[[22,[-1]],10]]],[21,34,35]],[[[2,[-1]],[33,[-1]]],29,[21,34]],[-1,[[11,[[22,[-2]]]]],[[50,[[49,[48]]]]],21],[[[2,[-1]],[3,[-1]]],[[28,[-1]]],[21,34,35]],[[[2,[-1]],[3,[-1]],-1],[[11,[[22,[-1]],10]]],[21,34,35]],[[[2,[-1]],[3,[-1]]],[[11,[[31,[[22,[-1]],-1]],10]]],[21,34,35]],[[-1,-2],51,[52,53],54],[[17,-1],31,55],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[16,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],[[[9,[-1]]],6,21],[[[9,[-1]]],6,21],0,0,[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],[[],[[11,[56,57]]]],0,[5,58],0,[[[2,[1]],[23,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[23,[1]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[9,[-1]]],[[43,[[25,[-1]]]]],21],[[[16,[1]],[2,[1]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[9,[-1]]],[[11,[[59,[-1]],10]]],[21,34,39]],[[[2,[1]],[9,[1]],5,6,[13,[1,[7,[1]],[12,[1,[7,[1]]]]]],[14,[1,[12,[1,[7,[1]]]]]],[15,[[8,[1,[7,[1]]]]]]],[[11,[[16,[1]],10]]]],[[[22,[-1]],[2,[-1]]],[[3,[-1]]],[21,34,35]],[[[28,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[3,[-1]]],[21,34,35]],[[[9,[-1]]],[[43,[[19,[-1]]]]],21],[[[16,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[31,[[44,[1]],[44,[1]]]],10]]]],[[],60],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],[[],[[11,[-1,61]]],[]],0,0,[[17,-1],11,63],[[18,-1],11,63],[[[19,[-1]],-2],11,[34,21],63],[[[22,[-1]],-2],11,21,63],[[[23,[-1]],-2],11,[34,21],63],[[[24,[-1]],-2],11,[34,21],63],[[[25,[-1]],-2],11,[34,21],63],[[26,-1],11,63],[[[27,[-1]],-2],11,[34,21],63],[[[28,[-1]],-2],11,[34,21],63],[[29,-1],11,63],[[[4,[-1]],-2],11,[34,21],63],[[40,-1],11,63],[[[16,[-1]],-2],11,[34,41],63],[[[9,[-1]],-2],11,[34,21],63],[[[30,[-1]],-2],11,[34,21],63],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[22,[-1]]],64,21],[5,[[11,[17]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[-1,65,[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],[-1,68,[]],0,0,0,[[[16,[1]],[14,[1,[12,[1,[7,[1]]]]]],[8,[1,[7,[1]]]]],[[11,[40,10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,69,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[5,31],[[10,45],46],[[10,45],46],[70,10],[-1,-1,[]],[71,10],[72,10],[73,10],[61,10],[74,10],[75,10],[[-1,-2],[[76,[-2,-3]]],[],[77,78,79],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[11,[56,57]]]],[[]],[10,[[43,[69]]]],[-1,64,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,65,[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[-1,68,[]],[-1,68,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],60],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[38,[-3,-4]]]]],[],[],[],[]],[5,31],[[[80,[-1,-2]],45],46,[47,81],[47,82]],[-1,-1,[]],[[[80,[-1,-2]],-1],[[43,[-2]]],81,82],[[],5],[-1,-2,[],[]],[[],[[11,[56,57]]]],[-1,[[11,[[80,[-2,-3]],61]]],[[50,[62]]],81,82],[[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[-1,[[11,[-2,61]]],[[50,[62]]],[]],[[],[[11,[-1,61]]],[]],[[[80,[-1,-2]],-1,-2],[[11,[31,61]]],81,82],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,65,[]],[[[67,[-1,66]]],[[67,[68,66]]],[]],[-1,68,[]],[-1,68,[]],[-1,-2,[],[]],[[-1,-2],31,[],[[50,[62]]]],[[-1,-2],31,[],[[50,[62]]]]],"c":[],"p":[[6,"S1",0],[3,"Store",714],[6,"Ptr",715],[3,"CommittedExpression",0],[15,"usize"],[15,"bool"],[4,"Coproc",716],[3,"Lang",716],[4,"Claim",0],[4,"Error",639],[4,"Result",717],[3,"MultiFrame",718],[3,"NovaProver",719],[3,"PublicParams",719],[3,"Arc",720],[3,"Proof",0],[4,"ReductionCount",0],[3,"Evaluation",0],[3,"PtrEvaluation",0],[8,"Clone",721],[8,"LurkField",722],[3,"Commitment",0],[3,"OpeningRequest",0],[3,"Expression",0],[3,"Opening",0],[3,"ZBytes",0],[3,"ZStorePtr",0],[4,"LurkPtr",0],[4,"LurkCont",0],[3,"Cert",0],[15,"tuple"],[6,"CommittedExpressionMap",0],[6,"ContPtr",715],[8,"Serialize",723],[8,"DeserializeOwned",724],[8,"Default",725],[8,"Deserializer",724],[3,"With",726],[8,"Deserialize",724],[3,"VerificationResult",0],[8,"CurveCycleEquipped",719],[8,"PartialEq",727],[4,"Option",728],[3,"IO",729],[3,"Formatter",730],[6,"Result",730],[8,"Debug",730],[15,"u8"],[15,"slice"],[8,"AsRef",731],[15,"u64"],[8,"Hash",732],[8,"Sized",733],[8,"BuildHasher",732],[8,"Hasher",732],[3,"Layout",734],[3,"LayoutError",734],[6,"NovaProofCache",0],[6,"ZExprPtr",735],[3,"Utf8PathBuf",736],[4,"Error",737],[3,"Path",738],[8,"Serializer",723],[3,"String",739],[3,"TypeId",740],[3,"Global",741],[3,"Box",742],[8,"Any",740],[8,"Error",743],[4,"SerdeError",744],[4,"FromHexError",745],[3,"Error",746],[4,"SynthesisError",747],[3,"Error",714],[3,"Error",748],[3,"IndentedSection",749],[8,"Display",730],[8,"Send",733],[8,"Sync",733],[3,"FileMap",684],[8,"ToString",739],[8,"FileStore",684]]},\
"lurk":{"doc":"","t":"ENCRNCLLOLLOAALLAAAOLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCIAAKKDDLLLLLLLLLMLLLLLLMLLLLLLFLLLLLMLMLLLLLLLLLLMMLLLLLLMLLMMLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLMAAAAIKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFFAAENNLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLHDENDNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLKLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGDELLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNIDDDDNNEENDMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLMLLLLLLLLLLLLLLLLLLLLLFLMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLMLLLLLLLLLKLLLLKLLLLKLLLALLLLLLLKLLLMLLLMLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNNNNENNNNNNNNNDNNENNNNNNNNENNNNNNNNENDLLMLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLLMLLLMLLLLLLLALMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAENDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFNNNDNEDNELLMLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLMLLLLLLLLMLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNNNNNEGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLDLLLLLLLLLLLLLLLLLFFLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFQIQQQQQIQIQIIIIQQIQQQKKKKKKLKLKKKKLAKKKKKLLLKALKKKKKKKKKKAKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLGGQQQQNIGGGQGQDGEDNGGLLLLLLMFLLLMLLLLLLLLLLLLLLLLLLLMMLLLLLLMLLLLLLLMLMLLLLLFLLLMLLLLLLLLLLLLLLLLLLLLLLLNENNDDEDNDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLLLMLLLLLLLLKLKLLLLLMLLMKLKLLLLLKLKLFFFLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMLMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMMLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLLMMLLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLNNELLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","repl","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","blank","blank","blank","borrow","borrow","borrow_mut","borrow_mut","cached_witness","cached_witness","circuit_index","clone","clone","clone_into","clone_into","compute_witness","count","deref","deref","deref_mut","deref_mut","deserialize","deserialize","destructure_list","drop","drop","emitted","fmt","fmt","folding_config","frames","frames","from","from","from_frame","from_frames","from_frames","get_evaluation_frames","get_store","init","init","input","input","input","into","into","io_to_scalar_vector","layout_raw","layout_raw","make_dummy","meta","output","output","output","output","pointer_metadata","pointer_metadata","precedes","precedes","precedes","public_input_size","public_inputs","reduction_count","significant_frame_count","store","store","synthesize","synthesize","synthesize_frames","synthesize_frames","synthesize_frames_parallel","synthesize_frames_sequential","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","verify_groth16_proof","vzip","vzip","witness","circom","constraints","data","pointer","CircomGadget","into_circom_input","name","simple_evaluate","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","quote_ptr","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","get_config","parse_and_run","paths","repl","Backend","Nova","SnarkPackPlus","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","from","header","init","into","layout_raw","pointer_metadata","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","CONFIG","Config","Flow","Parallel","ParallelConfig","ParallelN","Sequential","WitnessGeneration","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","num_threads","parallelism","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","has_circuit","simple_evaluate","synthesize","synthesize_step_circuit","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","simple_evaluate","synthesize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","Trie","TrieCoproc","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Coprocessor","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Lurk","Meta","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","cont","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_sym_env","env","env","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_frames","get_coprocessor_z_ptr","get_frames","header","i","init","init","init","init","init","init","init","initial","input","input","input_size","into","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_coprocessor","is_error","is_error","is_error","is_incomplete","is_lurk","is_terminal","is_terminal","is_terminal","iter","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","log","log","log","maybe_emitted_expression","meta","new","next","output","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_coprocessor","get_coprocessor_from_zptr","get_coprocessor_z_ptr","get_index","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup","max_coprocessor_arity","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BLS12_381","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","length","names_and_ptrs","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_blank","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Null","Num","Op","Op1","Op2","Open","Or","Return","String","Sub","Symbol","Tag","Trunc","Var","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_until","call_until_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_field","from_ptr","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","init_store","input_params","interpreter","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","name","name","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slot","store","synthesize_frame","synthesize_frame_aux","to_field","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zstore","AllocatedVal","Boolean","GlobalAllocator","Number","Pointer","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","eval_step","evaluate","evaluate_simple","evaluate_with_env_and_cont","Boolean","FPair","FPtr","Frame","Pointer","PreimageData","Preimages","PtrVec","Val","blank","blank","blank","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone","clone_into","clone_into","clone_into","commitment","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","from","hash4","hash6","hash8","init","init","init","init","input","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","less_than","new_from_func","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimages","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Atom","Atom","Ptr","Tuple2","Tuple2","Tuple3","Tuple3","Tuple4","Tuple4","ZChildren","ZPtr","borrow","borrow","borrow_mut","borrow_mut","cast","char","clone","clone_into","comm","dbg_display","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt_to_string","from","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","init","into","into","is_nil","is_null","layout_raw","layout_raw","null","num","num_u64","pointer_metadata","pointer_metadata","serialize","serialize","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u64","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Store","borrow","borrow_mut","car_cdr","commit","default","deref","deref_mut","deserialize","drop","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_string","fetch_sym","fetch_symbol","fetch_symbol_path","fmt","from","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","init","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_lurk_sym","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","into","key","layout_raw","list","open","pointer_metadata","poseidon_cache","read","read_maybe_meta","read_with_default_state","to_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ZStore","add_comm","borrow","borrow_mut","default","deref","deref_mut","deserialize","deserialize","drop","fmt","from","get_children","init","into","layout_raw","open","pointer_metadata","populate_store","populate_z_store","serialize","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","from_upto","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","AllocatedIO","CEKState","CircuitFrame","ContPtr","ContPtr","Error","EvalFrame","EvaluationStore","FrameIO","FrameLike","GlobalAllocation","MultiFrameTrait","NIVCProver","Provable","Prover","Ptr","Ptr","PublicParameters","PublicParams","Store","StoreError","blank","cached_witness","compute_witness","cont","emitted","env","expected_total_iterations","expr","frame_padding_count","frames","from_frames","get_cont_terminal","get_evaluation_frames","get_evaluation_frames","groth16","initial_empty_env","input","io_to_scalar_vector","lang","make_dummy","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","output","output","precedes","ptr_eq","public_input_size","public_inputs","read","reduction_count","reduction_count","significant_frame_count","supernova","synthesize_frames","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","outer_prove","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_count","prove","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","CE1","CE2","CK1","CK2","Compressed","CurveCycleEquipped","EE1","EE2","G1","G1","G2","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached_witness","circuits","clone","clone_into","compress","count","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","folding_config","frames","from","from","from","init","init","init","input","into","into","into","lang","layout_raw","layout_raw","layout_raw","meta","new","output","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","reduction_count","serialize","serialize","store","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","Compressed","FoldingConfig","IVC","NIVC","NIVCStep","NIVCSteps","Proof","PublicParams","Recursive","SuperNovaProver","SuperNovaPublicParams","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_index","circuit_index","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","fmt","fmt","from","from","from","from","from","from","from_frames","index","init","init","init","init","init","init","into","into","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","num_circuits","num_steps","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","primary_circuit","prove","prove_recursively","reduction_count","reduction_count","serialize","serialize","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","allocate_maybe_fun_unconstrained","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","error","public_params","public_params_default_dir","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","env","eval_expr","fmt","fmt","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","layout_raw","layout_raw","limit","name","name","new","new","new","new","pointer_metadata","pointer_metadata","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","initial_empty_env","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","ptr_eq","quote","quotient","read","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","fmt_to_string_raw","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[100,"lurk::circuit"],[105,"lurk::circuit::circuit_frame"],[197,"lurk::circuit::gadgets"],[201,"lurk::circuit::gadgets::circom"],[205,"lurk::circuit::gadgets::constraints"],[206,"lurk::circuit::gadgets::data"],[293,"lurk::circuit::gadgets::pointer"],[403,"lurk::cli"],[408,"lurk::cli::backend"],[432,"lurk::cli::repl"],[453,"lurk::config"],[551,"lurk::cont"],[600,"lurk::cont::Continuation"],[632,"lurk::coprocessor"],[643,"lurk::coprocessor::circom"],[644,"lurk::coprocessor::circom::non_wasm"],[675,"lurk::coprocessor::trie"],[893,"lurk::error"],[988,"lurk::eval"],[1232,"lurk::eval::lang"],[1355,"lurk::expr"],[1440,"lurk::field"],[1543,"lurk::hash"],[1681,"lurk::hash_witness"],[2058,"lurk::lem"],[2331,"lurk::lem::circuit"],[2373,"lurk::lem::eval"],[2377,"lurk::lem::interpreter"],[2485,"lurk::lem::pointers"],[2563,"lurk::lem::store"],[2618,"lurk::lem::zstore"],[2646,"lurk::package"],[2674,"lurk::parser"],[2715,"lurk::parser::base"],[2762,"lurk::parser::error"],[2844,"lurk::parser::position"],[2876,"lurk::parser::position::Pos"],[2882,"lurk::parser::string"],[2920,"lurk::parser::syntax"],[2941,"lurk::proof"],[3001,"lurk::proof::groth16"],[3078,"lurk::proof::nova"],[3182,"lurk::proof::supernova"],[3341,"lurk::ptr"],[3447,"lurk::public_parameters"],[3451,"lurk::public_parameters::error"],[3482,"lurk::repl"],[3554,"lurk::state"],[3592,"lurk::store"],[3862,"lurk::symbol"],[3931,"lurk::syntax"],[3970,"lurk::tag"],[4206,"lurk::uint"],[4248,"lurk::writer"],[4251,"lurk::z_data"],[4299,"lurk::z_data::serde"],[4332,"lurk::z_data::serde::de"],[4384,"lurk::z_data::serde::ser"],[4529,"lurk::z_data::z_cont"],[4577,"lurk::z_data::z_cont::ZCont"],[4609,"lurk::z_data::z_expr"],[4658,"lurk::z_data::z_expr::ZExpr"],[4661,"lurk::z_data::z_ptr"],[4710,"lurk::z_data::z_store"],[4756,"core::clone"],[4757,"rkyv::with"],[4758,"core::result"],[4759,"serde::de"],[4760,"core::cmp"],[4761,"core::fmt"],[4762,"core::fmt"],[4763,"core::marker"],[4764,"core::hash"],[4765,"core::fmt"],[4766,"core::alloc::layout"],[4767,"serde::ser"],[4768,"alloc::string"],[4769,"core::any"],[4770,"alloc::alloc"],[4771,"alloc::boxed"],[4772,"core::any"],[4773,"alloc::sync"],[4774,"bellpepper::util_cs::witness_cs"],[4775,"bellpepper_core::gadgets::num"],[4776,"bellpepper_core::constraint_system"],[4777,"bellpepper_core::constraint_system"],[4778,"blstrs"],[4779,"bellperson::groth16::verifying_key"],[4780,"bellperson::groth16::proof"],[4781,"blstrs::scalar"],[4782,"bellpepper_core::gadgets::boolean"],[4783,"ff"],[4784,"core::ops::function"],[4785,"std::collections::hash::map"],[4786,"anyhow"],[4787,"pasta_curves::pallas"],[4788,"camino"],[4789,"std::io"],[4790,"core::default"],[4791,"core::cell"],[4792,"alloc::rc"],[4793,"core::error"],[4794,"nova_snark::errors"],[4795,"core::marker"],[4796,"core::convert"],[4797,"indexmap::map"],[4798,"serde::de"],[4799,"neptune::poseidon"],[4800,"typenum::generated::consts"],[4801,"nom::traits"],[4802,"nom::internal"],[4803,"bellpepper_core::util_cs::test_cs"],[4804,"pairing"],[4805,"pairing"],[4806,"bellperson::groth16::aggregate::srs"],[4807,"rand_core"],[4808,"bellperson::groth16::aggregate::srs"],[4809,"nova_snark::traits::circuit"],[4810,"nova_snark::traits"],[4811,"nova_snark::traits::circuit_supernova"],[4812,"nova_snark::supernova"],[4813,"nova_snark::supernova::error"],[4814,"serde_json::error"],[4815,"std::io::error"],[4816,"std::path"],[4817,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","Global config for parallelism.","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","Returns the argument unchanged.","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","","","","","","","","","","","","","","","","","Return the circuit index assigned to this <code>MultiFrame</code>’s …","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Make a dummy <code>MultiFrame</code>, duplicating <code>self</code>’s final …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Precompute the witness blocks for all the named hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","LEM tags","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","LEM variables","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","Calls a <code>Func</code> on an input until the stop contidion is …","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Lurk’s step function","","","","","","","A <code>Frame</code> carries the data that results from interpreting a …","","","<code>Preimages</code> hold the non-deterministic advices for hashes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","","","","<code>ZChildren</code> keeps track of the children of <code>ZPtr</code>s, in case …","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Recursively hashes the children of a <code>Ptr</code> in order to …","","","Hashes <code>Ptr</code> trees from the bottom to the top, avoiding deep …","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","The associated type of allocated input and output to the …","The State of a CEK machine.","The associated <code>CircuitFrame</code> type","the type for the Store’s continuation poitners","The associated <code>ContPtr</code> type","the type for the Store’s errors","The associated <code>Frame</code> type","A trait for a store of expressions","the type for the Frame’s IO","A Frame of evaluation in a CEK machine.","The associated type which manages global allocations","Trait to support multiple <code>MultiFrame</code> implementations.","Supertrait for <code>Prover</code> that also supports NIVC.","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","the type for the Store’s pointers","The associated <code>Ptr</code> type","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","The associated <code>Store</code> type","The error type for the Store type","Synthesize a blank circuit.","Returns a reference to the cached witness values","Populates a WitnessCS with the witness values for the …","the continuation (K)","the emitted frames","the environment (E)","Returns the expected total number of iterations for the …","the expression, or control word (C)","Returns the number of padding frames needed for a given …","Iterates through the Self::CircuitFrame instances","Create an instance from some <code>Self::Frame</code>s.","getting the terminal continuation pointer","Evaluates and generates the frames of the computation …","Evaluates and generates the <code>Frame</code>s of the computation …","An adapter to a Groth16 proving system implementation.","getting a pointer to the initial, empty environment","the input of the frame","Returns a public IO vector when equipped with the local …","Returns a reference to the Prover’s Lang.","Make a dummy instance, duplicating <code>self</code>’s final …","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","the output of the frame","The output of the last frame","Returns true if the supplied instance directly precedes …","hash-equality of the expressions represented by Ptrs","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","interpreting a string representation of an expression","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Counting the number of non-trivial frames in the evaluation","An adapter to a SuperNova proving system implementation.","Synthesize some frames.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Generates an outer Groth16 proof using the given …","","","","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","The number of reductions used in the proof.","","","","","","","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","The commitment engine type for the first curve in the …","The commitment engine type for the second curve in the …","Why the next 4 types?","The type of the commitment key used for points of the …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","Generates the circuits for the Nova proving system.","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","A proof for the final step of a recursive computation","Folding configuration specifies <code>Lang</code> and can be either <code>IVC</code> …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","One step of an NIVC computation","All steps of an NIVC computation","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","","","","","","Return the circuit index assigned in this <code>FoldingConfig</code> to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Separate frames according to NIVC circuit requirements.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","","","","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","Number of NIVC steps contained.","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the claim, which (for now), …","","","","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","","","","",""],"i":[0,1,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,259,259,0,0,36,38,36,36,38,36,38,36,36,36,36,38,36,38,36,36,36,38,36,38,36,38,36,0,38,36,36,38,36,36,36,36,38,36,38,36,36,36,36,38,36,38,38,36,38,36,36,38,36,36,36,38,36,38,36,38,36,38,36,36,36,36,36,36,38,36,36,36,36,36,36,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,36,38,36,38,0,0,0,0,0,92,92,92,0,0,0,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,0,0,0,44,56,44,56,56,44,56,44,56,44,44,44,44,44,56,44,72,44,56,44,44,56,44,56,44,56,44,56,44,56,44,56,56,44,44,44,44,44,56,56,44,44,44,56,44,56,44,56,44,56,44,56,56,44,44,56,44,56,44,56,56,56,56,44,56,44,44,56,44,56,44,44,44,44,44,44,44,44,44,44,44,56,44,56,44,44,56,44,44,56,44,56,44,56,44,56,44,56,44,56,44,56,44,56,44,56,44,0,0,0,0,0,0,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,0,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,0,0,83,0,83,83,0,83,84,85,86,83,84,85,86,83,83,84,85,86,83,84,85,86,83,84,85,86,83,84,85,86,83,84,85,86,83,84,85,86,83,84,85,86,83,84,85,86,83,84,85,86,83,83,83,84,85,86,83,86,83,84,85,86,84,85,84,84,83,84,85,86,83,84,85,86,83,84,85,86,83,84,85,86,83,84,85,86,83,84,85,86,83,84,85,86,86,75,75,75,75,75,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,260,261,262,263,264,265,266,267,268,269,270,260,261,271,269,264,267,268,269,262,263,264,265,266,268,260,261,263,268,270,260,261,0,0,272,0,37,37,37,37,272,37,0,0,0,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,0,0,0,93,0,0,93,0,0,99,93,0,0,0,0,93,99,93,94,95,96,98,100,101,99,93,94,95,96,98,100,101,93,94,95,96,93,94,95,96,273,94,95,96,98,99,93,94,95,96,98,100,101,99,93,94,95,96,98,100,101,99,93,94,94,95,95,96,96,98,100,101,99,93,94,95,96,98,100,101,98,93,94,95,96,93,99,93,94,95,96,98,100,101,99,93,93,93,93,94,95,96,98,100,101,93,99,93,94,95,96,98,100,101,98,0,99,93,94,95,96,98,100,101,99,93,94,95,96,98,100,101,98,98,98,98,99,93,94,95,96,98,100,101,98,98,98,98,94,95,96,93,94,95,96,93,93,94,95,96,99,93,94,95,96,98,100,101,99,93,94,95,96,98,100,101,99,93,94,95,96,98,100,101,99,93,94,95,96,98,100,101,99,93,94,95,96,98,100,101,99,93,94,95,96,98,100,101,100,101,99,93,94,95,96,98,100,101,106,107,0,106,54,0,54,0,106,54,54,106,107,54,106,107,54,106,107,106,107,106,107,54,106,107,54,106,107,54,106,107,54,106,107,54,54,106,106,107,107,54,54,54,54,54,106,106,107,54,106,107,54,106,107,54,106,107,54,106,107,54,106,107,54,106,107,54,106,106,107,54,106,107,54,106,107,54,106,107,54,106,107,54,106,107,54,106,107,54,106,107,54,106,107,41,111,0,0,0,0,0,111,41,0,0,111,0,51,111,49,41,51,111,114,50,112,49,41,51,111,114,50,112,49,41,51,111,50,49,41,51,111,50,49,49,41,111,49,41,51,111,114,50,112,49,41,51,111,114,50,112,49,41,51,111,111,114,50,112,49,41,51,111,114,50,112,0,49,49,49,41,51,111,50,49,49,49,41,41,41,51,51,51,111,111,111,50,50,50,112,0,49,49,49,49,49,41,51,111,114,50,112,49,41,51,111,111,114,50,112,112,41,112,49,51,49,41,51,111,114,50,112,112,51,51,49,49,41,51,111,114,50,112,114,274,49,51,111,41,274,49,111,111,41,274,49,111,112,0,49,41,51,111,114,50,112,274,49,51,49,51,112,114,51,51,49,41,51,111,114,50,112,51,274,49,111,51,274,49,111,49,49,41,51,111,50,49,49,49,41,51,111,114,50,112,49,41,51,111,114,50,112,49,41,51,111,114,50,112,49,41,51,111,114,50,112,49,41,51,111,114,50,112,49,41,51,111,114,50,112,49,41,51,111,114,50,112,51,0,0,119,0,0,53,53,119,120,119,53,116,120,119,53,116,120,119,53,120,119,53,53,53,53,120,119,53,116,120,119,53,116,120,120,119,119,53,53,116,120,119,53,116,120,119,119,120,119,53,116,120,119,119,53,116,116,53,53,53,53,119,53,120,119,53,116,120,119,53,116,53,53,120,119,53,116,53,53,53,116,53,120,119,53,116,120,119,53,120,119,119,120,119,53,120,119,53,116,120,119,53,116,120,119,53,116,120,119,53,116,120,119,53,116,120,119,53,116,120,119,53,116,125,125,125,125,0,125,125,125,125,125,125,125,125,0,125,125,124,124,124,125,124,125,124,125,124,125,124,124,125,124,125,124,125,124,125,124,125,124,125,125,125,124,124,124,125,125,124,125,124,124,124,124,125,124,125,124,125,125,125,125,125,125,125,125,125,124,125,124,125,124,125,124,125,124,125,124,125,124,125,124,125,124,124,125,124,126,126,3,0,126,0,0,3,126,126,126,127,126,127,126,127,126,127,126,127,127,126,127,126,127,126,126,127,127,126,127,126,127,126,126,126,127,127,127,126,126,127,126,127,3,3,3,3,3,3,3,3,3,3,127,127,126,3,126,127,126,127,3,126,127,3,3,127,126,127,126,127,3,3,3,3,3,3,126,127,126,3,3,3,3,3,3,3,3,126,127,126,127,126,127,126,127,126,127,126,127,126,127,143,142,143,142,143,142,143,142,0,0,0,0,0,0,143,142,136,104,144,143,142,136,104,144,136,136,136,136,142,143,136,104,143,136,104,104,136,104,144,136,104,144,143,142,136,104,144,143,142,136,104,144,143,142,136,104,144,143,142,136,104,144,143,142,136,104,144,143,143,142,136,104,144,144,104,104,104,104,143,142,136,104,144,144,143,142,136,104,144,70,143,142,136,104,144,143,142,136,104,144,143,136,104,143,142,136,104,144,143,142,136,104,144,143,142,136,104,144,143,142,136,104,144,143,142,136,104,144,143,142,136,104,144,143,142,136,104,144,74,73,73,148,158,150,0,0,73,0,0,0,0,0,0,0,0,0,0,0,0,148,158,150,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,0,0,0,0,73,73,73,74,74,0,0,74,73,74,73,73,74,74,0,0,0,0,154,0,73,73,73,73,148,158,150,0,145,145,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,149,155,148,150,151,145,151,145,149,155,152,57,58,152,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,156,148,150,149,155,151,145,156,157,157,73,74,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,150,149,157,73,74,145,152,150,150,150,149,149,149,157,157,157,73,73,73,74,74,74,145,145,145,151,145,158,150,159,145,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,152,145,73,74,73,74,57,58,152,146,73,74,150,149,155,156,157,73,74,145,152,158,150,159,145,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,145,152,57,58,152,145,145,145,150,149,155,156,157,73,74,145,152,275,154,149,155,156,157,151,159,145,148,150,151,145,145,145,154,149,157,150,149,155,156,157,73,74,145,152,154,150,149,157,145,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,150,149,155,156,157,73,74,145,152,0,172,172,0,172,172,172,172,172,168,0,172,172,172,172,172,172,172,172,168,0,172,171,0,172,172,171,171,172,172,172,169,0,168,168,172,172,171,169,172,169,0,172,0,161,161,161,161,167,168,169,170,171,172,161,167,168,169,170,171,172,161,161,161,161,0,161,167,168,169,170,171,172,161,167,168,169,170,171,172,170,161,167,168,169,170,171,172,161,167,168,169,170,171,172,161,167,168,168,169,170,171,172,161,167,168,169,170,171,172,161,167,168,169,170,171,172,161,161,161,167,167,167,168,168,168,169,169,169,170,170,170,171,171,171,172,172,172,0,161,167,167,168,168,169,170,171,172,161,161,167,168,169,170,171,172,168,169,167,168,169,167,168,169,167,168,161,167,168,169,170,171,172,161,161,0,161,167,168,169,170,171,172,161,167,168,169,170,171,172,167,161,161,161,161,161,161,167,168,169,170,171,172,0,168,161,0,161,161,168,168,161,167,168,169,170,171,172,169,167,168,161,167,168,168,169,170,171,172,161,167,168,169,170,171,172,161,167,168,169,170,171,172,161,161,167,168,169,170,171,172,161,167,168,169,170,171,172,161,167,168,169,170,171,172,161,167,168,169,170,171,172,0,0,174,0,174,174,174,163,174,163,163,174,163,174,163,174,163,174,163,174,163,174,163,174,163,174,163,174,163,174,163,174,163,174,163,174,163,174,163,174,163,174,163,0,0,0,0,276,175,175,0,276,0,0,175,0,165,166,166,276,175,165,166,276,175,165,166,165,175,165,166,175,165,166,165,165,166,276,175,165,166,276,175,165,166,276,175,165,166,276,175,165,166,175,165,166,276,175,165,166,165,165,165,276,175,165,166,166,276,175,165,166,276,175,165,166,165,165,166,276,175,165,166,166,175,165,166,276,175,165,166,276,175,165,166,276,175,165,166,276,175,165,166,276,175,165,166,276,175,165,166,276,175,165,166,164,176,0,164,176,164,176,164,176,0,0,164,176,164,176,164,164,164,164,164,164,164,176,164,176,164,164,176,176,164,176,164,164,164,164,164,176,164,164,176,164,164,164,164,164,164,164,176,164,176,164,164,164,176,164,164,164,164,176,164,176,164,164,164,176,164,176,164,176,164,164,176,164,176,164,176,164,176,0,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,0,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,0,0,181,181,181,181,181,181,181,181,0,0,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,185,0,0,180,185,0,0,180,180,0,180,180,180,180,180,180,180,180,0,179,180,180,180,180,180,180,180,180,180,0,0,0,180,180,180,180,180,180,180,180,180,184,184,184,0,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,0,184,0,0,0,0,0,0,0,184,184,184,184,184,184,184,184,184,184,191,191,191,191,191,191,191,0,0,191,191,187,187,191,187,191,187,191,187,191,187,191,187,191,187,191,187,191,187,191,187,191,191,191,187,187,187,187,187,191,191,187,187,191,187,187,191,187,191,187,187,191,187,191,191,187,0,187,187,187,191,187,187,187,191,187,191,187,191,187,191,187,191,187,191,187,191,187,191,187,191,187,193,0,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,277,277,277,277,277,277,194,194,194,0,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,0,0,0,0,0,0,0,0,194,194,194,194,194,194,194,194,194,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,0,196,278,196,278,196,0,279,0,196,0,0,0,0,278,196,0,280,196,196,196,196,196,281,196,281,280,281,280,196,196,278,196,280,0,278,279,196,280,196,280,280,280,280,0,280,279,196,196,278,282,282,278,282,280,196,0,196,0,0,0,0,0,0,200,197,201,200,197,201,197,197,201,200,197,201,200,197,201,200,197,197,201,200,197,201,197,201,200,197,201,200,197,201,200,197,201,201,200,197,201,201,201,200,197,201,197,197,201,201,197,197,197,200,197,201,200,197,201,200,197,201,200,197,201,200,197,201,200,197,201,201,201,200,197,201,0,0,208,208,208,208,211,0,0,0,0,208,0,208,0,0,0,0,211,0,0,209,211,212,209,211,212,283,0,209,209,211,283,209,211,212,209,211,212,209,209,211,211,212,209,211,212,209,212,209,209,212,283,283,209,211,212,209,211,212,283,209,211,212,212,209,211,212,283,212,283,209,211,212,212,211,0,212,209,211,283,209,209,211,212,209,211,212,209,211,212,209,211,212,209,211,212,209,211,212,211,209,211,212,215,0,39,39,0,0,0,0,215,0,0,213,217,214,215,216,39,213,217,214,215,216,39,213,39,213,214,39,213,214,39,213,217,214,215,216,39,213,217,214,215,216,39,213,217,214,214,215,215,216,39,213,217,214,215,216,39,213,214,216,214,214,216,39,213,217,214,215,216,39,213,217,217,217,214,215,216,39,213,217,214,215,216,39,213,216,39,217,214,215,216,39,213,216,39,39,39,213,217,217,214,215,216,39,213,213,216,215,216,39,214,215,213,214,39,213,217,214,215,216,39,213,217,214,215,216,39,213,217,214,215,216,39,213,217,214,215,216,39,213,217,214,215,216,39,213,217,214,215,216,39,213,215,217,214,215,216,39,213,0,0,225,225,225,0,0,0,48,69,224,48,224,224,224,225,224,225,224,224,225,224,225,224,225,225,224,225,224,225,224,225,224,225,224,225,225,225,224,224,224,48,69,225,224,48,225,224,225,224,225,224,225,224,225,224,225,224,224,224,69,224,284,48,224,224,225,225,224,284,48,284,48,225,224,69,225,224,224,224,225,225,225,224,48,69,224,48,69,224,225,224,225,224,225,224,225,224,225,224,225,224,225,224,225,224,0,0,0,0,227,0,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,0,0,0,230,232,230,232,230,230,233,230,230,230,232,230,232,230,232,230,232,230,230,230,232,230,232,233,233,233,233,230,233,230,230,232,230,232,230,230,232,230,233,230,233,230,230,232,230,232,233,230,233,230,0,0,0,232,230,230,232,230,232,230,232,230,232,230,232,230,232,230,232,0,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,0,88,88,88,88,88,0,0,88,88,88,88,88,88,88,88,88,88,88,88,0,88,0,0,0,0,108,34,236,236,34,34,34,108,235,236,34,108,235,236,34,34,34,34,236,34,34,236,236,108,235,236,108,235,236,236,34,34,236,34,236,34,34,34,236,34,34,34,34,108,235,236,34,108,235,236,34,108,235,236,236,34,108,235,236,236,236,34,236,236,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,108,108,235,236,34,108,235,236,34,34,34,34,34,34,34,34,34,34,34,34,34,236,236,34,34,34,34,108,34,34,236,34,236,34,108,34,108,235,236,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,108,235,236,34,34,236,34,108,235,236,236,236,236,34,236,34,34,34,34,236,34,236,34,236,34,236,236,34,34,34,34,236,34,34,108,235,236,34,236,235,34,34,236,236,34,34,34,34,34,236,34,34,34,34,236,34,236,34,34,34,236,34,34,108,235,236,108,34,34,34,34,108,235,236,34,108,235,236,34,108,235,236,236,34,34,34,108,235,236,34,108,235,236,34,108,235,236,34,235,34,108,235,236,34,34,34,34,235,0,0,0,0,0,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,178,178,178,178,178,178,178,0,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,131,132,87,87,87,87,87,131,131,130,131,130,131,131,130,132,0,132,87,87,131,132,87,131,132,0,130,132,132,132,87,130,132,132,87,87,87,132,130,130,131,132,0,0,0,131,87,132,132,131,130,132,132,130,0,87,87,130,130,131,87,285,131,132,285,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,130,130,87,87,131,131,132,132,130,87,131,132,130,87,131,132,130,130,130,87,87,87,131,131,131,132,132,132,130,130,87,87,131,131,132,132,130,87,131,132,226,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,130,132,130,130,130,87,131,132,131,132,130,87,131,132,130,87,131,132,285,131,132,285,131,132,226,130,87,131,132,226,130,87,131,132,130,87,131,132,130,87,131,132,130,130,87,87,131,131,132,132,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,130,87,131,132,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,286,286,242,242,0,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,0,242,242,242,242,242,242,0,242,242,242,242,242,242,242,0,242,242,242,242,242,242,242,0,0,0,0,243,0,243,243,243,243,243,243,0,243,243,243,243,243,243,243,0,243,243,243,243,243,243,0,243,0,243,243,243,243,243,243,243,0,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,0,244,244,244,244,244,244,244,244,244,244,244,244,244,0,0,0,0,0,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,246,246,246,247,248,249,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,250,246,247,248,249,250,246,247,248,249,250,250,250,246,246,250,250,246,248,249,249,250,250,250,250,247,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,247,0,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,250,246,247,248,249,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,0,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,287,288,289,290,291,292,293,294,295,296,297,287,288,298,296,291,294,295,296,289,290,291,292,293,295,287,288,290,295,297,287,288,239,239,239,239,239,239,239,239,239,239,239,239,239,239,0,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,299,299,299,0,0,0,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,67,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,0,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237],"f":[0,0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[1,[-1]]],[[1,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[1,[-2]]]]],8,3],[[[1,[-1]],[1,[-1]]],2,3],[5,2],[[[1,[-1]],[1,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,0,0,[[[1,[-1]],11],12,3],[[[1,[-1]],11],12,[13,3]],[14,[[1,[-1]]],3],[-1,-1,[]],[15,[[1,[-1]]],3],[-1,[[1,[-1]]],3],0,[[-1,-2],15,[16,17],18],0,[[[1,[-1]],-2],2,3,19],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],9,3],[[[1,[-1]]],9,3],0,[[],[[7,[24,25]]]],0,0,0,0,[[],[[1,[-1]]],3],[[],[[1,[-1]]],3],[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,[[[1,[-1]],[1,[-1]]],[[27,[26]]],3],[[]],0,0,0,0,[[[1,[-1]],-2],7,3,28],0,0,0,[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[],5],[[-1,[34,[-2]]],[[35,[-2]]],[],[]],0,0,[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[],[[38,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[36,[-1,-2]]],[[27,[[42,[-1]]]]],3,[[37,[-1]]]],0,[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[38,[-1,-2]]],[[38,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[[36,[-1,-2]]],[[36,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[36,[-1,-2]]],[[42,[-1]]],3,[[37,[-1]]]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-2,[34,[-1]],[43,[-1]],5,[44,[-1]]],[[7,[[2,[[35,[[44,[-1]]]],[45,[-1]]]],46]]],3,[[47,[-1]]]],[5,2],[5,2],[[],[[35,[[48,[-1]]]]],3],[[[38,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[36,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],0,[[[36,[-1,-2]]],[[27,[35]]],3,[[37,[-1]]]],0,[-1,-1,[]],[-1,-1,[]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]],[34,[-1]]],[[38,[-1,-2]]],3,[[37,[-1]]]],[[5,52,[40,[[39,[-1,-2]]]]],[[35,[[36,[-1,-2]]]]],3,[[37,[-1]]]],[[5,[52,[[51,[[49,[-1]],[50,[-1]],-1,-2]]]],[34,[-1]],[40,[[39,[-1,-2]]]]],[[35,[[36,[-1,-2]]]]],3,[[37,[-1]]]],[[-1,[48,[-2]],[48,[-2]],5,[53,[-2,-3]]],[[7,[[35,[[51,[[49,[-2]],[50,[-2]],-2,-3]]]],54]]],55,3,[[37,[-2]]]],[[[36,[-1,-2]]],[[34,[-1]]],3,[[37,[-1]]]],[[],5],[[],5],[[[38,[-1,-2]]],[],3,[[37,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[[35,[-1]]]]],3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[27,[[38,[-1,-2]]]],[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],0,[[[38,[-1,-2]]],[],3,[[37,[-1]]]],[[[36,[-1,-2]]],27,3,[[37,[-1]]]],0,0,[[]],[[]],[[[38,[-1,-2]],[38,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],[36,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],[36,[-1,-2]]],9,3,[[37,[-1]]]],[[],5],[[[36,[-1,-2]]],[[35,[-1]]],3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[52,5],0,0,[[[36,[-1,-2]],-3,[52,[[45,[-1]]]]],[[7,[[35,[[45,[-1]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3],[[7,[2,46]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[56,[-1]],[52,[[38,[-1,-2]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[56,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,52,[43,[-1]]],[],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[56,[-1]],[52,[[38,[-1,-2]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[56,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[44,[-1]],[44,[-1]],[56,[-1]],[52,[[38,[-1,-2]]]],[27,[[35,[[2,[[57,[-1]],[58,[-1]]]]]]]],[43,[-1]]],[[2,[[44,[-1]],[44,[-1]],[56,[-1]]]]],3,[[37,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[36,[-1]],[60,[59]],[61,[59]]],[[7,[9,46]]],[[37,[62]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,[52,[[44,[-2]]]]],[[35,[[2,[29,[35,[-2]]]]]]],[],[]],[-1,63,[]],[[-1,[34,[-2]],[52,[[48,[-2]]]]],[[48,[-2]]],[],[]],[[-2,[45,[-1]],[45,[-1]]],[[7,[64,46]]],65,[[47,[-1]]]],0,[[-2,-1],[[45,[-1]]],3,[[47,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[43,[-1]]],[[43,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,0,0,0,0,0,[[[43,[-1]],11],12,[13,3]],[-1,-1,[]],0,0,[[],5],[-1,-2,[],[]],0,[[],[[7,[24,25]]]],0,0,0,[[-2,[34,[-1]]],[[7,[[43,[-1]],46]]],3,[[47,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[[-2,-3],[[7,[[44,[-1]],46]]],3,[[47,[-1]]],66],[[-2,-3],[[7,[[56,[-1]],46]]],3,[[47,[-1]]],66],[[-2,[67,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[68,[-1]]],[[7,[[56,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[69,[-1]]],[[7,[[56,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[48,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],-3],[[7,[[56,[-1]],46]]],3,[[47,[-1]]],66],[[[44,[-1]],-2,[44,[-1]]],[[7,[64,46]]],3,[[47,[-1]]]],[[[56,[-1]],-2,[56,[-1]]],[[7,[64,46]]],3,[[47,[-1]]]],[[-2,-3],[[7,[[44,[-1]],46]]],3,[[47,[-1]]],[[70,[-1]]]],[[[44,[-1]],-2,-1],[[7,[64,46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],-3],[[7,[[44,[-1]],46]]],3,[[47,[-1]]],66],[[-2,-1,[45,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,-1],[[7,[64,46]]],3,[[47,[-1]]]],[[[56,[-1]],-2,-1],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,[34,[-1]]],[[7,[[2,[[45,[-1]],[44,[-1]],[56,[-1]]]],46]]],3,[[47,[-1]]]],[-1,[[71,[[45,[-2]]]]],[],[]],[[[44,[-1]]],[[71,[[45,[-1]]]]],3],[[[56,[-1]]],[[71,[[45,[-1]]]]],3],[[-2,[34,[-1]],64],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[27,[[48,[-1]]]],[34,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[27,[[69,[-1]]]],[34,[-1]]],[[7,[[56,[-1]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[52,[[45,[-1]]]]],[[44,[-1]]],3],[[5,[52,[[45,[-1]]]]],[[56,[-1]]],3],[[[44,[-1]]],[[44,[-1]]],[4,65]],[[[56,[-1]]],[[56,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-2,[34,[-1]],[45,[-1]],[71,[72]]],[[7,[[56,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[45,[-1]],[44,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[44,[-1]],[44,[-1]],73,[0,[73,[0,[-1,[44,[-1]]]]]],64],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,74,[45,[-1]],[71,[72]],[0,[74,[0,[-1,[45,[-1]]]]]],64],[[7,[[56,[-1]],46]]],3,[[47,[-1]]]],[[-2,74,[45,[-1]],[71,[72]],[0,[74,[0,[-1,[45,[-1]]]]]]],[[7,[[2,[[56,[-1]],[45,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[44,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,[43,[-1]],[34,[-1]],[44,[-1]],[56,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[44,[-1]],-2,[44,[-1]]],2,3,[[47,[-1]]]],[[[56,[-1]],-2,[56,[-1]]],2,3,[[47,[-1]]]],[[[56,[-1]],[34,[-1]]],29,3],[[[44,[-1]],[34,[-1]]],29,3],[[[44,[-1]],11],12,3],[[[56,[-1]],11],12,3],[-1,-1,[]],[-1,-1,[]],[[[45,[-1]],[45,[-1]]],[[44,[-1]]],3],[[[45,[-1]],[45,[-1]]],[[56,[-1]]],3],[[[56,[-1]],[34,[-1]]],[[27,[[75,[-1]]]]],3],[[[56,[-1]],[34,[-1]]],[[27,[[69,[-1]]]]],3],[[[56,[-1]],[34,[-1]]],[[27,[[68,[-1]]]]],3],[[[44,[-1]]],[[45,[-1]]],3],[[[56,[-1]]],[[45,[-1]]],3],[[[44,[-1]],-2,64,[44,[-1]]],2,3,[[47,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2,[43,[-1]]],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[[44,[-1]],-2],[[7,[64,46]]],3,[[47,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[-2,64,[44,[-1]],[44,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[-2,64,[56,[-1]],[56,[-1]]],[[7,[[56,[-1]],46]]],3,[[47,[-1]]]],[[-2,64,[67,[-1]],[67,[-1]]],[[7,[[44,[-1]],46]]],3,[[47,[-1]]]],[[]],[[]],[[[44,[-1]],[34,[-1]]],[[27,[[48,[-1]]]]],3],[[[44,[-1]]],[[45,[-1]]],3],[[[56,[-1]]],[[45,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[44,[-1]],[34,[-1]]],[[27,[[67,[-1]]]]],3],0,[[[27,[76]]],[[78,[[77,[29,29]]]]]],[[],[[78,[2]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[79,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[81,[80]],82],[[78,[2]]]],[[[34,[80]],5,5,79],[[81,[80]]]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[83,5,5],5],[[],83],[[],84],[[],85],[[],86],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[83,11],12],[[84,11],12],[[85,11],12],[[86,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[83,9],[83,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[83,5],0,[[]],[[]],[[]],[[]],0,0,0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[75,[-1]]],[[75,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[[75,[-1]]],87,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[75,[-1]],[75,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[75,[-1]],11],12,[13,3]],[[[75,[-1]],[34,[-1]],88,-2],[[89,[2]]],3,90],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[[75,[-1]]],[[69,[-1]]],3],[[[75,[-1]],-2],2,[16,3],19],[[],5],[[[75,[-1]],[34,[-1]]],[[2,[5,9]]],3],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],0,[-1,5,[]],[[-1,[34,[-2]],[48,[-2]],[48,[-2]],[69,[-2]]],[[49,[-2]]],[],[]],[-1,9,[]],[[-1,[34,[-2]],[52,[[48,[-2]]]]],[[48,[-2]]],[],[]],[[-1,-3,[43,[-2]],[34,[-2]],[52,[[44,[-2]]]],[44,[-2]],[56,[-2]]],[[7,[[2,[[44,[-2]],[44,[-2]],[56,[-2]]]],46]]],[],[],[[47,[-2]]]],[[-1,-3,[34,[-2]],[43,[-2]],[67,[-2]],[44,[-2]],[44,[-2]],[56,[-2]]],[[7,[[2,[[44,[-2]],[44,[-2]],[56,[-2]]]],46]]],[],[],[[47,[-2]]]],0,0,0,[[[91,[-1,-2]]],5,3,[[92,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[91,[-1,-2]]],[[91,[-1,-2]]],3,[[92,[-1]]]],[[-1,-2],2,[],[]],[-2,[[78,[[91,[-1,-2]]]]],3,[[92,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[91,[-1,-2]]],5,3,[[92,[-1]],13]],[[[91,[-1,-2]],11],12,[13,3],[13,[92,[-1]]]],[-1,-1,[]],[[[91,[-1,-2]]],9,3,[[92,[-1]],13]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[91,[-1,-2]]],63,3,[[92,[-1]]]],[-2,[[91,[-1,-2]]],3,[[92,[-1]]]],[[]],[[[91,[-1,-2]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3,[[92,[-1]],13]],[[[91,[-1,-2]],-3,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[56,[-1]]],[[78,[[2,[[44,[-1]],[44,[-1]],[56,[-1]]]],46]]],3,[[92,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[93,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[93,[-1]]],[[93,[-1]]],[4,3]],[[[94,[-1]]],[[94,[-1]]],[4,3]],[[[95,[-1]]],[[95,[-1]]],[4,3]],[[[96,[-1]]],[[96,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[94,[-1]]],[97,3]],[[],[[95,[-1]]],[97,3]],[[],[[96,[-1]]],[97,3]],[[],[[98,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[94,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[95,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[96,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[98,[-1]]],-1,3],[[[93,[-1]]],5,3],[[[94,[-1]]],5,3],[[[95,[-1]]],5,3],[[[96,[-1]]],5,3],[[[93,[-1]],[34,[-1]],[48,[-1]],[48,[-1]],[69,[-1]]],[[49,[-1]]],3],[[[99,[-1]],11],12,13],[[[93,[-1]],11],12,[13,3]],[[[94,[-1]],11],12,[13,3]],[[[95,[-1]],11],12,[13,3]],[[[96,[-1]],11],12,[13,3]],[[[98,[-1]],11],12,[13,3]],[[[100,[-1]],11],12,[13,3]],[[[101,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[95,[-1]]],[[93,[-1]]],3],[[[94,[-1]]],[[93,[-1]]],3],[[[96,[-1]]],[[93,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[93,[-1]]],9,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[98,[-1]],-1,-1],[[7,[9,[99,[-1]]]]],3],[[[34,[-1]],[103,[[102,[88]]]],[53,[-1,[93,[-1]]]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[98,[-1]]],5,3],[[[98,[-1]],-1],[[7,[[27,[-1]],[99,[-1]]]]],3],[[[34,[-1]]],[[98,[-1]]],3],[[[34,[-1]],5],[[98,[-1]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[98,[-1]],-1,-1],[[7,[[2,[[101,[-1]],9]],[99,[-1]]]]],3],[[[98,[-1]],-1],[[7,[[100,[-1]],[99,[-1]]]]],3],[[[98,[-1]]],-1,3],[[[98,[-1]],5],5,3],[[[94,[-1]],-2],7,3,28],[[[95,[-1]],-2],7,3,28],[[[96,[-1]],-2],7,3,28],[[[93,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[94,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[95,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[96,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[93,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[56,[-1]]],[[7,[[2,[[44,[-1]],[44,[-1]],[56,[-1]]]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[100,[-1]],-1,-1,-1,[104,[-1]]],9,3],[[[101,[-1]],-1,-1,-1,[27,[-1]],-1,[104,[-1]]],9,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,105,[]],[-1,105,[]],[-1,105,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[106,106],[[[107,[-1]]],[[107,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[54,11],12],[[54,11],12],[[106,11],12],[[106,11],12],[[[107,[-1]],11],12,3],[[[107,[-1]],11],12,[13,3]],[108,54],[106,54],[109,54],[-1,-1,[]],[46,54],[108,106],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[54,[[27,[105]]]],[106,[[27,[105]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[49,[-1]]],[[49,[-1]]],[4,3]],[[[41,[-1]]],[[41,[-1]]],[4,3]],[[[51,[-1,-2,-3,-4]]],[[51,[-1,-2,-3,-4]]],[4,110],[4,110],[4,3],4],[111,111],[[[50,[-1]]],[[50,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[49,[-1]]],[[69,[-1]]],3],0,[[],[[41,[-1]]],3],[[],111],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[111]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[34,[-1]]],[[48,[-1]]],3],[[[49,[-1]]],[[48,[-1]]],3],0,[[[49,[-1]],[49,[-1]]],9,[10,3]],[[[41,[-1]],[41,[-1]]],9,[10,3]],[[[51,[-1,-2,-3,-4]],[51,[-1,-2,-3,-4]]],9,[10,110],[10,110],[10,3],10],[[111,111],9],[[[50,[-1]],[50,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[112,[-1,-2]]],[[7,[[2,[[49,[-1]],5,[35,[[48,[-1]]]]]],106]]],3,[[37,[-1]]]],[[[34,[-1]],63],[[7,[[48,[-1]],106]]],3],[[[49,[-1]]],[[48,[-1]]],3],0,[[[49,[-1]],[34,[-1]],88,-2],[[89,[2]]],3,90],[[[49,[-1]],11],12,[13,3]],[[[49,[-1]],11],[[7,[2,113]]],3],[[[41,[-1]],11],12,[13,3]],[[[51,[-1,-2,-3,-4]],11],12,[13,110],[13,110],[13,3],13],[[111,11],12],[[[114,[-1,-2,-3]],11],12,[13,110],[13,3],[13,[37,[-2]]]],[[[50,[-1]],11],12,[13,3]],[[[112,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[69,[-1]]],111,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[48,[-1]],[48,[-1]],[34,[-1]],5,-2,[53,[-1,-3]]],[[7,[[35,[[51,[[49,[-1]],[50,[-1]],-1,-3]]]],106]]],3,55,[[37,[-1]]]],[[[41,[-1]]],[[27,[[67,[-1]]]]],3],[[[112,[-1,-2]]],[[7,[[35,[[51,[[49,[-1]],[50,[-1]],-1,-2]]]],106]]],3,[[37,[-1]]]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[112,[-1,-2]]],[[49,[-1]]],3,[[37,[-1]]]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]]],[],3,[[37,[-1]]]],0,[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[[49,[-1]]],9,3],[[[51,[[49,[-1]],-2,-1,-3]]],9,3,110,[[37,[-1]]]],[111,9],[[[41,[-1]]],9,3],[-1,9,[]],[[[49,[-1]]],9,3],[111,9],[111,9],[[[41,[-1]]],9,3],[-1,9,[]],[[[49,[-1]]],9,3],[111,9],[[[112,[-1,-2]]],[[7,[[115,[[114,[[50,[-1]],-1,-2]]]],106]]],3,[[37,[-1]]]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[-1,[34,[-2]],5],2,[],[]],[[[49,[-1]],[34,[-1]],5],2,3],[[[51,[[49,[-1]],-2,-1,-3]],[34,[-1]]],2,3,110,[[37,[-1]]]],[[[49,[-1]],[34,[-1]]],[[27,[[48,[-1]]]]],3],0,[[[48,[-1]],[48,[-1]],[34,[-1]],5,[53,[-1,-2]]],[[112,[-1,-2]]],3,[[37,[-1]]]],[[[114,[[50,[-1]],-1,-2]]],27,3,[[37,[-1]]]],[[[51,[[49,[-1]],[50,[-1]],-1,-2]]],[],3,[[37,[-1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[51,[[49,[-1]],-2,-1,-3]],[51,[[49,[-1]],-2,-1,-3]]],9,3,110,[[37,[-1]]]],[[-1,[34,[-2]],[53,[-2,-3]]],[[7,[[2,[-1,-4,[41,[-2]]]],106]]],17,[],[],[]],[[[49,[-1]],[34,[-1]],[53,[-1,-2]]],[[7,[[2,[[49,[-1]],[50,[-1]],[41,[-1]]]],106]]],3,[[37,[-1]]]],[[111,-1],7,28],[[[52,[[51,[[49,[-1]],-2,-1,-3]]]]],5,3,110,[[37,[-1]]]],[-1,111,[]],[[[49,[-1]]],111,3],[[111,[34,[-1]]],[[27,[[69,[-1]]]]],3],[[[49,[-1]],[34,[-1]]],[[35,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[49,[-1]],[34,[-1]]],[[7,[[35,[-1]],108]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[53,[-1,-2]],-3,[34,[-1]]],2,3,[[37,[-1]]],[[117,[[116,[-1,-2]]]]]],[[[53,[-1,-2]],-3,-4,[34,[-1]]],2,3,[[37,[-1]]],[[117,[118]]],[[117,[-2]]]],[[[119,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[120,[-1]]],[[120,[-1]]],[4,3]],[[[119,[-1]]],[[119,[-1]]],[4,3]],[[[53,[-1,-2]]],[[53,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[53,[-1,-2]]],5,3,[[37,[-1]]]],[[[53,[-1,-2]]],[[121,[118,[2,[-2,[67,[-1]]]]]]],3,[[37,[-1]]]],[[],[[53,[-1,-2]]],[97,3],[97,[37,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[120,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[119,[-2]]]]],8,[122,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[53,[-2,-3]]]]],8,[122,3],[122,[37,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[120,[-1]]],5,3],[[[119,[-1]]],5,3],[[[119,[-1]],[34,[-1]],[48,[-1]],[48,[-1]],[69,[-1]]],[[49,[-1]]],3],[[[120,[-1]],11],12,[13,3]],[[[119,[-1]],11],12,[13,3]],[[[53,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[116,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[[[120,[-1]]],[[119,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-3]]],[[116,[-2,-3]]],[[117,[118]]],3,[[37,[-2]]]],[[[53,[-1,-2]],5],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]],[67,[-1]]],[[27,[-2]]],3,[[37,[-1]]]],[[[53,[-1,-2]],5],[[27,[[67,[-1]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]],[67,[-1]]],[[27,[5]]],3,[[37,[-1]]]],[[[119,[-1]]],9,3],[[[53,[-1,-2]]],9,3,[[37,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2]]],9,3,[[37,[-1]]]],[[[53,[-1,-2]]],29,3,[[37,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[53,[-1,-2]],[34,[-1]],[48,[-1]]],[[27,[[2,[-2,[67,[-1]]]]]]],3,[[37,[-1]]]],[[[53,[-1,-2]]],5,3,[[37,[-1]]]],[[],[[53,[-1,-2]]],3,[[37,[-1]]]],[[-1,-4],[[116,[-2,-3]]],[[117,[118]]],3,[[37,[-2]]],[[117,[-3]]]],[[[34,[-1]],[35,[-3]]],[[53,[-1,-2]]],3,[[37,[-1]]],[[117,[[116,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[120,[-1]],-2],7,3,28],[[[119,[-1]],-2],7,[123,3],28],[[[53,[-1,-2]],-3],7,[123,3],[123,[37,[-1]]],28],[[[120,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[119,[-1]],[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[119,[-1]],-2,[43,[-1]],[34,[-1]],[52,[[44,[-1]]]],[44,[-1]],[56,[-1]]],[[7,[[2,[[44,[-1]],[44,[-1]],[56,[-1]]]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[124,[-1]],-2,[34,[-1]]],[[7,[[2,[[45,[-1]],[44,[-1]],[56,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]]],[[7,[[2,[[45,[-1]],[44,[-1]],[56,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[27,[[124,[-1]]]],[34,[-1]]],[[7,[[2,[[45,[-1]],[44,[-1]],[56,[-1]]]],46]]],3,[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[125,[-1]]],[[125,[-1]]],[4,3]],[[[124,[-1]]],[[124,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[125,[-1]],[125,[-1]]],9,[10,3]],[[[124,[-1]],[124,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[125,[-1]],[34,[-1]],88,-2],[[89,[2]]],3,90],[[[125,[-1]],11],12,[13,3]],[[[124,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[[124,[-1]],-2],2,3,19],[[-2,[34,[-1]],[44,[-1]],[56,[-1]]],[[7,[[45,[-1]],46]]],3,[[47,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[125,[-1]]],9,3],[[[125,[-1]]],9,3],[[[125,[-1]]],9,3],[[[125,[-1]]],9,3],[[[125,[-1]]],9,3],[[[125,[-1]]],9,3],[[[125,[-1]]],9,3],[[[125,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[126,126],[[[127,[-1]]],[[127,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[127,[-1]],[127,[-1]]],26,3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[126]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[127,[-2]]]]],8,3],[5,2],[5,2],[[126,126],9],[[[127,[-1]],[127,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[126,11],12],[[126,11],12],[[[127,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[52,[128]]],[[27,[-1]]],[]],[129,-1,[]],[87,-1,[]],[130,-1,[]],[131,-1,[]],[132,-1,[]],[133,-1,[]],[134,-1,[]],[15,-1,[]],[-1,126,[]],[[-1,-2],15,[16,17],18],[[[127,[-1]],-2],2,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,29,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],-1,[]],[[],-1,[]],[[[127,[-1]],[127,[-1]]],[[27,[26]]],3],[[]],[[]],[[126,-1],7,28],[[[127,[-1]],-2],7,3,28],[-1,[[35,[128]]],[]],[-1,[[27,[129]]],[]],[-1,[[27,[87]]],[]],[-1,[[27,[130]]],[]],[-1,[[27,[131]]],[]],[-1,[[27,[132]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[27,[135]]],[]],[-1,135,[]],[-1,[[27,[133]]],[]],[-1,[[27,[134]]],[]],[-1,134,[]],[-1,[[27,[15]]],[]],[-1,15,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[136,[-1]]],[[138,[-1,137]]],3],[[[136,[-1]]],[[138,[-1,139]]],3],[[[136,[-1]]],[[138,[-1,140]]],3],[[[136,[-1]]],[[138,[-1,141]]],3],[[[142,[-1]],[35,[-1]]],[[2,[[35,[-1]],-1]]],3],[143,143],[[[136,[-1]]],[[136,[-1]]],[4,3]],[[[104,[-1]]],[[104,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[104,[-1]],[71,[-1]]],-1,3],[[[136,[-1]],143],[[142,[-1]]],3],0,0,[[],[[136,[-1]]],3],[[],[[104,[-1]]],[97,3]],[[],[[144,[-1]]],[97,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[143,11],12],[[[142,[-1]],11],12,[13,3]],[[[136,[-1]],11],12,[13,3]],[[[104,[-1]],11],12,[13,3]],[[[144,[-1]],11],12,[13,3]],[5,143],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[144,[-1]],[127,[-1]]],[[27,[[71,[-1]]]]],3],[[[104,[-1]],[71,[-1]]],-1,3],[[[104,[-1]],[71,[-1]]],-1,3],[[[104,[-1]],[71,[-1]]],-1,3],[[[104,[-1]],[71,[-1]]],-1,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[[144,[-1]],[127,[-1]],[71,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[71,[-2]]],[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[145,[-1,-2,-3]]],[[35,[-1]]],[146,97,110,147,13],110,3],[[[145,[-1,-2,-3]],[34,[-3]]],2,[146,97,110,147,13],110,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[148,[-1]],[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],108]]],3],[[[150,[[149,[-1]]]],[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],108]]],3],[[[151,[-1]],73,[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],108]]],3],[[[145,[73,[149,[-1]],-1]],73,[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],108]]],3],[[[151,[-1]],73,[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],106]]],3],[[[145,[73,[149,[-1]],-1]],73,[34,[-1]],[48,[-1]]],[[78,[[2,[[48,[-1]],[48,[-1]]]],106]]],3],0,0,[[[152,[-1,-3,-2]],[34,[-2]],[142,[-2]]],[[153,[-2]]],146,3,[[154,[-2]]]],0,0,0,[[[150,[-1]]],[[150,[-1]]],4],[[[149,[-1]]],[[149,[-1]]],[4,3]],[[[155,[-1]]],[[155,[-1]]],[4,3]],[[[156,[-1]]],[[156,[-1]]],[4,3]],[[[157,[-1]]],[[157,[-1]]],[4,3]],[73,73],[74,74],[[[145,[-1,-2,-3]]],[[145,[-1,-2,-3]]],[4,146],4,[4,3]],[[[152,[-1,-3,-2]]],[[152,[-1,-3,-2]]],[4,146],[4,3],[4,[154,[-2]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[148,[-1]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[150,[[149,[-1]]]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,0,[[[151,[-1]],73,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[145,[73,[149,[-1]],-1]],73,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,0,0,[[],73],[[],74],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[150,[-1]],[150,[-1]]],9,10],[[[149,[-1]],[149,[-1]]],9,[10,3]],[[[157,[-1]],[157,[-1]]],9,[10,3]],[[73,73],9],[[74,74],9],[[[145,[-1,-2,-3]],[145,[-1,-2,-3]]],9,[10,146],10,[10,3]],[[[152,[-1,-3,-2]],[152,[-1,-3,-2]]],9,[10,146],[10,3],[10,[154,[-2]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[151,[-1]],73,[48,[-1]],[48,[-1]],[48,[-1]],[34,[-1]]],[[48,[-1]]],3],[[[145,[73,[149,[-1]],-1]],73,[48,[-1]],[48,[-1]],[48,[-1]],[34,[-1]]],[[48,[-1]]],3],[[[158,[-1]],[34,[-1]],[69,[-1]]],[[27,[[75,[-1]]]]],3],[[[150,[[157,[-1]]]],[34,[-1]],[69,[-1]]],[[27,[[75,[-1]]]]],3],[[[159,[-1]],74,[34,[-1]],[69,[-1]]],[[27,[[75,[-1]]]]],3],[[[145,[74,[157,[-1]],-1]],74,[34,[-1]],[69,[-1]]],[[27,[[75,[-1]]]]],3],[[[150,[-1]],11],12,13],[[[149,[-1]],11],12,[13,3]],[[[155,[-1]],11],12,[13,3]],[[[156,[-1]],11],12,[13,3]],[[[157,[-1]],11],12,[13,3]],[[73,11],12],[[74,11],12],[[[145,[-1,-2,-3]],11],12,[13,146],13,[13,3]],[[[152,[-1,-3,-2]],11],12,[13,146],[13,3],[13,[154,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[145,[-1,-3,-2]]],[[152,[-1,-3,-2]]],146,3,[[154,[-2]]]],[-1,-1,[]],[[[145,[-1,-2,-3]],-1],[[150,[-2]]],[146,97,110,147,13],110,3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[73,-1],2,19],[[74,-1],2,19],0,0,0,[-1,5,[]],[73,5],[74,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[158,[-1]],[34,[-1]],[75,[-1]]],[[69,[-1]]],3],[[[150,[[157,[-1]]]],[34,[-1]],[75,[-1]]],[[69,[-1]]],3],[[[159,[-1]],74,[34,[-1]],[75,[-1]]],[[69,[-1]]],3],[[[145,[74,[157,[-1]],-1]],74,[34,[-1]],[75,[-1]]],[[69,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],5],[[[152,[-1,-3,-2]],[34,[-2]]],[[35,[[2,[-1,27]]]]],146,3,[[154,[-2]]]],0,0,0,[[],[[145,[-1,-2,-3]]],[146,97,110,147,13],110,3],[[],[[145,[-1,-2,-3]]],[146,97,110,147,13],110,3],[[[150,[-1]]],[[145,[-2,-1,-3]]],110,[146,97,110,147,13],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[160,[-2]]],[],[]],[[-1,[34,[-2]]],[[78,[[160,[-2]]]]],[],[]],[[[149,[-1]],[34,[-1]]],[[78,[[160,[-1]]]]],3],[[[155,[-1]]],[[160,[-1]]],3],[[[156,[-1]]],[[160,[-1]]],3],[[[157,[-1]],[34,[-1]]],[[78,[[160,[-1]]]]],3],0,0,0,[[[148,[-1]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[150,[[149,[-1]]]],[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[151,[-1]],73,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[145,[73,[149,[-1]],-1]],73,[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[145,[-1,-2,-3]]],[[35,[[150,[-2]]]]],[146,97,110,147,13],110,3],[[[145,[-1,-2,-3]]],5,[146,97,110,147,13],110,3],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[34,[-2]]],27,[],[]],[[[150,[-2]],[34,[-1]]],27,3,[[154,[-1]]]],[[[149,[-1]],[34,[-1]]],27,3],[[[157,[-1]],[34,[-1]]],27,3],[[[145,[-1,-2,-3]]],5,[146,97,110,147,13],110,3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[161,-2,[162,[-1]]],[[78,[[163,[-1]],46]]],3,[[47,[-1]]]],[[161,[52,[0]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[161,[52,[[164,[-1]]]],[162,[-1]],[165,[-1]],[35,[[164,[-1]]]]],[[78,[[2,[[166,[-1]],0]]]]],3],[[161,[52,[[164,[-1]]]],[162,[-1]],-2,5,-3],[[78,[[2,[[35,[[166,[-1]]]],5,[35,[0]]]]]]],3,55,55],[[161,[35,[[164,[-1]]]],[162,[-1]],-2,5],[[78,[[2,[[35,[[164,[-1]]]],5,[35,[[164,[-1]]]]]]]]],3,55],[161,[[78,[2]]]],0,[161,161],[167,167],[168,168],[169,169],[170,170],[171,171],[172,172],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[168]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[161,161],9],[[167,167],9],[[168,168],9],[[169,169],9],[[170,170],9],[[171,171],9],[[172,172],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[161,11],12],[[167,11],12],[[167,11],12],[[168,11],12],[[168,11],12],[[169,11],12],[[170,11],12],[[171,11],12],[[172,11],12],[[[53,[-1,-2]]],161,3,[[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[168]]],3],[[[164,[-1]],[162,[-1]]],[[27,[169]]],3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[167,-1],2,19],[[168,-1],2,19],[[169,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[161,[[162,[-1]]],3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[167,173],0,[[29,[35,[167]],5,170],[[78,[161]]]],[[161,[162,[-1]]],5,3],[161,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[168,-1],7,28],0,0,[[161,-2,[162,[-1]],[166,[-1]],[163,[-1]],[0,[[174,[-1]]]]],[[78,[[35,[[44,[-1]]]]]]],3,[[47,[-1]]]],[[161,-2,[162,[-1]],[166,[-1]]],[[78,[2]]],3,[[47,[-1]]]],[168,-1,3],[168,-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[169,[162,[-1]]],[[164,[-1]]],3],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[133,[[78,[168]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[161,5],[[78,[161]]]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[163,[-1]]],[97,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],161],[[[164,[-1]],[162,[-1]],5],[[78,[[2,[[35,[[166,[-1]]]],5]]]]],3],[[[164,[-1]],[162,[-1]],5],[[78,[[2,[[35,[[164,[-1]]]],5,[35,[[164,[-1]]]]]]]]],3],[[[164,[-1]],[164,[-1]],[164,[-1]],[162,[-1]],5],[[78,[[2,[[35,[[166,[-1]]]],5]]]]],3],0,0,0,0,0,0,0,0,0,[161,[[165,[-1]]],3],[161,[[166,[-1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[175,[-1]]],[[175,[-1]]],[4,3]],[[[165,[-1]]],[[165,[-1]]],[4,3]],[[[166,[-1]]],[[166,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[165,[-1]]],[97,3]],[[],[[166,[-1]]],[97,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[175,[-1]],11],12,[13,3]],[[[165,[-1]],11],12,[13,3]],[[[166,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[[],5],[[],5],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[161,[[165,[-1]]],3],0,[[]],[[]],[[]],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[164,[-1]],168],[[164,[-1]]],3],[129,[[164,[-1]]],3],[[[164,[-1]]],[[164,[-1]]],[4,3]],[[-1,-2],2,[],[]],[-1,[[164,[-1]]],3],[[[164,[-1]],[162,[-1]]],29,3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[164,[-2]]]]],8,[122,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[176,[-2]]]]],8,[122,3]],[5,2],[5,2],[[[164,[-1]],[164,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[164,[-1]],11],12,[13,3]],[[[176,[-1]],11],12,[13,3]],[[[164,[-1]],[162,[-1]],88],29,3],[-1,-1,[]],[-1,-1,[]],[[[164,[-1]]],[[27,[-1]]],3],[[-1,-2],15,[16,17],18],[[[164,[-1]]],[[27,[5]]],3],[[[164,[-1]]],[[27,[5]]],3],[[[164,[-1]]],[[27,[5]]],3],[[[164,[-1]],-2],2,3,19],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[164,[-1]]],9,3],[[[164,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[168,[[164,[-1]]],3],[-1,[[164,[-1]]],3],[15,[[164,[-1]]],3],[[]],[[]],[[[164,[-1]],-2],7,[123,3],28],[[[176,[-1]],-2],7,[123,3],28],[[[164,[-1]]],168,3],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[15,[[164,[-1]]],3],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[162,[-1]],[164,[-1]]],[[78,[[2,[[164,[-1]],[164,[-1]]]]]]],3],[[[162,[-1]],[164,[-1]]],[[78,[[164,[-1]]]]],3],[[],[[162,[-1]]],[97,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[162,[-1]],5],[[27,[[2,[[164,[-1]],[164,[-1]]]]]]],3],[[[162,[-1]],5],[[27,[[2,[[164,[-1]],[164,[-1]],[164,[-1]]]]]]],3],[[[162,[-1]],5],[[27,[[2,[[164,[-1]],[164,[-1]],[164,[-1]],[164,[-1]]]]]]],3],[[[162,[-1]],[164,[-1]]],[[27,[118]]],3],[[[162,[-1]],[164,[-1]]],[[27,[29]]],3],[[[162,[-1]],[164,[-1]]],[[27,[118]]],3],[[[162,[-1]],[164,[-1]]],[[27,[118]]],3],[[[162,[-1]],5],[[27,[[35,[29]]]]],3],[[[162,[-1]],11],12,[13,3]],[-1,-1,[]],[[[162,[-1]],[164,[-1]]],[[78,[[177,[-1]]]]],3],[[[162,[-1]],-1,[164,[-1]]],[[78,[[164,[-1]]]]],3],[[[162,[-1]],-1,[164,[-1]]],[[78,[[2,[-1,[177,[-1]]]]]]],3],[[[162,[-1]]],2,3],[[],5],[[[162,[-1]],168,[164,[-1]],[164,[-1]]],[[164,[-1]]],3],[[[162,[-1]],168,[164,[-1]],[164,[-1]],[177,[-1]]],[[164,[-1]]],3],[[[162,[-1]],168,[164,[-1]],[164,[-1]],[164,[-1]]],[[164,[-1]]],3],[[[162,[-1]],168,[164,[-1]],[164,[-1]],[164,[-1]],[177,[-1]]],[[164,[-1]]],3],[[[162,[-1]],168,[164,[-1]],[164,[-1]],[164,[-1]],[164,[-1]]],[[164,[-1]]],3],[[[162,[-1]],168,[164,[-1]],[164,[-1]],[164,[-1]],[164,[-1]],[177,[-1]]],[[164,[-1]]],3],[[[162,[-1]],63],[[164,[-1]]],3],[[[162,[-1]]],[[164,[-1]]],3],[[[162,[-1]],63],[[164,[-1]]],3],[[[162,[-1]],118],[[164,[-1]]],3],[[[162,[-1]],[52,[29]]],[[164,[-1]]],3],[[[162,[-1]],[178,[-1]]],[[164,[-1]]],3],[-1,-2,[],[]],[[[162,[-1]],63],[[164,[-1]]],3],[[],[[7,[24,25]]]],[[[162,[-1]],[35,[[164,[-1]]]]],[[164,[-1]]],3],[[[162,[-1]],-1],[[27,[[2,[-1,[164,[-1]]]]]]],3],[[]],0,[[[162,[-1]],[103,[[102,[88]]]],63],[[78,[[164,[-1]]]]],3],[[[162,[-1]],[103,[[102,[88]]]],63],[[78,[[2,[179,[164,[-1]],9]],180]]],3],[[[162,[-1]],63],[[78,[[164,[-1]]]]],3],[[[162,[-1]],[52,[[164,[-1]]]]],[[78,[[35,[-1]]]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[[[181,[-1]],-1,-1,[177,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[181,[-1]]],[97,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[181,[-2]]]]],8,[122,3]],[5,2],[[[181,[-1]],11],12,[13,3]],[-1,-1,[]],[[[181,[-1]],[177,[-1]]],[[27,[[176,[-1]]]]],3],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[181,[-1]],-1],[[27,[[2,[-1,[177,[-1]]]]]]],3],[[]],[[[162,[-1]],[177,[-1]],[181,[-1]]],[[78,[[164,[-1]]]]],3],[[[181,[-1]],[164,[-1]],[162,[-1]]],[[78,[[177,[-1]]]]],3],[[[181,[-1]],-2],7,[123,3],28],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[182,11],12],[[182,183],29],[-1,-1,[]],[[182,[52,[183]]],[[78,[2]]]],[[],5],[[182,29],183],[-1,-2,[],[]],[[],[[7,[24,25]]]],[182,183],[183,182],[[]],[[182,63],[[27,[183]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[182,182],[[78,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,105,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[180,180],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,[[180,11],12],[[180,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[184,63],[-1,-2,[],[]],[-1,-2,[],[]],[184,184],[[-1,-2],2,[],[]],[184,129],[[184,179],[[185,[-1,[35,[128]]]]],3],[[],184],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[184,-1],29,[[186,[[52,[128]]]]]],[[184,184],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[184,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[184,129],9],[[],[[7,[24,25]]]],[[],[[0,[55]]]],[179,[[185,[-1,184]]],3],[[],[[0,[55]]]],[[],[[0,[55]]]],[184,[[0,[55]]]],[[],[[0,[55]]]],[184,[[32,[55]]]],[184,[[0,[55]]]],[[],[[0,[55]]]],[[]],[184,134],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,63,[187,[-1,-2]]],[[187,[-1,-2]]],[188,4,189],3],[[-1,190,[187,[-1,-2]]],[[187,[-1,-2]]],[188,4,189],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[191,[-1]]],[[191,[-1]]],[4,3]],[[[187,[-1,-2]]],[[187,[-1,-2]]],[4,189],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[191,[-1]],[191,[-1]]],9,[10,3]],[[[187,[-1,-2]],[187,[-1,-2]]],9,[10,189],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[[191,[-1]],11],12,3],[[[191,[-1]],11],12,[13,3]],[[[187,[-1,-2]],11],12,[13,189],[13,3]],[[[187,[179,-1]],11],12,3],[-1,-1,[]],[-1,-1,[]],[[-1,190],[[187,[-1,-2]]],[188,4,189],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[191,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[192,[-1,-2,[187,[-1,-3]]]],-4],[[192,[-1,-2,[187,[-1,-3]]]]],189,[],3,55],[[-1,[191,[-2]]],[[187,[-1,-2]]],189,3],[[[27,[-1]],-2,[191,[-3]]],[[192,[-2,-1,[187,[-2,-3]]]]],[],189,3],[[[187,[-1,-2]],[187,[-1,-2]]],[[187,[-1,-2]]],[188,4,189],3],[[]],[[]],[[[7,[-1,-2]],-3,-4],[[192,[-3,-1,[187,[-3,-5]]]]],[],[],189,55,3],[[-1,[191,[-2]]],[[192,[-1,-3,[187,[-1,-2]]]]],189,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[193,193],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[193,193],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[193,11],12],[-1,-1,[]],[[179,179],193],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[63,5,5,5,5],29],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[194,194],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[194,194],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[194,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[129,63],[[0,[55]]]],[[],[[0,[55]]]],[[129,9,63],[[0,[55]]]],[[129,9,63],[[0,[55]]]],[129,[[0,[55]]]],[[129,9,63],[[0,[55]]]],[[129,9,63],[[0,[55]]]],[[],[[0,[55]]]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[103,[[102,[88]]]],9],[[0,[55]]]],[[],[[0,[55]]]],[[],[[0,[55]]]],[179,[[185,[-1,179]]],3],[[[103,[[102,[88]]]],9,9],[[0,[55]]]],[[[103,[[102,[88]]]],9],[[0,[55]]]],[[],[[0,[55]]]],[184,[[0,[55]]]],[[[103,[[102,[88]]]],9],[[0,[55]]]],[[[103,[[102,[88]]]],9],[[0,[55]]]],[[[103,[[102,[88]]]],9],[[0,[55]]]],[[[103,[[102,[88]]]],9],[[0,[55]]]],[179,[[185,[-1,[35,[179]]]]],3],[179,[[185,[-1,[35,[179]]]]],3],[[],[[0,[55]]]],[[[103,[[102,[88]]]],9],[[0,[55]]]],[63,[[0,[55]]]],[63,[[0,[55]]]],[[],[[0,[55]]]],[[[103,[[102,[88]]]],9,9],[[0,[55]]]],[[],[[0,[55]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[40,[[39,[-1,-2]]]],[41,[-1]]],-3,[],[],[]],[-1,[[27,[[42,[-2]]]]],[],[]],[-1,[[42,[-2]]],[],[]],[-1,-2,[],[]],[[],35],[-1,-2,[],[]],[[-1,5],5,[]],[-1,-2,[],[]],[[-1,5],5,[]],[-1,[[27,[35]]],[]],[[5,52,[40,[[39,[-1,-2]]]]],[[35,[-3]]],[],[],[]],[-1,[],[]],[[-1,5,[53,[-2,-3]]],[[7,[35,54]]],55,[],[]],[[-1,[48,[-2]],[48,[-2]],[34,[-2]],5,[40,[[53,[-2,-3]]]]],[[7,[[35,[[51,[[49,[-2]],[50,[-2]],-2,-3]]]],54]]],[],[],[]],0,[-1,[],[]],[-1,[],[]],[[],[[7,[[35,[-1]]]]],[]],[-1,[[53,[-2,-3]]],[],[],[]],[[5,27,[40,[[39,[-1,-2]]]],[41,[-1]]],-3,[],[],[]],[[-1,5],5,[]],[[-1,5],9,[]],[[-1,5],9,[]],[[5,[53,[-1,-2]]],-3,[],[],[]],0,[[-1,[52,[-2]]],[[7,[[35,[[2,[-2,[195,[-3]]]]]],46]]],[],[],[]],[-1,[],[]],[-1,27,[]],[[-1,-1],9,[]],[-1,[[7,[9]]],[]],[[],5],[-1,[[35,[-2]]],[],[]],[[-1,63],7,[]],[-1,5,[]],[-1,5,[]],[52,5],0,[[-1,-3,52],[],[],[],[[47,[-2]]]],[[[35,[[2,[-3,[195,[-1]]]]]]],[[7,[9,46]]],[3,110],[[37,[-1]]],[[196,[-1,-2]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[197,[-1]]],[[197,[-1]]],[4,198,199]],[[-1,-2],2,[],[]],[[5,[40,[[53,[62,-1]]]]],[[7,[[200,[59]],46]]],[[37,[62]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[197,[-2]]]]],8,[198,199]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[197,[-1]],11],12,[13,198,199]],[[[201,[-1,-3,-2,-4]],11],12,[13,199],[13,3],[13,[37,[-2]]],[13,[196,[-2,-3]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[201,[59,-1,62,-2]]],[[53,[62,-1]]],[[37,[62]]],[[196,[62,-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[53,[62,-1]]],[[201,[59,-1,62,-2]]],[[37,[62]]],[[196,[62,-1]]]],[[[201,[59,-1,62,-2]],[202,[59]],[203,[59]],[48,[62]],[48,[62]],[34,[62]],5,-3,[40,[[53,[62,-1]]]]],[[7,[[2,[[197,[59]],[49,[62]],[49,[62]]]],54]]],[[37,[62]]],[[196,[62,-1]]],[204,4]],[[]],[[]],[[]],0,0,[[[201,[59,-1,62,-2]],[36,[62,-1]],[202,[59]],-3],[[7,[[61,[59]],46]]],[[37,[62]]],[[196,[62,-1]]],204],[[[201,[59,-1,62,-2]]],5,[[37,[62]]],[[196,[62,-1]]]],0,[[[197,[-1]],-2],7,[198,199],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[60,[59]],[205,[59]],[52,[62]],[52,[62]],[206,[59]],-1],[[7,[9,46]]],[204,22]],[[[36,[62,-1]],[60,[59]],[61,[59]]],[[7,[9,46]]],[[37,[62]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[5,[40,[[53,[-1,-2]]]]],[[2,[-3,[207,[-1]]]]],208,[[37,[-1]]],[[196,[-1,-2]]]],[[[209,[-1,-2]]],[[209,[-1,-2]]],[208,4],[4,[210,[-1]]]],[[-1,-2],2,[],[]],[[[211,[-1,-2,-3]],[209,[-1,-3]]],[[7,[[211,[-1,-2,-3]],54]]],208,[[37,[-1]]],[[196,[-1,-2]]]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[209,[-2,-3]]]]],8,208,[[210,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[211,[-2,-3,-4]]]]],8,208,[[37,[-2]]],[[196,[-2,-3]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[209,[-1,-2]],-3],[[89,[2]]],208,[[210,[-1]]],90],[[[212,[-1,-2,-3]],[209,[-1,-3]],5,[40,[[53,[-1,-2]]]]],[[7,[[2,[[211,[-1,-2,-3]],[35,[-1]],[35,[-1]],5]],54]]],208,[[37,[-1]]],[[196,[-1,-2]]]],[[[209,[-1,-2]],[52,[128]]],[[27,[[52,[128]]]]],208,[[210,[-1]]]],[[[209,[-1,-2]]],5,208,[[210,[-1]]]],[[[212,[-1,-2,-3]],11],12,[13,208],[13,[37,[-1]]],[13,[196,[-1,-2]]]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[212,[-1,-2,-3]]],[[53,[-1,-2]]],208,[[37,[-1]]],[[196,[-1,-2]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[[5,[53,[-1,-2]]],[[212,[-1,-2,-3]]],208,[[37,[-1]]],[[196,[-1,-2]]]],0,[[]],[[]],[[]],[[[212,[-1,-2,-3]],[209,[-1,-3]],52,[40,[[53,[-1,-2]]]]],[[7,[[2,[[211,[-1,-2,-3]],[35,[-1]],[35,[-1]],5]],54]]],208,[[37,[-1]]],[[196,[-1,-2]]]],[[[209,[-1,-3]],[52,[-3]],5,[35,[-1]],[40,[[53,[-1,-2]]]]],[[7,[[211,[-1,-2,-3]],54]]],208,[[37,[-1]]],[[196,[-1,-2]]]],[[5,[40,[[53,[-1,-2]]]]],[[209,[-1,-3]]],208,[[37,[-1]]],[[210,[-1]],[196,[-1,-2]]]],[[[212,[-1,-2,-3]]],5,208,[[37,[-1]]],[[196,[-1,-2]]]],[[[209,[-1,-2]],-3],7,208,[[210,[-1]]],28],[[[211,[-1,-2,-3]],-4],7,208,[[37,[-1]]],[[196,[-1,-2]]],28],0,[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[211,[-1,-2,-3]],[209,[-1,-3]],5,[52,[-1]],[52,[-1]]],[[7,[9,109]]],208,[[37,[-1]]],[[196,[-1,-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[[213,[-1,-2]]],5,3,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[39,[-1,-2]],[41,[-1]]],5,3,[[37,[-1]]]],[[[213,[-1,-2]]],5,3,[[37,[-1]]]],[[[214,[-1,-2]]],[[214,[-1,-2]]],[208,4],[4,[37,[-1]]]],[[[39,[-1,-2]]],[[39,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[[213,[-1,-2]]],[[213,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[214,[-2,-3]]]]],8,208,[[37,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[215,[-2,-3]]]]],8,[122,208],[[37,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[214,[-1,-2]],-3],[[89,[2]]],208,[[37,[-1]]],90],[[[216,[-1,-2]],[27,[[214,[-1,-2]]]],[48,[-1]],[48,[-1]],[34,[-1]],5,[40,[[53,[-1,-2]]]]],[[7,[[2,[[215,[-1,-2]],[35,[-1]],[35,[-1]],5]],54]]],208,[[37,[-1]]]],[[[214,[-1,-2]],[52,[128]]],[[27,[[52,[128]]]]],208,[[37,[-1]]]],[[[214,[-1,-2]]],5,208,[[37,[-1]]]],[[[216,[-1,-2]],11],12,[13,208],[13,[37,[-1]]]],[[[39,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[213,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[5,[52,[[51,[[49,[-1]],[50,[-1]],-1,-2]]]],[34,[-1]],[40,[[39,[-1,-2]]]]],[[217,[-3,-2]]],3,[[37,[-1]]],218],[[[217,[-1,-3]],5],[],218,3,[[37,[-2]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[216,[-1,-2]]],[[53,[-1,-2]]],208,[[37,[-1]]]],[[[39,[-1,-2]]],[[40,[[53,[-1,-2]]]]],3,[[37,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[53,[-1,-2]]],[[216,[-1,-2]]],208,[[37,[-1]]]],[[[40,[[53,[-1,-2]]]],5],[[39,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[53,[-1,-2]]]],5],[[39,[-1,-2]]],3,[[37,[-1]]]],[[[39,[-1,-2]]],5,3,[[37,[-1]]]],[[[213,[-1,-2]]],5,[208,3],[[37,[-1]]]],[[[217,[-1,-3]]],5,218,3,[[37,[-2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[213,[-1,-2]],5],[[213,[-1,-2]]],[208,3],[[37,[-1]]]],[[[216,[-1,-2]],[27,[[214,[-1,-2]]]],[52,[[51,[[49,[-1]],[50,[-1]],-1,-2]]]],[34,[-1]],[40,[[53,[-1,-2]]]]],[[7,[[2,[[215,[-1,-2]],[35,[-1]],[35,[-1]],5]],54]]],208,[[37,[-1]]]],[[[27,[[214,[-1,-2]]]],[34,[-1]],[217,[[219,[-1]],-2]],5,[35,[-1]],[40,[[53,[-1,-2]]]]],[[7,[[215,[-1,-2]],54]]],208,[[37,[-1]]]],[[[216,[-1,-2]]],5,208,[[37,[-1]]]],[[[39,[-1,-2]]],5,3,[[37,[-1]]]],[[[214,[-1,-2]],-3],7,208,[[37,[-1]]],28],[[[215,[-1,-2]],-3],7,[123,208],[[37,[-1]]],28],[[[213,[-1,-2]],-3,[27,[[45,[-1]]]],[52,[[45,[-1]]]]],[[7,[[2,[[27,[[45,[-1]]]],[35,[[45,[-1]]]]]],46]]],3,[[37,[-1]]],[[47,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[215,[-1,-2]],[222,[[219,[-1]],[220,[-1]],[213,[-1,-2]],221]],[27,[[214,[-1,-2]]]],5,[52,[-1]],[52,[-1]]],[[7,[9,223]]],208,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-2,[34,[-1]],[27,[[48,[-1]]]]],[[7,[[2,[[45,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]]],46]]],3,[[47,[-1]]]],[[-2,[34,[-1]],[27,[[48,[-1]]]]],[[7,[[2,[[45,[-1]],[44,[-1]],[44,[-1]],[44,[-1]]]],46]]],3,[[47,[-1]]]],[[[224,[-1,130]]],[[27,[[224,[-1,130]]]]],3],[[[224,[-1,130]]],[[27,[[224,[-1,130]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[224,[-1,130]],130],[[224,[-1,130]]],3],[225,225],[[[224,[-1,-2]]],[[224,[-1,-2]]],[4,3],[4,226]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[225,225],26],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[225,225],9],[[[224,[-1,-2]],[224,[-1,-2]]],9,[10,3],[10,226]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[48,[-1]],[34,[-1]],88,-2],[[89,[2]]],3,90],[[[69,[-1]],[34,[-1]],88,-2],[[89,[2]]],3,90],[[225,11],12],[[[224,[-1,-2]],11],12,[13,3],[13,226]],[129,[[48,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[225,-1],2,19],[[[224,[-1,-2]],-3],2,3,226,19],[225,[[27,[5]]]],[[-1,5],[[224,[-2,-1]]],226,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[224,[-1,130]]],9,3],[[[224,[-1,130]]],9,3],[[[69,[-1]]],9,3],[[[224,[-1,87]]],9,3],[-1,9,[]],[[[48,[-1]]],9,3],[[[224,[-1,130]]],9,3],[[[224,[-1,130]]],9,3],[225,9],[225,9],[[[224,[-1,-2]]],9,3,226],[[-1,130],9,[]],[[[48,[-1]],130],9,3],[-1,9,[]],[[[48,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[87,225],[[69,[-1]]],3],[5,225],[[87,225],[[224,[-1,87]]],3],[-1,[[224,[-2,-1]]],226,3],[[-1,5],[[224,[-2,-1]]],226,3],[225,[[27,[5]]]],[[225,225],[[27,[26]]]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[5,9,[40,[[53,[-1,-2]]]],82],[[7,[[40,[[209,[-1,-3]]]],227]]],208,[[37,[-1]]],[[196,[-1,-2]]]],[[],76],[[5,[40,[[53,[-1,-2]]]],-3],[[7,[-4,227]]],208,[[37,[-1]]],66,[]],0,0,0,0,[-1,105,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[227,11],12],[[227,11],12],[228,227],[-1,-1,[]],[229,227],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[227,[[27,[105]]]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[230,[-1,-2]]],[[230,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[],231],[[],231],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],0,[[[230,[-1,-2]],[48,[-1]],[34,[-1]]],[[78,[[2,[[48,[-1]],5,[69,[-1]],[35,[[48,[-1]]]]]]]]],3,[[37,[-1]]]],[[[230,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[232,[-1,-3,-2]],11],12,[13,3],[13,[37,[-1]]],[13,[233,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[[-1,[34,[-2]],[103,[[102,[88]]]],-3],[[78,[2]]],[],[],[[186,[234]],110]],[[-1,[34,[-2]],[103,[[102,[88]]]],179,-3],[[78,[179]]],[],[],[[186,[234]],110]],[[-1,[34,[-2]],[103,[[102,[88]]]],-3],[[78,[2]]],[],[],[[186,[234]]]],[[-1,[34,[-2]],[103,[[102,[88]]]],[48,[-2]],-3],[[78,[2]]],[],[],[[186,[234]],110]],[[[230,[-1,-2]],[34,[-1]],[103,[[102,[88]]]],[48,[-1]],-3],[[78,[2]]],3,[[37,[-1]]],[[186,[234]],110]],[[-1,[34,[-2]],88,[48,[-2]]],[[78,[[2,[[49,[-2]],[49,[-2]],5]]]]],[],[]],[[[230,[-1,-2]],[34,[-1]],88,[48,[-1]]],[[78,[[2,[[49,[-1]],[49,[-1]],5]]]]],3,[[37,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[[],29],[[],29],[[[34,[-1]],5,[27,[231]],[53,[-1,-2]]],-3,[],[],[]],[[[34,[-1]],5,[27,[231]],[53,[-1,-2]]],[[230,[-1,-2]]],3,[[37,[-1]]]],[[[34,[-1]],5,[27,[231]],[53,[-1,-2]]],[[230,[-1,-2]]],3,[[37,[-1]]]],[[[34,[-1]],5,[27,[231]],[53,[-1,-2]]],[[78,[[232,[-1,-3,-2]]]]],3,[[37,[-1]]],[[233,[-1,-2]]]],[[]],[[]],[[-1,29],29,[]],[[[230,[-1,-2]],29],29,3,[[37,[-1]]]],[-1,29,[]],[[[230,[-1,-2]]],29,3,[[37,[-1]]]],[[[27,[-1]],[53,[-2,-3]]],[[78,[2]]],[[186,[234]]],[3,122],[[37,[-2]]]],[[[53,[-1,-2]]],[[78,[2]]],[3,122],[[37,[-1]]]],[[[34,[-1]],[232,[-1,-3,-2]],[27,[-4]]],[[78,[2]]],3,[[37,[-1]]],[[233,[-1,-2]]],[[186,[234]]]],[[[232,[-1,-3,-2]]],[[78,[2]]],3,[[37,[-1]]],[[233,[-1,-2]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[88,182],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],88],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[88,11],12],[[88,183],29],[-1,-1,[]],[88,183],[[88,[52,[183]]],[[78,[2]]]],[[],5],[[],88],[[],88],[[88,-1],183,[[186,[63]]]],[[88,[52,[-1]],9,9],[[78,[183]]],[[186,[63]]]],[[88,[52,[-1]],9],[[78,[183]]],[[186,[63]]]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[63,118],[[],118],[182,88],[[]],[88,[[103,[[102,[88]]]]]],[[88,63],[[27,[183]]]],[[88,183],[[78,[2]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[88,182],[[78,[2]]]],[63,118],[-1,-2,[],[]],0,0,0,0,[-1,105,[]],[[[34,[-1]],9],[[48,[-1]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[34,[-1]],[48,[-1]]],[[7,[[48,[-1]],108]]],3],0,[[[34,[-1]],[48,[-1]]],[[7,[[2,[[48,[-1]],[48,[-1]]]],108]]],3],[[[34,[-1]],[48,[-1]]],[[7,[[48,[-1]],108]]],3],0,0,[108,108],[[[235,[-1]]],[[235,[-1]]],[4,3]],[[[236,[-1]]],[[236,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[34,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],9,3],0,0,0,[[],[[34,[-1]]],3],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],0,[5,2],[5,2],[5,2],[5,2],0,0,0,0,0,[[[34,[-1]]],[[236,[-1]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[125,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[129]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[127,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[69,[-1]]],[[27,[[75,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[118]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[35,[[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[118]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[1,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[29]]],3],[[[34,[-1]],[48,[-1]]],[[27,[118]]],3],[[[34,[-1]],[48,[-1]]],[[27,[118]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[2,[[48,[-1]],[48,[-1]]]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[124,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[14]]],3],[[[34,[-1]],[68,[-1]]],[[27,[[69,[-1]]]]],3],[[[34,[-1]],[67,[-1]]],[[27,[[48,[-1]]]]],3],[[[34,[-1]],11],12,[13,3]],[[108,11],12],[[108,11],12],[[[235,[-1]],11],12,[13,3]],[[[236,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]],[69,[-1]]],[[27,[[71,[-1]]]]],3],[[[34,[-1]],[124,[-1]]],[[27,[[71,[-1]]]]],3],[[[34,[-1]],130,-1],[[27,[[48,[-1]]]]],3],[[[34,[-1]],-2],[[27,[[48,[-1]]]]],3,[[117,[[1,[-1]]]]]],[[[34,[-1]],[48,[-1]]],[[27,[[67,[-1]]]]],3],[[[34,[-1]],[69,[-1]],[27,[[237,[-1]]]]],[[7,[[2,[[68,[-1]],[27,[[238,[-1]]]]]],108]]],3],[[[34,[-1]],[48,[-1]],[27,[[237,[-1]]]]],[[7,[[2,[[67,[-1]],[27,[[239,[-1]]]]]],108]]],3],0,0,[[[34,[-1]],[69,[-1]]],[[27,[[68,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[67,[-1]]]]],3],[[[34,[-1]],63],[[67,[-1]]],3],[[[34,[-1]],118],[[67,[-1]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[[34,[-1]],-1,[48,[-1]]],[[27,[[48,[-1]]]]],3],[[[34,[-1]],-1,[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]]],2,3],0,0,[-1,[],[]],[[],5],[[],5],[[],5],[[],5],[[[34,[-1]]],[],3],[[[34,[-1]],129],[[48,[-1]]],3],[[[34,[-1]],-1,[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]]],[[69,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],[[[34,[-1]],130,-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-2],[[48,[-1]]],3,[[117,[[1,[-1]]]]]],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],-1],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],63],[[48,[-1]]],3],[[[34,[-1]],118],[[48,[-1]]],3],[[[34,[-1]],[52,[29]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],[[[34,[-1]],9],[[48,[-1]]],3],[[[34,[-1]],[178,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[124,[-1]]],[[48,[-1]]],3],[[[34,[-1]],15],[[48,[-1]]],3],[[[34,[-1]],14],[[48,[-1]]],3],[[[34,[-1]],[68,[-1]],[237,[-1]]],[[27,[[69,[-1]]]]],3],[[[34,[-1]],[67,[-1]],[237,[-1]]],[[27,[[48,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[186,[63]]]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,0,0,0,0,0,[[[34,[-1]],[52,[[48,[-1]]]]],[[48,[-1]]],3],0,[[[34,[-1]],[69,[-1]]],[[69,[-1]]],3],0,[[],[[34,[-1]]],3],[[[34,[-1]]],[[236,[-1]]],3],[[[34,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[117,[[1,[-1]]]]]],0,0,0,0,0,[[[34,[-1]],[48,[-1]]],[[27,[[2,[-1,[48,[-1]]]]]]],3],0,[[[34,[-1]],[48,[-1]]],[[7,[[2,[-1,[48,[-1]]]],108]]],3],[[]],[[]],[[]],[[]],0,0,[[[235,[-1]]],[[48,[-1]]],3],[[[34,[-1]],[48,[-1]],[48,[-1]]],[[7,[9,108]]],3],[[[34,[-1]]],[[7,[9]]],3],0,0,[[[34,[-1]],63],[[7,[[48,[-1]],180]]],3],[[[34,[-1]],63],7,3],[[[34,[-1]],[103,[[102,[88]]]],179],[[7,[[2,[179,[48,[-1]],9]],180]]],3],[[[34,[-1]],[103,[[102,[88]]]],63],[[7,[[48,[-1]],180]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[48,[-1]]]]],3],0,[[[34,[-1]],[48,[-1]]],[[7,[[48,[-1]],108]]],3],[[[34,[-1]],63],[[48,[-1]]],3],0,[[[34,[-1]],[48,[-1]],[48,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]]],[[48,[-1]]],3],0,[[[34,[-1]],-2],[[48,[-1]]],3,[[186,[63]]]],0,[[[34,[-1]]],[[48,[-1]]],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[34,[-1]],[69,[-1]]],[[27,[[238,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[27,[[239,[-1]]]]],3],[[[34,[-1]],[48,[-1]]],[[7,[[2,[[237,[-1]],[67,[-1]]]],108]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[[[34,[-1]],15],[[48,[-1]]],3],0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[34,[-1]],63],[[48,[-1]]],3],[[[235,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[34,[-1]],-1,-1],[[7,[[68,[-1]],108]]],3],0,[[[34,[-1]],-1,-1],[[7,[[67,[-1]],108]]],3],0,[[[235,[-1]]],[[67,[-1]]],3],0,0,0,0,0,[[]],[[118,118],[[27,[118]]]],[-1,-2,[],[]],[-1,-2,[],[]],[118,118],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[118]]],8],[[118,63],118],[118,[[27,[118]]]],[5,2],[[118,118],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[118,[52,[-1]]],118,[[186,[63]]]],[[118,11],12],[[118,11],12],[63,29],[118,29],[118,29],[118,29],[-1,-1,[]],[63,118],[63,[[27,[118]]]],[[-1,-2],15,[16,17],18],[[118,118],9],[[118,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[118,9],[118,9],[118,9],[118,9],[129,9],[[[52,[-1]]],118,[[186,[63]]]],[[[35,[29]]],118],[[],[[7,[24,25]]]],[118,[[78,[63]]]],[[[52,[-1]],9],118,[[186,[63]]]],[[[35,[29]],9],118],[[118,118],[[27,[26]]]],[118,[[52,[29]]]],[[]],[118,9],[9,118],[[],118],[[],118],[[118,-1],7,28],[118,2],[[[52,[-1]]],118,[[186,[63]]]],[[[35,[29]]],118],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[178,[-1]]],[[178,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[178,[-1]],[178,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[178,[-1]],11],12,3],[[[178,[-1]],11],12,[13,3]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[35,[-1]]],[]],[[],[[35,[131]]]],[[],[[35,[132]]]],[[],[[35,[63]]]],[[130,-2],[[45,[-1]]],3,[[47,[-1]]]],[[87,-2],[[45,[-1]]],3,[[47,[-1]]]],[[131,-2],[[45,[-1]]],3,[[47,[-1]]]],[[132,-2],[[45,[-1]]],3,[[47,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[130,130],[87,87],[131,131],[132,132],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[130]]],8],[-1,[[7,[87]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[131]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[132]]],8],[5,2],[5,2],[5,2],[5,2],[[130,130],9],[[87,87],9],[[131,131],9],[[132,132],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[130,11],12],[[130,11],12],[[87,11],12],[[87,11],12],[[131,11],12],[[131,11],12],[[132,11],12],[[132,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[-2]]],3,[]],[-1,[[27,[130]]],3],[-1,[[27,[87]]],3],[-1,[[27,[131]]],3],[-1,[[27,[132]]],3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[130,-1],2,19],[[87,-1],2,19],[[131,-1],2,19],[[132,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[130,9],[132,9],[[130,130],9],[130,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[131,131],[[27,[26]]]],[[132,132],[[27,[26]]]],[[]],[[]],[[]],[[]],[[130,-1],7,28],[[87,-1],7,28],[[131,-1],7,28],[[132,-1],7,28],[[-1,5],9,[]],[[131,5],9],[[132,5],9],[-1,63,[]],[131,63],[132,63],[-1,-2,[],3],[130,-1,3],[87,-1,3],[131,-1,3],[132,-1,[[240,[15]],241]],[-1,[],[]],[130],[87],[131],[132],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[133,[[7,[130]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[133,[[7,[87]]]],[133,[[7,[131]]]],[-1,[[7,[-2]]],[],[]],[133,[[7,[132]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[14,14],14],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[14]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[14,14],14],[5,2],[[14,14],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[14,11],12],[[14,11],12],[-1,-1,[]],[15,14],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[14,9],[[],[[7,[24,25]]]],[[14,14],14],[[14,14],[[27,[26]]]],[[]],[[14,14],14],[[14,-1],7,28],[[14,14],14],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[[-1,[34,[-2]],88,-3],[[89,[2]]],[],[],90],[[-1,[34,[-2]],88],29,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,128],[242,242],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[242,242],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[242,11],12],[[242,11],12],[-1,-1,[]],[[[52,[128]]],[[78,[242]]]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[52,[128]]],[[27,[5]]]],0,[242,128],[128,9],[128,9],[242,[[35,[128]]]],[-1,-2,[],[]],[-1,29,[]],[5,[[35,[128]]]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,105,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,243,21],[-1,243,21],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[243,11],12],[[243,11],12],[-1,-1,[]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],0,[-1,29,[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,63,[52,[63]],-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,63,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,63,[52,[63]],-1],7,245],[[244,5,-1],7,245],[[244,63,5,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,-1],7,245],[[244,63,-1],7,245],[5,2],[[244,11],12],[-1,-1,[]],[242,[[7,[-1,243]]],122],[242,244],[[],5],[-1,-2,[],[]],[244,9],[[],[[7,[24,25]]]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[246,7],[246,7],[246,7],[247,7],[248,7],[249,7],[249,7],[[250,11],12],[[246,11],12],[[247,11],12],[[248,11],12],[[249,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[250,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[[250,9],7],[[250,[52,[128]]],7],[[250,129],7],[[246,-1],[[7,[2]]],[123,17]],[[246,-1],[[7,[2]]],[123,17]],[[250,251],7],[[250,252],7],[[246,-1],[[7,[2]]],[123,17]],[[248,-1],[[7,[2]]],[123,17]],[[249,63,-1],[[7,[2]]],[123,17]],[[249,63,-1],[[7,[2]]],[123,17]],[[250,253],7],[[250,254],7],[[250,255],7],[[250,256],7],[[247,-1],[[7,[2]]],[123,17]],[[250,[27,[5]]],7],[[250,63,-1],7,[123,17]],[[250,63,134,63,-1],7,[123,17]],[250,7],[[250,[27,[5]]],7],[[250,-1],7,[123,17]],[[250,63],7],[[250,63,5],7],[[250,63,134,63,5],7],[[250,5],7],[[250,63,5],7],[[250,63,134,63,5],7],[[250,133],7],[[250,134],7],[[250,15],7],[[250,128],7],[250,7],[[250,63],7],[[250,63,134,63],7],[[247,-1],[[7,[2]]],[123,17]],[-1,[[7,[242,243]]],123],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[238,[-1]]],[[238,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[238,[-2]]]]],8,[122,3]],[5,2],[[[238,[-1]],[238,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[238,[-1]],11],12,[13,3]],[-1,-1,[]],[[[238,[-1]]],[[71,[-1]]],3],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[238,[-1]],-2],7,[123,3],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[238,[-1]],[104,[-1]]],[[68,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[239,[-1]]],[[239,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[239,[-2]]]]],8,[122,3]],[5,2],[[[239,[-1]],[239,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[239,[-1]],11],12,3],[[[239,[-1]],11],12,[13,3]],[-1,-1,[]],[[[34,[-1]],[48,[-1]]],[[27,[[239,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[239,[-1]],-2],7,[123,3],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[239,[-1]],[104,[-1]]],[[67,[-1]]],3],0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[257,[-1,-2]]],[[257,[-1,-2]]],[4,226],[4,3]],[[-1,-2],2,[],[]],[[[257,[-1,-2]],[257,[-1,-2]]],26,226,3],[5,-1,[]],[5,-1,[]],[-1,[[7,[[257,[-2,-3]]]]],8,[122,226],[122,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[257,[-1,-2]],[257,[-1,-2]]],9,[10,226],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[257,[-1,-2]],11],12,[226,21],3],[[[257,[-1,-2]],11],12,[13,226],[13,3]],[-1,-1,[]],[63,[[7,[[257,[-1,-2]],258]]],226,3],[63,[[7,[[67,[-1]],108]]],3],[63,[[7,[[257,[130,-1]],108]]],3],[[-1,-2],[[257,[-1,-2]]],226,3],[[-1,-2],15,[16,17],18],[[[257,[-1,-2]],-3],2,226,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[257,[-1,-2]]],[[71,[-2]]],226,3],[[],[[7,[24,25]]]],[[[257,[-1,-2]],[257,[-1,-2]]],[[27,[26]]],226,3],[[[257,[-1,-2]]],[[2,[-2,-2]]],226,3],[[]],[[[257,[-1,-2]],-3],7,[123,226],[123,3],28],[[[257,[-1,-2]]],-1,226,3],[[[257,[-1,-2]]],-2,226,3],[[[257,[-1,-2]]],29,226,3],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[[257,[-1,-2]]],-2,226,3],[-1,-2,[],[]],0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[237,[-1]]],[[237,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,[[],[[237,[-1]]],[97,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[237,[-2]]]]],8,[122,3]],[5,2],[[[237,[-1]],[237,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[237,[-1]],11],12,[13,3]],[-1,-1,[]],[[[237,[-1]],[68,[-1]]],[[27,[[238,[-1]]]]],3],[[[237,[-1]],[67,[-1]]],[[27,[[239,[-1]]]]],3],[[[67,[-1]]],[[27,[[239,[-1]]]]],3],[[],5],[[[237,[-1]],[34,[-1]],[48,[-1]]],[[27,[[67,[-1]]]]],3],[[[237,[-1]],[67,[-1]],[27,[[239,[-1]]]]],[[27,[[27,[[239,[-1]]]]]]],3],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[237,[-1]]],3],[[[34,[-1]],[48,[-1]]],[[2,[[237,[-1]],[27,[[67,[-1]]]]]]],3],[[[237,[-1]],[104,[-1]]],[[67,[-1]]],3],[[]],[[[237,[-1]],63,[104,[-1]]],[[2,[[67,[-1]],[239,[-1]]]]],3],[[[237,[-1]],118,[104,[-1]]],[[2,[[67,[-1]],[239,[-1]]]]],3],[[[237,[-1]],-2],7,[123,3],28],[-1,-2,[],[]],[[[237,[-1]]],[[34,[-1]]],3],[[[237,[-1]],[67,[-1]]],[[7,[[2,[[34,[-1]],[48,[-1]]]],108]]],3],[[[34,[-1]]],[[237,[-1]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Num",0],[15,"tuple"],[8,"LurkField",1440],[8,"Clone",4756],[15,"usize"],[3,"With",4757],[4,"Result",4758],[8,"Deserializer",4759],[15,"bool"],[8,"PartialEq",4760],[3,"Formatter",4761],[6,"Result",4761],[8,"Debug",4761],[4,"UInt",4206],[15,"u64"],[8,"Hash",4762],[8,"Sized",4763],[8,"BuildHasher",4762],[8,"Hasher",4762],[3,"IndentedSection",4764],[8,"Display",4761],[8,"Send",4763],[8,"Sync",4763],[3,"Layout",4765],[3,"LayoutError",4765],[4,"Ordering",4760],[4,"Option",4766],[8,"Serializer",4767],[3,"String",4768],[3,"TypeId",4769],[3,"Global",4770],[3,"Box",4771],[8,"Any",4769],[3,"Store",3592],[3,"Vec",4772],[3,"MultiFrame",105],[8,"Coprocessor",632],[3,"CircuitFrame",105],[4,"FoldingConfig",3182],[3,"Arc",4773],[4,"Meta",988],[3,"WitnessCS",4774],[3,"GlobalAllocations",206],[3,"AllocatedPtr",293],[3,"AllocatedNum",4775],[4,"SynthesisError",4776],[8,"ConstraintSystem",4776],[6,"Ptr",3341],[3,"IO",988],[3,"Witness",988],[3,"Frame",988],[15,"slice"],[3,"Lang",1232],[4,"ProofError",893],[8,"Fn",4777],[3,"AllocatedContPtr",293],[6,"ConsCircuitWitness",1681],[6,"ContCircuitWitness",1681],[3,"Bls12",4778],[3,"PreparedVerifyingKey",4779],[3,"Proof",4780],[3,"Scalar",4781],[15,"str"],[4,"Boolean",4782],[8,"PrimeField",4783],[8,"FnOnce",4777],[6,"ZExprPtr",4661],[6,"ZContPtr",4661],[6,"ContPtr",3341],[8,"IntoHashComponents",1543],[15,"array"],[8,"AsAllocatedHashComponents",293],[4,"ConsName",1681],[4,"ContName",1681],[4,"Continuation",551],[3,"Utf8PathBuf",4784],[3,"HashMap",4785],[6,"Result",4786],[4,"Backend",408],[6,"Scalar",4787],[3,"Repl",432],[3,"Utf8Path",4784],[4,"Flow",453],[3,"ParallelConfig",453],[3,"WitnessGeneration",453],[3,"Config",453],[4,"ContTag",3970],[3,"State",3554],[6,"Result",4788],[8,"Write",4789],[3,"CircomCoprocessor",644],[8,"CircomGadget",201],[4,"TrieCoproc",675],[3,"NewCoprocessor",675],[3,"LookupCoprocessor",675],[3,"InsertCoprocessor",675],[8,"Default",4790],[3,"Trie",675],[4,"Error",675],[3,"LookupProof",675],[3,"InsertProof",675],[3,"RefCell",4791],[3,"Rc",4792],[3,"PoseidonCache",1543],[8,"Error",4793],[4,"ReductionError",893],[4,"LurkError",893],[3,"Error",3592],[4,"NovaError",4794],[8,"Copy",4763],[4,"Status",988],[3,"Evaluator",988],[3,"Error",4761],[3,"FrameIt",988],[3,"Take",4795],[3,"Binding",1232],[8,"Into",4796],[3,"Symbol",3862],[4,"Coproc",1232],[3,"DummyCoprocessor",1232],[3,"IndexMap",4797],[8,"Deserialize",4759],[8,"Serialize",4767],[3,"Thunk",1355],[4,"Expression",1355],[4,"LanguageField",1440],[3,"FWrap",1440],[15,"u8"],[15,"char"],[4,"ExprTag",3970],[4,"Op1",3970],[4,"Op2",3970],[15,"u16"],[15,"u32"],[15,"u128"],[3,"HashConstants",1543],[6,"U3",4798],[3,"PoseidonConstants",4799],[6,"U4",4798],[6,"U6",4798],[6,"U8",4798],[4,"HashConst",1543],[4,"HashArity",1543],[3,"InversePoseidonCache",1543],[3,"HashWitness",1681],[8,"HashName",1681],[8,"Eq",4760],[6,"ConsStub",1681],[3,"Cons",1681],[4,"Stub",1681],[6,"ConsWitness",1681],[3,"CircuitHashWitness",1681],[6,"HashCircuitWitnessBlocks",1681],[8,"ContentAddressed",1681],[3,"ScalarCons",1681],[3,"ScalarCont",1681],[3,"Cont",1681],[6,"ContStub",1681],[6,"ContWitness",1681],[6,"Preimage",1681],[3,"Func",2058],[3,"Store",2563],[3,"GlobalAllocator",2331],[4,"Ptr",2485],[3,"Preimages",2377],[3,"Frame",2377],[3,"Var",2058],[4,"Tag",2058],[4,"Lit",2058],[3,"Block",2058],[4,"Ctrl",2058],[4,"Op",2058],[6,"AString",2058],[4,"AllocatedVal",2331],[4,"PreimageData",2377],[4,"ZChildren",2485],[6,"ZPtr",2485],[4,"Syntax",3931],[6,"Span",2674],[4,"Error",2674],[3,"ZStore",2618],[3,"Package",2646],[6,"SymbolRef",2646],[4,"LitBase",2715],[6,"ParseResult",2674],[8,"AsRef",4796],[3,"ParseError",2762],[8,"InputLength",4800],[8,"AsBytes",4800],[4,"ErrorKind",4801],[4,"ParseErrorKind",2762],[6,"IResult",4802],[4,"Pos",2844],[4,"StringFragment",2882],[3,"TestConstraintSystem",4803],[8,"MultiFrameTrait",2941],[3,"Proof",3001],[8,"Engine",4804],[8,"MultiMillerLoop",4804],[3,"PublicParams",3001],[3,"Groth16Prover",3001],[3,"Parameters",4805],[3,"GenericSRS",4806],[8,"RngCore",4807],[3,"VerifierSRS",4806],[3,"AggregateProofAndInstance",4808],[6,"C2",3078],[8,"CurveCycleEquipped",3078],[3,"PublicParams",3078],[8,"StepCircuit",4809],[4,"Proof",3078],[3,"NovaProver",3078],[3,"NIVCStep",3182],[3,"PublicParams",3182],[4,"Proof",3182],[3,"SuperNovaProver",3182],[3,"NIVCSteps",3182],[8,"Group",4810],[6,"G1",3078],[6,"G2",3078],[3,"TrivialSecondaryCircuit",4811],[3,"RunningClaim",4812],[4,"SuperNovaError",4813],[3,"GPtr",3341],[4,"RawPtr",3341],[8,"Tag",3970],[4,"Error",3451],[3,"Error",4814],[3,"Error",4788],[3,"ReplState",3482],[3,"Command",4815],[3,"Repl",3482],[8,"ReplTrait",3482],[3,"Path",4816],[3,"ConstantPtrs",3592],[3,"NamedConstants",3592],[3,"ZStore",4710],[4,"ZCont",4529],[4,"ZExpr",4609],[8,"From",4796],[8,"Field",4783],[4,"ZData",4251],[4,"SerdeError",4299],[3,"Deserializer",4332],[8,"Visitor",4759],[3,"SerializeCell",4384],[3,"SerializeMap",4384],[3,"SerializeTupleVariant",4384],[3,"StructSerializer",4384],[3,"Serializer",4384],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"ZPtr",4661],[3,"Error",4786],[8,"ToInputs",100],[13,"Let",600],[13,"LetRec",600],[13,"Call0",600],[13,"Call",600],[13,"Call2",600],[13,"Tail",600],[13,"Lookup",600],[13,"Unop",600],[13,"Binop",600],[13,"Binop2",600],[13,"If",600],[13,"Emit",600],[8,"CoCircuit",632],[6,"ChildMap",675],[8,"Evaluable",988],[8,"CAddr",1681],[4,"Val",2377],[13,"Pos",2876],[8,"EvaluationStore",2941],[8,"FrameLike",2941],[8,"Prover",2941],[8,"CEKState",2941],[8,"Provable",2941],[6,"C1",3078],[8,"TypePredicates",3341],[8,"Op",3970],[8,"Write",4248],[13,"Let",4577],[13,"LetRec",4577],[13,"Call0",4577],[13,"Call",4577],[13,"Call2",4577],[13,"Tail",4577],[13,"Lookup",4577],[13,"Unop",4577],[13,"Binop",4577],[13,"Binop2",4577],[13,"If",4577],[13,"Emit",4577],[13,"Fun",4658]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"MetricsSinkHandle",0],[15,"tuple"],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
