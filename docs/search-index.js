var searchIndex = JSON.parse('{\
"clutch":{"doc":"","t":"DLLLLLLLLLLLLLLLLLLLL","n":["ClutchState","borrow","borrow_mut","deref","deref_mut","drop","from","handle_meta","handle_non_meta","handle_run","init","into","maybe_handle_command","name","new","prompt","references","try_from","try_into","type_id","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Returns two bools. First bool is true if input is a …","","","","","","","",""],"i":[0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],"f":[0,[[]],[[]],[1],[1],[1],[[]],[[[3,[2]],4,[5,[2]],6,[0,[[8,[7]],9]]],10],[[[3,[2]],4,[5,[2]],11],10],[[[3,[2]],4,[0,[[8,[7]],9]],6],10],[[],1],[[]],[[[3,[2]],4,12,6],10],[[],13],[[4,1],[[3,[2]]]],[[[3,[2]]],13],[14,[[16,[15]]]],[[],16],[[],16],[[],17],[[]]],"c":[],"p":[[15,"usize"],[6,"Scalar"],[3,"ClutchState"],[3,"Store"],[3,"Ptr"],[3,"Package"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[15,"bool"],[15,"str"],[3,"String"],[3,"RawCodec"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"fcomm":{"doc":"","t":"DEDDGRDNDININEDDGNDNDDGEGNNNHDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLFMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLALLLFLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLMMFMLLLLMMMLLLFKLLLLLLLLLLLLLLKLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLL","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Evaluation","Evaluation","Expression","FileStore","Five","Id","Ipld","LurkPtr","LurkScalarBytes","LurkScalarIpld","NovaProofCache","One","Opening","Opening","OpeningRequest","Proof","PublicParamCache","ReductionCount","S1","ScalarBytes","Source","Ten","VERBOSE","VerificationResult","apply","apply_and_prove","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid_from_string","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont_out","count","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr_out","expr_ptr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","hash","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","proof","proof_cid","prove_claim","ptr","ptr","public_params","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","references","references","references","references","references","references","references","references","references","references","references","references","references","references","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","string_cid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","CommitmentParseError","Error","EvaluationFailure","IOError","JsonError","OpeningFailure","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","init","into","provide","references","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"fcomm"],[464,"fcomm::error"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,0,0,0,0,7,0,0,17,0,27,0,0,0,0,17,0,7,0,0,0,0,0,27,27,17,0,0,24,24,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,22,54,17,18,21,22,23,24,25,26,27,4,33,12,7,29,0,12,29,17,18,21,22,23,24,25,26,27,4,7,29,17,18,21,22,23,24,25,26,27,4,7,29,21,22,24,4,0,18,18,17,18,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,18,18,17,18,21,22,23,24,25,26,27,4,7,29,17,18,21,24,25,7,0,18,23,12,0,7,12,18,23,4,18,4,18,21,22,23,24,25,26,27,4,33,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,21,21,27,21,21,17,54,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,54,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,22,24,17,18,21,22,23,24,25,26,27,4,33,12,7,29,12,7,7,18,24,0,12,24,24,7,12,24,12,29,12,21,27,0,55,17,18,21,22,23,24,25,26,27,4,33,12,7,29,55,17,18,21,22,23,24,25,26,27,4,33,12,7,29,12,17,18,21,22,23,24,25,26,27,4,33,12,7,29,4,17,18,21,22,23,24,25,26,27,4,33,12,7,29,29,18,24,0,17,18,21,22,23,24,25,26,27,4,7,29,21,17,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,33,29,29,12,17,18,21,22,23,24,25,26,27,4,33,12,7,29,55,17,18,21,22,23,24,25,26,27,4,33,12,7,29,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,[3,[2]],[4,[2]],5,6],[[9,[[7,[2]],8]]]],[[1,[3,[2]],[4,[2]],5,6,6,10,11],[[9,[[12,[2]],8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[15,[[9,[13,16]]]],0,0,[17,17],[18,18],[[[21,[[0,[19,20]]]]],[[21,[[0,[19,20]]]]]],[[[22,[[0,[19,20]]]]],[[22,[[0,[19,20]]]]]],[23,23],[[[24,[[0,[19,20]]]]],[[24,[[0,[19,20]]]]]],[25,25],[26,26],[27,27],[[[4,[[0,[19,20,28]]]]],[[4,[[0,[19,20,28]]]]]],[[[7,[[0,[19,20]]]]],[[7,[[0,[19,20]]]]]],[29,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],30],0,0,[17,5],[[],18],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[31,[[9,[17]]]],[31,[[9,[18]]]],[31,[[9,[[21,[20]]]]]],[31,[[9,[[22,[[0,[32,20]]]]]]]],[31,[[9,[23]]]],[31,[[9,[[24,[[0,[32,20]]]]]]]],[31,[[9,[25]]]],[31,[[9,[26]]]],[31,[[9,[27]]]],[31,[[9,[[4,[[0,[32,20,28]]]]]]]],[31,[[9,[33]]]],[31,[[9,[[12,[[0,[32,20]]]]]]]],[31,[[9,[[7,[[0,[32,20]]]]]]]],[31,[[9,[29]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,[[17,17],6],[[18,18],6],[[[21,[[0,[34,20]]]],21],6],[[[22,[[0,[34,20]]]],22],6],[[23,23],6],[[[24,[[0,[34,20]]]],24],6],[[25,25],6],[[26,26],6],[[27,27],6],[[[4,[[0,[34,20,28]]]],4],6],[[[7,[[0,[34,20]]]],7],6],[[29,29],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[1,[3,[[0,[20,28]]]],5],[[9,[18,8]]]],[[23,1,5],[[9,[[3,[[0,[20,28,35]]]],8]]]],[[1,[3,[2]],5,6,10,11],[[9,[[12,[2]],8]]]],[[1,[3,[20]],5],[[9,[8]]]],[[[7,[20]]],[[36,[18]]]],[[[12,[2]],1],[[9,[8]]]],0,0,0,0,[[[4,[[0,[20,28,35]]]],1,5],[[9,[[3,[[0,[20,28,35]]]],8]]]],[[18,37],38],[[[21,[[0,[39,20]]]],37],38],[[[22,[[0,[39,20]]]],37],38],[[23,37],38],[[[24,[[0,[39,20]]]],37],38],[[25,37],38],[[26,37],38],[[27,37],38],[[[4,[[0,[39,20,28]]]],37],38],[[33,37],38],[[[7,[[0,[39,20]]]],37],38],[[29,37],38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,3],[[21,[[0,[20,28,35]]]]]],[40,[[9,[[21,[20]]]]]],[[1,3],27],[[1,3,[0,[20,28,35]]],[[21,[[0,[20,28,35]]]]]],[[1,3]],[[],41],[42,6],[42,6],[42,6],[42,6],[42,6],[42,6],[42,6],[42,6],[42,6],[42,6],[42,6],[42,6],[42,6],[42,6],[42,6],[17],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],42],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[12,[2]],1],[[9,[8]]]],[[[7,[20]]],6],[[[7,[20]]],6],0,0,[[],43],0,[[1,[22,[2]],5,6],[[9,[[7,[2]],8]]]],[[1,[22,[2]],5,6,10,11],[[9,[[12,[2]],8]]]],[[[7,[20]]],[[36,[[24,[20]]]]]],[[[12,[2]],1],[[9,[8]]]],0,0,0,[[1,7,5,6,10,11],[[9,[[12,[2]],8]]]],[[[21,[[0,[20,28,35]]]],1],[[3,[[0,[20,28,35]]]]]],[[27,1,5],[[3,[[0,[20,28,35]]]]]],[5,11],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[[40,[44]]],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],0,[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],[45,[[9,[46]]]],0,[[17,47],9],[[18,47],9],[[[21,[20]],47],9],[[[22,[[0,[28,20]]]],47],9],[[23,47],9],[[[24,[[0,[28,20]]]],47],9],[[25,47],9],[[26,47],9],[[27,47],9],[[[4,[[0,[28,20,28]]]],47],9],[[33,47],9],[[[12,[[0,[28,20]]]],47],9],[[[7,[[0,[28,20]]]],47],9],[[29,47],9],0,0,0,[31,[[9,[13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[20]]],42],[[],9],[5,[[9,[17]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],0,0,0,[[[12,[2]],11],[[9,[33,8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],[[[40,[44]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[5],[[8,37],38],[[8,37],38],[49,8],[50,8],[[]],[51,8],[52,8],[[],5],[[]],[53],[45,[[9,[46]]]],[[],42],[[],9],[[],9],[[],48],[[]]],"c":[],"p":[[3,"Store"],[6,"S1"],[3,"Ptr"],[3,"CommittedExpression"],[15,"usize"],[15,"bool"],[4,"Claim"],[4,"Error"],[4,"Result"],[3,"NovaProver"],[6,"PublicParams"],[3,"Proof"],[6,"Cid"],[3,"Cid"],[15,"str"],[4,"Error"],[4,"ReductionCount"],[3,"Evaluation"],[8,"Clone"],[8,"LurkField"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"LurkScalarBytes"],[3,"LurkScalarIpld"],[4,"LurkPtr"],[8,"Serialize"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"Deserializer"],[8,"Deserialize"],[3,"VerificationResult"],[8,"PartialEq"],[8,"DeserializeOwned"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"AsRef"],[15,"u64"],[3,"String"],[6,"NovaProofCache"],[3,"Path"],[3,"RawCodec"],[3,"Error"],[8,"Serializer"],[3,"TypeId"],[3,"Error"],[3,"Error"],[4,"SynthesisError"],[3,"Error"],[3,"Demand"],[8,"Id"],[8,"FileStore"]]},\
"lurk":{"doc":"","t":"ENCCRNCLLLALLLLLLLLLAALLLLLLLLALLLLLALLLAALALAALALAALLLLLALAIKKNENNIDDDDNNNENDLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLFMLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLKLLLKLLLLLKLLLKLLLLLMLLKLFLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNSDEINNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNDEGGDEGGNNNNNNNNNNNNNNNNNNIDNNNNNRRNNNNNNNENNNNNLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNIEEDNNNNNNLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLRDLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLERNRRNLLLLLLLLLLLLFLFLLLLLLLIIIQKKLLALLLKALKKFDHDDRLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLGGNGGGGDEGNGGGGLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLDDILLLLLLLLLLLLMLLLLLKLKLKLLLLLMKLLKLKLLLKLLLFFLLLLLLLLLLNNNNNNNNNNNNNNNNNNEEDDNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNDDENNNDNENNEEENINNNDNNINNIQDDDIQDDNNQNNDNINNLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLMMLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLLLLLLLLLLKLKLLLLLMMMMMLLMLLLLLLMLMMLMLLLLMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMMLLMKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLKLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNNNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKL","n":["Num","Scalar","Sym","Symbol","TEST_SEED","U64","UInt","add_assign","borrow","borrow_mut","circuit","clone","clone_into","deref","deref_mut","deserialize","div_assign","drop","eq","equivalent","eval","field","fmt","fmt","from","from","from","from_scalar","get_hash","hash","hash_witness","init","into","into_scalar","is_negative","is_zero","light_data","most_negative","most_positive","mul_assign","package","parser","partial_cmp","proof","references","repl","scalar_store","serialize","store","sub_assign","sym","tag","to_owned","to_string","try_from","try_into","type_id","uint","vzip","writer","ToInputs","input_size","to_inputs","ApplyContinuation","Control","Error","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","MakeThunk","Return","Status","Terminal","Witness","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_frames","get_frames","i","init","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into","into_iter","into_results","is_apply_continuation","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_make_thunk","is_return","is_terminal","is_terminal","is_terminal","iter","log","log","log","maybe_emitted_expression","new","next","output","peekmore","precedes","reduce","reduce","reduce_with_witness","references","references","references","references","references","references","references","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","BLS12_381","FIELD","FWrap","LanguageField","LurkField","Pallas","Vesta","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","de","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","hex_digits","init","init","into","into","is_negative","most_negative","most_positive","partial_cmp","references","references","ser","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","ClosedEnv","Cons","ConsName","ConsStub","ConsWitness","Cont","ContName","ContStub","ContWitness","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cons","cons","cons","cons_named","cons_named","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","index","index","index","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","length","new_blank","new_dummy","new_from_stub","references","references","references","references","references","references","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Atom","Cell","Char","Comm","Cons","Encodable","LightData","LightExpr","LightStore","Nil","Num","StrCons","StrNil","SymCons","SymNil","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_count","clone","clone","clone_into","clone_into","de","de","de","de","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","references","references","references","scalar_map","ser","ser","ser","ser","tag","tag_is_atom","tag_is_small","to_owned","to_owned","to_string","to_string","to_trimmed_le_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LURK_EXTERNAL_SYMBOL_NAMES","Package","add_external_symbol","add_external_symbols","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","external_symbols","fmt","from","init","into","local_symbol","lurk","name","name","new","references","relative_abbreviation","remove_external_symbol","remove_external_symbols","root","to_owned","try_from","try_into","type_id","vzip","Error","KEYWORD_MARKER","NoInput","SYM_MARKER","SYM_SEPARATOR","Syntax","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","names_keyword","provide","read_symbol_path","references","to_owned","to_string","try_from","try_into","type_id","vzip","Provable","Prover","PublicParameters","PublicParams","chunk_frame_count","chunk_frame_count","expected_total_iterations","frame_padding_count","groth16","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunk_frame_count","chunk_frame_count","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","new","outer_prove","proof","proof_count","prove","references","references","references","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","Compressed","EE1","EE2","G1","G2","NovaProver","Proof","PublicParams","Recursive","S1","S2","SS1","SS2","borrow","borrow","borrow_mut","borrow_mut","chunk_frame_count","compress","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","evaluate_and_prove","from","from","init","init","into","into","new","prove_recursively","public_params","references","references","serialize","try_from","try_from","try_into","try_into","type_id","type_id","verify","vzip","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref_mut","deref_mut","drop","drop","env","eval_expr","from","from","handle_file","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","handle_run","handle_run","init","init","into","into","limit","maybe_handle_command","maybe_handle_command","maybe_handle_command","name","name","new","new","new","new","prompt","prompt","references","references","repl","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binop","Binop2","Call","Call2","Char","Comm","Cons","Dummy","Emit","Error","Fun","If","Let","LetRec","Lookup","Nil","Num","Outermost","ScalarContinuation","ScalarExpression","ScalarStore","ScalarThunk","Str","Sym","Tail","Terminal","Thunk","UInt","Unop","add_one_ptr","add_ptr","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","finalize","fmt","fmt","fmt","fmt","from","from","from","from","get_cont","get_expr","get_hash","hash","init","init","init","init","into","into","into","into","new_with_expr","references","references","references","references","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_store","to_store_with_expr","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","arg","body","closed_env","A3","A3","A4","A4","A6","A6","A8","A8","Binop","Binop2","Call","Call0","Call2","Char","Comm","Cons","ConstantPtrs","ContPtr","Continuation","Create","Dummy","Emit","Error","Error","Expression","Fun","Get","HashArity","HashConst","HashScalar","If","IntoHashComponents","Let","LetRec","Lookup","NamedConstants","Nil","Num","Object","Opaque","Outermost","Pointer","Pointer","Ptr","RawPtr","ScalarContPtr","ScalarPointer","ScalarPointer","ScalarPtr","Store","Str","Sym","Tag","Tail","Terminal","Thunk","Thunk","TypePredicates","UInt","Unop","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","allocate_maybe_fun_unconstrained","arbitrary_with","arbitrary_with","as_cons","as_list","as_simple_keyword_string","as_str","as_sym","as_sym_str","atom","begin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr_mut","cdr","cdr","char","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","comm","commit","cons","cons","cons_eq","cont_tag","current_env","de","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","diff","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dummy","emit","eq","eq","eq","eq","eq","eq","eq","eq","equal","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_num","fetch_scalar","fetch_scalar_cont","fetch_scalar_m","fetch_str","fetch_sym","fetch_uint","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_parts","from_parts","from_parts","get_begin","get_char","get_char_from_u32","get_constants","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_expr_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash_components_cont","get_hash_components_thunk","get_lurk_sym","get_maybe_opaque","get_nil","get_num","get_quote","get_simple_cont","get_str","get_sym","get_t","get_u64","greater","greater_equal","hash","hash","hash","hash","hash","hash","hash","hash_components","hash_cont","hash_expr","hash_expr_aux","hash_nil","hash_string_mut","hash_sym","hidden","hide","hide","hydrate_scalar_cache","idx","if_","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert_in_store","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_list","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_nil","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_scalar_cont_ptr","intern_scalar_ptr","intern_str","intern_strcons","intern_sym","intern_sym_with_case_conversion","intern_thunk","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_hash_components","into_hash_components","into_hash_components","is_atom","is_cons","is_cons","is_error","is_fun","is_fun","is_fun","is_keyword_sym","is_list","is_list","is_nil","is_null","is_num","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","is_str","is_sym","is_thunk","key","lambda","less","less_equal","let_","letrec","list","lurk_sym","modulo","new","new","new","new_opaque_ptr","new_opaque_raw_ptr","nil","nil","num","num","num_equal","open","open","open_mut","partial_cmp","partial_cmp","partial_cmp","product","provide","ptr","ptr_eq","quote","quotient","read","read_in_package","read_maybe_meta","read_next","read_string","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","root_sym","scalar_from_parts","scalar_from_parts_cont","scalar_ptr","secret","secret","secret_mut","ser","serialize","serialize","str","strcons","strcons","sum","sym","t","t","tag","tag","tag","tag","tag","tag","tag_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u64","uint64","value","value","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Key","Sym","Sym","Symbol","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","child","child","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","extend","extend","fmt","fmt","from","from","from","from","full_name","full_name","full_sym_name","get_hash","get_hash","hash","hash","init","init","into","into","is_keyword","is_keyword","is_opaque","is_root","is_root","is_toplevel","is_toplevel","key_root","keyword_name","name","name","new","new","new_absolute","new_absolute","new_from_path","new_key","new_opaque","new_opaque","new_sym","opaque","parent","parent","partial_cmp","partial_cmp","path","path","path","references","references","root","root","serialize","serialize","simple_keyword_name","symbol","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","as_field","as_field","as_field","as_field","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","partial_cmp","partial_cmp","references","references","references","references","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","equivalent","fmt","fmt","from","from","init","into","is_zero","mul","partial_cmp","references","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","vzip","Write","fmt","fmt_to_string"],"q":[[0,"lurk"],[60,"lurk::circuit"],[63,"lurk::eval"],[252,"lurk::field"],[326,"lurk::hash_witness"],[543,"lurk::light_data"],[632,"lurk::package"],[664,"lurk::parser"],[692,"lurk::proof"],[710,"lurk::proof::groth16"],[769,"lurk::proof::nova"],[819,"lurk::repl"],[876,"lurk::scalar_store"],[1005,"lurk::scalar_store::ScalarContinuation"],[1035,"lurk::scalar_store::ScalarExpression"],[1038,"lurk::store"],[1591,"lurk::store::Continuation"],[1623,"lurk::sym"],[1716,"lurk::tag"],[1910,"lurk::uint"],[1944,"lurk::writer"]],"d":["Finite field element type for Lurk. Has different internal …","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","Returns true if <code>self</code> is negative.","","<code>LightData</code> is a lightweight binary data serialization …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","0 - 1 is one minus the modulus, which must be even in a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","Analogous to ScalarExpression::Char","Analogous to ScalarExpression::Comm","Analogous to ScalarExpression::Cons","A trait for types that can be serialized and deserialized …","<code>LightData</code> is a binary tree with two types of nodes: Atom …","Enum to represent a light expression.","LightStore contains a fragment of the ScalarStore, but …","Analogous to ScalarExpression::Nil","Analogous to ScalarExpression::Num","Replaces ScalarExpression::Str, contains a string and a …","Analogous to ScalarExpression::Str(“”), but as a …","Replaces ScalarExpression::Sym, contains a symbol and a …","Analogous to ScalarExpression::Sym(Sym::root()), but as a …","","","","","","","","","","Returns the number of bytes required to encode the given …","","","","","Deserializes a <code>LightData</code> into this value.","","","Deserializes a <code>LightData</code> from a <code>&amp;[u8]</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","An analogous to the ScalarStore’s scalar_map, but with …","Serializes this value into a <code>LightData</code>.","","","Serializes this <code>LightData</code> into a <code>Vec&lt;u8&gt;</code>.","Returns the tag byte for this <code>LightData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","","","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns two bools. First bool is true if input is a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ScalarStore</code> allows realization of a graph of <code>ScalarPtr</code>s …","","","","","","","","","Add all ScalarPtrs representing and reachable from expr.","Add the <code>ScalarPtr</code> representing <code>expr</code>, and queue it for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Method which finalizes the <code>ScalarStore</code>, ensuring that all …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ScalarStore</code> and add all <code>ScalarPtr</code>s reachable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutable version of car_cdr to handle Str. <code>(cdr str)</code> may …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeype for hieararchical symbol names","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,2,0,0,0,2,0,2,2,2,0,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,0,0,2,0,2,0,0,2,0,2,0,0,2,2,2,2,2,0,2,0,0,122,122,28,0,26,28,0,0,0,0,0,26,28,28,0,26,0,30,23,25,26,34,27,28,30,23,25,26,34,27,28,23,25,26,27,28,23,25,26,27,28,23,26,30,23,25,26,34,27,28,30,23,25,26,34,27,28,26,30,23,25,26,34,27,28,0,23,23,25,26,27,23,25,26,30,0,23,23,23,23,25,26,34,27,28,30,23,25,26,26,34,27,28,30,30,25,30,23,25,26,34,27,28,30,25,23,30,23,25,26,34,27,28,34,28,28,123,23,25,26,123,23,26,26,28,28,123,23,26,30,123,23,25,23,30,34,25,34,25,123,23,0,30,23,25,26,34,27,28,26,25,123,23,26,23,23,25,26,27,28,23,23,30,23,25,26,34,27,28,30,23,25,26,34,27,28,30,23,25,26,34,27,28,30,23,25,26,34,27,28,25,51,1,0,0,0,51,51,41,51,41,51,41,41,41,41,41,51,41,51,41,41,51,41,41,41,41,51,41,1,1,1,1,1,1,1,1,1,1,41,41,1,51,41,51,41,1,1,1,41,51,41,41,41,1,1,1,1,1,1,41,1,1,1,1,1,1,51,41,51,41,51,41,51,41,63,61,61,59,61,0,0,0,0,0,0,0,0,59,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,61,61,61,63,63,0,0,63,61,63,61,61,63,63,0,61,61,61,61,59,56,56,59,58,62,61,63,56,59,58,62,61,63,56,58,57,59,57,59,60,56,60,56,58,59,58,62,61,63,56,59,58,62,61,63,56,57,59,58,60,56,62,62,61,63,59,58,62,61,63,56,59,58,62,61,63,56,59,58,62,61,63,56,59,58,62,61,63,56,59,58,62,61,63,60,56,64,59,66,56,59,58,62,61,63,56,59,58,62,61,63,56,56,61,63,61,63,53,61,63,59,58,62,61,63,56,64,59,66,56,59,58,62,61,63,56,56,56,56,56,59,58,62,61,63,56,56,57,59,60,56,56,56,59,58,62,61,63,56,56,59,58,62,61,63,56,59,58,62,61,63,56,59,58,62,61,63,56,59,58,62,61,63,56,42,42,67,67,67,0,0,0,0,67,67,67,67,67,67,69,67,42,69,67,42,69,67,42,42,67,42,67,42,124,69,67,42,69,67,42,69,67,42,69,67,42,69,67,42,67,42,69,67,67,42,42,69,67,42,69,67,42,69,67,42,69,67,42,69,124,69,67,42,42,42,42,67,42,67,42,42,69,67,42,69,67,42,69,67,42,69,67,42,0,0,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,0,0,73,0,0,73,73,73,73,73,73,73,73,73,73,73,73,73,0,73,0,73,73,73,73,73,73,73,0,0,0,125,126,125,125,125,0,125,125,125,125,0,125,126,126,0,0,0,0,0,0,77,81,80,77,81,80,77,80,80,80,77,77,81,80,77,81,80,80,77,81,80,77,81,80,77,81,80,77,81,80,77,77,80,80,77,77,81,80,80,80,77,81,80,77,81,80,77,81,80,77,77,77,81,80,0,0,91,0,0,0,0,0,0,0,91,0,0,0,0,90,91,90,91,90,91,90,91,90,91,91,90,91,90,90,91,90,91,90,91,90,91,0,90,91,91,90,91,90,91,90,91,91,90,91,0,0,0,98,95,98,95,95,95,98,95,98,95,98,95,95,95,98,95,95,95,97,95,97,95,97,95,98,95,98,95,95,97,95,95,97,95,97,98,95,95,97,95,98,95,0,0,98,95,98,95,98,95,98,95,98,95,103,103,103,103,101,101,101,103,103,103,101,103,103,103,103,101,101,103,0,0,0,0,101,101,103,103,101,101,103,99,99,101,102,103,99,101,102,103,99,101,102,103,99,101,102,103,99,101,102,103,99,101,99,101,102,103,99,101,102,103,99,101,102,103,99,101,102,103,99,101,102,103,99,101,102,103,99,99,101,102,103,99,101,102,103,99,99,103,103,99,101,102,103,99,101,102,103,99,99,101,102,103,99,101,102,103,99,101,102,103,99,99,99,99,101,102,103,99,101,102,103,99,101,102,103,99,101,102,103,127,128,129,130,131,132,133,134,135,136,127,128,137,135,130,133,134,135,129,130,131,132,134,127,128,129,134,136,127,128,138,138,138,115,139,115,139,115,139,115,139,65,65,65,65,65,110,110,110,0,0,0,111,65,65,0,65,0,110,111,0,0,0,65,0,65,65,65,0,110,110,0,110,65,0,140,0,0,0,0,141,0,0,110,110,141,65,65,0,110,0,110,65,108,108,108,29,100,105,29,29,110,110,110,110,39,39,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,21,39,21,21,21,39,39,111,29,100,105,35,112,110,108,65,40,113,39,111,29,100,105,35,112,110,108,65,40,113,39,100,105,112,39,39,21,39,21,65,39,100,21,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,100,105,39,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,39,39,29,100,105,35,112,110,108,65,39,29,100,105,35,112,110,108,65,39,21,21,21,21,21,21,21,21,21,21,21,21,21,111,21,29,29,100,100,105,35,35,112,110,110,108,65,65,40,40,113,39,115,115,139,111,21,29,29,100,105,35,112,110,108,65,40,113,39,142,100,105,21,21,21,21,21,21,21,21,21,29,100,105,35,112,108,65,21,21,21,21,21,21,21,65,21,21,21,21,39,39,29,100,105,35,112,108,65,108,21,21,21,21,21,21,21,21,39,21,112,39,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,65,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,143,100,105,29,29,110,35,144,29,110,110,29,110,29,110,110,29,110,144,29,144,29,110,110,110,21,39,39,39,39,39,21,21,39,21,35,39,21,21,21,39,21,39,39,21,39,21,100,105,112,39,40,113,21,39,39,21,21,21,21,21,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,21,21,21,113,21,39,21,100,100,105,21,21,39,39,21,21,39,141,142,29,100,105,35,141,111,29,100,105,35,112,110,108,65,40,113,39,100,40,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,39,21,142,100,105,113,115,139,111,21,29,100,105,35,112,110,108,65,40,113,39,145,146,147,148,149,150,151,152,153,154,155,145,146,156,154,149,152,153,154,147,148,149,150,151,153,145,146,148,153,155,145,146,72,0,72,0,119,72,119,72,119,72,119,72,119,72,119,72,119,72,119,72,119,72,119,72,119,72,119,72,119,72,119,72,119,72,72,72,119,72,72,119,72,119,72,119,72,119,72,119,72,119,119,72,119,72,72,72,119,72,119,72,119,72,72,72,119,72,72,119,119,72,119,72,119,72,119,119,72,119,72,119,72,72,72,119,72,119,72,119,72,119,72,119,72,47,48,45,45,45,45,45,47,47,46,47,46,47,47,46,48,0,48,45,45,47,48,45,47,48,0,46,48,48,48,45,46,48,48,45,45,45,48,46,46,47,48,0,0,0,47,45,48,48,47,46,48,48,46,45,45,46,46,47,45,157,47,48,157,46,45,47,48,46,45,47,48,46,45,47,48,46,45,47,48,46,45,47,48,46,45,47,48,46,45,47,48,46,45,47,48,46,45,47,48,46,47,48,46,45,47,48,46,45,47,48,46,45,47,48,46,46,45,45,47,47,48,48,46,45,47,48,46,45,47,48,46,45,47,48,46,45,47,48,46,45,47,48,46,45,47,48,46,48,46,46,47,48,46,45,47,48,46,47,48,157,47,48,157,47,48,46,45,47,48,46,45,47,48,46,46,45,45,47,47,48,48,46,45,47,48,46,45,47,48,46,45,47,48,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,158,158],"f":[0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],[[]],0,[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[2,[1]]]]]],[[[2,[1]],[2,[1]]]],[4],[[[2,[[0,[7,1]]]],2],8],[[],8],0,0,[[[2,[[0,[9,1]]]],10],11],[[[2,[1]],10],11],[12,[[2,[1]]]],[[]],[13,[[2,[1]]]],[1,[[2,[1]]]],[[],13],[[[2,[1]]]],0,[[],4],[[]],[[[2,[1]]],1],[[[2,[1]]],8],[[[2,[1]]],8],0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,[[[2,[1]],[2,[1]]],[[15,[14]]]],0,[16,[[6,[17]]]],0,0,[[[2,[1]],18],6],0,[[[2,[1]],[2,[1]]]],0,0,[[]],[[],19],[[],6],[[],6],[[],20],0,[[]],0,0,[[],4],[21,22],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[23,[[0,[3,1]]]]],[[23,[[0,[3,1]]]]]],[[[25,[[0,[3,24]],[0,[3,24]]]]],[[25,[[0,[3,24]],[0,[3,24]]]]]],[26,26],[[[27,[[0,[3,1]]]]],[[27,[[0,[3,1]]]]]],[[[28,[[0,[3,1]]]]],[[28,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],0,[[],26],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[26]]]],[4],[4],[4],[4],[4],[4],[4],[21,[[29,[1]]]],0,[[[23,[[0,[7,1]]]],23],8],[[[25,[[0,[7,24]],[0,[7,24]]]],25],8],[[26,26],8],[[[27,[[0,[7,1]]]],27],8],[[],8],[[],8],[[],8],[[[30,[1]]],[[6,[0]]]],[[21,31],[[6,[[29,[1]],0]]]],0,[[[23,[1]],21],32],[[[23,[1]],10],[[6,[33]]]],[[[23,[[0,[9,1]]]],10],11],[[[25,[[0,[9,24]],[0,[9,24]]]],10],11],[[26,10],11],[[[34,[[0,[9,24]],[0,[9,1]]]],10],11],[[[27,[[0,[9,1]]]],10],11],[[[28,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[[35,[1]]],26],[[]],[[]],[[]],[[[29,[1]],[29,[1]],21,4,36],[[6,[[22,[[25,[[23,[1]],[27,[1]]]]]],0]]]],[[[30,[1]]],[[6,[[22,[[25,[[23,[1]],[27,[1]]]]]],0]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[30,[1]]],[[23,[1]]]],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[28,[1]],21]],[[[28,[1]]],8],[[],8],[[[23,[1]]],8],[[[25,[[23,[1]],24]]],8],[26,8],[[],8],[[[23,[1]]],8],[26,8],[26,8],[[[28,[1]]],8],[[[28,[1]]],8],[[],8],[[[23,[1]]],8],[26,8],[[[30,[1]]],[[6,[[37,[[34,[[27,[1]],1]]]],0]]]],[[21,4]],[[[23,[1]],21,4]],[[[25,[[23,[1]],24]],21]],[[[23,[1]],21],[[15,[[29,[1]]]]]],[[[29,[1]],[29,[1]],21,4],[[30,[1]]]],[[[34,[[27,[1]],1]]],15],0,[[],38],[[[25,[[23,[1]],24]],[25,[[23,[1]],24]]],8],[21,[[6,[0]]]],[[[23,[1]],21],[[6,[0]]]],[[[29,[1]],[29,[1]],[35,[1]],21,39],[[6,[0]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[[26,18],6],[[],4],[[],26],[[[23,[1]]],26],[[26,21],[[15,[[35,[1]]]]]],[[[23,[1]],21],[[22,[1]]]],[[]],[[]],[[]],[[]],[[]],[[],19],[[[23,[1]],21],[[6,[[22,[1]],40]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[[41,[[0,[3,1]]]]],[[41,[[0,[3,1]]]]]],[[]],[[[41,[1]],[41,[1]]],14],[42,[[43,[[41,[1]]]]]],[4],[4],[4],[4],[5,[[6,[[41,[1]]]]]],[4],[4],[[[41,[[0,[7,1]]]],41],8],[[],8],[[[41,[[0,[9,1]]]],10],11],[[]],[[]],[[],15],[44],[45],[46],[47],[48],[49],[50],[13],[[],51],[[],13],[[[41,[1]]]],[[],19],[[],4],[[],4],[[]],[[]],[[],8],[[]],[[]],[[[41,[1]],[41,[1]]],[[15,[14]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[[[41,[1]]],42],[[[41,[1]],18],6],[[],[[22,[52]]]],[[],[[15,[44]]]],[[],[[15,[45]]]],[[],[[15,[46]]]],[[],[[15,[47]]]],[[],[[15,[48]]]],[[]],[[],[[15,[49]]]],[[],[[15,[50]]]],[[],50],[[],[[15,[13]]]],[[],13],[[],19],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[56,[[0,[53,54,24,55,9]],24,1]]],[[22,[[0,[53,54,24,55,9]]]]]],[[[56,[[0,[53,54,24,55,9]],24,1]],21]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[57,[1]],21,29],[[6,[40]]]],[[[59,[[58,[1]]]],21,29],[[6,[40]]]],[[[57,[1]],21,29],[[6,[40]]]],[[[59,[[58,[1]]]],21,29],[[6,[40]]]],[[[60,[1]],61,21,29],[[6,[40]]]],[[[56,[61,[58,[1]],1]],61,21,29],[[6,[40]]]],[[[60,[1]],61,21,29],[[6,[0]]]],[[[56,[61,[58,[1]],1]],61,21,29],[[6,[0]]]],0,[[[59,[3]]],[[59,[3]]]],[[[58,[[0,[3,1]]]]],[[58,[[0,[3,1]]]]]],[[[62,[[0,[3,1]]]]],[[62,[[0,[3,1]]]]]],[61,61],[63,63],[[[56,[[0,[3,53]],3,[0,[3,1]]]]],[[56,[[0,[3,53]],3,[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[57,[1]],21,[29,[1]],[29,[1]]],[[29,[1]]]],[[[59,[[58,[1]]]],21,[29,[1]],[29,[1]]],[[29,[1]]]],0,[[[60,[1]],61,21,[29,[1]],[29,[1]]],[[29,[1]]]],[[[56,[61,[58,[1]],1]],61,21,[29,[1]],[29,[1]]],[[29,[1]]]],0,0,[[],61],[[],63],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[59,[7]],59],8],[[[58,[[0,[7,1]]]],58],8],[[[62,[[0,[7,1]]]],62],8],[[61,61],8],[[63,63],8],[[[56,[[0,[7,53]],7,[0,[7,1]]]],56],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[60,[1]],61,[29,[1]],[29,[1]],[29,[1]],21],[[29,[1]]]],[[[56,[61,[58,[1]],1]],61,[29,[1]],[29,[1]],[29,[1]],21],[[29,[1]]]],[[[64,[1]],21,35],[[15,[[65,[1]]]]]],[[[59,[[62,[1]]]],21,35],[[15,[[65,[1]]]]]],[[[66,[1]],63,21,35],[[15,[[65,[1]]]]]],[[[56,[63,[62,[1]],1]],63,21,35],[[15,[[65,[1]]]]]],[[[59,[9]],10],11],[[[58,[[0,[9,1]]]],10],11],[[[62,[[0,[9,1]]]],10],11],[[61,10],11],[[63,10],11],[[[56,[[0,[9,53]],9,[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[[56,[[0,[53,54,24,55,9]],24,1]],[0,[53,54,24,55,9]]],59],[[],13],[[],13],[61],[63],[[],4],[61,4],[63,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[64,[1]],21,[65,[1]]],[[35,[1]]]],[[[59,[[62,[1]]]],21,[65,[1]]],[[35,[1]]]],[[[66,[1]],63,21,[65,[1]]],[[35,[1]]]],[[[56,[63,[62,[1]],1]],63,21,[65,[1]]],[[35,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],[[56,[[0,[53,54,24,55,9]],24,1]]]],[[],[[56,[[0,[53,54,24,55,9]],24,1]]]],[[[59,[24]]],[[56,[[0,[53,54,24,55,9]],24,1]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],0,[[[57,[1]],21,[29,[1]],[29,[1]]],[[29,[1]]]],[[[59,[[58,[1]]]],21,[29,[1]],[29,[1]]],[[29,[1]]]],[[[60,[1]],61,21,[29,[1]],[29,[1]]],[[29,[1]]]],[[[56,[61,[58,[1]],1]],61,21,[29,[1]],[29,[1]]],[[29,[1]]]],[[[56,[[0,[53,54,24,55,9]],24,1]]],[[22,[[59,[24]]]]]],[[[56,[[0,[53,54,24,55,9]],24,1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[56,[[0,[53,54,24,55,9]],24,1]]],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,52],[[[67,[[0,[3,1]]]]],[[67,[[0,[3,1]]]]]],[42,42],[[]],[[]],[42,[[43,[68]]]],[42,[[43,[[69,[1]]]]]],[42,[[43,[[67,[1]]]]]],[[],[[43,[42]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[69,[[0,[7,1]]]],69],8],[[[67,[[0,[7,1]]]],67],8],[[42,42],8],[[],8],[[],8],[[[69,[[0,[9,1]]]],10],11],[[[67,[[0,[9,1]]]],10],11],[[[67,[1]],10],11],[[42,10],11],[[42,10],11],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],0,[[],42],[[[69,[1]]],42],[[[67,[1]]],42],[42,[[22,[52]]]],[42,52],[52,8],[52,8],[[]],[[]],[[],19],[[],19],[4,[[22,[52]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[],20],[[]],[[]],[[]],0,0,[[70,[71,[31]]]],[70],[[]],[[]],[70,70],[[]],[[],70],[4],[4],[4],0,[[70,10],11],[[]],[[],4],[[]],[[70,72],[[15,[72]]]],[[],70],[70,72],0,[72,70],[16,[[6,[17]]]],[[70,72],72],[[70,72]],[70],[[],70],[[]],[[],6],[[],6],[[],20],[[]],0,0,0,0,0,0,[[]],[[]],[73,73],[[]],[4],[4],[4],[[73,10],11],[[73,10],11],[[]],[[],4],[[]],[31],[74],[38,[[6,[73]]]],[16,[[6,[17]]]],[[]],[[],19],[[],6],[[],6],[[],20],[[]],0,0,0,0,[[],4],[[],4],[4,4],[4,4],0,[4,4],[4,8],[4,8],[4],0,[[],[[6,[22,75]]]],[[],4],[[],22],[22,[[6,[8,75]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[77,[76]]],4],0,[[[80,[[0,[3,78,79]]]]],[[80,[[0,[3,78,79]]]]]],[[]],[4,[[6,[[81,[76]],75]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[80,[[0,[78,79]]]]]]]],[4],[4],[4],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[4,[[77,[76]]]],[[[77,[76]],82,83,[29,[84]],[29,[84]],21,4,[0,[85,3]]],[[6,[0]]]],0,0,[[[77,[76]],[0,[84,[23,[84]],[27,[84]]]],82,85],[[6,[[86,[76]],75]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[[[80,[[0,[78,79]]]],18],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[],20],[[87,88,89],[[6,[8,75]]]],[[[0,[84,[23,[84]],[27,[84]]]],87,[86,[76]]],[[6,[8,75]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[90,[1]]],4],[[91,92],[[6,[91,0]]]],[4],[4],[4],[4],[5,[[6,[91]]]],[4],[4],[[[90,[1]],92,[29,[93]],[29,[93]],21,4],[[6,[0]]]],[[]],[[]],[[],4],[[],4],[[]],[[]],[4,[[90,[1]]]],[[92,21,4,[22,[93]]],[[6,[91,0]]]],[4,92],[16,[[6,[17]]]],[16,[[6,[17]]]],[[91,18],6],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[91,92,4,[22,[93]]],[[6,[8,94]]]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[95,[[0,[3,1]]]]],[[95,[[0,[3,1]]]]]],[[]],[4],[4],[4],[4],[4],[4],0,[[[95,[1]],[29,[1]],21],43],[[]],[[]],[[[95,[1]],21,[0,[[71,[96]],24]],70,8],43],[[[95,[1]],21,[71,[96]],70],43],[[21,29,70,[0,[[71,[96]],24]]],43],[[[95,[1]],21,[29,[1]],70,[0,[[71,[96]],24]]],43],[[21,29,8],43],[[[95,[1]],21,[29,[1]],8],43],[[21,[0,[[71,[96]],24]],70],43],[[[95,[1]],21,[0,[[71,[96]],24]],70],43],[[],4],[[],4],[[]],[[]],0,[[21,31,70],43],[[[95,[1]],21,31,70],43],[[[95,[1]],21,31,70],43],[[],19],[[],19],[[21,4]],[[21,4],[[43,[[98,[1,[97,[1]]]]]]]],[[21,4],[[95,[1]]]],[[21,4],[[95,[1]]]],[[],19],[[[95,[1]]],19],[16,[[6,[17]]]],[16,[[6,[17]]]],[[[15,[[71,[96]]]],[15,[[71,[96]]]]],43],[[21,[98,[1,[97,[1]]]],[15,[[71,[96]]]]],43],[[[98,[1,[97,[1]]]]],43],[[]],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[99,[1]],21,29],[[15,[[100,[1]]]]]],[[[99,[1]],21,29],[[15,[[100,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[99,[[0,[3,1]]]]],[[99,[[0,[3,1]]]]]],[[[101,[[0,[3,1]]]]],[[101,[[0,[3,1]]]]]],[[[102,[[0,[3,1]]]]],[[102,[[0,[3,1]]]]]],[[[103,[[0,[3,1]]]]],[[103,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[],[[99,[[0,[54,1]]]]]],[[],[[101,[1]]]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[99,[[0,[104,54,1]]]]]]]],[5,[[6,[[101,[[0,[104,1]]]]]]]],[5,[[6,[[102,[[0,[104,1]]]]]]]],[5,[[6,[[103,[[0,[104,1]]]]]]]],[4],[4],[4],[4],[[[99,[[0,[7,1]]]],99],8],[[[101,[[0,[7,1]]]],101],8],[[[102,[[0,[7,1]]]],102],8],[[[103,[[0,[7,1]]]],103],8],[[],8],[[],8],[[],8],[[],8],[[[99,[1]],21]],[[[99,[[0,[9,1]]]],10],11],[[[101,[[0,[9,1]]]],10],11],[[[102,[[0,[9,1]]]],10],11],[[[103,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[[99,[1]],105],[[15,[103]]]],[[[99,[1]],100],[[15,[101]]]],[[],13],[[[103,[[0,[106,1]]]]]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[21,29]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[[[99,[[0,[107,1]]]],18],6],[[[101,[[0,[107,1]]]],18],6],[[[102,[[0,[107,1]]]],18],6],[[[103,[[0,[107,1]]]],18],6],[[]],[[]],[[]],[[]],[[[99,[1]]],[[15,[[21,[1]]]]]],[[[99,[1]],100],15],[[[69,[1]]],[[6,[[99,[1]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[108,[1]],[109,[1]],21],[[6,[75]]]],[[[109,[1]],21],[[6,[75]]]],[[[109,[1]],[15,[108]],21],[[6,[75]]]],[[[109,[1]],21,[15,[29]]],[[6,[75]]]],[[]],[[]],[[[29,[1]]],[[15,[[29,[1]]]]]],[[[29,[1]]],[[15,[[29,[1]]]]]],[[[110,[1]]],[[15,[19]]]],[[[110,[1]]],[[15,[31]]]],[[[110,[1]]],[[15,[72]]]],[[[110,[1]]],[[15,[19]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[1]],29],[[6,[[29,[1]],40]]]],0,[[[21,[1]],29],[[6,[40]]]],[[[21,[1]],29],[[6,[40]]]],[[[21,[1]],29],[[6,[[29,[1]],40]]]],0,0,[111,111],[[[29,[[0,[3,1]]]]],[[29,[[0,[3,1]]]]]],[[[100,[[0,[3,1]]]]],[[100,[[0,[3,1]]]]]],[[[105,[[0,[3,1]]]]],[[105,[[0,[3,1]]]]]],[[[35,[[0,[3,1]]]]],[[35,[[0,[3,1]]]]]],[[[112,[[0,[3,1]]]]],[[112,[[0,[3,1]]]]]],[[[110,[[0,[3,1]]]]],[[110,[[0,[3,1]]]]]],[[[108,[[0,[3,1]]]]],[[108,[[0,[3,1]]]]]],[[[65,[[0,[3,1]]]]],[[65,[[0,[3,1]]]]]],[40,40],[[[113,[[0,[3,1]]]]],[[113,[[0,[3,1]]]]]],[[[39,[[0,[3,1]]]]],[[39,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[100,[1]],[100,[1]]],14],[[[105,[1]],[105,[1]]],14],[[[112,[[0,[114,1]]]],112],14],0,0,[[[21,[1]],[29,[1]],[29,[1]]],[[29,[1]]]],0,[[[21,[1]],29,29],8],[[[65,[1]]],45],0,[42,[[43,[[100,[1]]]]]],[[],[[21,[1]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[100,[1]]]]]],[5,[[6,[[105,[1]]]]]],0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,0,[[[29,[[0,[7,1]]]],29],8],[[[100,[[0,[7,1]]]],100],8],[[[105,[[0,[7,1]]]],105],8],[[[35,[[0,[7,1]]]],35],8],[[[112,[[0,[7,1]]]],112],8],[[[110,[[0,[7,1]]]],110],8],[[[108,[[0,[7,1]]]],108],8],[[[65,[[0,[7,1]]]],65],8],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,[[[21,[1]],29],[[15,[[110,[1]]]]]],[[[21,[1]],29],[[15,[44]]]],[[[21,[1]],29],15],[[[21,[1]],29],15],[[[21,[1]],35],[[15,[[65,[1]]]]]],[[[21,[1]],29],15],[[[21,[1]],29],[[15,[2]]]],[[[21,[1]],100],[[15,[[29,[1]]]]]],[[[21,[1]],105],[[15,[[35,[1]]]]]],[[[21,[1]],100],[[15,[[29,[1]]]]]],[[[21,[1]],29],[[15,[31]]]],[[[21,[1]],29],[[15,[72]]]],[[[21,[1]],29],[[15,[12]]]],[[111,10],11],[[[21,[[0,[9,1]]]],10],11],[[[29,[[0,[9,1]]]],10],11],[[[29,[1]],21],32],[[[100,[[0,[9,1]]]],10],11],[[[100,[1]],10],11],[[[105,[[0,[9,1]]]],10],11],[[[35,[1]],21],32],[[[35,[[0,[9,1]]]],10],11],[[[112,[[0,[9,1]]]],10],11],[[[110,[1]],21],32],[[[110,[[0,[9,1]]]],10],11],[[[108,[[0,[9,1]]]],10],11],[[[65,[[0,[9,1]]]],10],11],[[[65,[1]],21],32],[[40,10],11],[[40,10],11],[[[113,[[0,[9,1]]]],10],11],[[[39,[[0,[9,1]]]],10],11],[4,115],[[]],[[]],[[]],[[]],[[]],[44,[[29,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],[[100,[1]]]],[[1,1],[[105,[1]]]],[[[21,[1]]],[[29,[1]]]],[[[21,[1]],44],[[29,[1]]]],[[[21,[1]],50],[[29,[1]]]],[[[21,[1]]],39],[[[21,[1]]],[[35,[1]]]],[[[21,[1]]],[[35,[1]]]],[[[21,[1]]],[[35,[1]]]],[[[21,[1]]],[[35,[1]]]],[[[21,[1]],29],[[15,[[100,[1]]]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[[21,[1]],35],15],[[[21,[1]],108],15],[[[21,[1]],[71,[31]],8],[[15,[[29,[1]]]]]],[[[21,[1]],46,1],[[15,[[29,[1]]]]]],[[[21,[1]]],[[29,[1]]]],[[[21,[1]],[116,[[2,[1]]]]],[[15,[[29,[1]]]]]],[[[21,[1]]],[[29,[1]]]],[[[65,[1]]],[[35,[1]]]],[[[21,[1]],[71,[31]]],[[15,[[29,[1]]]]]],[[[21,[1]],72],[[15,[[29,[1]]]]]],[[[21,[1]]],[[29,[1]]]],[[[21,[1]],13],[[29,[1]]]],0,0,[[[29,[1]]]],[[[100,[1]]]],[[[105,[1]]]],[[[35,[1]]]],[[[112,[1]]]],[[[108,[1]]]],[[[65,[[0,[106,1]]]]]],0,[[[21,[1]],35],[[15,[[105,[1]]]]]],[[[21,[1]],29],[[15,[[100,[1]]]]]],[[[21,[1]],29,111],[[15,[[100,[1]]]]]],[[[21,[1]],111],[[15,[[100,[1]]]]]],[[[21,[1]],[71,[31]]],1],[[[21,[1]],[29,[1]],111],[[15,[[100,[1]]]]]],[[[21,[1]],1,[29,[1]]],[[15,[[29,[1]]]]]],[[[21,[1]],1,[29,[1]]],[[29,[1]]]],0,[[[21,[1]]]],[[[112,[1]]],4],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[65,[1]],21]],[[[21,[1]],1,[29,[1]]],[[29,[1]]]],[[[21,[1]],[29,[1]],[29,[1]]],[[29,[1]]]],[[[21,[1]]],[[35,[1]]]],[[[21,[1]]],[[35,[1]]]],[[[21,[1]]],[[35,[1]]]],[[[21,[1]]],[[35,[1]]]],[[[21,[1]],[29,[1]],[29,[1]],[29,[1]]],[[29,[1]]]],[[[21,[1]]],[[29,[1]]]],[[[21,[1]],1],[[29,[1]]]],[[[21,[1]],1],[[29,[1]]]],[[[21,[1]],1],[[29,[1]]]],[[[21,[1]],1],[[29,[1]]]],[[[21,[1]]],[[29,[1]]]],[[[21,[1]],[116,[[2,[1]]]]],[[29,[1]]]],[[[21,[1]],1],[[29,[1]]]],[[[21,[1]],1],[[29,[1]]]],[[[21,[1]],1],[[29,[1]]]],[[[21,[1]],1],[[29,[1]]]],[[[21,[1]],[105,[1]],99],[[15,[[35,[1]]]]]],[[[21,[1]],[100,[1]],99],[[15,[[29,[1]]]]]],[[[21,[1]],[71,[31]]],[[29,[1]]]],[[[21,[1]],[29,[1]],[29,[1]]],[[29,[1]]]],[[[21,[1]],72],[[29,[1]]]],[[[21,[1]],[71,[31]],70],[[29,[1]]]],[[[21,[1]],[108,[1]]],[[29,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[100,[1]]]],[[[105,[1]]]],[[[29,[1]]],8],[[[29,[1]]],8],[[[110,[1]]],8],[[[35,[1]]],8],[[],8],[[[29,[1]]],8],[[[110,[1]]],8],[[[110,[1]]],8],[[[29,[1]]],8],[[[110,[1]]],8],[[[29,[1]]],8],[[[110,[1]]],8],[[[110,[1]]],8],[[[29,[1]]],8],[[[110,[1]]],8],[46,8],[[[29,[1]],46],8],[[],8],[[[29,[1]]],8],[[[110,[1]]],8],[[[110,[1]]],8],[[[110,[1]]],8],[[[21,[1]],[71,[31]]],[[29,[1]]]],0,0,0,0,0,[[[21,[1]]],[[29,[1]]]],[[[21,[1]],[71,[31]]],[[29,[1]]]],0,[[],[[21,[1]]]],[[45,[112,[1]]],[[35,[1]]]],[21,[[39,[1]]]],[[[21,[1]]],[[29,[1]]]],[[[21,[1]]],[[112,[1]]]],[[[21,[1]]],[[29,[1]]]],0,[[[21,[1]],[116,[[2,[1]]]]],[[29,[1]]]],0,0,[[[21,[1]],[29,[1]]],15],0,[[[21,[1]],[29,[1]]],[[6,[40]]]],[[[100,[1]],[100,[1]]],[[15,[14]]]],[[[105,[1]],[105,[1]]],[[15,[14]]]],[[[112,[[0,[118,1]]]],112],[[15,[14]]]],0,[74],[[[113,[1]]],[[29,[1]]]],[[[21,[1]],29,29],[[6,[8,40]]]],0,0,[[[21,[1]],31],[[6,[[29,[1]],73]]]],[[[21,[1]],31,70],[[6,[[29,[1]],73]]]],[[[21,[1]],38,70],[[6,[73]]]],[[[21,[1]],38,70],[[6,[[29,[1]],73]]]],[[[21,[1]],38],[[6,[[29,[1]],73]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[[[21,[1]],[71,[31]],8],[[29,[1]]]],[[[21,[1]],1,1],[[15,[[100,[1]]]]]],[[[21,[1]],1,1],[[15,[[105,[1]]]]]],[[[113,[1]]],[[100,[1]]]],[[[21,[1]],[29,[1]]],[[15,[[29,[1]]]]]],0,[[[21,[1]],[29,[1]]],[[6,[[29,[1]],40]]]],[[[100,[1]]],42],[[[100,[1]],18],6],[[[105,[1]],18],6],[[[21,[1]],[71,[31]]],[[29,[1]]]],[[[21,[1]],[29,[1]],[29,[1]]],[[29,[1]]]],0,0,[[[21,[1]],[71,[31]]],[[29,[1]]]],[[[21,[1]]],[[29,[1]]]],0,[[]],[[]],[[[29,[1]]],46],[[[100,[1]]]],[[[105,[1]]]],[[[35,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,[[[21,[1]],13],[[29,[1]]]],[[]],[[[100,[1]]]],[[[105,[1]]]],[[[113,[1]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[119,19],119],[[72,19],72],[119,119],[72,72],[[]],[[]],[4],[4],[4],[4],[5,[[6,[119]]]],[5,[[6,[72]]]],[4],[4],[[119,119],8],[[72,72],8],[[],8],[[],8],[119,119],[72,72],[[119,10],11],[[72,10],11],[[]],[31,72],[[]],[19,72],[119,19],[72,19],[72,19],[[],13],[[],13],[119],[72],[[],4],[[],4],[[]],[[]],[119,8],[72,8],[119,8],[119,8],[72,8],[119,8],[72,8],[[],72],[72,[[15,[19]]]],[119,19],[72,19],[19,119],[19,72],[19,119],[19,72],[[8,[22,[19]]],72],[19,72],[[],119],[8,72],[19,72],0,[119,[[15,[119]]]],[72,[[15,[72]]]],[[119,119],[[15,[14]]]],[[72,72],[[15,[14]]]],[119,22],[72,22],0,[16,[[6,[17]]]],[16,[[6,[17]]]],[[],119],[[],72],[[119,18],6],[[72,18],6],[72,[[15,[19]]]],[72,119],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],22],[[],[[22,[47]]]],[[],[[22,[48]]]],[[],[[22,[31]]]],[46,[[6,[[117,[1]],75]]]],[45,[[6,[[117,[1]],75]]]],[47,[[6,[[117,[1]],75]]]],[48,[[6,[[117,[1]],75]]]],[[]],[[]],[[]],[[]],[46,1],[45,1],[47,1],[48,[[0,[[120,[13]],121]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,46],[45,45],[47,47],[48,48],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[46]]]],[5,[[6,[47]]]],[5,[[6,[48]]]],[4],[4],[4],[4],[[46,46],8],[[45,45],8],[[47,47],8],[[48,48],8],[[],8],[[],8],[[],8],[[],8],[[46,10],11],[[46,10],11],[[45,10],11],[[45,10],11],[[47,10],11],[[47,10],11],[[48,10],11],[[48,10],11],[[]],[[]],[[]],[[]],[[],[[15,[46]]]],[[],[[15,[45]]]],[[],[[15,[47]]]],[[],[[15,[48]]]],[[],13],[[],13],[[],13],[[],13],[46],[45],[47],[48],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[46,8],[48,8],[[46,46],8],[46,8],[[47,47],[[15,[14]]]],[[48,48],[[15,[14]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[16,[[6,[17]]]],[[46,18],6],[[47,18],6],[[48,18],6],[4,8],[[47,4],8],[[48,4],8],[[],31],[47,31],[48,31],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],6],[49,[[6,[46]]]],[49,[[6,[45]]]],[[],6],[[],6],[49,[[6,[47]]]],[49,[[6,[48]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],20],[[],20],[[],20],[[],20],[[]],[[]],[[]],[[]],0,0,[[12,12],12],[[]],[[]],[[]],[12,12],[[]],[4],[4],[5,[[6,[12]]]],[[12,12],12],[4],[[12,12],8],[[],8],[[12,10],11],[[12,10],11],[[]],[13,12],[[],4],[[]],[12,8],[[12,12],12],[[12,12],[[15,[14]]]],[16,[[6,[17]]]],[[12,12],12],[[12,18],6],[[12,12],12],[[]],[[],19],[[],6],[[],6],[[],20],[[]],0,[21,32],[21,19]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"UInt"],[15,"u64"],[4,"Ordering"],[4,"Option"],[3,"RawCodec"],[3,"Error"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[3,"Store"],[3,"Vec"],[3,"IO"],[8,"Copy"],[3,"Frame"],[4,"Status"],[3,"Witness"],[4,"Control"],[3,"Ptr"],[3,"Evaluator"],[15,"str"],[6,"Result"],[3,"Error"],[3,"FrameIt"],[3,"ContPtr"],[8,"Fn"],[3,"Take"],[3,"PeekMoreIterator"],[3,"NamedConstants"],[3,"Error"],[3,"FWrap"],[4,"LightData"],[6,"Result"],[15,"char"],[4,"ContTag"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[4,"LanguageField"],[15,"u8"],[8,"HashName"],[8,"Default"],[8,"Eq"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[6,"ConsWitness"],[4,"ConsName"],[3,"Cont"],[4,"ContName"],[6,"ContStub"],[4,"Continuation"],[6,"ContWitness"],[4,"LightExpr"],[8,"Sized"],[3,"LightStore"],[3,"Package"],[8,"AsRef"],[4,"Sym"],[4,"Error"],[3,"Demand"],[4,"SynthesisError"],[3,"Bls12"],[3,"Groth16Prover"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"PublicParams"],[3,"Parameters"],[3,"GenericSRS"],[3,"Scalar"],[8,"RngCore"],[3,"Proof"],[3,"PreparedVerifyingKey"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[3,"NovaProver"],[4,"Proof"],[6,"PublicParams"],[6,"S1"],[4,"NovaError"],[3,"ReplState"],[3,"Path"],[8,"ReplTrait"],[3,"Repl"],[3,"ScalarStore"],[3,"ScalarPtr"],[4,"ScalarExpression"],[3,"ScalarThunk"],[4,"ScalarContinuation"],[8,"Deserialize"],[3,"ScalarContPtr"],[8,"Hash"],[8,"Serialize"],[3,"Thunk"],[8,"ConstraintSystem"],[4,"Expression"],[4,"HashScalar"],[3,"RawPtr"],[3,"ConstantPtrs"],[8,"Ord"],[4,"HashArity"],[8,"Into"],[3,"AllocatedNum"],[8,"PartialOrd"],[3,"Symbol"],[8,"From"],[8,"Field"],[8,"ToInputs"],[8,"Evaluable"],[8,"Encodable"],[8,"Prover"],[8,"Provable"],[13,"Let"],[13,"LetRec"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"],[4,"HashConst"],[8,"Object"],[8,"Pointer"],[8,"ScalarPointer"],[8,"IntoHashComponents"],[8,"TypePredicates"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"Op"],[8,"Write"]]},\
"lurk_macro":{"doc":"Lurk DSL","t":"OO","n":["let_store","lurk"],"q":[[0,"lurk_macro"]],"d":["Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …",""],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"lurkrs":{"doc":"","t":"F","n":["main"],"q":[[0,"lurkrs"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
