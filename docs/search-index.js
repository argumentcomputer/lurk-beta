var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","drop","from","handle_meta","handle_non_meta","init","into","name","new","process_line","prompt","references","try_from","try_into","type_id","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],"f":[0,[[]],[[]],[[],1],[2],[2],[2],[[]],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]],8,[0,[[10,[9]],11]]],12],[[[5,[3,[4,[3]]]],[6,[3]],[7,[3]]],12],[[],2],[[]],[[],13],[[[6,[3]],2,[14,[1]],[15,[3,[4,[3]]]]],[[5,[3,[4,[3]]]]]],[[[5,[3,[4,[3]]]],13],13],[[[5,[3,[4,[3]]]]],13],[[16,17,[19,[18]]],[[21,[20]]]],[[],21],[[],21],[[],22],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[6,"Scalar"],[4,"Coproc"],[3,"ClutchState"],[3,"Store"],[3,"Ptr"],[3,"Package"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[3,"String"],[4,"Option"],[3,"Lang"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"fcomm":{"doc":"fcomm: Functional Commitments","t":"DEDDGRNDNDININEEDDGNNDNDNDDNGGEGNNNNHDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMFMFMLLLLMMMLLLLLFKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMMMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLL","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","FileStore","Five","Id","Ipld","LurkCont","LurkPtr","LurkScalarBytes","LurkScalarIpld","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","PublicParamDiskCache","PublicParamMemCache","ReductionCount","S1","ScalarBytes","Source","Ten","Terminal","VERBOSE","VerificationResult","apply","apply_and_prove","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid_from_string","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","hash","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","lang","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","proof","proof_cid","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_params","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","references","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","string_cid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","JsonError","OpeningFailure","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","init","into","provide","references","source","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"fcomm"],[543,"fcomm::error"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,31,0,9,0,0,19,0,30,0,0,0,0,0,19,19,0,9,0,31,0,0,9,0,0,0,0,30,30,19,31,0,0,27,27,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,25,68,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,0,14,33,19,20,21,24,25,26,27,28,29,30,31,4,9,33,19,20,21,24,25,26,27,28,29,30,31,4,9,33,24,25,27,4,0,20,21,20,21,31,19,20,21,30,31,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,20,21,20,21,19,20,21,24,25,26,27,28,29,30,31,4,9,33,19,20,21,24,27,28,30,31,9,0,20,26,14,0,9,14,20,21,26,4,20,21,4,20,21,24,25,26,27,28,29,30,31,4,39,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,24,31,24,30,24,24,19,68,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,68,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,25,27,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,14,9,9,20,21,0,27,0,14,27,27,9,14,27,14,33,14,24,30,9,14,0,69,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,69,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,14,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,4,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,33,20,21,27,0,19,20,21,24,25,26,27,28,29,30,31,4,9,33,24,19,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,39,33,33,14,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,69,19,20,21,24,25,26,27,28,29,30,31,4,39,14,9,33,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[12,[1,[7,[1]]]],[13,[[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[[14,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[17,[[11,[15,18]]]],0,0,[19,19],[20,20],[21,21],[[[24,[[0,[22,23]]]]],[[24,[[0,[22,23]]]]]],[[[25,[[0,[22,23]]]]],[[25,[[0,[22,23]]]]]],[26,26],[[[27,[[0,[22,23]]]]],[[27,[[0,[22,23]]]]]],[28,28],[29,29],[30,30],[31,31],[[[4,[[0,[22,23,32]]]]],[[4,[[0,[22,23,32]]]]]],[[[9,[[0,[22,23]]]]],[[9,[[0,[22,23]]]]]],[33,33],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],34],0,0,0,0,[[31,[2,[[0,[23,32,35]]]]],[[36,[[0,[23,32,35]]]]]],[19,5],[[],20],[[],21],[[],30],[[],31],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[37,[[11,[19]]]],[37,[[11,[20]]]],[37,[[11,[21]]]],[37,[[11,[[24,[23]]]]]],[37,[[11,[[25,[[0,[38,23]]]]]]]],[37,[[11,[26]]]],[37,[[11,[[27,[[0,[38,23]]]]]]]],[37,[[11,[28]]]],[37,[[11,[29]]]],[37,[[11,[30]]]],[37,[[11,[31]]]],[37,[[11,[[4,[[0,[38,23,32]]]]]]]],[37,[[11,[39]]]],[37,[[11,[[14,[[0,[38,23]]]]]]]],[37,[[11,[[9,[[0,[38,23]]]]]]]],[37,[[11,[33]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,0,0,[[19,19],6],[[20,20],6],[[21,21],6],[[[24,[[0,[40,23]]]],[24,[[0,[40,23]]]]],6],[[[25,[[0,[40,23]]]],[25,[[0,[40,23]]]]],6],[[26,26],6],[[[27,[[0,[40,23]]]],[27,[[0,[40,23]]]]],6],[[28,28],6],[[29,29],6],[[30,30],6],[[31,31],6],[[[4,[[0,[40,23,32]]]],[4,[[0,[40,23,32]]]]],6],[[[9,[[0,[40,23]]]],[9,[[0,[40,23]]]]],6],[[33,33],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[2,[[0,[23,32]]]],[3,[[0,[23,32]]]],5],[[11,[20,10]]]],[[26,[2,[[0,[23,32,35]]]],5,[8,[[0,[23,32,35]],[7,[[0,[23,32,35]]]]]]],[[11,[[3,[[0,[23,32,35]]]],10]]]],[[[2,[1]],[3,[1]],[41,[[3,[1]]]],5,6,[12,[1,[7,[1]]]],[13,[[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[[14,[1]],10]]]],[[[2,[23]],[3,[23]],[41,[[3,[23]]]],5,[8,[23,[7,[23]]]]],[[11,[10]]]],[[[9,[23]]],[[41,[20]]]],[[[14,[1]],[2,[1]]],[[11,[10]]]],0,0,0,0,0,0,[[[4,[[0,[23,32,35]]]],[2,[[0,[23,32,35]]]],5,[8,[[0,[23,32,35]],[7,[[0,[23,32,35]]]]]]],[[11,[[3,[[0,[23,32,35]]]],10]]]],[[20,42],43],[[21,42],43],[[[24,[[0,[44,23]]]],42],43],[[[25,[[0,[44,23]]]],42],43],[[26,42],43],[[[27,[[0,[44,23]]]],42],43],[[28,42],43],[[29,42],43],[[30,42],43],[[31,42],43],[[[4,[[0,[44,23,32]]]],42],43],[[39,42],43],[[[9,[[0,[44,23]]]],42],43],[[33,42],43],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[[0,[23,32,35]]]],[3,[[0,[23,32,35]]]]],[[24,[[0,[23,32,35]]]]]],[[[2,[[0,[23,32]]]],[36,[[0,[23,32]]]]],31],[45,[[11,[[24,[23]]]]]],[[[2,[[0,[23,32]]]],[3,[[0,[23,32]]]]],30],[[[2,[[0,[23,32,35]]]],[3,[[0,[23,32,35]]]],[0,[23,32,35]]],[[24,[[0,[23,32,35]]]]]],[[[2,[[0,[23,32,35]]]],[3,[[0,[23,32,35]]]]]],[[[0,[46,47]],48],49],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[50,6],[[19,51]],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[14,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[[[9,[23]]],6],[[[9,[23]]],6],0,0,[[],[[8,[1,[7,[1]]]]]],0,[5,52],0,[[[2,[1]],[25,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[25,[1]],5,6,[12,[1,[7,[1]]]],[13,[[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[[14,[1]],10]]]],[[[9,[23]]],[[41,[[27,[23]]]]]],[[[14,[1]],[2,[1]]],[[11,[10]]]],0,0,0,[[[2,[1]],[9,[1]],5,6,[12,[1,[7,[1]]]],[13,[[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[[14,[1]],10]]]],[[[24,[[0,[23,32,35]]]],[2,[[0,[23,32,35]]]]],[[3,[[0,[23,32,35]]]]]],[[30,[2,[[0,[23,32,35]]]],5,[8,[[0,[23,32,35]],[7,[[0,[23,32,35]]]]]]],[[3,[[0,[23,32,35]]]]]],[[[9,[23]]],[[41,[21]]]],[[[14,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[10]]]],[5,[[11,[[53,[[13,[[7,[1]]]]]],10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[[45,[54]]],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],[[],[[11,[10]]]],0,[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],[[55,56,[57,[16]]],[[11,[58]]]],0,[[19,59],11],[[20,59],11],[[21,59],11],[[[24,[23]],59],11],[[[25,[[0,[32,23]]]],59],11],[[26,59],11],[[[27,[[0,[32,23]]]],59],11],[[28,59],11],[[29,59],11],[[30,59],11],[[31,59],11],[[[4,[[0,[32,23,32]]]],59],11],[[39,59],11],[[[14,[[0,[32,23]]]],59],11],[[[9,[[0,[32,23]]]],59],11],[[33,59],11],0,0,0,0,[37,[[11,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[23]]],50],[[],11],[5,[[11,[19]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],[[],60],0,0,0,[[[14,[1]],[13,[[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[39,10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],[[[45,[54]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[5],[[10,42],43],[[10,42],43],[61,10],[62,10],[63,10],[64,10],[65,10],[[]],[[],5],[[]],[66],[[55,56,[57,[16]]],[[11,[58]]]],[10,[[41,[67]]]],[[],50],[[],11],[[],11],[[],60],[[]]],"c":[],"p":[[6,"S1"],[3,"Store"],[3,"Ptr"],[3,"CommittedExpression"],[15,"usize"],[15,"bool"],[4,"Coproc"],[3,"Lang"],[4,"Claim"],[4,"Error"],[4,"Result"],[3,"NovaProver"],[3,"PublicParams"],[3,"Proof"],[6,"Cid"],[3,"Cid"],[15,"str"],[4,"Error"],[4,"ReductionCount"],[3,"Evaluation"],[3,"PtrEvaluation"],[8,"Clone"],[8,"LurkField"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"LurkScalarBytes"],[3,"LurkScalarIpld"],[4,"LurkPtr"],[4,"LurkCont"],[8,"Serialize"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"DeserializeOwned"],[3,"ContPtr"],[8,"Deserializer"],[8,"Deserialize"],[3,"VerificationResult"],[8,"PartialEq"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"AsRef"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[3,"String"],[8,"Hasher"],[6,"NovaProofCache"],[3,"Arc"],[3,"Path"],[3,"RawCodec"],[8,"Read"],[8,"Extend"],[3,"Error"],[8,"Serializer"],[3,"TypeId"],[3,"Error"],[4,"FromHexError"],[4,"SynthesisError"],[3,"Error"],[3,"Error"],[3,"Demand"],[8,"Error"],[8,"Id"],[8,"FileStore"]]},\
"lurk":{"doc":"","t":"ENCCRNCLLLALLAALLLLLLLAAAALLLLLLLALALLLLLALLLAALAALAALALAALLLLLALAIKKNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILKLKLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNIDDDDNENDMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLFMLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLKLLLKLLLKLLLAKLLLLLMLLKLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNDNNLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNSDEINNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLNNNNNDEGGDEGGNNNNNNNNNNNNNNNNNNIDNNNNNRRNNNNNNNENNNNNLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNIEEDNNNLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLRDLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLERNRRNLLLLLLLLLLLLFLFLLLLLLLIIIQLLAKLLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLGGNGGGGDGEDNGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLDNNNDEDGGMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLMLLLLLLKLKLLLLLMMKLKLLLKLKLLLFFFLLLLLLLLLLNNNNNNNNNNNNNNNNNNEEDDNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMDNDNEDDDILMMMMLLLLLLLLLLLLMMMLMLLLMMLLLLLLLLMMMLMLMMMLLMMLLLLLLLLLLLLMLLLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKLMMMMMMMLMMLLMLLLLMLMMMMMLMLMMMLLLMMLLLLLLLLLLLLLLLMMLMLLMLMMLMLMMMLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLNENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKL","n":["Num","Scalar","Sym","Symbol","TEST_SEED","U64","UInt","add_assign","borrow","borrow_mut","circuit","clone","clone_into","cont","coprocessor","deref","deref_mut","deserialize","div_assign","drop","eq","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","get_hash","hash","hash","hash_witness","init","into","into_scalar","is_negative","is_zero","light_data","most_negative","most_positive","mul_assign","package","parser","partial_cmp","proof","ptr","references","repl","scalar_store","serialize","store","sub_assign","sym","tag","to_owned","to_string","try_from","try_into","type_id","uint","vzip","writer","ToInputs","input_size","to_inputs","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","drop","eq","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","references","to_owned","try_from","try_into","type_id","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","eval_arity","evaluate","simple_evaluate","synthesize","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","init","init","init","into","into","into","provide","provide","provide","references","references","references","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Status","Terminal","Witness","_p","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","generate_frames","get_frames","i","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_terminal","is_terminal","is_terminal","iter","lang","log","log","log","maybe_emitted_expression","new","next","output","peekmore","precedes","reduce","reduce","references","references","references","references","references","references","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","witness","Coproc","Dummy","DummyCoprocessor","Lang","add_coprocessor","arity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessors","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","eval_arity","eval_arity","fmt","fmt","fmt","from","from","from","has_coprocessors","init","init","init","into","into","into","is_default","lookup","max_coprocessor_arity","new","references","references","references","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","Char","Comm","Cons","Expression","Fun","Nil","Num","Opaque","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","as_simple_keyword_string","as_str","as_sym","as_sym_str","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","drop","drop","eq","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_keyword_sym","is_list","is_null","is_num","is_opaque","is_str","is_sym","is_thunk","references","references","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value","vzip","vzip","BLS12_381","FIELD","FWrap","LanguageField","LurkField","Pallas","Vesta","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","de","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","hex_digits","init","init","into","into","is_negative","most_negative","most_positive","partial_cmp","references","references","ser","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","PoseidonCache","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","constants","constants","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","fmt","fmt","from","from","from","from","from","hash3","hash4","hash6","hash8","init","init","init","init","into","into","into","into","into_hash_components","references","references","references","references","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","ClosedEnv","Cons","ConsName","ConsStub","ConsWitness","Cont","ContName","ContStub","ContWitness","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cons","cons","cons","cons_named","cons_named","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","index","index","index","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","length","new_blank","new_dummy","new_from_stub","references","references","references","references","references","references","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Atom","Cell","Comm","Cons","Encodable","LightData","LightExpr","LightStore","Nil","StrCons","SymCons","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_count","clone","clone","clone_into","clone_into","de","de","de","de","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","read_size_bytes","references","references","references","scalar_map","ser","ser","ser","ser","tag","tag_is_atom","tag_is_small","to_owned","to_owned","to_string","to_string","to_trimmed_le_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LURK_EXTERNAL_SYMBOL_NAMES","Package","add_external_symbol","add_external_symbols","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","external_symbols","fmt","from","init","into","local_symbol","lurk","name","name","new","references","relative_abbreviation","remove_external_symbol","remove_external_symbols","root","to_owned","try_from","try_into","type_id","vzip","Error","KEYWORD_MARKER","NoInput","SYM_MARKER","SYM_SEPARATOR","Syntax","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","names_keyword","provide","read_symbol_path","references","to_owned","to_string","try_from","try_into","type_id","vzip","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","lang","new","outer_prove","proof","proof_count","prove","reduction_count","reduction_count","references","references","references","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","Compressed","EE1","EE2","G1","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","S1","S2","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","evaluate_and_prove","from","from","from","init","init","init","into","into","into","lang","new","prove_recursively","public_params","reduction_count","references","references","references","serialize","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","ContPtr","Index","Null","Opaque","Ptr","RawPtr","SPtr","ScalarContPtr","ScalarPtr","_f","_f","allocate_maybe_fun_unconstrained","arbitrary_with","as_cons","as_list","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","de","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_parts","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","idx","index","index","init","init","init","init","into","into","into","into","into_hash_components","is_atom","is_cons","is_error","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_self_evaluating","new","new","null","null","opaque","opaque","opaque_idx","partial_cmp","partial_cmp","raw","raw","references","references","references","references","ser","serialize","tag","tag","tag","tag_field","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value","vzip","vzip","vzip","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","drop","drop","env","eval_expr","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","limit","name","name","new","new","new","new","process_line","process_line","prompt","prompt","references","references","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binop","Binop2","Call","Call2","Char","Comm","Cons","Dummy","Emit","Error","Fun","If","Let","LetRec","Lookup","Nil","Num","Outermost","ScalarContinuation","ScalarExpression","ScalarStore","ScalarThunk","Str","Sym","Tail","Terminal","Thunk","UInt","Unop","add_one_ptr","add_ptr","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","finalize","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_cont","get_expr","get_hash","hash","init","init","init","init","into","into","into","into","new_with_expr","references","references","references","references","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_store","to_store_with_expr","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","arg","body","closed_env","ConstantPtrs","Create","Error","Get","HashScalar","NamedConstants","Store","StringSet","TypePredicates","all_strings","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","car_cdr_mut","cdr","cdr","char","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comm","comm_store","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","diff","drop","drop","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_list","fetch_maybe_sym","fetch_num","fetch_scalar","fetch_scalar_cont","fetch_str","fetch_sym","fetch_uint","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","fun_store","get_begin","get_char","get_char_from_u32","get_constants","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_expr_hash","get_hash_components_cont","get_hash_components_thunk","get_lurk_sym","get_maybe_opaque","get_nil","get_num","get_opaque_ptr","get_quote","get_str","get_sym","get_t","get_u64","greater","greater_equal","hash_cont","hash_expr","hash_expr_aux","hash_nil","hash_string_mut","hash_sym","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","init","init","init","init","init","init","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_key","intern_list","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_nil","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_scalar_cont_ptr","intern_scalar_ptr","intern_str","intern_strcons","intern_sym","intern_sym_and_ancestors","intern_sym_with_case_conversion","intern_thunk","into","into","into","into","into","into","is_fun","is_potentially","is_self_evaluating","key","lambda","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","lurk_package","lurk_sym","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_scalar_ptr_cache","poseidon_cache","product","provide","ptr","ptr_eq","quote","quotient","read","read_in_package","read_maybe_meta","read_next","read_string","references","references","references","references","references","references","root_sym","scalar_from_parts","scalar_from_parts_cont","scalar_ptr","scalar_ptr_cont_map","scalar_ptr_map","secret","secret","secret_mut","str","str_store","strcons","strcons","sum","sym","sym_store","t","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","u64","uint64","unop_store","value","vzip","vzip","vzip","vzip","vzip","vzip","Key","Sym","Sym","Symbol","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","child","child","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","extend","extend","fmt","fmt","from","from","from","from","full_name","full_name","full_sym_name","get_hash","get_hash","hash","hash","init","init","into","into","is_keyword","is_keyword","is_opaque","is_root","is_root","is_toplevel","is_toplevel","key_root","keyword_name","name","name","new","new","new_absolute","new_absolute","new_from_path","new_key","new_opaque","new_opaque","new_sym","opaque","parent","parent","partial_cmp","partial_cmp","path","path","path","references","references","root","root","serialize","serialize","simple_keyword_name","symbol","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","partial_cmp","partial_cmp","references","references","references","references","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","equivalent","fmt","fmt","from","from","init","into","is_zero","mul","partial_cmp","references","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","vzip","Write","fmt","fmt_to_string"],"q":[[0,"lurk"],[66,"lurk::circuit"],[69,"lurk::cont"],[111,"lurk::cont::Continuation"],[143,"lurk::coprocessor"],[150,"lurk::error"],[224,"lurk::eval"],[388,"lurk::eval::lang"],[461,"lurk::expr"],[535,"lurk::field"],[609,"lurk::hash"],[690,"lurk::hash_witness"],[907,"lurk::light_data"],[993,"lurk::package"],[1025,"lurk::parser"],[1053,"lurk::proof"],[1072,"lurk::proof::groth16"],[1132,"lurk::proof::nova"],[1199,"lurk::ptr"],[1341,"lurk::repl"],[1401,"lurk::scalar_store"],[1532,"lurk::scalar_store::ScalarContinuation"],[1562,"lurk::scalar_store::ScalarExpression"],[1565,"lurk::store"],[1851,"lurk::sym"],[1944,"lurk::tag"],[2146,"lurk::uint"],[2180,"lurk::writer"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","Returns the argument unchanged.","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","<code>LightData</code> is a lightweight binary data serialization …","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","This module offers a connection the the backend proving …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","As with all evaluation, the value returned from …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","Analogous to ScalarExpression::Comm","Analogous to ScalarExpression::Cons","A trait for types that can be serialized and deserialized …","<code>LightData</code> is a binary tree with two types of nodes: Atom …","Enum to represent a light expression.","LightStore contains a fragment of the ScalarStore, but …","Analogous to ScalarExpression::Nil","Replaces ScalarExpression::Str, contains a string and a …","Replaces ScalarExpression::Sym, contains a symbol and a …","","","","","","","","","","Returns the number of bytes required to encode the given …","","","","","Deserializes a <code>LightData</code> into this value.","","","Deserializes a <code>LightData</code> from a <code>&amp;[u8]</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the <code>usize</code> that’s represented by a little endian …","","","","An analogous to the ScalarStore’s scalar_map, but with …","Serializes this value into a <code>LightData</code>.","","","Serializes this <code>LightData</code> into a <code>Vec&lt;u8&gt;</code>.","Returns the tag byte for this <code>LightData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","","","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Generates an outer Groth16 proof using the given …","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","The number of reductions used in the proof.","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","Type alias for a MultiFrame with S1 field elements.","Type alias for a Trivial Test Circuit with G2 scalar field …","A proof for the final step of a recursive computation","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Type alias for G1 group elements using the Pallas curve.","Type alias for G2 group elements using the Vesta curve.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for scalar field elements on the Pallas curve.","Type alias for scalar field elements on the Vesta curve.","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","Evaluates and proves the computation given the public …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","","An Index is the ordinary ptr into the IndexSet …","A Null ptr is used when the hash is F::zero(), such as …","An Opaque ptr is created from a ScalarPtr or ScalarContPtr …","","","A struct representing a scalar pointer with a tag and a …","","","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","The underlying pointer, which can be null, opaque, or an …","","","","","","","","","An expression tag","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ScalarStore</code> allows realization of a graph of <code>ScalarPtr</code>s …","","","","","","","","","Add all ScalarPtrs representing and reachable from expr.","Add the <code>ScalarPtr</code> representing <code>expr</code>, and queue it for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Method which finalizes the <code>ScalarStore</code>, ensuring that all …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ScalarStore</code> and add all <code>ScalarPtr</code>s reachable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutable version of car_cdr to handle Str. <code>(cdr str)</code> may …","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of ScalarPtr -&gt; ContPtr for reverse lookups","Holds a mapping of ScalarPtr -&gt; Ptr for reverse lookups","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Enumeration type for symbol names, which can either be a …","","Type for hieararchical symbol names","","","","","","","Creates a new Symbol with a child path segment added to …","Creates a new Sym with a child path segment added to the …","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","Creates a new Sym with the path extended by the given …","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the full name of the Symbol.","Returns the full name of the Symbol or Keyword symbol.","The full name corresponding to the symbol or keyword’s …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the Sym is a keyword.","Returns true if the Symbol is marked as opaque.","Returns true if the Symbol is the root Symbol, i.e. if it …","Returns true if the Sym is the root symbol.","Returns true if the Symbol is a top-level Symbol, i.e. if …","Returns true if the Sym is toplevel","Returns the root Keyword Symbol.","The full name corresponding to a Sym, if it is a keyword.","Returns the name of the Symbol.","","Creates a new Symbol with the given name and a path …","Creates a new Sym with the given name.","Creates a new Symbol with an absolute path derived from …","Creates a new absolute Sym with the given name.","Creates a new Sym from a path vector and a boolean flag …","Creates a new Keyword Sym with a name derived from the …","Creates a new opaque Symbol with an empty path.","Creates a new opaque Sym.","Creates a new Sym with a name derived from the given …","","Returns the parent Symbol of the Symbol, if there is one.","Returns the parent of the Sym or Keyword, if there is one.","","","Returns a reference to the path vector of the Symbol.","Returns a reference to the path vector of the Sym.","","","","Creates a new Symbol with the root path <code>[&quot;&quot;]</code>.","Returns the root Symbol.","","","The simple name corresponding to a Sym, if it is a keyword …","Returns true if the Sym is a symbol.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,2,0,0,0,2,0,2,2,2,0,2,2,0,0,2,2,2,2,2,2,2,0,0,0,0,2,2,2,2,2,2,2,0,2,0,2,2,2,2,2,0,2,2,2,0,0,2,0,0,2,0,0,2,0,2,0,0,2,2,2,2,2,0,2,0,0,149,149,30,30,30,30,30,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,150,151,152,153,154,155,156,157,158,159,160,150,151,161,159,154,157,158,159,152,153,154,155,156,158,150,151,153,158,160,150,151,0,0,162,50,50,50,162,39,40,0,39,41,0,41,0,39,41,41,39,40,41,39,40,39,40,39,40,41,39,40,41,39,40,41,39,40,41,41,39,39,40,40,41,41,41,41,41,39,39,40,41,39,40,41,39,40,41,39,40,41,39,40,41,39,39,40,41,39,40,41,39,40,41,39,40,41,39,40,41,39,40,48,0,0,0,0,0,48,0,48,0,47,51,36,47,48,54,49,51,36,47,48,54,49,36,47,48,49,36,47,48,49,36,48,51,36,47,48,54,49,51,36,47,48,54,49,48,51,36,47,48,54,49,0,36,36,47,48,49,36,47,48,51,0,36,36,36,36,47,48,54,49,51,36,47,48,48,54,49,51,51,47,51,36,47,48,54,49,51,47,36,51,36,47,48,54,49,54,163,36,47,48,163,36,48,48,163,36,48,51,0,163,36,47,36,51,54,47,54,47,163,36,51,36,47,48,54,49,48,47,163,36,48,36,36,47,48,49,36,36,51,36,47,48,54,49,51,36,47,48,54,49,51,36,47,48,54,49,51,36,47,48,54,49,47,0,60,0,0,56,60,61,60,56,61,60,56,61,60,56,61,60,56,56,56,61,60,56,61,60,56,61,60,61,60,56,61,60,61,60,56,61,60,56,56,61,60,56,61,60,56,56,56,56,56,61,60,56,61,60,61,60,60,61,60,56,61,60,56,61,60,56,61,60,56,61,60,56,67,67,67,0,67,67,67,67,67,67,0,67,67,66,66,66,67,67,67,67,67,66,67,66,67,66,67,66,66,67,66,67,66,67,66,67,66,67,66,67,67,66,67,66,66,66,66,67,66,67,66,67,67,67,67,67,67,67,67,67,67,67,66,67,66,67,66,67,66,67,66,66,67,66,78,1,0,0,0,78,78,69,78,69,78,69,69,69,69,69,78,69,78,69,69,78,69,69,69,69,78,69,1,1,1,1,1,1,1,1,1,1,69,69,1,78,69,78,69,1,1,1,69,78,69,69,69,1,1,1,1,1,1,69,1,1,1,1,1,1,78,69,78,69,78,69,78,69,86,87,86,87,86,87,86,87,0,0,0,0,0,86,87,80,88,86,87,80,88,80,80,80,80,80,88,80,88,86,87,80,88,86,87,80,88,86,87,80,88,80,88,86,86,87,80,88,88,88,88,88,86,87,80,88,86,87,80,88,164,86,87,80,88,86,87,80,88,86,87,80,88,86,87,80,88,86,87,80,88,98,96,96,94,96,0,0,0,0,0,0,0,0,94,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,0,0,96,96,96,98,98,0,0,98,96,98,96,96,98,98,0,96,96,96,96,94,91,91,94,93,97,96,98,91,94,93,97,96,98,91,93,92,94,92,94,95,91,95,91,93,94,93,97,96,98,91,94,93,97,96,98,91,92,94,93,95,91,97,97,96,98,94,93,97,96,98,91,94,93,97,96,98,91,94,93,97,96,98,91,94,93,97,96,98,91,94,93,97,96,98,95,91,99,94,100,91,94,93,97,96,98,91,94,93,97,96,98,91,91,96,98,96,98,89,96,98,94,93,97,96,98,91,99,94,100,91,94,93,97,96,98,91,91,91,91,91,94,93,97,96,98,91,91,92,94,95,91,91,91,94,93,97,96,98,91,91,94,93,97,96,98,91,94,93,97,96,98,91,94,93,97,96,98,91,94,93,97,96,98,91,70,70,101,101,0,0,0,0,101,101,101,102,101,70,102,101,70,102,101,70,70,101,70,101,70,165,102,101,70,102,101,70,102,101,70,102,101,70,102,101,70,101,70,102,101,101,70,70,102,101,70,102,101,70,102,101,70,70,102,101,70,102,165,102,101,70,70,70,70,101,70,101,70,70,102,101,70,102,101,70,102,101,70,102,101,70,0,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,0,105,0,0,105,105,105,105,105,105,105,105,105,105,105,105,105,0,105,0,105,105,105,105,105,105,105,0,0,0,166,166,166,0,166,166,166,166,166,0,166,167,167,167,166,0,0,0,0,0,0,113,112,109,113,112,109,109,109,113,113,112,109,113,112,109,109,113,112,109,113,112,109,113,112,109,113,112,109,113,113,113,109,109,113,113,109,113,112,109,109,109,113,112,109,113,112,109,113,112,109,113,113,113,112,109,0,0,123,0,0,0,0,0,0,0,0,123,0,0,0,0,125,124,123,125,124,123,123,125,124,123,125,124,123,124,123,125,124,123,125,125,124,123,125,124,123,125,124,123,125,125,123,0,125,125,124,123,124,123,125,124,123,125,124,123,125,124,123,123,125,124,123,0,126,126,126,0,0,0,0,0,35,34,35,128,35,35,126,35,34,128,126,35,34,128,126,35,34,128,126,35,34,128,126,128,128,126,35,34,128,126,35,34,128,128,126,35,34,128,126,35,34,128,126,35,34,128,126,35,35,34,34,128,128,126,35,35,34,128,128,126,35,34,128,126,35,34,128,126,35,34,126,35,34,128,126,35,34,128,128,35,35,34,35,35,35,126,126,35,35,35,126,34,35,34,35,34,126,126,128,35,34,126,35,34,128,128,128,128,35,34,128,126,35,34,128,128,126,35,34,128,126,35,34,128,126,35,34,128,128,126,35,34,128,0,0,0,134,130,134,130,130,130,133,130,130,134,130,134,130,134,130,130,130,134,130,133,133,133,133,130,133,130,134,130,134,130,130,130,133,130,133,134,130,130,133,130,133,130,134,130,0,0,0,134,130,134,130,134,130,134,130,134,130,139,139,139,139,137,137,137,139,139,139,137,139,139,139,139,137,137,139,0,0,0,0,137,137,139,139,137,137,139,135,135,137,138,139,135,137,138,139,135,137,138,139,135,137,138,139,135,137,138,139,135,137,135,137,138,139,135,137,138,139,135,137,138,139,135,137,138,139,135,137,138,139,135,137,138,139,135,135,137,137,138,139,135,137,138,139,135,135,139,139,135,137,138,139,135,137,138,139,135,135,137,138,139,135,137,138,139,135,137,138,139,135,135,137,135,135,137,138,139,135,137,138,139,135,137,138,139,135,137,138,139,168,169,170,171,172,173,174,175,176,177,168,169,178,176,171,174,175,176,170,171,172,173,175,168,169,170,175,177,168,169,179,179,179,0,142,0,142,0,0,0,0,0,141,144,144,28,28,142,141,28,43,143,144,142,141,28,43,143,144,28,28,28,28,144,28,28,28,144,144,142,43,143,144,142,43,143,144,144,28,144,28,144,28,28,28,144,141,28,28,28,142,141,28,43,143,144,142,141,28,43,143,144,144,142,141,28,43,143,144,144,144,28,144,144,28,28,28,28,28,28,28,28,28,28,28,28,28,28,142,141,28,43,43,143,144,142,141,28,43,143,144,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,144,144,28,28,28,28,28,28,28,28,144,28,144,28,142,141,28,43,143,144,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,142,141,28,43,143,144,180,180,180,28,144,144,144,144,28,144,28,28,28,28,28,28,144,28,144,28,28,144,28,144,144,28,28,28,28,144,28,28,28,144,43,143,28,144,144,28,28,28,28,28,142,141,28,43,143,144,28,28,28,143,28,28,28,144,28,28,28,28,144,144,28,28,28,144,28,28,142,43,143,144,43,142,141,28,43,143,144,142,141,28,43,143,144,142,141,28,43,143,144,144,28,28,143,142,141,28,43,143,144,59,0,59,0,146,59,146,59,146,59,146,59,146,59,146,59,146,59,146,59,146,59,146,59,146,59,146,59,146,59,146,59,146,59,59,59,146,59,59,146,59,146,59,146,59,146,59,146,59,146,146,59,146,59,59,59,146,59,146,59,146,59,59,59,146,59,59,146,146,59,146,59,146,59,146,146,59,146,59,146,59,59,59,146,59,146,59,146,59,146,59,146,59,74,75,31,31,31,31,31,74,74,73,74,73,74,74,73,75,0,75,31,31,74,75,31,74,75,0,73,75,75,75,31,73,75,75,31,31,31,75,73,73,74,75,0,0,0,74,31,75,75,74,73,75,75,73,0,31,31,73,73,74,31,181,74,75,181,73,31,74,75,73,31,74,75,73,31,74,75,73,31,74,75,73,31,74,75,73,31,74,75,73,31,74,75,73,31,74,75,73,74,75,73,31,74,75,73,31,74,75,73,31,74,75,73,73,31,31,74,74,75,75,73,31,74,75,127,73,31,74,75,73,31,74,75,73,31,74,75,73,31,74,75,73,31,74,75,73,75,73,73,74,75,73,31,74,75,73,74,75,181,74,75,181,74,75,127,73,31,74,75,127,73,31,74,75,73,31,74,75,73,31,74,75,73,73,31,31,74,74,75,75,73,31,74,75,73,31,74,75,73,31,74,75,13,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,182,182],"f":[0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],[[]],0,[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],0,0,[4],[4],[5,[[6,[[2,[1]]]]]],[[[2,[1]],[2,[1]]]],[4],[[[2,[[0,[7,1]]]],[2,[[0,[7,1]]]]],8],[[],8],0,0,0,0,[[[2,[1]],9],10],[[[2,[[0,[11,1]]]],9],10],[12,[[2,[1]]]],[[]],[13,[[2,[1]]]],[1,[[2,[1]]]],[[[0,[14,15]],16],12],0,[[[2,[1]],17]],0,[[],4],[[]],[[[2,[1]]],1],[[[2,[1]]],8],[[[2,[1]]],8],0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,[[[2,[1]],[2,[1]]],[[19,[18]]]],0,0,[[20,21,[23,[22]]],[[6,[24]]]],0,0,[[[2,[1]],25],6],0,[[[2,[1]],[2,[1]]]],0,0,[[]],[[],26],[[],6],[[],6],[[],27],0,[[]],0,0,[[],4],[28,29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[[30,[[0,[3,1]]]]],[[30,[[0,[3,1]]]]]],[[]],[[[30,[1]]],31],[4],[4],[4],[[[30,[[0,[7,1]]]],[30,[[0,[7,1]]]]],8],[[],8],[[[30,[1]],[28,[1]],32],33],[[[30,[[0,[11,1]]]],9],10],[[]],[[[0,[14,15]],16],12],[[[30,[1]]],[[34,[1]]]],[[[30,[[0,[14,1]]]],17]],[[],4],[[[30,[1]],[28,[1]]]],[[]],[[20,21,[23,[22]]],[[6,[24]]]],[[]],[[],6],[[],6],[[],27],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],4],[[],4],[[28,35,35,34],36],[28,35],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[39,39],[[[40,[[0,[3,1]]]]],[[40,[[0,[3,1]]]]]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[41,9],10],[[41,9],10],[[39,9],10],[[39,9],10],[[[40,[1]],9],10],[[[40,[[0,[11,1]]]],9],10],[42,41],[43,41],[[]],[38,41],[39,41],[[]],[43,39],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[44],[44],[44],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[41,[[19,[45]]]],[39,[[19,[45]]]],[[]],[[]],[[],26],[[],26],[[],26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[36,[[0,[3,1]]]]],[[36,[[0,[3,1]]]]]],[[[47,[[0,[3,46]],[0,[3,46]],3]]],[[47,[[0,[3,46]],[0,[3,46]],3]]]],[48,48],[[[49,[[0,[3,1]]]]],[[49,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],0,[[],48],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[48]]]],[4],[4],[4],[4],[4],[4],[[[28,[1]]],[[35,[1]]]],0,[[[36,[[0,[7,1]]]],[36,[[0,[7,1]]]]],8],[[[47,[[0,[7,46]],[0,[7,46]],7]],[47,[[0,[7,46]],[0,[7,46]],7]]],8],[[48,48],8],[[[49,[[0,[7,1]]]],[49,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[51,[1,[50,[1]]]]],[[6,[39]]]],[[[28,[1]],52],[[6,[[35,[1]],39]]]],0,[[[36,[1]],9],[[6,[53]]]],[[[36,[[0,[11,1]]]],9],10],[[[36,[1]],[28,[1]],32],33],[[[47,[[0,[11,46]],[0,[11,46]],11]],9],10],[[48,9],10],[[[54,[[0,[11,46]],[0,[11,1]],[0,[11,[50,[[0,[11,1]]]]]]]],9],10],[[[49,[[0,[11,1]]]],9],10],[[]],[[]],[[]],[[[34,[1]]],48],[[]],[[]],[[]],[[[35,[1]],[35,[1]],[28,[1]],4,55,[56,[1,[50,[1]]]]],[[6,[[29,[[47,[[36,[1]],[49,[1]],[50,[1]]]]]],39]]]],[[[51,[1,[50,[1]]]]],[[6,[[29,[[47,[[36,[1]],[49,[1]],[50,[1]]]]]],39]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[51,[1,[50,[1]]]]],[[36,[1]]]],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[[36,[1]]],8],[[[47,[[36,[1]],46,[50,[1]]]]],8],[48,8],[[],8],[[[36,[1]]],8],[48,8],[48,8],[[],8],[[[36,[1]]],8],[48,8],[[[51,[1,[50,[1]]]]],[[6,[[57,[[54,[[49,[1]],1,[50,[1]]]]]],39]]]],0,[[28,4]],[[[36,[1]],[28,[1]],4]],[[[47,[[36,[1]],46,[50,[1]]]],[28,[1]]]],[[[36,[1]],[28,[1]]],[[19,[[35,[1]]]]]],[[[35,[1]],[35,[1]],[28,[1]],4,[56,[1,[50,[1]]]]],[[51,[1,[50,[1]]]]]],[[[54,[[49,[1]],1,[50,[1]]]]],19],0,[[],58],[[[47,[[36,[1]],46,[50,[1]]]],[47,[[36,[1]],46,[50,[1]]]]],8],[[15,28,56],[[6,[39]]]],[[[36,[1]],[28,[1]],[56,[1,[50,[1]]]]],[[6,[39]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[48,25],6],[[],4],[[],48],[[[36,[1]]],48],[[48,[28,[1]]],[[19,[[34,[1]]]]]],[[[36,[1]],[28,[1]]],[[29,[1]]]],[[]],[[]],[[]],[[]],[[],26],[[[36,[1]],[28,[1]]],[[6,[[29,[1]],43]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[[56,[1,[50,[1]]]],59,[50,[1]],[28,[1]]]],[[[60,[1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[61,[[0,[3,1]]]]],[[61,[[0,[3,1]]]]]],[[[60,[[0,[3,1]]]]],[[60,[[0,[3,1]]]]]],[[[56,[[0,[3,1]],[0,[3,[50,[[0,[3,1]]]]]]]]],[[56,[[0,[3,1]],[0,[3,[50,[[0,[3,1]]]]]]]]]],[[]],[[]],[[]],[[[56,[1,[50,[1]]]]],[[62,[59]]]],[[],[[56,[[0,[63,1]],[0,[63,[50,[[0,[63,1]]]]]]]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[61,[1]]]]]],[5,[[6,[[60,[[0,[64,1]]]]]]]],[4],[4],[4],[[[61,[1]]],4],[[[60,[1]]],4],[[[61,[[0,[11,1]]]],9],10],[[[60,[[0,[11,1]]]],9],10],[[[56,[[0,[11,1]],[0,[11,[50,[[0,[11,1]]]]]]]],9],10],[[]],[[]],[[]],[[[56,[1,[50,[1]]]]],8],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[56,[1,[50,[1]]]]],8],[[[56,[1,[50,[1]]]],[28,[1]],[35,[1]]],19],[[[56,[1,[50,[1]]]]],4],[[],[[56,[1,[50,[1]]]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[61,[1]],25],6],[[[60,[[0,[65,1]]]],25],6],[[[61,[1]],[28,[1]]],[[35,[1]]]],[[[60,[1]],[28,[1]]],[[35,[1]]]],[[[60,[1]],[37,[1]],[28,[1]],[0,[1]],[0,[1]]],[[6,[38]]]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[[66,[1]],[37,[1]],[28,[1]]],[[6,[38]]]],[[[37,[1]],[28,[1]]],[[6,[38]]]],[[[37,[1]],[19,[[66,[1]]]],[28,[1]]],[[6,[38]]]],[[[67,[1]]],[[19,[26]]]],[[[67,[1]]],[[19,[52]]]],[[[67,[1]]],[[19,[59]]]],[[[67,[1]]],[[19,[26]]]],[[]],[[]],[[]],[[]],[[[67,[[0,[3,1]]]]],[[67,[[0,[3,1]]]]]],[[[66,[[0,[3,1]]]]],[[66,[[0,[3,1]]]]]],[[]],[[]],0,[4],[4],[4],[4],[4],[4],[[[67,[[0,[7,1]]]],[67,[[0,[7,1]]]]],8],[[[66,[[0,[7,1]]]],[66,[[0,[7,1]]]]],8],[[],8],[[],8],[[[67,[[0,[11,1]]]],9],10],[[[67,[1]],[28,[1]],32],33],[[[66,[[0,[11,1]]]],9],10],[[]],[[]],[[[0,[14,15]],16],12],[[[66,[1]],17]],[[[37,[1]],[28,[1]],[0,[1]],[0,[1]]],[[6,[[68,[1]],38]]]],[[],4],[[],4],[[]],[[]],[[[67,[1]]],8],[[[67,[1]]],8],[[[67,[1]]],8],[[[67,[1]]],8],[[[67,[1]]],8],[[[67,[1]]],8],[[[67,[1]]],8],[[[67,[1]]],8],[[[67,[1]]],8],[[[67,[1]]],8],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],0,[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[[69,[[0,[3,1]]]]],[[69,[[0,[3,1]]]]]],[[]],[[[69,[1]],[69,[1]]],18],[70,[[71,[[69,[1]]]]]],[4],[4],[4],[4],[5,[[6,[[69,[1]]]]]],[4],[4],[[[69,[[0,[7,1]]]],[69,[[0,[7,1]]]]],8],[[],8],[[[69,[[0,[11,1]]]],9],10],[[]],[[]],[[],19],[72],[31],[73],[74],[75],[76],[77],[12],[[],78],[[[0,[14,15]],16],12],[[[69,[1]],17]],[[],26],[[],4],[[],4],[[]],[[]],[[],8],[[]],[[]],[[[69,[1]],[69,[1]]],[[19,[18]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[69,[1]]],70],[[[69,[1]],25],6],[[],[[29,[79]]]],[[],[[19,[72]]]],[[],[[19,[31]]]],[[],[[19,[73]]]],[[],[[19,[74]]]],[[],[[19,[75]]]],[[]],[[],[[19,[76]]]],[[],[[19,[77]]]],[[],77],[[],[[19,[12]]]],[[],12],[[],26],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[80,[1]]],[[82,[1,81]]]],[[[80,[1]]],[[82,[1,83]]]],[[[80,[1]]],[[82,[1,84]]]],[[[80,[1]]],[[82,[1,85]]]],[[[80,[1]],86],[[87,[1]]]],0,[[],[[80,[1]]]],[[],[[88,[[0,[63,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[80,[[0,[11,1]]]],9],10],[[[88,[[0,[11,1]]]],9],10],[[]],[4,86],[[]],[[]],[[]],[[[88,[1]]],1],[[[88,[1]]],1],[[[88,[1]]],1],[[[88,[1]]],1],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[91,[[0,[89,63,46,90,11]],46,1]]],[[29,[[0,[89,63,46,90,11]]]]]],[[[91,[[0,[89,63,46,90,11]],46,1]],[28,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[92,[1]],[28,[1]],[35,[1]]],[[6,[43]]]],[[[94,[[93,[1]]]],[28,[1]],[35,[1]]],[[6,[43]]]],[[[92,[1]],[28,[1]],[35,[1]]],[[6,[43]]]],[[[94,[[93,[1]]]],[28,[1]],[35,[1]]],[[6,[43]]]],[[[95,[1]],96,[28,[1]],[35,[1]]],[[6,[43]]]],[[[91,[96,[93,[1]],1]],96,[28,[1]],[35,[1]]],[[6,[43]]]],[[[95,[1]],96,[28,[1]],[35,[1]]],[[6,[39]]]],[[[91,[96,[93,[1]],1]],96,[28,[1]],[35,[1]]],[[6,[39]]]],0,[[[94,[3]]],[[94,[3]]]],[[[93,[[0,[3,1]]]]],[[93,[[0,[3,1]]]]]],[[[97,[[0,[3,1]]]]],[[97,[[0,[3,1]]]]]],[96,96],[98,98],[[[91,[[0,[3,89]],3,[0,[3,1]]]]],[[91,[[0,[3,89]],3,[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[92,[1]],[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],[[[94,[[93,[1]]]],[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],0,[[[95,[1]],96,[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],[[[91,[96,[93,[1]],1]],96,[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],0,0,[[],96],[[],98],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[94,[7]],[94,[7]]],8],[[[93,[[0,[7,1]]]],[93,[[0,[7,1]]]]],8],[[[97,[[0,[7,1]]]],[97,[[0,[7,1]]]]],8],[[96,96],8],[[98,98],8],[[[91,[[0,[7,89]],7,[0,[7,1]]]],[91,[[0,[7,89]],7,[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[95,[1]],96,[35,[1]],[35,[1]],[35,[1]],[28,[1]]],[[35,[1]]]],[[[91,[96,[93,[1]],1]],96,[35,[1]],[35,[1]],[35,[1]],[28,[1]]],[[35,[1]]]],[[[99,[1]],[28,[1]],[34,[1]]],[[19,[[30,[1]]]]]],[[[94,[[97,[1]]]],[28,[1]],[34,[1]]],[[19,[[30,[1]]]]]],[[[100,[1]],98,[28,[1]],[34,[1]]],[[19,[[30,[1]]]]]],[[[91,[98,[97,[1]],1]],98,[28,[1]],[34,[1]]],[[19,[[30,[1]]]]]],[[[94,[11]],9],10],[[[93,[[0,[11,1]]]],9],10],[[[97,[[0,[11,1]]]],9],10],[[96,9],10],[[98,9],10],[[[91,[[0,[11,89]],11,[0,[11,1]]]],9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[[91,[[0,[89,63,46,90,11]],46,1]],[0,[89,63,46,90,11]]],[[94,[46]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[96,17]],[[98,17]],[[],4],[96,4],[98,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[99,[1]],[28,[1]],[30,[1]]],[[34,[1]]]],[[[94,[[97,[1]]]],[28,[1]],[30,[1]]],[[34,[1]]]],[[[100,[1]],98,[28,[1]],[30,[1]]],[[34,[1]]]],[[[91,[98,[97,[1]],1]],98,[28,[1]],[30,[1]]],[[34,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],[[91,[[0,[89,63,46,90,11]],46,1]]]],[[],[[91,[[0,[89,63,46,90,11]],46,1]]]],[[[94,[46]]],[[91,[[0,[89,63,46,90,11]],46,1]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],0,[[[92,[1]],[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],[[[94,[[93,[1]]]],[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],[[[95,[1]],96,[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],[[[91,[96,[93,[1]],1]],96,[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],[[[91,[[0,[89,63,46,90,11]],46,1]]],[[29,[[94,[46]]]]]],[[[91,[[0,[89,63,46,90,11]],46,1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[91,[[0,[89,63,46,90,11]],46,1]]],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,79],[[[101,[[0,[3,1]]]]],[[101,[[0,[3,1]]]]]],[70,70],[[]],[[]],[70,[[71,[15]]]],[70,[[71,[[102,[1]]]]]],[70,[[71,[[101,[1]]]]]],[[],[[71,[70]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[102,[[0,[7,1]]]],[102,[[0,[7,1]]]]],8],[[[101,[[0,[7,1]]]],[101,[[0,[7,1]]]]],8],[[70,70],8],[[],8],[[],8],[[[102,[[0,[11,1]]]],9],10],[[[101,[1]],9],10],[[[101,[[0,[11,1]]]],9],10],[[70,9],10],[[70,9],10],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[],[[19,[4]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],0,[[],70],[[[102,[1]]],70],[[[101,[1]]],70],[70,[[29,[79]]]],[70,79],[79,8],[79,8],[[]],[[]],[[],26],[[],26],[4,[[29,[79]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[]],[[]],[[]],0,0,[[103,[104,[52]]]],[103],[[]],[[]],[103,103],[[]],[[],103],[4],[4],[4],0,[[103,9],10],[[]],[[],4],[[]],[[103,59],[[19,[59]]]],[[],103],[103,59],0,[59,103],[[20,21,[23,[22]]],[[6,[24]]]],[[103,59],59],[[103,59]],[103],[[],103],[[]],[[],6],[[],6],[[],27],[[]],0,0,0,0,0,0,[[]],[[]],[105,105],[[]],[4],[4],[4],[[105,9],10],[[105,9],10],[[]],[[],4],[[]],[52],[44],[[[58,[106]]],[[6,[105]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[]],[[],26],[[],6],[[],6],[[],27],[[]],0,0,0,0,[4,4],[4,4],0,[[],56],[4,4],[4,8],[4,8],[[4,56]],0,[[],[[6,[29,38]]]],[[],4],[[],29],[[],4],[[],4],[29,[[6,[8,38]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[109,[[0,[3,107,108]]]]],[[109,[[0,[3,107,108]]]]]],[[]],[[4,[56,[110,[50,[110]]]]],[[6,[[112,[111]],38]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[109,[[0,[107,108]]]]]]]],[4],[4],[4],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[113,[111,[50,[110]],110]]],[[56,[110,[50,[110]]]]]],[[4,[56,[110,[50,[110]]]]],[[113,[111,[50,[110]],110]]]],[[[113,[111,[50,[110]],110]],[114,[111]],[115,[111]],[35,[110]],[35,[110]],[28,[110]],4,[0,[116,3]],[56,[110,[50,[110]]]]],[[6,[41]]]],0,0,[[[113,[111,[50,[110]],110]],[0,[110,[36,[110]],[49,[110]],[50,[110]]]],[114,[111]],116],[[6,[[117,[111]],38]]]],[[[113,[111,[50,[110]],110]]],4],0,[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[109,[[0,[107,108]]]],25],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[[118,[111]],[119,[111]],[120,[111]],[0,[116,121]]],[[6,[8,38]]]],[[[0,[110,[36,[110]],[49,[110]],[50,[110]]]],[118,[111]],[117,[111]]],[[6,[8,38]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[123,[[50,[122]]]],[124,[[50,[122]]]]],[[6,[[123,[[50,[122]]]],41]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[124,[[0,[64,[50,[122]]]]]]]]]],[5,[[6,[[123,[[0,[64,[50,[122]]]]]]]]]],[4],[4],[4],[[[125,[122,[50,[122]]]],[124,[[50,[122]]]],[35,[122]],[35,[122]],[28,[122]],4,[56,[122,[50,[122]]]]],[[6,[41]]]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[[125,[122,[50,[122]]]]],[[56,[122,[50,[122]]]]]],[[4,[56,[122,[50,[122]]]]],[[125,[122,[50,[122]]]]]],[[[124,[[50,[122]]]],[28,[122]],4,[29,[122]],[56,[122,[50,[122]]]]],[[6,[[123,[[50,[122]]]],41]]]],[[4,[56,[122,[50,[122]]]]],[[124,[[50,[122]]]]]],[[[125,[122,[50,[122]]]]],4],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[124,[[0,[65,[50,[122]]]]]],25],6],[[[123,[[0,[65,[50,[122]]]]]],25],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[[123,[[50,[122]]]],[124,[[50,[122]]]],4,[29,[122]]],[[6,[8,42]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,[[[37,[1]],[28,[1]],[19,[[35,[1]]]]],[[6,[38]]]],[[]],[[[35,[1]]],[[19,[[35,[1]]]]]],[[[35,[1]]],[[19,[[35,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[126,126],[[[35,[[0,[3,1]]]]],[[35,[[0,[3,1]]]]]],[[[34,[[0,[3,1]]]]],[[34,[[0,[3,1]]]]]],[[[128,[[0,[3,127]],[0,[3,1]]]]],[[128,[[0,[3,127]],[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[126,126],18],[[[128,[127,1]],[128,[127,1]]],18],[70,[[71,[[128,[127,1]]]]]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[128,[127,1]]]]]],[4],[4],[4],[4],[[126,126],8],[[[35,[[0,[7,1]]]],[35,[[0,[7,1]]]]],8],[[[34,[[0,[7,1]]]],[34,[[0,[7,1]]]]],8],[[[128,[[0,[7,127]],[0,[7,1]]]],[128,[[0,[7,127]],[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[126,9],10],[[[35,[1]],[28,[1]],32],33],[[[35,[[0,[11,1]]]],9],10],[[[34,[1]],[28,[1]],32],33],[[[34,[[0,[11,1]]]],9],10],[[[128,[[0,[11,127]],[0,[11,1]]]],9],10],[[[128,[[0,[127,129]],1]],9],10],[[]],[[]],[72,[[35,[1]]]],[[]],[[]],[[127,1],[[128,[127,1]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[126,17]],[[[35,[1]],17]],[[[34,[1]],17]],[[[128,[127,1]],17]],[126,[[19,[4]]]],[[73,4],[[35,[1]]]],[[31,4],[[34,[1]]]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[128,[127,1]]]],[[[35,[1]]],8],[[[35,[1]]],8],[[[34,[1]]],8],[[[35,[1]]],8],[[[35,[1]]],8],[[[35,[1]]],8],[126,8],[126,8],[[[35,[1]]],8],[[[35,[1]],73],8],[[[35,[1]]],8],[4,126],[[31,126],[[34,[1]]]],[73,[[35,[1]]]],[31,[[34,[1]]]],[[73,4],[[35,[1]]]],[[31,4],[[34,[1]]]],[126,[[19,[4]]]],[[126,126],[[19,[18]]]],[[[128,[127,1]],[128,[127,1]]],[[19,[18]]]],0,0,[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[128,[127,1]]],70],[[[128,[127,1]],25],6],[[[128,[127,1]]],127],0,0,[[[128,[127,1]]],1],[[]],[[]],[[]],[[]],[[],26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[[128,[127,1]]],1],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[130,[[0,[3,1]],[0,[3,[50,[[0,[3,1]]]]]]]]],[[130,[[0,[3,1]],[0,[3,[50,[[0,[3,1]]]]]]]]]],[[]],[[],131],[[],131],0,[4],[4],[4],[4],[4],[4],0,[[[130,[1,[50,[1]]]],[35,[1]],[28,[1]]],71],[[]],[[]],[[28,[0,[[104,[132]],46]],103],71],[[28,[58,[106]],103,[0,[[104,[132]],46]]],71],[[28,[104,[132]],103],71],[[28,35,103,[0,[[104,[132]],46]]],71],[[[130,[1,[50,[1]]]],[28,[1]],[35,[1]],103,[0,[[104,[132]],46]]],71],[[28,35],71],[[[130,[1,[50,[1]]]],[28,[1]],[35,[1]]],71],[[],4],[[],4],[[]],[[]],0,0,[[],26],[[],26],[[28,4,[19,[131]],56]],[[[28,[1]],4,[19,[131]],[56,[1,[50,[1]]]]],[[71,[[134,[1,[133,[1,[50,[1]]]],[50,[1]]]]]]]],[[[28,[1]],4,[19,[131]],[56,[1,[50,[1]]]]],[[130,[1,[50,[1]]]]]],[[[28,[1]],4,[19,[131]],[56,[1,[50,[1]]]]],[[130,[1,[50,[1]]]]]],[26,26],[[[130,[1,[50,[1]]]],26],26],[[],26],[[[130,[1,[50,[1]]]]],26],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[19,[[104,[132]]]],[56,[1,[50,[1]]]]],71],[[[56,[1,[50,[1]]]]],71],[[[28,[1]],[134,[1,[133,[1,[50,[1]]]],[50,[1]]]],[19,[[104,[132]]]]],71],[[[134,[1,[133,[1,[50,[1]]]],[50,[1]]]]],71],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[135,[1]],[28,[1]],[35,[1]]],[[19,[[136,[1]]]]]],[[[135,[1]],[28,[1]],[35,[1]]],[[19,[[136,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[135,[[0,[3,1]]]]],[[135,[[0,[3,1]]]]]],[[[137,[[0,[3,1]]]]],[[137,[[0,[3,1]]]]]],[[[138,[[0,[3,1]]]]],[[138,[[0,[3,1]]]]]],[[[139,[[0,[3,1]]]]],[[139,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[],[[135,[[0,[63,1]]]]]],[[],[[137,[1]]]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[135,[[0,[64,63,1]]]]]]]],[5,[[6,[[137,[[0,[64,1]]]]]]]],[5,[[6,[[138,[[0,[64,1]]]]]]]],[5,[[6,[[139,[[0,[64,1]]]]]]]],[4],[4],[4],[4],[[[135,[[0,[7,1]]]],[135,[[0,[7,1]]]]],8],[[[137,[[0,[7,1]]]],[137,[[0,[7,1]]]]],8],[[[138,[[0,[7,1]]]],[138,[[0,[7,1]]]]],8],[[[139,[[0,[7,1]]]],[139,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[[135,[1]],[28,[1]]]],[[[135,[[0,[11,1]]]],9],10],[[[137,[[0,[11,1]]]],9],10],[[[137,[1]],9],10],[[[138,[[0,[11,1]]]],9],10],[[[139,[[0,[11,1]]]],9],10],[[]],[[]],[[]],[[]],[[[135,[1]],[140,[1]]],[[19,[[139,[1]]]]]],[[[135,[1]],[136,[1]]],[[19,[[137,[1]]]]]],[[[0,[14,15]],16],12],[[[139,[[0,[14,1]]]],17]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[28,[1]],[35,[1]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[135,[[0,[65,1]]]],25],6],[[[137,[[0,[65,1]]]],25],6],[[[138,[[0,[65,1]]]],25],6],[[[139,[[0,[65,1]]]],25],6],[[]],[[]],[[]],[[]],[[[135,[1]]],[[19,[[28,[1]]]]]],[[[135,[1]],[136,[1]]],19],[[],26],[[[102,[1]]],[[6,[[135,[1]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[141,[[29,[52]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[28,[1]],[35,[1]]],[[6,[[35,[1]],43]]]],0,[[[28,[1]],[35,[1]]],[[6,[43]]]],[[[28,[1]],[35,[1]]],[[6,[43]]]],[[[28,[1]],[35,[1]]],[[6,[[35,[1]],43]]]],0,0,[142,142],[43,43],[[[143,[[0,[3,1]]]]],[[143,[[0,[3,1]]]]]],[[[144,[[0,[3,1]]]]],[[144,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],0,0,0,[[[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],0,[[[28,[1]],[35,[1]],[35,[1]]],8],0,0,0,[[],141],[[],[[28,[1]]]],0,0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,[4],[4],[4],[4],[4],[4],0,0,0,0,0,[[[28,[1]],[35,[1]]],[[19,[[67,[1]]]]]],[[[28,[1]],[35,[1]]],[[19,[72]]]],[[[28,[1]],[35,[1]]],19],[[[28,[1]],[35,[1]]],19],[[[28,[1]],[34,[1]]],[[19,[[30,[1]]]]]],[[[28,[1]],[35,[1]]],19],[[[28,[1]],[35,[1]]],[[19,[[29,[[35,[1]]]]]]]],[[[28,[1]],[35,[1]]],[[19,[59]]]],[[[28,[1]],[35,[1]]],[[19,[[2,[1]]]]]],[[[28,[1]],[136,[1]]],[[19,[[35,[1]]]]]],[[[28,[1]],[140,[1]]],[[19,[[34,[1]]]]]],[[[28,[1]],[35,[1]]],[[19,[52]]]],[[[28,[1]],[35,[1]]],[[19,[59]]]],[[[28,[1]],[35,[1]]],[[19,[13]]]],[[142,9],10],[[141,9],10],[[[28,[[0,[11,1]]]],9],10],[[43,9],10],[[43,9],10],[[[143,[[0,[11,1]]]],9],10],[[[144,[[0,[11,1]]]],9],10],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[28,[1]]],[[35,[1]]]],[[[28,[1]],72],[[35,[1]]]],[[[28,[1]],77],[[35,[1]]]],[[[28,[1]]],[[144,[1]]]],[[[28,[1]]],[[34,[1]]]],[[[28,[1]]],[[34,[1]]]],[[[28,[1]]],[[34,[1]]]],[[[28,[1]]],[[34,[1]]]],[[[28,[1]],[35,[1]]],[[19,[[136,[1]]]]]],[[[28,[1]],[34,[1]]],19],[[[28,[1]],[66,[1]]],19],[[[28,[1]],[104,[52]],8],[[19,[[35,[1]]]]]],[[[28,[1]],73,1],[[19,[[35,[1]]]]]],[[[28,[1]]],[[35,[1]]]],[[[28,[1]],[145,[[2,[1]]]]],[[19,[[35,[1]]]]]],[[[28,[1]],[35,[1]]],[[19,[[136,[1]]]]]],[[[28,[1]]],[[35,[1]]]],[[[28,[1]],[104,[52]]],[[19,[[35,[1]]]]]],[[[28,[1]],59],[[19,[[35,[1]]]]]],[[[28,[1]]],[[35,[1]]]],[[[28,[1]],12],[[35,[1]]]],0,0,[[[28,[1]],[34,[1]]],[[19,[[140,[1]]]]]],[[[28,[1]],[35,[1]]],[[19,[[136,[1]]]]]],[[[28,[1]],[35,[1]],142],[[19,[[136,[1]]]]]],[[[28,[1]],142],[[19,[[136,[1]]]]]],[[[28,[1]],[104,[52]]],1],[[[28,[1]],[35,[1]],142],[[19,[[136,[1]]]]]],[[[28,[1]],1,[35,[1]]],[[19,[[35,[1]]]]]],[[[28,[1]],1,[35,[1]]],[[35,[1]]]],0,[[[28,[1]]]],0,0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[28,[1]],1,[35,[1]]],[[35,[1]]]],[[[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],[[[28,[1]]],[[34,[1]]]],[[[28,[1]]],[[34,[1]]]],[[[28,[1]]],[[34,[1]]]],[[[28,[1]]],[[34,[1]]]],[[[28,[1]],[35,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],[[[28,[1]],59],[[35,[1]]]],[[[28,[1]]],[[35,[1]]]],[[[28,[1]],1],[[35,[1]]]],[[[28,[1]],1],[[35,[1]]]],[[[28,[1]],1],[[35,[1]]]],[[[28,[1]],1],[[35,[1]]]],[[[28,[1]]],[[35,[1]]]],[[[28,[1]],[145,[[2,[1]]]]],[[35,[1]]]],[[[28,[1]],1],[[35,[1]]]],[[[28,[1]],1],[[35,[1]]]],[[[28,[1]],1],[[35,[1]]]],[[[28,[1]],1],[[35,[1]]]],[[[28,[1]],[140,[1]],[135,[1]]],[[19,[[34,[1]]]]]],[[[28,[1]],[136,[1]],[135,[1]]],[[19,[[35,[1]]]]]],[[[28,[1]],[104,[52]]],[[35,[1]]]],[[[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],[[[28,[1]],59],[[35,[1]]]],[[[28,[1]],59],[[19,[[35,[1]]]]]],[[[28,[1]],[104,[52]],103],[[35,[1]]]],[[[28,[1]],[66,[1]]],[[35,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[73,8],[[],8],[[[28,[1]],[104,[52]]],[[35,[1]]]],0,0,0,0,0,0,0,[[[28,[1]]],[[35,[1]]]],0,0,[[[28,[1]],[104,[52]]],[[35,[1]]]],[[[28,[1]],[34,[1]]],[[34,[1]]]],0,[[],[[28,[1]]]],[[[28,[1]]],[[144,[1]]]],[[[28,[1]]],[[35,[1]]]],[[[28,[1]]],[[35,[1]]]],0,[[[28,[1]],[145,[[2,[1]]]]],[[35,[1]]]],0,0,0,0,0,[[[28,[1]],[35,[1]]],19],0,[[[28,[1]],[35,[1]]],[[6,[43]]]],0,0,0,[44],[[[143,[1]]],[[35,[1]]]],[[[28,[1]],[35,[1]],[35,[1]]],[[6,[8,43]]]],0,0,[[[28,[1]],52],[[6,[[35,[1]],105]]]],[[[28,[1]],52,103],[[6,[[35,[1]],105]]]],[[[28,[1]],[58,[106]],103],[[6,[105]]]],[[[28,[1]],[58,[106]],103],[[6,[[35,[1]],105]]]],[[[28,[1]],[58,[106]]],[[6,[[35,[1]],105]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[28,[1]],[104,[52]],8],[[35,[1]]]],[[[28,[1]],1,1],[[19,[[136,[1]]]]]],[[[28,[1]],1,1],[[19,[[140,[1]]]]]],[[[143,[1]]],[[136,[1]]]],0,0,[[[28,[1]],[35,[1]]],[[19,[[35,[1]]]]]],0,[[[28,[1]],[35,[1]]],[[6,[[35,[1]],43]]]],[[[28,[1]],[104,[52]]],[[35,[1]]]],0,[[[28,[1]],[35,[1]],[35,[1]]],[[35,[1]]]],0,0,[[[28,[1]],[104,[52]]],[[35,[1]]]],0,[[[28,[1]]],[[35,[1]]]],0,0,0,[[]],[[]],[[]],[[]],[[],26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],0,[[[28,[1]],12],[[35,[1]]]],0,[[[143,[1]]],1],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[146,26],146],[[59,26],59],[146,146],[59,59],[[]],[[]],[4],[4],[4],[4],[5,[[6,[146]]]],[5,[[6,[59]]]],[4],[4],[[146,146],8],[[59,59],8],[[],8],[[],8],[146,146],[59,59],[[146,9],10],[[59,9],10],[[]],[52,59],[26,59],[[]],[146,26],[59,26],[59,26],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[146,17]],[[59,17]],[[],4],[[],4],[[]],[[]],[146,8],[59,8],[146,8],[146,8],[59,8],[146,8],[59,8],[[],59],[59,[[19,[26]]]],[146,26],[59,26],[26,146],[26,59],[26,146],[26,59],[[8,[29,[26]]],59],[26,59],[[],146],[8,59],[26,59],0,[146,[[19,[146]]]],[59,[[19,[59]]]],[[146,146],[[19,[18]]]],[[59,59],[[19,[18]]]],[146,[[29,[26]]]],[59,[[29,[26]]]],0,[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[],146],[[],59],[[146,25],6],[[59,25],6],[59,[[19,[26]]]],[59,146],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],29],[[],[[29,[74]]]],[[],[[29,[75]]]],[[],[[29,[52]]]],[[73,[37,[1]]],[[6,[[68,[1]],38]]]],[[31,[37,[1]]],[[6,[[68,[1]],38]]]],[[74,[37,[1]]],[[6,[[68,[1]],38]]]],[[75,[37,[1]]],[[6,[[68,[1]],38]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[73,73],[31,31],[74,74],[75,75],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[73]]]],[5,[[6,[74]]]],[5,[[6,[75]]]],[4],[4],[4],[4],[[73,73],8],[[31,31],8],[[74,74],8],[[75,75],8],[[],8],[[],8],[[],8],[[],8],[[73,9],10],[[73,9],10],[[31,9],10],[[31,9],10],[[74,9],10],[[74,9],10],[[75,9],10],[[75,9],10],[[]],[[]],[[]],[[]],[1,19],[1,[[19,[73]]]],[1,[[19,[31]]]],[1,[[19,[74]]]],[1,[[19,[75]]]],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[[0,[14,15]],16],12],[[73,17]],[[31,17]],[[74,17]],[[75,17]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[73,8],[75,8],[[73,73],8],[73,8],[[74,74],[[19,[18]]]],[[75,75],[[19,[18]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[73,25],6],[[74,25],6],[[75,25],6],[4,8],[[74,4],8],[[75,4],8],[[],52],[74,52],[75,52],[[],1],[73,1],[31,1],[74,1],[75,[[0,[[147,[12]],148]]]],[[]],[73],[31],[74],[75],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],26],[[],26],[[],6],[76,[[6,[73]]]],[76,[[6,[31]]]],[[],6],[[],6],[76,[[6,[74]]]],[76,[[6,[75]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],0,0,[[13,13],13],[[]],[[]],[[]],[13,13],[[]],[4],[4],[5,[[6,[13]]]],[[13,13],13],[4],[[13,13],8],[[],8],[[13,9],10],[[13,9],10],[12,13],[[]],[[],4],[[]],[13,8],[[13,13],13],[[13,13],[[19,[18]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[13,13],13],[[13,25],6],[[13,13],13],[[]],[[],26],[[],6],[[],6],[[],27],[[]],0,[[28,32],33],[28,26]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u64"],[4,"UInt"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[4,"Ordering"],[4,"Option"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[3,"Store"],[3,"Vec"],[4,"Continuation"],[4,"ContTag"],[8,"Write"],[6,"Result"],[3,"ContPtr"],[3,"Ptr"],[3,"IO"],[8,"ConstraintSystem"],[4,"SynthesisError"],[4,"ReductionError"],[4,"LurkError"],[4,"ProofError"],[4,"NovaError"],[3,"Error"],[3,"Demand"],[8,"Error"],[8,"Copy"],[3,"Frame"],[4,"Status"],[3,"Witness"],[8,"Coprocessor"],[3,"Evaluator"],[15,"str"],[3,"Error"],[3,"FrameIt"],[8,"Fn"],[3,"Lang"],[3,"Take"],[3,"PeekMoreIterator"],[4,"Sym"],[4,"Coproc"],[3,"DummyCoprocessor"],[3,"HashMap"],[8,"Default"],[8,"Deserialize"],[8,"Serialize"],[3,"Thunk"],[4,"Expression"],[3,"AllocatedNum"],[3,"FWrap"],[4,"LightData"],[6,"Result"],[15,"char"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[4,"LanguageField"],[15,"u8"],[3,"HashConstants"],[6,"U3"],[3,"PoseidonConstants"],[6,"U4"],[6,"U6"],[6,"U8"],[4,"HashArity"],[4,"HashConst"],[3,"PoseidonCache"],[8,"HashName"],[8,"Eq"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[6,"ConsWitness"],[4,"ConsName"],[3,"Cont"],[4,"ContName"],[6,"ContStub"],[6,"ContWitness"],[4,"LightExpr"],[3,"LightStore"],[3,"Package"],[8,"AsRef"],[4,"Error"],[8,"Iterator"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"Scalar"],[3,"Bls12"],[3,"PublicParams"],[3,"Groth16Prover"],[3,"Parameters"],[3,"GenericSRS"],[8,"RngCore"],[3,"Proof"],[3,"PreparedVerifyingKey"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[8,"Send"],[6,"S1"],[4,"Proof"],[3,"PublicParams"],[3,"NovaProver"],[4,"RawPtr"],[8,"Tag"],[3,"SPtr"],[8,"Display"],[3,"ReplState"],[3,"Command"],[3,"Path"],[8,"ReplTrait"],[3,"Repl"],[3,"ScalarStore"],[6,"ScalarPtr"],[4,"ScalarExpression"],[3,"ScalarThunk"],[4,"ScalarContinuation"],[6,"ScalarContPtr"],[3,"StringSet"],[4,"HashScalar"],[3,"ConstantPtrs"],[3,"NamedConstants"],[8,"Into"],[3,"Symbol"],[8,"From"],[8,"Field"],[8,"ToInputs"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"CoCircuit"],[8,"Evaluable"],[8,"IntoHashComponents"],[8,"Encodable"],[8,"Prover"],[8,"Provable"],[13,"Let"],[13,"LetRec"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"],[8,"TypePredicates"],[8,"Op"],[8,"Write"]]},\
"lurk_macro":{"doc":"Lurk DSL","t":"OO","n":["let_store","lurk"],"q":[[0,"lurk_macro"]],"d":["Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …",""],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"lurkrs":{"doc":"","t":"F","n":["main"],"q":[[0,"lurkrs"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
