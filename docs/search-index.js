var searchIndex = JSON.parse('{\
"clutch":{"doc":"Lurk Clutch","t":"DLLLLLLLLLLLLLLLLLLFLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","deserialize","drop","from","handle_meta","handle_non_meta","init","into","layout_raw","name","new","pointer_metadata","process_line","prompt","public_param_dir","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"clutch"],[27,"clap_builder::builder::command"],[28,"rkyv::with"],[29,"core::result"],[30,"pasta_curves::pallas"],[31,"lurk::eval::lang"],[32,"lurk::store"],[33,"lurk::state"],[34,"core::cell"],[35,"alloc::rc"],[36,"lurk::ptr"],[37,"anyhow"],[38,"std::path"],[39,"core::convert"],[40,"core::marker"],[41,"lurk::eval"],[42,"core::alloc::layout"],[43,"core::alloc::layout"],[44,"core::option"],[45,"lurk::eval::lang"],[46,"core::any"],[47,"alloc::alloc"],[48,"alloc::boxed"],[49,"core::any"]],"d":["","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8,8,8,8],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[2,-1,[]],[2,-1,[]],[[-1,-2],[[4,[[3,[-3,-4]]]]],[],[],[],[]],[2,5],[-1,-1,[]],[[[8,[6,[7,[6]]]],[9,[6]],[12,[[11,[10]]]],[13,[6]],-1],[[14,[5]]],[[16,[15]],17]],[[[8,[6,[7,[6]]]],[9,[6]],10,[13,[6]]],[[14,[[5,[[18,[6]],[18,[6]],2]]]]]],[[],2],[-1,-2,[],[]],[[],[[4,[19,20]]]],[[],21],[[[9,[6]],2,[22,[1]],[23,[6,[7,[6]]]]],[[8,[6,[7,[6]]]]]],[[]],[[[8,[6,[7,[6]]]],21],21],[[[8,[6,[7,[6]]]]],21],[[],24],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,25,[]],[[[27,[-1,26]]],[[27,[28,26]]],[]],[-1,28,[]],[-1,28,[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Command",27],[15,"usize"],[3,"With",28],[4,"Result",29],[15,"tuple"],[6,"Scalar",30],[4,"Coproc",31],[3,"ClutchState",0],[3,"Store",32],[3,"State",33],[3,"RefCell",34],[3,"Rc",35],[6,"Ptr",36],[6,"Result",37],[3,"Path",38],[8,"AsRef",39],[8,"Copy",40],[3,"IO",41],[3,"Layout",42],[3,"LayoutError",42],[3,"String",43],[4,"Option",44],[3,"Lang",31],[3,"Utf8PathBuf",45],[3,"TypeId",46],[3,"Global",47],[3,"Box",48],[8,"Any",46]]},\
"fcomm":{"doc":"","t":"DEDDGRNDNDNEEGNNDNDNDDNEGNNNHDDDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLFLLMMMMMMLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMFMLLLLMLLLLLLLLLLLLLLLLMMLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDILLFLLLLLLLLLLLLKKKLLLLLLLLKK","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Error","Evaluation","Evaluation","Expression","Five","LurkCont","LurkPtr","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Outermost","Proof","PtrEvaluation","PtrEvaluation","ReductionCount","S1","Source","Ten","Terminal","VERBOSE","VerificationResult","ZBytes","ZStorePtr","ZStorePtr","apply","apply_and_prove","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont","cont_out","cont_out","cont_ptr","count","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env","env_out","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr","expr_out","expr_out","expr_ptr","file_map","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_cont_ptr","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","hash","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","iterations","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_cid","proof_key","prove_claim","ptr","ptr","ptr_evaluation","ptr_evaluation_io","public_param_dir","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_json_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","status","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_json_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","AnyhowError","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","OpeningFailure","SerdeError","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","from","from","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","FileMap","FileStore","borrow","borrow_mut","data_dir","deref","deref_mut","deserialize","drop","fmt","from","get","init","into","layout_raw","new","pointer_metadata","read_from_json_path","read_from_path","read_from_stdin","set","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","write_to_json_path","write_to_path"],"q":[[0,"fcomm"],[639,"fcomm::error"],[684,"fcomm::file_map"],[714,"lurk::store"],[715,"lurk::ptr"],[716,"lurk::eval::lang"],[717,"lurk::eval::lang"],[718,"lurk::proof::nova"],[719,"lurk::proof::nova"],[720,"core::clone"],[721,"lurk::field"],[722,"lurk::ptr"],[723,"serde::de"],[724,"core::default"],[725,"serde::de"],[726,"serde::de"],[727,"core::option"],[728,"lurk::eval"],[729,"core::fmt"],[730,"core::fmt"],[731,"core::hash"],[732,"core::marker"],[733,"core::hash"],[734,"core::alloc::layout"],[735,"camino"],[736,"lurk::public_parameters::error"],[737,"std::path"],[738,"serde::ser"],[739,"core::any"],[740,"alloc::alloc"],[741,"alloc::boxed"],[742,"core::any"],[743,"anyhow"],[744,"lurk::z_data::serde"],[745,"hex::error"],[746,"bellpepper_core::constraint_system"],[747,"lurk::store"],[748,"color_eyre::section"],[749,"core::fmt"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,28,0,9,0,16,0,0,0,16,16,0,9,0,28,0,0,9,0,0,27,16,28,0,0,0,0,27,24,24,17,18,21,24,25,26,27,28,4,9,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,22,15,29,16,17,18,21,22,23,24,25,26,27,28,4,9,29,16,17,18,21,22,23,24,25,26,27,28,4,9,29,21,22,24,4,0,17,18,17,18,28,16,17,18,27,28,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,16,17,17,18,18,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,4,4,39,39,15,15,9,9,29,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,17,18,17,18,16,17,18,21,22,23,24,25,26,27,28,4,9,29,16,16,16,17,17,17,18,18,18,21,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,27,28,28,28,4,4,4,9,9,9,29,29,29,0,17,23,15,0,9,15,17,18,23,4,17,18,4,0,16,17,18,21,22,23,24,25,26,27,28,4,39,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,21,28,21,27,21,21,16,16,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,22,24,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,15,9,9,17,18,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,24,0,15,24,24,9,15,24,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,15,29,9,15,21,27,9,15,0,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,15,4,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,29,17,18,24,16,17,18,21,22,23,24,25,26,27,28,4,9,29,21,16,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,39,29,29,15,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,16,17,18,21,22,23,24,25,26,27,28,4,39,15,9,29,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,79,79,0,79,79,79,79,79,79,79,79,79,79,79,79,81,81,81,79,79,79,79,79,79,79,79,81,81],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[16,16],[17,17],[[[18,[-1]]],[[18,[-1]]],[19,20]],[[[21,[-1]]],[[21,[-1]]],[19,20]],[[[22,[-1]]],[[22,[-1]]],[19,20]],[[[23,[-1]]],[[23,[-1]]],[19,20]],[[[24,[-1]]],[[24,[-1]]],[19,20]],[25,25],[[[26,[-1]]],[[26,[-1]]],[19,20]],[[[27,[-1]]],[[27,[-1]]],[19,20]],[28,28],[[[4,[-1]]],[[4,[-1]]],[19,20]],[[[9,[-1]]],[[9,[-1]]],[19,20]],[[[29,[-1]]],[[29,[-1]]],[19,20]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],[[-1,-2],30,[],[]],0,0,0,0,[[],31],0,0,0,0,[[28,[2,[-1]]],[[32,[-1]]],[20,33,34]],[16,5],[[],17],[[],[[18,[-1]]],[35,20]],[[],[[27,[-1]]],20],[[],28],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[11,[16]]],36],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[17]]],36],[-1,[[11,[[18,[-2]]]]],36,[38,20]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[21,[-2]]]]],36,20],[-1,[[11,[[22,[-2]]]]],36,[38,20]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[23,[-2]]]]],36,[38,20]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[24,[-2]]]]],36,[38,20]],[-1,[[11,[25]]],36],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[26,[-2]]]]],36,[38,20]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[27,[-2]]]]],36,[38,20]],[-1,[[11,[28]]],36],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[4,[-2]]]]],36,[38,20]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[39]]],36],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[15,[-2]]]]],36,[38,40]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[9,[-2]]]]],36,[38,20]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[-1,[[11,[[29,[-2]]]]],36,[38,20]],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],[5,30],0,0,0,0,[[16,16],6],[[17,17],6],[[[18,[-1]],[18,[-1]]],6,[41,20]],[[[21,[-1]],[21,[-1]]],6,[41,20]],[[[22,[-1]],[22,[-1]]],6,[41,20]],[[[23,[-1]],[23,[-1]]],6,[41,20]],[[[24,[-1]],[24,[-1]]],6,[41,20]],[[25,25],6],[[[26,[-1]],[26,[-1]]],6,[41,20]],[[[27,[-1]],[27,[-1]]],6,[41,20]],[[28,28],6],[[[4,[-1]],[4,[-1]]],6,[41,20]],[[[9,[-1]],[9,[-1]]],6,[41,20]],[[[29,[-1]],[29,[-1]]],6,[41,20]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],0,[[[2,[-1]],[3,[-1]],5],[[11,[17,10]]],[20,33]],[[[23,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[20,33,34]],[[[2,[1]],[3,[1]],[42,[[3,[1]]]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[2,[-1]],[3,[-1]],[42,[[3,[-1]]]],5,[8,[-1,[7,[-1]]]]],[[11,[[30,[[43,[-1]],5]],10]]],20],[[[9,[-1]]],[[42,[17]]],20],[[[15,[1]],[2,[1]]],[[11,[[30,[[43,[1]],[43,[1]]]],10]]]],0,0,0,0,0,0,[[[4,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[11,[[3,[-1]],10]]],[20,33,34]],0,[[16,44],45],[[17,44],45],[[[18,[-1]],44],45,[46,20]],[[[21,[-1]],44],45,[46,20]],[[[22,[-1]],44],45,[46,20]],[[[23,[-1]],44],45,[46,20]],[[[24,[-1]],44],45,[46,20]],[[25,44],45],[[[26,[-1]],44],45,[46,20]],[[[27,[-1]],44],45,[46,20]],[[28,44],45],[[[4,[-1]],44],45,[46,20]],[[39,44],45],[[[9,[-1]],44],45,[46,20]],[[[29,[-1]],44],45,[46,20]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1]],[3,[-1]]],[[11,[[21,[-1]],10]]],[20,33,34]],[[[2,[-1]],[32,[-1]]],28,[20,33]],[-1,[[11,[[21,[-2]]]]],[[49,[[48,[47]]]]],20],[[[2,[-1]],[3,[-1]]],[[27,[-1]]],[20,33,34]],[[[2,[-1]],[3,[-1]],-1],[[11,[[21,[-1]],10]]],[20,33,34]],[[[2,[-1]],[3,[-1]]],[[11,[[30,[[21,[-1]],-1]],10]]],[20,33,34]],[[-1,-2],50,[51,52],53],[[16,-1],30,54],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[30,[[43,[1]],[43,[1]]]],10]]]],[[[9,[-1]]],6,20],[[[9,[-1]]],6,20],0,0,[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],[[],[[11,[55,56]]]],0,[5,57],0,[[[2,[1]],[22,[1]],5,6,[8,[1,[7,[1]]]]],[[11,[[9,[1]],10]]]],[[[2,[1]],[22,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[9,[-1]]],[[42,[[24,[-1]]]]],20],[[[15,[1]],[2,[1]]],[[11,[[30,[[43,[1]],[43,[1]]]],10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[9,[-1]]],[[11,[[58,[-1]],10]]],[20,33,38]],[[[2,[1]],[9,[1]],5,6,[12,[1,[7,[1]]]],[13,[1,[7,[1]]]],[14,[[8,[1,[7,[1]]]]]]],[[11,[[15,[1]],10]]]],[[[21,[-1]],[2,[-1]]],[[3,[-1]]],[20,33,34]],[[[27,[-1]],[2,[-1]],5,[8,[-1,[7,[-1]]]]],[[3,[-1]]],[20,33,34]],[[[9,[-1]]],[[42,[[18,[-1]]]]],20],[[[15,[1]],[2,[1]],[8,[1,[7,[1]]]]],[[11,[[30,[[43,[1]],[43,[1]]]],10]]]],[[],59],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],[[],[[11,[-1,60]]],[]],0,0,[[16,-1],11,62],[[17,-1],11,62],[[[18,[-1]],-2],11,[33,20],62],[[[21,[-1]],-2],11,20,62],[[[22,[-1]],-2],11,[33,20],62],[[[23,[-1]],-2],11,[33,20],62],[[[24,[-1]],-2],11,[33,20],62],[[25,-1],11,62],[[[26,[-1]],-2],11,[33,20],62],[[[27,[-1]],-2],11,[33,20],62],[[28,-1],11,62],[[[4,[-1]],-2],11,[33,20],62],[[39,-1],11,62],[[[15,[-1]],-2],11,[33,40],62],[[[9,[-1]],-2],11,[33,20],62],[[[29,[-1]],-2],11,[33,20],62],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[21,[-1]]],63,20],[-1,[[11,[-2]]],[],[]],[5,[[11,[16]]]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],[-1,67,[]],0,0,0,[[[15,[1]],[13,[1,[7,[1]]]],[8,[1,[7,[1]]]]],[[11,[39,10]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,68,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[5,30],[[10,44],45],[[10,44],45],[60,10],[69,10],[70,10],[71,10],[72,10],[73,10],[-1,-1,[]],[74,10],[[-1,-2],[[75,[-2,-3]]],[],[76,77,78],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[11,[55,56]]]],[[]],[10,[[42,[68]]]],[-1,63,[]],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],59],[5,-1,[]],[5,-1,[]],[[-1,-2],[[11,[[37,[-3,-4]]]]],[],[],[],[]],[5,30],[[[79,[-1,-2]],44],45,[46,80],[46,81]],[-1,-1,[]],[[[79,[-1,-2]],-1],[[42,[-2]]],80,81],[[],5],[-1,-2,[],[]],[[],[[11,[55,56]]]],[-1,[[11,[[79,[-2,-3]],60]]],[[49,[61]]],80,81],[[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[-1,[[11,[-2,60]]],[[49,[61]]],[]],[[],[[11,[-1,60]]],[]],[[[79,[-1,-2]],-1,-2],[[11,[30,60]]],80,81],[-1,[[11,[-2]]],[],[]],[-1,[[11,[-2]]],[],[]],[-1,64,[]],[[[66,[-1,65]]],[[66,[67,65]]],[]],[-1,67,[]],[-1,67,[]],[-1,-2,[],[]],[[-1,-2],30,[],[[49,[61]]]],[[-1,-2],30,[],[[49,[61]]]]],"c":[],"p":[[6,"S1",0],[3,"Store",714],[6,"Ptr",715],[3,"CommittedExpression",0],[15,"usize"],[15,"bool"],[4,"Coproc",716],[3,"Lang",716],[4,"Claim",0],[4,"Error",639],[4,"Result",717],[3,"NovaProver",718],[3,"PublicParams",718],[3,"Arc",719],[3,"Proof",0],[4,"ReductionCount",0],[3,"Evaluation",0],[3,"PtrEvaluation",0],[8,"Clone",720],[8,"LurkField",721],[3,"Commitment",0],[3,"OpeningRequest",0],[3,"Expression",0],[3,"Opening",0],[3,"ZBytes",0],[3,"ZStorePtr",0],[4,"LurkPtr",0],[4,"LurkCont",0],[3,"Cert",0],[15,"tuple"],[6,"CommittedExpressionMap",0],[6,"ContPtr",715],[8,"Serialize",722],[8,"DeserializeOwned",723],[8,"Default",724],[8,"Deserializer",723],[3,"With",725],[8,"Deserialize",723],[3,"VerificationResult",0],[8,"CurveCycleEquipped",718],[8,"PartialEq",726],[4,"Option",727],[3,"IO",728],[3,"Formatter",729],[6,"Result",729],[8,"Debug",729],[15,"u8"],[15,"slice"],[8,"AsRef",730],[15,"u64"],[8,"Hash",731],[8,"Sized",732],[8,"BuildHasher",731],[8,"Hasher",731],[3,"Layout",733],[3,"LayoutError",733],[6,"NovaProofCache",0],[6,"ZExprPtr",734],[3,"Utf8PathBuf",735],[4,"Error",736],[3,"Path",737],[8,"Serializer",722],[3,"String",738],[3,"TypeId",739],[3,"Global",740],[3,"Box",741],[8,"Any",739],[8,"Error",742],[3,"Error",743],[4,"SerdeError",744],[4,"FromHexError",745],[4,"SynthesisError",746],[3,"Error",714],[3,"Error",747],[3,"IndentedSection",748],[8,"Display",729],[8,"Send",732],[8,"Sync",732],[3,"FileMap",684],[8,"ToString",738],[8,"FileStore",684]]},\
"lurk":{"doc":"","t":"ENCRNCLLOLLOAALLAAAOLLLLLLLLLLAAAALLLLLLOLALALLLLLLOLAOOOLLLOOAALLAAAALAAOLOAOAAOLLLLLAOLLLOOLACACCCIAAKKDDLLLLLLLMLLLLLMLLLLLLFLLLLMMLLLLLLLMMLLLLMMMLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLMAAAAIKKKFDFMMLLMMMMLLMMMLLLLMMMMMMMLLMMLLMLMMMLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMLMMMMMMMMLMLLLMMLLLLDDILLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFFAAENNLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLHDENDNNDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNNNNNENNNNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMIILAKLLKLLAADLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGEGNDDNDDNNDGDELLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNENENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNIDDDDNNEENDMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLKLLLLKLLLLKLLLALLLLLLLKLLLMLLMLLLLLLLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMDENDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNENNNNNNNNDNNLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLNNSDNEISNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNEEDIDDLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNIDNDGEGGDGEGGIGNNNNNNNNNNNNNNNNNNNNGGIDNNNNNRRNNNNNNNGGDDQENNNNNNNGLLLLLLLLLLLLLLLLLLLLMMLLLLLLMMLMMMLLLLLLLLLLLLLLLLLLMLLMMLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLKLLLLLMMMLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGNNDNNNNNNENNNNNNNNNDNNENNNNNNNNENNNNNNNNENDLLMLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMALLLLLLLLLLLLLLLMLLLMLLLLLLLALMALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAENDNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFNNNDNEDNELLMLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLMLLLLLLLLMLMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNENNNNNNEGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLDLLLLLLLLLLLLLLLLLFFLLLLLLLLDGLLLLLLLLLLLLLLLLLLLLLLLLLLNEHNNGGNLALLLLLLLLAMLLLLLLLLLAAALLLLLLLLLNNNENLLLLLLLLLLLLLLLLLLLLLLLFLFFFFFFFLLLLLLLLLLNNNNNNNDENNLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLMLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMNNNELLLLLLLLLLLLLLLLLFFFFFFFFLLLLLLLLLFFFFFFFFFFFFFFFFFFFFFIIIIQLLLAKLLLKALKKKKAFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLLLLLLLGGQQQQNIGGGQGQDGEDNGGLLLLLLMLLLMLLLLLLLLLLLLLLLLLLLMMLLLLLLMLLLLLLLMLMLLLLLFLLLMLLLLLLLLLLLLLLLLLLLLLLLNENNDDEDNDGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDNNNGEIMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLKLKLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLLLLLAFFFNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLLLMLLLLLLLLKLKLLLLLMLLMKLKLLLLLKLKLFFFLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLFLLLLLFFLLLLLLLLLLLLFLDDDDLLMMMMLLLLLLLLMMMLMLLMMLLLLLLMMLMLMLMMMLMMLLLLLLLLLLLLMLLLLMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLMMLLLLLLLMLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLMMMMMMLMLMLLLMLMMMMMLMLLLLLMMLLMMLLLLMLLMLMLMLMLMMMLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLMLMLRRRRDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKLNNELLLLLLLLLLLLLLLLLLCLLLLLLALLLLLLLCLLLLLLLAAAANENLLLLLALLLLLLLCLLLLLLALCLLLLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMGGDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Num","Scalar","Symbol","TEST_SEED","U64","UInt","add_assign","arbitrary_with","block","borrow","borrow_mut","char","circuit","cli","clone","clone_into","config","cont","coprocessor","ctrl","deref","deref_mut","deserialize","deserialize","div_assign","drop","eq","equivalent","equivalent","equivalent","error","eval","expr","field","fmt","fmt","from","from","from","from_scalar","func","get_hash","hash","hash","hash_witness","header","init","into","into_scalar","is_negative","is_zero","keyword","layout_raw","lem","list","lit","lurk_sym_ptr","most_negative","most_positive","mul_assign","num","op","package","parser","partial_cmp","pointer_metadata","proof","ptr","public_parameters","repl","serialize","state","store","str","sub_assign","sym","symbol","symbol","syntax","tag","tag","to_owned","to_string","try_from","try_into","type_id","uint","uint","upcast_any_box","upcast_any_mut","upcast_any_ref","var","vars","vzip","writer","z_cont","z_data","z_expr","z_ptr","z_store","ToInputs","circuit_frame","gadgets","input_size","to_inputs","CircuitFrame","MultiFrame","arity","blank","blank","borrow","borrow","borrow_mut","borrow_mut","cached_witness","circuit_index","clone","clone","clone_into","clone_into","count","deref","deref","deref_mut","deref_mut","deserialize","deserialize","destructure_list","drop","drop","fmt","fmt","folding_config","frames","from","from","from_frame","from_frames","get_store","init","init","input","input","into","into","layout_raw","layout_raw","meta","output","output","pointer_metadata","pointer_metadata","precedes","precedes","public_input_size","public_inputs","reduction_count","store","store","synthesize","synthesize","synthesize_frames","synthesize_frames_parallel","synthesize_frames_sequential","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","verify_groth16_proof","vzip","vzip","witness","circom","constraints","data","pointer","CircomGadget","into_circom_input","name","simple_evaluate","alloc_equal","GlobalAllocations","allocate_constant","binop2_cont_tag","binop_cont_tag","borrow","borrow_mut","call0_cont_tag","call2_cont_tag","call_cont_tag","char_tag","clone","clone_into","comm_tag","cons_tag","default_num","deref","deref_mut","deserialize","drop","dummy_arg_ptr","dummy_ptr","emit_cont_tag","empty_str_ptr","error_ptr","error_ptr_cont","false_num","fmt","from","fun_tag","if_cont_tag","init","into","lambda_sym","layout_raw","let_cont_tag","letrec_cont_tag","lookup_cont_tag","new","nil_ptr","num_tag","op1_atom_tag","op1_car_tag","op1_cdr_tag","op1_char_tag","op1_comm_tag","op1_commit_tag","op1_emit_tag","op1_num_tag","op1_open_tag","op1_secret_tag","op1_u64_tag","op2_begin_tag","op2_cons_tag","op2_diff_tag","op2_equal_tag","op2_greater_equal_tag","op2_greater_tag","op2_hide_tag","op2_less_equal_tag","op2_less_tag","op2_modulo_tag","op2_numequal_tag","op2_product_tag","op2_quotient_tag","op2_strcons_tag","op2_sum_tag","outermost_cont_tag","pointer_metadata","power2_32_num","power2_64_num","quote_ptr","str_tag","t_ptr","tail_cont_tag","terminal_ptr","thunk_tag","to_owned","true_num","try_from","try_into","type_id","u64_tag","unop_cont_tag","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","AllocatedContPtr","AllocatedPtr","AsAllocatedHashComponents","alloc","alloc","alloc_constant","alloc_constant","alloc_constant_cont_ptr","alloc_constant_ptr","alloc_cont_ptr","alloc_equal","alloc_equal","alloc_hash_components","alloc_hash_equal","alloc_ptr","alloc_tag","alloc_tag_equal","alloc_tag_equal","allocate_thunk_components_unconstrained","as_allocated_hash_components","as_allocated_hash_components","as_allocated_hash_components","as_lurk_boolean","bind_input","bind_input","borrow","borrow","borrow_mut","borrow_mut","by_index","by_index","clone","clone","clone_into","clone_into","construct","construct_commitment","construct_cons","construct_cons_named","construct_fun","construct_list","construct_named","construct_named_and_not_dummy","construct_strcons","construct_thunk","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","enforce_equal","enforce_equal","fetch_and_write_cont_str","fetch_and_write_str","fmt","fmt","from","from","from_parts","from_parts","get_cont","get_cont_ptr","get_z_ptr_cont","hash","hash","implies_ptr_equal","init","init","into","into","is_char","is_comm","is_cons","is_fun","is_nil","is_num","is_str","is_sym","is_thunk","is_u64","layout_raw","layout_raw","pick","pick","pick_const","pointer_metadata","pointer_metadata","ptr","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","z_ptr","backend","get_config","parse_and_run","paths","repl","Backend","Nova","SnarkPackPlus","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","from","header","init","into","layout_raw","pointer_metadata","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Repl","borrow","borrow_mut","deref","deref_mut","deserialize","drop","from","init","into","layout_raw","load_file","new","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","CONFIG","Config","Flow","Parallel","ParallelConfig","ParallelN","Sequential","WitnessGeneration","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_size","default","default","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","fmt","from","from","from","from","init","init","init","init","into","into","into","into","is_parallel","is_sequential","layout_raw","layout_raw","layout_raw","layout_raw","num_threads","parallelism","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_witnesses","precompute_neptune","recursive_steps","synthesis","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","witness_generation","Binop","Binop2","Call","Call0","Call2","Continuation","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","borrow","borrow_mut","clone","clone_into","cont_tag","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","get_hash","get_simple_cont","hash","init","insert_in_store","into","layout_raw","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","CoCircuit","Coprocessor","arity","circom","eval_arity","evaluate","has_circuit","simple_evaluate","synthesize","synthesize_step_circuit","trie","non_wasm","CircomCoprocessor","arity","borrow","borrow_mut","clone","clone_into","create","deref","deref_mut","deserialize","drop","eval_arity","fmt","from","has_circuit","init","into","layout_raw","name","new","pointer_metadata","simple_evaluate","synthesize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ChildMap","Error","HashPreimagePath","Insert","InsertCoprocessor","InsertProof","Lookup","LookupCoprocessor","LookupProof","MissingPreimage","New","NewCoprocessor","PreimagePath","Trie","TrieCoproc","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","constants","default","default","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","empty_root","eval_arity","eval_arity","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","has_circuit","init","init","init","init","init","init","init","init","insert","install","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","leaves","lookup","new","new_with_capacity","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","prove_insert","prove_lookup","root","row_size","serialize","serialize","serialize","simple_evaluate","simple_evaluate","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","CarCdrType","IO","LurkError","Misc","Nova","ProofError","Reduction","ReductionError","Store","Synthesis","as_error","as_error","as_error","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","header","header","header","in_current_span","in_current_span","in_current_span","init","init","init","into","into","into","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","source","source","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","Coprocessor","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","Lurk","Meta","Status","Terminal","Witness","_p","arbitrary_with","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","default","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_frames","get_coprocessor_z_ptr","get_frames","header","i","init","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into","into_iter","is_complete","is_complete","is_complete","is_complete","is_coprocessor","is_error","is_error","is_error","is_incomplete","is_lurk","is_terminal","is_terminal","is_terminal","iter","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","log","log","log","maybe_emitted_expression","meta","new","next","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","precedes","reduce","reduce","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","Binding","Coproc","Dummy","DummyCoprocessor","Lang","add_binding","add_coprocessor","arity","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","coprocessor_count","coprocessors","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eval_arity","eval_arity","evaluate","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_coprocessor","get_coprocessor_from_zptr","get_coprocessor_z_ptr","get_index","has_circuit","has_coprocessors","init","init","init","init","into","into","into","into","is_default","key","layout_raw","layout_raw","layout_raw","layout_raw","lookup","max_coprocessor_arity","new","new","new_with_bindings","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","simple_evaluate","simple_evaluate","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Char","Comm","Cons","EmptyStr","Expression","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","Thunk","UInt","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","continuation","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","get_hash","hash","hash_components","init","init","into","into","is_cons","is_fun","is_list","is_null","is_num","is_str","is_sym","is_thunk","layout_raw","layout_raw","pointer_metadata","pointer_metadata","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","value","vzip","vzip","BLS12_381","BN256","FIELD","FWrap","Grumpkin","LanguageField","LurkField","NON_HIDING_COMMITMENT_SECRET","Pallas","Vesta","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","header","hex_digits","init","init","into","into","is_negative","layout_raw","layout_raw","most_negative","most_positive","partial_cmp","pointer_metadata","pointer_metadata","serialize","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_owned","to_string","to_u128","to_u128_unchecked","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","A3","A3","A4","A4","A6","A6","A8","A8","HashArity","HashConst","HashConstants","IntoHashComponents","InversePoseidonCache","PoseidonCache","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c3","c4","c6","c8","cache_hash_witness_aux","clone","clone","clone","clone_into","clone_into","clone_into","compute_hash","constants","constants","constants","default","default","default","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get","hash3","hash4","hash6","hash8","init","init","init","init","init","insert","into","into","into","into","into","into_hash_components","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","Blank","Blank","CAddr","CircuitHashWitness","ClosedEnv","Cons","ConsCircuitWitness","ConsName","ConsStub","ConsWitness","Cont","ContCircuitWitness","ContName","ContStub","ContWitness","ContentAddressed","Digest","Dummy","Dummy","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashCircuitWitnessBlocks","HashCircuitWitnessCache","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Preimage","PreimageKey","ScalarCons","ScalarCont","ScalarPtrRepr","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","Value","Value","WitnessBlock","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","cdr","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","circuit_witness_blocks","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","components","cons","cons","cons","cons","cons_named","cons_named","cont","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","hash_witness","hash_witness","hash_witness","index","index","index","init","init","init","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","length","names_and_ptrs","names_and_ptrs","names_and_ptrs","names_and_ptrs","new_blank","new_dummy","new_from_stub","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimage","preimage","preimage","preimage","preimage","preimage","slots","slots","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_dummy_scalar_ptr_repr","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","to_scalar_ptr_repr","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AString","Add","And","Block","Call","Cast","Cons2","Cons3","Cons4","Cont","Ctrl","Decons2","Decons3","Decons4","Div","DivRem64","Emit","EqTag","EqVal","Expr","Func","Hide","If","Lit","Lit","Lt","MatchSymbol","MatchTag","Mul","Not","Null","Num","Op","Op1","Op2","Open","Or","Return","String","Sub","Symbol","Tag","Trunc","Var","alloc_globals","assert_all_paths_taken","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_until","call_until_simple","check","circuit","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count_slots","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_field","from_ptr","get_hash","get_hash","get_hash","hash","hash","hash","header","header","init","init","init","init","init","init","init","init_store","input_params","interpreter","into","into","into","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","name","name","new","num_constraints","num_paths","output_size","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointers","serialize","slot","store","synthesize_frame","synthesize_frame_aux","to_field","to_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_ptr","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unroll","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zstore","AllocatedVal","Boolean","GlobalAllocator","Number","Pointer","borrow","borrow","borrow_mut","borrow_mut","default","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","from","from","init","init","into","into","layout_raw","layout_raw","pointer_metadata","pointer_metadata","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","eval_step","evaluate","evaluate_simple","evaluate_with_env_and_cont","Boolean","FPair","FPtr","Frame","Pointer","PreimageData","Preimages","PtrVec","Val","blank","blank","blank","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_outputs","clone","clone","clone","clone_into","clone_into","clone_into","commitment","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","fmt","fmt","fmt","from","from","from","from","hash4","hash6","hash8","init","init","init","init","input","into","into","into","into","layout_raw","layout_raw","layout_raw","layout_raw","less_than","new_from_func","output","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","preimages","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","Atom","Atom","Ptr","Tuple2","Tuple2","Tuple3","Tuple3","Tuple4","Tuple4","ZChildren","ZPtr","borrow","borrow","borrow_mut","borrow_mut","cast","char","clone","clone_into","comm","dbg_display","deref","deref","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt_to_string","from","from","get_atom","get_hash","get_index2","get_index3","get_index4","hash","init","init","into","into","is_nil","is_null","layout_raw","layout_raw","null","num","num_u64","pointer_metadata","pointer_metadata","serialize","serialize","tag","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","u64","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","Store","borrow","borrow_mut","car_cdr","commit","default","deref","deref_mut","deserialize","drop","fetch_2_ptrs","fetch_3_ptrs","fetch_4_ptrs","fetch_key","fetch_string","fetch_sym","fetch_symbol","fetch_symbol_path","fmt","from","hash_ptr","hide","hide_and_return_z_payload","hydrate_z_cache","init","intern_2_ptrs","intern_2_ptrs_hydrated","intern_3_ptrs","intern_3_ptrs_hydrated","intern_4_ptrs","intern_4_ptrs_hydrated","intern_lurk_sym","intern_nil","intern_string","intern_symbol","intern_symbol_path","intern_syntax","into","key","layout_raw","list","open","pointer_metadata","poseidon_cache","read","read_maybe_meta","read_with_default_state","to_vector","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","ZStore","add_comm","borrow","borrow_mut","default","deref","deref_mut","deserialize","deserialize","drop","fmt","from","get_children","init","into","layout_raw","open","pointer_metadata","populate_store","populate_z_store","serialize","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Package","SymbolRef","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","import","init","intern","into","layout_raw","name","new","pointer_metadata","resolve","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","vzip","Err","Error","LURK_WHITESPACE","NoInput","Ok","ParseResult","Span","Syntax","as_error","base","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","error","extra","fmt","fmt","from","header","in_current_span","init","into","layout_raw","pointer_metadata","position","string","syntax","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Bin","Dec","Hex","LitBase","Oct","base_digits","borrow","borrow_mut","clone","clone_into","code","decode","default","deref","deref_mut","deserialize","drop","encode","eq","equivalent","equivalent","equivalent","fmt","from","init","into","is_digit","layout_raw","parse_bin_digits","parse_code","parse_dec_digits","parse_hex_digits","parse_litbase_be_bytes","parse_litbase_code","parse_litbase_digits","parse_litbase_le_bytes","parse_oct_digits","pointer_metadata","radix","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","InterningError","InvalidBase16EscapeSequence","InvalidBaseEncoding","InvalidChar","Nom","NumError","NumLiteralTooBig","ParseError","ParseErrorKind","ParseIntErr","UnknownBaseCode","add_context","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","errors","expected","fmt","fmt","fmt","fmt","from","from","from_error_kind","header","header","init","init","input","into","into","is_nom_err","layout_raw","layout_raw","map_parse_err","new","opt","or","pointer_metadata","pointer_metadata","res","throw","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","No","Pos","Pos","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","from_upto","init","into","layout_raw","pointer_metadata","range","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","from_column","from_line","from_offset","upto_column","upto_line","upto_offset","EscapedChar","EscapedWS","Literal","StringFragment","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","init","into","layout_raw","parse_escaped_char","parse_escaped_whitespace","parse_fragment","parse_literal","parse_string","parse_string_inner","parse_string_inner1","parse_unicode","pointer_metadata","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","parse_absolute_symbol","parse_char","parse_hash_char","parse_line_comment","parse_list","parse_maybe_meta","parse_num","parse_num_inner","parse_quote","parse_raw_keyword","parse_raw_symbol","parse_relative_symbol","parse_space","parse_space1","parse_string","parse_symbol","parse_symbol_limb","parse_symbol_limb_raw","parse_symbol_limbs","parse_syntax","parse_uint","NIVCProver","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","get_evaluation_frames","groth16","lang","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","supernova","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","fmt","fmt","from","from","from","init","init","init","into","into","into","lang","layout_raw","layout_raw","layout_raw","new","outer_prove","pointer_metadata","pointer_metadata","pointer_metadata","proof","proof_count","prove","reduction_count","reduction_count","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","CE1","CE2","CK1","CK2","Compressed","CurveCycleEquipped","EE1","EE2","G1","G1","G2","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cached_witness","clone","clone_into","compress","count","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","folding_config","frames","from","from","from","init","init","init","input","into","into","into","lang","layout_raw","layout_raw","layout_raw","meta","new","output","pointer_metadata","pointer_metadata","pointer_metadata","prove","prove_recursively","public_params","reduction_count","serialize","serialize","store","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","Compressed","FoldingConfig","IVC","NIVC","NIVCStep","NIVCSteps","Proof","PublicParams","Recursive","SuperNovaProver","SuperNovaPublicParams","arity","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","circuit_index","circuit_index","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","entomb","evaluate_and_prove","exhume","extent","fmt","fmt","fmt","from","from","from","from","from","from","from_frames","index","init","init","init","init","init","init","into","into","into","into","into","into","lang","lang","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","new","new_ivc","new_nivc","num_circuits","num_circuits","num_steps","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","primary_circuit","prove","prove_recursively","reduction_count","reduction_count","serialize","serialize","synthesize","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","verify","vzip","vzip","vzip","vzip","vzip","vzip","ContPtr","GPtr","Index","Null","Opaque","Ptr","RawPtr","TypePredicates","_f","_f","_f","allocate_maybe_fun_unconstrained","allocate_maybe_fun_unconstrained","as_cons","as_list","borrow","borrow","borrow_mut","borrow_mut","cast","clone","clone","clone_into","clone_into","cmp","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","get_hash","get_hash","hash","hash","idx","index","init","init","into","into","is_atom","is_cons","is_error","is_error","is_fun","is_fun","is_list","is_nil","is_null","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","layout_raw","layout_raw","new","new","new","null","opaque","opaque_idx","partial_cmp","pointer_metadata","pointer_metadata","raw","raw","raw","tag","tag","tag","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","error","public_params","public_params_default_dir","with_public_params","CacheError","Error","IOError","JsonError","as_error","borrow","borrow_mut","deref","deref_mut","deserialize","drop","fmt","fmt","from","from","from","header","in_current_span","init","into","layout_raw","pointer_metadata","source","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","env","eval_expr","fmt","fmt","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","init","init","into","into","lang","layout_raw","layout_raw","limit","name","name","new","new","new","new","pointer_metadata","pointer_metadata","process_line","process_line","prompt","prompt","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","vzip","vzip","State","add_package","borrow","borrow_mut","default","deref","deref_mut","deserialize","drop","fmt","fmt_to_string","from","get_current_package_name","import","init","init_lurk_state","initial_lurk_state","intern","intern_path","intern_relative_path","into","layout_raw","lurk_sym","meta_package_symbol","new_with_package","pointer_metadata","rccell","resolve","set_current_package","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","use_package","user_sym","vzip","ConstantPtrs","Error","NamedConstants","Store","as_error","as_lurk_boolean","atom","begin","binop2_store","binop_store","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call0_store","call2_store","call_store","car","car","car_cdr","cdr","cdr","char","clone","clone","clone","clone_into","clone_into","clone_into","comm","comm_store","commit","commit","cons","cons","cons_eq","cons_store","constants","current_env","default","dehydrated","dehydrated_cont","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","diff","drop","drop","drop","drop","dummy","emit","emit_store","equal","eval","expect_constants","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_key","fetch_list","fetch_maybe_sym","fetch_num","fetch_strcons","fetch_string","fetch_sym","fetch_symbol","fetch_symcons","fetch_thunk","fetch_uint","fetch_z_cont_ptr","fetch_z_expr_ptr","fmt","fmt","fmt","fmt","fmt","from","from","from","from","fun_store","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_hash_components_cont","get_hash_components_thunk","get_maybe_opaque","get_num","get_opaque_ptr","get_z_cont","get_z_expr","greater","greater_equal","hash_cont","hash_expr","hash_string","hash_symbol","header","hidden","hide","hide","hydrate_scalar_cache","if_","if_store","in_current_span","init","init","init","init","intern_char","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_keycons","intern_list","intern_maybe_opaque","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_strcons","intern_string","intern_symbol","intern_symbol_path","intern_symcons","intern_symnil","intern_syntax","intern_thunk","intern_u64","intern_uint","intern_z_cont_ptr","intern_z_expr_ptr","into","into","into","into","inverse_poseidon_cache","key","lambda","layout_raw","layout_raw","layout_raw","layout_raw","less","less_equal","let_","let_store","letrec","letrec_store","list","lookup_store","mark_dehydrated_cont","modulo","new","new","new_opaque_ptr","nil","num","num","num_equal","num_store","opaque_cont_ptrs","opaque_ptrs","open","open","open_mut","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","poseidon_cache","product","ptr","ptr_eq","quote","quotient","read","read_maybe_meta_with_state","read_with_state","secret","secret","secret_mut","str","str_store","strcons","strcons","strnil","sum","sym","sym_store","symnil","t","tail_store","thunk_store","to_owned","to_owned","to_owned","to_string","to_z_cont","to_z_expr","to_z_store_with_ptr","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","u64","uint64","unop_store","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","user_sym","value","vzip","vzip","vzip","vzip","z_cont_ptr_from_parts","z_cont_ptr_map","z_expr_ptr_from_parts","z_expr_ptr_map","z_ptr","ESCAPE_CHARS","KEYWORD_MARKER","SYM_MARKER","SYM_SEPARATOR","Symbol","arbitrary_with","as_child","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","direct_child","direct_parent","drop","eq","equivalent","equivalent","equivalent","extend","fmt","fmt","fmt_path_component_to_string","fmt_path_to_string","fmt_to_string","fmt_to_string_raw","from","from","from_str_impl","get_hash","has_parent","hash","header","init","into","is_keyword","is_root","is_root_key","is_root_sym","is_whitespace","key","key_from_vec","layout_raw","name","new","new_from_vec","partial_cmp","path","pointer_metadata","prints_as_absolute","root","root_key","root_sym","serialize","set_as_keyword","sym","sym_from_vec","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Char","Improper","List","Num","Quote","String","Symbol","Syntax","UInt","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","header","init","into","layout_raw","pointer_metadata","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","header","header","header","header","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","layout_raw","layout_raw","layout_raw","layout_raw","partial_cmp","partial_cmp","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","div","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from","header","init","into","is_zero","layout_raw","mul","partial_cmp","pointer_metadata","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Write","fmt","fmt_to_string","Atom","Cell","ZData","arbitrary_with","borrow","borrow_mut","byte_count","clone","clone_into","deref","deref_mut","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_bytes","from_z_data","header","init","into","layout_raw","pointer_metadata","read_size_bytes","serde","tag","tag_is_atom","tag_is_small","to_bytes","to_owned","to_string","to_trimmed_le_bytes","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_cont","z_expr","z_ptr","z_store","Function","SerdeError","Type","as_error","borrow","borrow_mut","custom","custom","de","deref","deref_mut","deserialize","drop","fmt","fmt","from","from_z_data","header","in_current_span","init","into","layout_raw","pointer_metadata","ser","to_string","to_z_data","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","Deserializer","borrow","borrow_mut","deref","deref_mut","deserialize","deserialize_any","deserialize_bool","deserialize_byte_buf","deserialize_bytes","deserialize_char","deserialize_enum","deserialize_f32","deserialize_f64","deserialize_i16","deserialize_i32","deserialize_i64","deserialize_i8","deserialize_identifier","deserialize_ignored_any","deserialize_map","deserialize_newtype_struct","deserialize_option","deserialize_seq","deserialize_str","deserialize_string","deserialize_struct","deserialize_tuple","deserialize_tuple_struct","deserialize_u16","deserialize_u32","deserialize_u64","deserialize_u8","deserialize_unit","deserialize_unit_struct","drop","fmt","from","from_z_data","from_z_data","init","into","is_human_readable","layout_raw","pointer_metadata","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","SerializeCell","SerializeMap","SerializeTupleVariant","Serializer","StructSerializer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","end","end","end","end","end","end","end","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","init","init","init","init","init","into","into","into","into","into","is_human_readable","layout_raw","layout_raw","layout_raw","layout_raw","layout_raw","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","serialize_bool","serialize_bytes","serialize_char","serialize_element","serialize_element","serialize_f32","serialize_f64","serialize_field","serialize_field","serialize_field","serialize_field","serialize_i16","serialize_i32","serialize_i64","serialize_i8","serialize_key","serialize_map","serialize_newtype_struct","serialize_newtype_variant","serialize_none","serialize_seq","serialize_some","serialize_str","serialize_struct","serialize_struct_variant","serialize_tuple","serialize_tuple_struct","serialize_tuple_variant","serialize_u16","serialize_u32","serialize_u64","serialize_u8","serialize_unit","serialize_unit_struct","serialize_unit_variant","serialize_value","to_z_data","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","vzip","vzip","vzip","vzip","vzip","Binop","Binop2","Call","Call0","Call2","Dummy","Emit","Error","If","Let","LetRec","Lookup","Outermost","Tail","Terminal","Unop","ZCont","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","from","hash_components","init","into","layout_raw","pointer_metadata","serialize","to_owned","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Char","Comm","Cons","EmptyStr","Fun","Key","Nil","Num","RootKey","RootSym","Str","Sym","Thunk","UInt","ZExpr","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_ptr","header","init","into","layout_raw","pointer_metadata","serialize","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip","z_ptr","arg","body","closed_env","ZContPtr","ZExprPtr","ZPtr","arbitrary_with","borrow","borrow_mut","clone","clone_into","cmp","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","fmt","fmt","from","from_base32","from_lurk_str","from_lurk_str","from_parts","get_hash","hash","header","init","into","into_hash_components","layout_raw","partial_cmp","parts","pointer_metadata","serialize","tag","tag_field","to_base32","to_owned","to_string","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","value","vzip","ZStore","arbitrary_with","borrow","borrow_mut","clone","clone_into","cont_map","default","deref","deref_mut","deserialize","deserialize","drop","eq","equivalent","equivalent","equivalent","expr_map","fmt","from","get_cont","get_expr","immediate_z_expr","init","insert_expr","insert_z_expr","into","layout_raw","new","new_with_expr","nil_z_ptr","pointer_metadata","put_string","put_symbol","serialize","to_owned","to_store","to_store_with_z_ptr","to_z_store","try_from","try_into","type_id","upcast_any_box","upcast_any_mut","upcast_any_ref","vzip"],"q":[[0,"lurk"],[100,"lurk::circuit"],[105,"lurk::circuit::circuit_frame"],[182,"lurk::circuit::gadgets"],[186,"lurk::circuit::gadgets::circom"],[190,"lurk::circuit::gadgets::constraints"],[191,"lurk::circuit::gadgets::data"],[278,"lurk::circuit::gadgets::pointer"],[388,"lurk::cli"],[393,"lurk::cli::backend"],[417,"lurk::cli::repl"],[438,"lurk::config"],[536,"lurk::cont"],[585,"lurk::cont::Continuation"],[617,"lurk::coprocessor"],[628,"lurk::coprocessor::circom"],[629,"lurk::coprocessor::circom::non_wasm"],[660,"lurk::coprocessor::trie"],[878,"lurk::error"],[973,"lurk::eval"],[1212,"lurk::eval::lang"],[1335,"lurk::expr"],[1420,"lurk::field"],[1523,"lurk::hash"],[1661,"lurk::hash_witness"],[2038,"lurk::lem"],[2311,"lurk::lem::circuit"],[2353,"lurk::lem::eval"],[2357,"lurk::lem::interpreter"],[2465,"lurk::lem::pointers"],[2543,"lurk::lem::store"],[2598,"lurk::lem::zstore"],[2626,"lurk::package"],[2654,"lurk::parser"],[2695,"lurk::parser::base"],[2742,"lurk::parser::error"],[2824,"lurk::parser::position"],[2856,"lurk::parser::position::Pos"],[2862,"lurk::parser::string"],[2900,"lurk::parser::syntax"],[2921,"lurk::proof"],[2943,"lurk::proof::groth16"],[3020,"lurk::proof::nova"],[3123,"lurk::proof::supernova"],[3282,"lurk::ptr"],[3388,"lurk::public_parameters"],[3392,"lurk::public_parameters::error"],[3423,"lurk::repl"],[3495,"lurk::state"],[3533,"lurk::store"],[3799,"lurk::symbol"],[3868,"lurk::syntax"],[3907,"lurk::tag"],[4143,"lurk::uint"],[4185,"lurk::writer"],[4188,"lurk::z_data"],[4236,"lurk::z_data::serde"],[4269,"lurk::z_data::serde::de"],[4321,"lurk::z_data::serde::ser"],[4466,"lurk::z_data::z_cont"],[4514,"lurk::z_data::z_cont::ZCont"],[4546,"lurk::z_data::z_expr"],[4595,"lurk::z_data::z_expr::ZExpr"],[4598,"lurk::z_data::z_ptr"],[4647,"lurk::z_data::z_store"],[4693,"core::clone"],[4694,"rkyv::with"],[4695,"core::result"],[4696,"serde::de"],[4697,"core::cmp"],[4698,"core::fmt"],[4699,"core::fmt"],[4700,"core::marker"],[4701,"core::hash"],[4702,"core::fmt"],[4703,"core::alloc::layout"],[4704,"serde::ser"],[4705,"alloc::string"],[4706,"core::any"],[4707,"alloc::alloc"],[4708,"alloc::boxed"],[4709,"core::any"],[4710,"alloc::sync"],[4711,"bellpepper_core::gadgets::num"],[4712,"bellpepper_core::constraint_system"],[4713,"bellpepper_core::constraint_system"],[4714,"bellperson::groth16::verifying_key"],[4715,"bellperson::groth16::proof"],[4716,"blstrs::scalar"],[4717,"bellpepper_core::gadgets::boolean"],[4718,"ff"],[4719,"core::ops::function"],[4720,"camino"],[4721,"std::collections::hash::map"],[4722,"anyhow"],[4723,"pasta_curves::pallas"],[4724,"camino"],[4725,"std::io"],[4726,"core::default"],[4727,"core::cell"],[4728,"alloc::rc"],[4729,"core::error"],[4730,"nova_snark::errors"],[4731,"core::marker"],[4732,"core::convert"],[4733,"indexmap::map"],[4734,"serde::de"],[4735,"neptune::poseidon"],[4736,"typenum::generated::consts"],[4737,"nom::traits"],[4738,"nom::internal"],[4739,"bellpepper_core::util_cs::test_cs"],[4740,"pairing"],[4741,"pairing"],[4742,"bellperson::groth16::aggregate::srs"],[4743,"rand_core"],[4744,"bellperson::groth16::aggregate::srs"],[4745,"nova_snark::traits"],[4746,"nova_snark::traits::circuit_supernova"],[4747,"nova_snark::supernova"],[4748,"nova_snark::supernova::error"],[4749,"serde_json::error"],[4750,"std::io::error"],[4751,"std::path"],[4752,"core::convert"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","Global config for parallelism.","","","","","","","","","","","","","","","","","The finite field used in the language.","","","","Returns the argument unchanged.","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","","","Lurk Evaluation Model (LEM)","","","","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","This module offers a connection the the backend proving …","","","","","This module implements an abstraction for the Lurk state, …","","","","","","","","","","","","","","","","","","","","","","","","","<code>ZData</code> is a lightweight binary data serialization format.","","","","","","","","","","","","","","","","","","","Return the circuit index assigned to this <code>MultiFrame</code>’s …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a Groth16 Lurk proof.","","","","Usage of circom coprocessors.","","","","An interface to declare a new type of Circom gadget. It …","","","","This could now use alloc_is_zero to avoid duplication.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Allocated version of <code>ContPtr</code>.","Allocated version of <code>Ptr</code>.","","","","","","","","","","","","","","","","","","","","","Takes a boolean and returns an allocated pointer …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Enforce equality of two allocated pointers given an …","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","Takes two allocated numbers (<code>a</code>, <code>b</code>) and returns <code>a</code> if the …","","","","","","","","","","","","","","","","","","","","","","","","","","Parses CLI arguments and continues the program flow …","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Should we use optimized witness-generation when possible?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>CoCircuit</code> is a trait that represents a generalized …","<code>Coprocessor</code> is a trait that represents a generalized …","","","","","Returns true if this Coprocessor actually implements a …","As with all evaluation, the value returned from …","","","The <code>trie</code> module implements a Trie with the following …","Some circom features require non WASM platform features, …","A concrete instantiation of a CircomGadget with a …","TODO: Generalize","","","","","Creates a CircomConfig by loading in the data in …","","","","","TODO: Generalize","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","The defined name of this coprocessor, which is just the …","Creates a CircomCoprocessor and panics if it fails","","","","","","","","","","","","","","","","","","","","","","","","","A sparse Trie.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Add the <code>Trie</code>-associated functions to a <code>Lang</code> with standard …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","How many leaves does this <code>Trie</code> have?","","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. HEIGHT …","Creates a new <code>Trie</code>, saving preimage data in <code>store</code>. Height …","","","","","","","","","","Returns a slice of preimages, corresponding to the path. …","","How many nodes does the <code>row</code>th row have?","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verify a <code>LookupProof</code>. Note that this verification is …","Verify an <code>InsertProof</code>. Note that this verification is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Wraps frames in Result type in order to fail gracefully.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>Binding</code> associates a name (<code>Sym</code>) and <code>Coprocessor</code>. It …","<code>CoProc</code> is an enum that wraps over different …","","<code>DummyCoprocessor</code> is a concrete implementation of the …","<code>Lang</code> is a struct that represents a language with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dummy Coprocessor takes no arguments.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","And does nothing but return nil. It should probably never …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The BN256 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","THe Grumpkin scalar field,","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The default secret for non-hiding commitments","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","","","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","","","Attempts to convert the field element to a u64","Converts the first 16 bytes of the field element to a u128","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","Holds the constants needed for poseidon hashing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Precompute the witness blocks for all the named hashes.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Add(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>And(y, a, b)</code> binds <code>y</code> to the conjunction of <code>a</code> and <code>b</code>","A block is a sequence of operations followed by a control. …","<code>Call(ys, f, xs)</code> binds <code>ys</code> to the results of <code>f</code> applied to <code>xs</code>","<code>Cast(y, t, x)</code> binds <code>y</code> to a pointer with tag <code>t</code> and the hash …","<code>Cons2(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 2 children …","<code>Cons3(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 3 children …","<code>Cons4(x, t, ys)</code> binds <code>x</code> to a <code>Ptr</code> with tag <code>t</code> and 4 children …","","The basic control nodes for LEM logical paths.","<code>Decons2([a, b], x)</code> binds <code>a</code> and <code>b</code> to the 2 children of <code>x</code>","<code>Decons3([a, b, c], x)</code> binds <code>a</code>, <code>b</code> and <code>c</code> to the 3 children …","<code>Decons4([a, b, c, d], x)</code> binds <code>a</code>, <code>b</code>, <code>c</code> and <code>d</code> to the 4 …","<code>Div(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>DivRem64(ys, a, b)</code> binds <code>ys</code> to <code>(a / b, a % b)</code> as if they …","<code>Emit(v)</code> simply prints out the value of <code>v</code> when interpreting …","<code>EqTag(y, a, b)</code> binds <code>y</code> to the boolean <code>a.tag == b.tag</code>","<code>EqVal(y, a, b)</code> binds <code>y</code> to the boolean <code>a.val == b.val</code>","","A <code>Func</code> is a LEM function. It consist of input params, …","<code>Hide(x, s, p)</code> binds <code>x</code> to a (comm) <code>Ptr</code> resulting from …","<code>If(x, true_block, false_block)</code> runs <code>true_block</code> if <code>x</code> is …","LEM literals","<code>Lit(x, l)</code> binds <code>x</code> to the pointer representing that <code>Lit</code>","<code>Lt(y, a, b)</code> binds <code>y</code> to <code>1</code> if <code>a &lt; b</code>, or to <code>0</code> otherwise","<code>MatchSymbol(x, cases, def)</code> requires that <code>x</code> is a symbol and …","<code>MatchTag(x, cases, def)</code> checks whether the tag of <code>x</code> …","<code>Mul(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","<code>Not(y, a)</code> binds <code>y</code> to the negation of <code>a</code>","<code>Null(x, t)</code> binds <code>x</code> to a <code>Ptr::Leaf(t, F::zero())</code>","","The atomic operations of LEMs.","","","<code>Open(s, p, h)</code> binds <code>s</code> and <code>p</code> to the secret and payload …","<code>Or(y, a, b)</code> binds <code>y</code> to the disjunction of <code>a</code> and <code>b</code>","<code>Return(rets)</code> sets the output to <code>rets</code>","","<code>Sub(y, a, b)</code> binds <code>y</code> to the sum of <code>a</code> and <code>b</code>","","LEM tags","<code>Trunc(y, a, n)</code> binds <code>y</code> to <code>a</code> truncated to <code>n</code> bits, up to 64 …","LEM variables","","Asserts that all paths were visited by a set of frames. …","","","","","","","","","","","","","","","","","Calls a <code>Func</code> on an input until the stop contidion is …","","Performs the static checks described in LEM’s docstring.","Constraint system for LEM","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Instantiates a <code>Func</code> with the appropriate transformations …","Computes the number of constraints that <code>synthesize</code> should …","Computes the number of possible paths in a <code>Func</code> can take","","","","","","","","","","","","","Create R1CS constraints for a LEM function given an …","Helper API for tests","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unrolls a function of equal input/output sizes <code>n</code> times","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Manages global allocations for constants in a constraint …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Lurk’s step function","","","","","","","A <code>Frame</code> carries the data that results from interpreting a …","","","<code>Preimages</code> hold the non-deterministic advices for hashes …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>Ptr</code> is the main piece of data LEMs operate on. We can …","","","","","","","<code>ZChildren</code> keeps track of the children of <code>ZPtr</code>s, in case …","A <code>ZPtr</code> is the result of “hydrating” a <code>Ptr</code>. This …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The <code>Store</code> is a crucial part of Lurk’s implementation and …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Recursively hashes the children of a <code>Ptr</code> in order to …","","","Hashes <code>Ptr</code> trees from the bottom to the top, avoiding deep …","","Creates a <code>Ptr</code> that’s a parent of two children","Similar to <code>intern_2_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of three children","Similar to <code>intern_3_ptrs</code> but doesn’t add the resulting …","Creates a <code>Ptr</code> that’s a parent of four children","Similar to <code>intern_4_ptrs</code> but doesn’t add the resulting …","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Tries to import a list of symbols so they become …","","Given a symbol name, returns the corresponding symbol if it…","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Import the local symbols of another package","","Contains the error value","","","","Contains the success value","","","","","","","","","","","","","","","Extra information that can be embedded by the user. …","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Get the code corresponding to the base algorithm.","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Source code position of an expression in a file","","","","","","","","","","","","","","","","Returns the argument unchanged.","Construct a position from the difference of two Spans","","Calls <code>U::from(self)</code>.","","","Use the range information in a Position to pretty-print …","","","","","","","","","","","","","","","","","","A string fragment contains a fragment of a string being …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Parse an escaped character: \\\\n, \\\\t, \\\\r, \\\\u{00AC}, etc.","Parse a backslash, followed by any amount of whitespace. …","Combine parse_literal, parse_escaped_whitespace, and …","","Parse a string with the outer delimiter characters","Parse a string. Use a loop of parse_fragment and push all …","Parse a non-empty string. Use a loop of parse_fragment and …","Parse a unicode sequence, of the form u{XXXX}, where XXXX …","","","","","","","","","","","","","","","","","","","","","","","","","relative: foo.bar absolute: .foo.bar.baz, :foo.bar …","","","","","","Supertrait for <code>Prover</code> that also supports NIVC.","A trait for provable structures over a field <code>F</code>.","A trait for a prover that works with a field <code>F</code>.","A trait representing the public parameters for a proving …","The associated public parameters type for the prover.","Returns the expected total number of iterations for the …","Returns the number of padding frames needed for a given …","Evaluates and generates the <code>Frame</code>s of the computation …","An adapter to a Groth16 proving system implementation.","Returns a reference to the Prover’s Lang.","Returns the number of padding multiframes needed for a …","Determines if the prover needs padding for a given total …","Determines if the prover needs padding for a given raw …","Creates a new prover with the specified number of …","An adapter to a Nova proving system implementation.","Synthesizes the outer circuit for the prover given a slice …","Returns the size of the public inputs.","Returns the public inputs of the provable structure.","Returns the number of reductions in the provable structure.","Returns the number of reductions for the prover.","An adapter to a SuperNova proving system implementation.","Verifies a sequence of constraint systems (CSs) for …","A prover struct for the Groth16 proving system. Implements …","The SRS for the inner product argument.","A struct representing a proof using the Groth16 proving …","Public parameters for the Groth16 proving system. …","A domain separator for the transcript.","","","","","","","","","Creates Groth16 parameters using the given reduction count.","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Generates an outer Groth16 proof using the given …","","","","The aggregate proof and instance.","The number of proofs in the aggregate proof.","Generates a Groth16 proof using the given multi_frame, …","","The number of reductions used in the proof.","","","","","","","","","","","","","","","","","","","","","Verifies an aggregated Groth16 proof using the given …","Verifies a single Groth16 proof using the given …","","","","Type alias for a MultiFrame with S1 field elements. This …","Type alias for a Trivial Test Circuit with G2 scalar field …","The commitment engine type for the first curve in the …","The commitment engine type for the second curve in the …","Why the next 4 types?","The type of the commitment key used for points of the …","A proof for the final step of a recursive computation","This trait defines most of the requirements for …","Type alias for the Evaluation Engine using G1 group …","Type alias for the Evaluation Engine using G2 group …","Convenience alias for the primary group type pegged to a …","The group type for the first curve in the cycle.","Convenience alias for the secondary group type pegged to a …","The  group type for the second curve in the cycle.","A struct for the Nova prover that operates on field …","Type alias for Nova Public Parameters with the curve cycle …","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","Type alias for the Relaxed R1CS Spartan SNARK using G1 …","Type alias for the Relaxed R1CS Spartan SNARK using G2 …","","","","","","","","","","Compresses the proof using a (Spartan) Snark (finishing …","","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","Generates the public parameters for the Nova proving …","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the public parameters, the number …","","","","A proof for the final step of a recursive computation","Folding configuration specifies <code>Lang</code> and can be either <code>IVC</code> …","IVC: a single circuit implementing the <code>Lang</code>’s reduction …","NIVC: each folding step will use one of a fixed set of …","One step of an NIVC computation","All steps of an NIVC computation","An enum representing the two types of proofs that can be …","A struct that contains public parameters for the Nova …","A proof for the intermediate steps of a recursive …","A struct for the Nova prover that operates on field …","Type alias for SuperNova Public Parameters with the curve …","","","","","","","","","","","","","","Return the circuit index assigned in this <code>FoldingConfig</code> to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Evaluates and proves the computation given the public …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Separate frames according to NIVC circuit requirements.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return a reference to the contained <code>Lang</code>.","","","","","","","","Create a new IVC config for <code>lang</code>.","Create a new NIVC config for <code>lang</code>.","Return the total number of NIVC circuits potentially …","","Number of NIVC steps contained.","","","","","","","","Proves the computation given the public parameters, …","Proves the computation recursively, generating a recursive …","","Return contained reduction count.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Verifies the proof given the claim, which (for now), …","","","","","","","","A <code>Store</code> pointer","Index represents a pointer into one of several possible …","Null is used to represent ZPtrs with hash digests of …","Opaque represents pointers to expressions whose hashes are …","","The internal untagged raw Store pointer","","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","PhantomData is needed to consume the <code>F: LurkField</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","get the index of a RawPtr","Construct a Ptr from an index","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","check if a Ptr is atomic pointer","check if a Ptr is a <code>Cons</code> pointer","","","","","","check if a Ptr is <code>Nil</code> pointer","check if a RawPtr is Null","check if a RawPtr is Opaque","check if a Ptr is an opaque pointer","","","","","","","","Construct a new RawPtr, with default <code>Index</code> (as the most …","","Construct a null Ptr","Construct a Ptr from an opaque index","get the index of an Opaque RawPtr","","","","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","The underlying pointer, which can be null, opaque, or an …","An expression tag","An expression tag","An expression tag","","","","","","","","","","","","","","","","","","","","Attempts to extract abomonated public parameters. To avoid …","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Keeps track of the current package for symbol resolution …","Adds a package to a state","","","","","","","","","Formats a symbol to string w.r.t. the current package","Returns the argument unchanged.","Returns the name of the current package","Imports a set of symbols to the current package","","Initiates the Lurk state with the appropriate structure of …","Returns a shared reference to the initial Lurk state","Interns a symbol into the current package","Call <code>intern_fold</code> w.r.t. the root package","Call <code>intern_fold</code> w.r.t. the current package","Calls <code>U::from(self)</code>.","","Returns the symbol in the Lurk package given the symbol …","Returns the symbol corresponding to the name of the meta …","Creates a new state with a given package as the current one","","Wraps a state with <code>Rc&lt;RefCell&lt;...&gt;&gt;</code>","Returns the resolved (fully-qualified) symbol given a …","Sets the current package of the state","","","","","","","Imports all symbols from a certain package","Returns the symbol in the user package given the symbol …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains Ptrs which have not yet been hydrated.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a <code>Vec</code> of <code>Ptr</code>s representing the elements of a …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Caches poseidon preimages","","","","","","","","","","","","","","","","","","","","","","","","","Holds opaque continuation pointers","Holds opaque pointers","","","","","","","","Caches poseidon hashes","","","","","","","","","","","","","Holds a Str, which is a char head and a string tail","","","","","","Holds a Sym or Key which is a string head and a symbol tail","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>ContPtr&lt;F&gt;</code> for reverse …","","Holds a mapping of <code>ZExprPtr</code> -&gt; <code>Ptr</code> for reverse lookups","","","","","","Type for hierarchical symbol names.","","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","Returns true if the <code>Symbol</code> is the root symbol","","","","","","","","","","","","","Creates a new <code>Symbol</code> with an empty path.","Creates a new <code>Symbol</code> with an empty path.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","A tag for continuations. Note that ExprTag, ContTag, Op1, …","","","","","","","","","A tag for expressions. Note that ExprTag, ContTag, Op1, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","<code>ZData</code> is a binary tree with two types of nodes: <code>Atom</code> and …","","","","Returns the number of bytes required to encode the given …","","","","","","","","","","","","","Returns the argument unchanged.","Deserializes a <code>ZData</code> from a <code>&amp;[u8]</code>.","","","","Calls <code>U::from(self)</code>.","","","Returns the <code>usize</code> that’s represented by a little endian …","","Returns the tag byte for this <code>ZData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","Serializes this <code>ZData</code> into a <code>Vec&lt;u8&gt;</code>.","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A function call with one argument","A function call with no arguments","A nested function call","","","","","","","","The outermost continuation, meaning no further …","","","","A <code>ZCont</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Creates a list of field elements corresponding to the <code>ZCont</code>…","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Hashes the <code>ZCont</code> field representation and creates a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A commitment, which contains an opaque value and a pointer …","A cons list of <code>ZExprPtr</code>s","","","","A null expression","A field element representing a number","","","Contains a string and a pointer to the tail.","Contains a symbol (a list of strings) and a pointer to the …","An unevaluated expression and continuation","","A <code>ZExpr</code> is the content-addressed representation of a Lurk …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Constructs a <code>ZExpr</code> by fetching <code>ptr</code>’s expression from the …","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Constructs a <code>ZExprPtr</code> from a <code>ZExpr</code>, creating a Poseidon …","","","","Alias for a continuation pointer","Alias for an expression pointer","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Converts a base32-encoded string to a ZPtr","Parses and hashes a Lurk source string into a ZExprPtr","Parses and hashes a Lurk source string into a ZExprPtr","Creates a ZPtr from a tag and a value","","","","","Calls <code>U::from(self)</code>.","","","","","","","Returns the tag","Returns the tag in field representation","Converts the ZPtr to a base32-encoded string","","","","","","","","","Returns the value","","A <code>ZStore</code> is a content-addressed, serializable …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the owned <code>ZCont</code> corresponding to <code>ptr</code> if the former …","Returns the owned <code>ZExpr</code> corresponding to <code>ptr</code> if the former …","Returns the <code>ZExpr</code> immediately corresponding to the <code>ZExprPtr</code>…","","Converts a Lurk expression to a <code>ZExpr</code> and stores it in the …","If the entry is not present, or the pointer is immediate, …","Calls <code>U::from(self)</code>.","","Creates a new, empty <code>ZStore</code>","Creates a new <code>ZStore</code> and adds all <code>ZExprPtrs</code> reachable from …","Stores a null symbol in the <code>ZStore</code> and returns the …","","Stores a string in the <code>ZStore</code> and returns the resulting …","Stores a symbol in the <code>ZStore</code> and returns the resulting …","","","","","Converts an entire store to a <code>ZStore</code> WARNING: This will …","","","","","","",""],"i":[0,1,0,0,1,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,0,1,0,0,0,0,1,1,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,256,256,0,0,36,38,36,38,36,38,36,36,36,38,36,38,36,36,38,36,38,36,38,36,0,38,36,38,36,36,36,38,36,38,36,36,38,36,38,36,38,36,38,36,36,38,36,38,36,38,36,36,36,36,38,36,36,36,36,36,36,38,36,38,36,38,36,38,36,38,36,38,36,38,36,36,38,36,38,0,0,0,0,0,88,88,88,0,0,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,0,0,43,51,43,51,51,43,51,43,51,43,43,43,43,43,51,43,68,43,51,43,43,51,43,51,43,51,43,51,43,51,43,51,51,43,43,43,43,43,51,51,43,43,43,51,43,51,43,51,43,51,43,51,51,43,43,51,43,51,43,51,51,51,51,43,51,43,43,51,43,51,43,43,43,43,43,43,43,43,43,43,43,51,43,51,43,43,51,43,43,51,43,51,43,51,43,51,43,51,43,51,43,51,43,51,43,51,43,0,0,0,0,0,0,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,0,79,0,79,79,0,79,80,81,82,79,80,81,82,79,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,79,79,80,81,82,79,82,79,80,81,82,80,81,80,80,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,79,80,81,82,82,71,71,71,71,71,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,257,258,259,260,261,262,263,264,265,266,267,257,258,268,266,261,264,265,266,259,260,261,262,263,265,257,258,260,265,267,257,258,0,0,269,0,37,37,37,37,269,37,0,0,0,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,0,0,0,89,0,0,89,0,0,95,89,0,0,0,0,89,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,89,90,91,92,89,90,91,92,270,90,91,92,94,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,95,89,90,90,91,91,92,92,94,96,97,95,89,90,91,92,94,96,97,94,89,90,91,92,89,95,89,90,91,92,94,96,97,95,89,89,89,89,90,91,92,94,96,97,89,95,89,90,91,92,94,96,97,94,0,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,94,94,94,94,95,89,90,91,92,94,96,97,94,94,94,94,90,91,92,89,90,91,92,89,89,90,91,92,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,95,89,90,91,92,94,96,97,96,97,95,89,90,91,92,94,96,97,103,104,0,103,105,0,105,0,103,105,105,103,104,105,103,104,105,103,104,103,104,103,104,105,103,104,105,103,104,105,103,104,105,103,104,105,105,103,103,104,104,105,105,105,105,105,103,103,104,105,103,104,105,103,104,105,103,104,105,103,104,105,103,104,105,103,104,105,103,103,104,105,103,104,105,103,104,105,103,104,105,103,104,105,103,104,105,103,104,105,103,104,105,103,104,41,109,0,0,0,0,0,109,41,0,0,109,0,49,109,47,41,49,109,112,48,110,47,41,49,109,112,48,110,47,41,49,109,48,47,41,49,109,48,47,41,109,47,41,49,109,112,48,110,47,41,49,109,112,48,110,47,41,49,109,109,112,48,110,47,41,49,109,112,48,110,0,47,47,41,49,109,48,47,47,47,41,41,41,49,49,49,109,109,109,48,48,48,110,0,47,47,47,47,41,49,109,112,48,110,47,41,49,109,109,112,48,110,110,41,110,47,49,47,41,49,109,112,48,110,110,49,47,47,41,49,109,112,48,110,112,271,47,49,109,41,271,47,109,109,41,271,47,109,110,0,47,41,49,109,112,48,110,271,47,49,47,49,110,112,49,47,41,49,109,112,48,110,49,271,47,109,49,271,47,109,47,47,41,49,109,48,47,47,47,41,49,109,112,48,110,47,41,49,109,112,48,110,47,41,49,109,112,48,110,47,41,49,109,112,48,110,47,41,49,109,112,48,110,47,41,49,109,112,48,110,47,41,49,109,112,48,110,49,0,0,118,0,0,100,100,118,119,118,100,115,119,118,100,115,119,118,100,119,118,100,100,100,100,119,118,100,115,119,118,100,115,119,119,118,118,100,100,115,119,118,100,115,119,118,118,119,118,100,115,119,118,118,100,115,115,100,100,100,100,118,100,119,118,100,115,119,118,100,115,100,100,119,118,100,115,100,100,100,115,100,119,118,100,115,119,118,100,119,118,118,119,118,100,119,118,100,115,119,118,100,115,119,118,100,115,119,118,100,115,119,118,100,115,119,118,100,115,119,118,100,115,124,124,124,124,0,124,124,124,124,124,124,124,124,0,124,124,123,123,123,124,123,124,123,124,123,124,123,123,124,123,124,123,124,123,124,123,124,123,124,124,124,123,123,123,124,124,123,124,123,123,123,123,124,123,124,123,124,124,124,124,124,124,124,124,124,123,124,123,124,123,124,123,124,123,124,123,124,123,124,123,124,123,123,124,123,125,125,3,0,125,0,0,3,125,125,125,126,125,126,125,126,125,126,125,126,126,125,126,125,126,125,125,126,126,125,126,125,126,125,125,125,126,126,126,125,125,126,125,126,3,3,3,3,3,3,3,3,3,3,126,126,125,3,125,126,125,126,3,125,126,3,3,126,125,126,125,126,3,3,3,3,3,3,125,126,125,3,3,3,3,3,3,3,3,125,126,125,126,125,126,125,126,125,126,125,126,125,126,142,141,142,141,142,141,142,141,0,0,0,0,0,0,142,141,135,101,143,142,141,135,101,143,135,135,135,135,141,142,135,101,142,135,101,101,135,101,143,135,101,143,142,141,135,101,143,142,141,135,101,143,142,141,135,101,143,142,141,135,101,143,142,141,135,101,143,142,142,141,135,101,143,143,101,101,101,101,142,141,135,101,143,143,142,141,135,101,143,66,142,141,135,101,143,142,141,135,101,143,142,135,101,142,141,135,101,143,142,141,135,101,143,142,141,135,101,143,142,141,135,101,143,142,141,135,101,143,142,141,135,101,143,142,141,135,101,143,70,69,69,147,157,149,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,147,157,149,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,0,0,0,69,69,69,70,70,0,0,70,69,70,69,69,70,70,0,0,0,0,153,0,69,69,69,69,147,157,149,0,144,144,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,148,154,147,149,150,144,150,144,148,154,151,52,53,151,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,155,147,149,148,154,150,144,155,156,156,69,70,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,149,148,156,69,70,144,151,149,149,149,148,148,148,156,156,156,69,69,69,70,70,70,144,144,144,150,144,157,149,158,144,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,151,144,69,70,69,70,52,53,151,145,69,70,149,148,154,155,156,69,70,144,151,157,149,158,144,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,144,151,52,53,151,144,144,144,149,148,154,155,156,69,70,144,151,272,153,148,154,155,156,150,158,144,147,149,150,144,144,144,153,148,156,149,148,154,155,156,69,70,144,151,153,149,148,156,144,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,149,148,154,155,156,69,70,144,151,0,171,171,0,171,171,171,171,171,167,0,171,171,171,171,171,171,171,171,167,0,171,170,0,171,171,170,170,171,171,171,168,0,167,167,171,171,170,168,171,168,0,171,0,160,160,160,160,166,167,168,169,170,171,160,166,167,168,169,170,171,160,160,160,160,0,160,166,167,168,169,170,171,160,166,167,168,169,170,171,169,160,166,167,168,169,170,171,160,166,167,168,169,170,171,160,166,167,167,168,169,170,171,160,166,167,168,169,170,171,160,166,167,168,169,170,171,160,160,160,166,166,166,167,167,167,168,168,168,169,169,169,170,170,170,171,171,171,0,160,166,166,167,167,168,169,170,171,160,160,166,167,168,169,170,171,167,168,166,167,168,166,167,168,166,167,160,166,167,168,169,170,171,160,160,0,160,166,167,168,169,170,171,160,166,167,168,169,170,171,166,160,160,160,160,160,160,166,167,168,169,170,171,0,167,160,0,160,160,167,167,160,166,167,168,169,170,171,168,166,167,160,166,167,167,168,169,170,171,160,166,167,168,169,170,171,160,166,167,168,169,170,171,160,160,166,167,168,169,170,171,160,166,167,168,169,170,171,160,166,167,168,169,170,171,160,166,167,168,169,170,171,0,0,173,0,173,173,173,162,173,162,162,173,162,173,162,173,162,173,162,173,162,173,162,173,162,173,162,173,162,173,162,173,162,173,162,173,162,173,162,173,162,173,162,0,0,0,0,273,174,174,0,273,0,0,174,0,164,165,165,273,174,164,165,273,174,164,165,164,174,164,165,174,164,165,164,164,165,273,174,164,165,273,174,164,165,273,174,164,165,273,174,164,165,174,164,165,273,174,164,165,164,164,164,273,174,164,165,165,273,174,164,165,273,174,164,165,164,164,165,273,174,164,165,165,174,164,165,273,174,164,165,273,174,164,165,273,174,164,165,273,174,164,165,273,174,164,165,273,174,164,165,273,174,164,165,163,175,0,163,175,163,175,163,175,0,0,163,175,163,175,163,163,163,163,163,163,163,175,163,175,163,163,175,175,163,175,163,163,163,163,163,175,163,163,175,163,163,163,163,163,163,163,175,163,175,163,163,163,175,163,163,163,163,175,163,175,163,163,163,175,163,175,163,175,163,163,175,163,175,163,175,163,175,0,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,0,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,0,0,180,180,180,180,180,180,180,180,0,0,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,184,0,0,179,184,0,0,179,179,0,179,179,179,179,179,179,179,179,0,178,179,179,179,179,179,179,179,179,179,0,0,0,179,179,179,179,179,179,179,179,179,183,183,183,0,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,0,183,0,0,0,0,0,0,0,183,183,183,183,183,183,183,183,183,183,190,190,190,190,190,190,190,0,0,190,190,186,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,190,190,190,186,186,186,186,186,190,190,186,186,190,186,186,190,186,190,186,186,190,186,190,190,186,0,186,186,186,190,186,186,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,190,186,192,0,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,274,274,274,274,274,274,193,193,193,0,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,0,0,0,0,0,0,0,0,193,193,193,193,193,193,193,193,193,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,275,275,275,275,0,275,275,275,275,275,0,275,276,276,276,275,0,0,0,0,0,0,0,198,195,199,198,195,199,195,195,199,198,195,199,198,195,199,198,195,195,199,198,195,199,195,199,198,195,199,198,195,199,198,195,199,199,198,195,199,199,199,198,195,199,195,195,199,199,195,195,195,198,195,199,198,195,199,198,195,199,198,195,199,198,195,199,198,195,199,199,199,198,195,199,0,0,206,206,206,206,207,0,0,0,0,206,0,206,0,0,0,0,207,0,0,205,207,208,205,207,208,209,205,205,207,209,205,207,208,205,207,208,205,205,207,207,208,205,207,208,205,208,205,205,208,209,209,205,207,208,205,207,208,209,205,207,208,208,205,207,208,209,208,209,205,207,208,208,207,0,208,205,207,209,205,205,207,208,205,207,208,205,207,208,205,207,208,205,207,208,205,207,208,207,205,207,208,212,0,39,39,0,0,0,0,212,0,0,210,214,211,212,213,39,210,214,211,212,213,39,210,39,210,211,39,210,211,39,210,214,211,212,213,39,210,214,211,212,213,39,210,214,211,211,212,212,213,39,210,214,211,212,213,39,210,211,213,211,211,213,39,210,214,211,212,213,39,210,214,214,214,211,212,213,39,210,214,211,212,213,39,210,213,39,214,211,212,213,39,210,213,39,39,39,210,214,214,211,212,213,39,210,210,213,212,213,39,211,212,210,211,39,210,214,211,212,213,39,210,214,211,212,213,39,210,214,211,212,213,39,210,214,211,212,213,39,210,214,211,212,213,39,210,214,211,212,213,39,210,212,214,211,212,213,39,210,0,0,222,222,222,0,0,0,59,65,221,59,221,221,221,222,221,222,221,221,222,221,222,221,222,222,221,222,221,222,221,222,221,222,221,222,222,222,221,221,221,59,65,222,221,59,222,221,222,221,222,221,222,221,222,221,222,221,221,221,65,221,277,59,221,221,222,222,221,277,59,277,59,222,221,65,222,221,221,221,222,222,222,221,59,65,221,59,65,221,222,221,222,221,222,221,222,221,222,221,222,221,222,221,222,221,0,0,0,0,224,0,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,0,0,0,227,229,227,229,227,227,230,227,227,227,229,227,229,227,229,227,229,227,227,227,229,227,229,230,230,230,230,227,230,227,227,229,227,229,227,227,229,227,230,227,230,227,227,229,227,229,230,227,230,227,0,0,0,229,227,227,229,227,229,227,229,227,229,227,229,227,229,227,229,0,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,0,84,84,84,84,84,0,0,84,84,84,84,84,84,84,84,84,84,84,84,0,84,0,0,0,0,107,34,233,233,34,34,34,107,232,233,34,107,232,233,34,34,34,34,233,34,34,233,233,107,232,233,107,232,233,233,34,34,233,34,233,34,34,34,233,34,34,34,34,107,232,233,34,107,232,233,34,107,232,233,233,34,107,232,233,233,233,34,233,233,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,107,107,232,233,34,107,232,233,34,34,34,34,34,34,34,34,34,34,34,34,233,233,34,34,34,34,107,34,34,233,34,233,34,107,34,107,232,233,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,107,232,233,34,34,233,34,107,232,233,233,233,233,34,233,34,34,34,34,233,34,233,34,233,34,233,233,34,34,34,34,233,34,34,107,232,233,34,233,232,34,233,233,34,34,34,34,233,34,34,34,34,233,34,233,34,34,34,233,34,34,107,232,233,107,34,34,34,34,107,232,233,34,107,232,233,34,107,232,233,233,34,34,34,107,232,233,34,107,232,233,34,107,232,233,34,232,34,107,232,233,34,34,34,34,232,0,0,0,0,0,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,177,177,177,177,177,177,177,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,130,131,83,83,83,83,83,130,130,129,130,129,130,130,129,131,0,131,83,83,130,131,83,130,131,0,129,131,131,131,83,129,131,131,83,83,83,131,129,129,130,131,0,0,0,130,83,131,131,130,129,131,131,129,0,83,83,129,129,130,83,278,130,131,278,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,129,129,83,83,130,130,131,131,129,83,130,131,129,83,130,131,129,129,129,83,83,83,130,130,130,131,131,131,129,129,83,83,130,130,131,131,129,83,130,131,223,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,129,131,129,129,129,83,130,131,130,131,129,83,130,131,129,83,130,131,278,130,131,278,130,131,223,129,83,130,131,223,129,83,130,131,129,83,130,131,129,83,130,131,129,129,83,83,130,130,131,131,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,129,83,130,131,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,279,279,239,239,0,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,0,239,239,239,239,239,239,0,239,239,239,239,239,239,239,0,239,239,239,239,239,239,239,0,0,0,0,240,0,240,240,240,240,240,240,0,240,240,240,240,240,240,240,0,240,240,240,240,240,240,0,240,0,240,240,240,240,240,240,240,0,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,0,241,241,241,241,241,241,241,241,241,241,241,241,241,0,0,0,0,0,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,243,243,243,244,245,246,246,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,247,247,243,244,245,246,247,243,244,245,246,247,247,247,243,243,247,247,243,245,246,246,247,247,247,247,244,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,244,0,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,247,243,244,245,246,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,0,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,280,281,282,283,284,285,286,287,288,289,290,280,281,291,289,284,287,288,289,282,283,284,285,286,288,280,281,283,288,290,280,281,236,236,236,236,236,236,236,236,236,236,236,236,236,236,0,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,292,292,292,0,0,0,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,63,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,0,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234],"f":[0,0,0,0,0,0,[[[1,[-1]],[1,[-1]]],2,3],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[1,[-1]]],[[1,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[1,[-2]]]]],8,3],[[[1,[-1]],[1,[-1]]],2,3],[5,2],[[[1,[-1]],[1,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,0,0,[[[1,[-1]],11],12,3],[[[1,[-1]],11],12,[13,3]],[14,[[1,[-1]]],3],[-1,-1,[]],[15,[[1,[-1]]],3],[-1,[[1,[-1]]],3],0,[[-1,-2],15,[16,17],18],0,[[[1,[-1]],-2],2,3,19],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[1,[-1]]],-1,3],[[[1,[-1]]],9,3],[[[1,[-1]]],9,3],0,[[],[[7,[24,25]]]],0,0,0,0,[[],[[1,[-1]]],3],[[],[[1,[-1]]],3],[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,[[[1,[-1]],[1,[-1]]],[[27,[26]]],3],[[]],0,0,0,0,[[[1,[-1]],-2],7,3,28],0,0,0,[[[1,[-1]],[1,[-1]]],2,3],0,0,0,0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[],5],[[-1,[34,[-2]]],[[35,[-2]]],[],[]],0,0,[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[],[[38,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[39,[-1,-2]]]],[41,[-1]]],[[36,[-1,-2]]],3,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[36,[-1,-2]]],5,3,[[37,[-1]]]],[[[38,[-1,-2]]],[[38,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[[36,[-1,-2]]],[[36,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-2,[34,[-1]],[42,[-1]],5,[43,[-1]]],[[7,[[2,[[35,[[43,[-1]]]],[44,[-1]]]],45]]],3,[[46,[-1]]]],[5,2],[5,2],[[[38,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[36,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],0,0,[-1,-1,[]],[-1,-1,[]],[[[49,[[47,[-1]],[48,[-1]],-1,-2]],[34,[-1]]],[[38,[-1,-2]]],3,[[37,[-1]]]],[[5,[50,[[49,[[47,[-1]],[48,[-1]],-1,-2]]]],[34,[-1]],[40,[[39,[-1,-2]]]]],[[35,[[36,[-1,-2]]]]],3,[[37,[-1]]]],[[[36,[-1,-2]]],[[34,[-1]]],3,[[37,[-1]]]],[[],5],[[],5],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,0,0,[[]],[[]],[[[38,[-1,-2]],[38,[-1,-2]]],9,3,[[37,[-1]]]],[[[36,[-1,-2]],[36,[-1,-2]]],9,3,[[37,[-1]]]],[[],5],[[[36,[-1,-2]]],[[35,[-1]]],3,[[37,[-1]]]],[[[36,[-1,-2]]],5,3,[[37,[-1]]]],0,0,[[[36,[-1,-2]],-3,[50,[[44,[-1]]]]],[[7,[[35,[[44,[-1]]]],45]]],3,[[37,[-1]]],[[46,[-1]]]],[[[36,[-1,-2]],-3],[[7,[2,45]]],3,[[37,[-1]]],[[46,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[43,[-1]],[43,[-1]],[51,[-1]],[50,[[38,[-1,-2]]]],[42,[-1]]],[[2,[[43,[-1]],[43,[-1]],[51,[-1]]]]],3,[[37,[-1]]],[[46,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[43,[-1]],[43,[-1]],[51,[-1]],[50,[[38,[-1,-2]]]],[42,[-1]]],[[2,[[43,[-1]],[43,[-1]],[51,[-1]]]]],3,[[37,[-1]]],[[46,[-1]]]],[[[36,[-1,-2]],-3,[34,[-1]],[43,[-1]],[43,[-1]],[51,[-1]],[50,[[38,[-1,-2]]]],[27,[[35,[[2,[[52,[-1]],[53,[-1]]]]]]]],[42,[-1]]],[[2,[[43,[-1]],[43,[-1]],[51,[-1]]]]],3,[[37,[-1]]],[[46,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[36,[-1]],[55,[54]],[56,[54]]],[[7,[9,45]]],[[37,[57]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[-1,[50,[[43,[-2]]]]],[[35,[[2,[29,[35,[-2]]]]]]],[],[]],[-1,58,[]],[[-1,[34,[-2]],[50,[[59,[-2]]]]],[[59,[-2]]],[],[]],[[-2,[44,[-1]],[44,[-1]]],[[7,[60,45]]],61,[[46,[-1]]]],0,[[-2,-1],[[44,[-1]]],3,[[46,[-1]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[[[42,[-1]]],[[42,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,0,0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,0,0,0,0,0,[[[42,[-1]],11],12,[13,3]],[-1,-1,[]],0,0,[[],5],[-1,-2,[],[]],0,[[],[[7,[24,25]]]],0,0,0,[[-2,[34,[-1]]],[[7,[[42,[-1]],45]]],3,[[46,[-1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],0,0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[[-2,-3],[[7,[[43,[-1]],45]]],3,[[46,[-1]]],62],[[-2,-3],[[7,[[51,[-1]],45]]],3,[[46,[-1]]],62],[[-2,[63,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,[64,[-1]]],[[7,[[51,[-1]],45]]],3,[[46,[-1]]]],[[-2,[34,[-1]],[65,[-1]]],[[7,[[51,[-1]],45]]],3,[[46,[-1]]]],[[-2,[34,[-1]],[59,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,[34,[-1]],-3],[[7,[[51,[-1]],45]]],3,[[46,[-1]]],62],[[[43,[-1]],-2,[43,[-1]]],[[7,[60,45]]],3,[[46,[-1]]]],[[[51,[-1]],-2,[51,[-1]]],[[7,[60,45]]],3,[[46,[-1]]]],[[-2,-3],[[7,[[43,[-1]],45]]],3,[[46,[-1]]],[[66,[-1]]]],[[[43,[-1]],-2,-1],[[7,[60,45]]],3,[[46,[-1]]]],[[-2,[34,[-1]],-3],[[7,[[43,[-1]],45]]],3,[[46,[-1]]],62],[[-2,-1,[44,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[[43,[-1]],-2,-1],[[7,[60,45]]],3,[[46,[-1]]]],[[[51,[-1]],-2,-1],[[7,[60,45]]],3,[[46,[-1]]]],[[[43,[-1]],-2,[34,[-1]]],[[7,[[2,[[44,[-1]],[43,[-1]],[51,[-1]]]],45]]],3,[[46,[-1]]]],[-1,[[67,[[44,[-2]]]]],[],[]],[[[43,[-1]]],[[67,[[44,[-1]]]]],3],[[[51,[-1]]],[[67,[[44,[-1]]]]],3],[[-2,[34,[-1]],60],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,[27,[[59,[-1]]]],[34,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,[27,[[65,[-1]]]],[34,[-1]]],[[7,[[51,[-1]],45]]],3,[[46,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[5,[50,[[44,[-1]]]]],[[43,[-1]]],3],[[5,[50,[[44,[-1]]]]],[[51,[-1]]],3],[[[43,[-1]]],[[43,[-1]]],[4,61]],[[[51,[-1]]],[[51,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-2,[34,[-1]],[44,[-1]],[67,[68]]],[[7,[[51,[-1]],45]]],3,[[46,[-1]]]],[[-2,[42,[-1]],[34,[-1]],[44,[-1]],[43,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,[42,[-1]],[34,[-1]],[43,[-1]],[43,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,[42,[-1]],[43,[-1]],[43,[-1]],69,[0,[69,[0,[-1,[43,[-1]]]]]],60],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,[42,[-1]],[34,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,[42,[-1]],[34,[-1]],[50,[[43,[-1]]]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,70,[44,[-1]],[67,[68]],[0,[70,[0,[-1,[44,[-1]]]]]],60],[[7,[[51,[-1]],45]]],3,[[46,[-1]]]],[[-2,70,[44,[-1]],[67,[68]],[0,[70,[0,[-1,[44,[-1]]]]]]],[[7,[[2,[[51,[-1]],[44,[-1]]]],45]]],3,[[46,[-1]]]],[[-2,[42,[-1]],[34,[-1]],[43,[-1]],[43,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,[42,[-1]],[34,[-1]],[43,[-1]],[51,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[43,[-1]],-2,[43,[-1]]],2,3,[[46,[-1]]]],[[[51,[-1]],-2,[51,[-1]]],2,3,[[46,[-1]]]],[[[51,[-1]],[34,[-1]]],29,3],[[[43,[-1]],[34,[-1]]],29,3],[[[43,[-1]],11],12,3],[[[51,[-1]],11],12,3],[-1,-1,[]],[-1,-1,[]],[[[44,[-1]],[44,[-1]]],[[43,[-1]]],3],[[[44,[-1]],[44,[-1]]],[[51,[-1]]],3],[[[51,[-1]],[34,[-1]]],[[27,[[71,[-1]]]]],3],[[[51,[-1]],[34,[-1]]],[[27,[[65,[-1]]]]],3],[[[51,[-1]],[34,[-1]]],[[27,[[64,[-1]]]]],3],[[[43,[-1]]],[[44,[-1]]],3],[[[51,[-1]]],[[44,[-1]]],3],[[[43,[-1]],-2,60,[43,[-1]]],2,3,[[46,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]],-2],[[7,[60,45]]],3,[[46,[-1]]]],[[[43,[-1]],-2],[[7,[60,45]]],3,[[46,[-1]]]],[[[43,[-1]],-2],[[7,[60,45]]],3,[[46,[-1]]]],[[[43,[-1]],-2],[[7,[60,45]]],3,[[46,[-1]]]],[[[43,[-1]],-2,[42,[-1]]],[[7,[60,45]]],3,[[46,[-1]]]],[[[43,[-1]],-2],[[7,[60,45]]],3,[[46,[-1]]]],[[[43,[-1]],-2],[[7,[60,45]]],3,[[46,[-1]]]],[[[43,[-1]],-2],[[7,[60,45]]],3,[[46,[-1]]]],[[[43,[-1]],-2],[[7,[60,45]]],3,[[46,[-1]]]],[[[43,[-1]],-2],[[7,[60,45]]],3,[[46,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[-2,60,[43,[-1]],[43,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[-2,60,[51,[-1]],[51,[-1]]],[[7,[[51,[-1]],45]]],3,[[46,[-1]]]],[[-2,60,[63,[-1]],[63,[-1]]],[[7,[[43,[-1]],45]]],3,[[46,[-1]]]],[[]],[[]],[[[43,[-1]],[34,[-1]]],[[27,[[59,[-1]]]]],3],[[[43,[-1]]],[[44,[-1]]],3],[[[51,[-1]]],[[44,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[43,[-1]],[34,[-1]]],[[27,[[63,[-1]]]]],3],0,[[[27,[72]]],[[74,[[73,[29,29]]]]]],[[],[[74,[2]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[75,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[77,[76]],78],[[74,[2]]]],[[[34,[76]],5,5,75],[[77,[76]]]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[79,5,5],5],[[],79],[[],80],[[],81],[[],82],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[79,11],12],[[80,11],12],[[81,11],12],[[82,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[79,9],[79,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[79,5],0,[[]],[[]],[[]],[[]],0,0,0,0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[71,[-1]]],[[71,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[[71,[-1]]],83,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[71,[-1]],[71,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[71,[-1]],[34,[-1]],84,-2],[[85,[2]]],3,86],[[[71,[-1]],11],12,[13,3]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[[71,[-1]]],[[65,[-1]]],3],[[[71,[-1]],-2],2,[16,3],19],[[],5],[[[71,[-1]],[34,[-1]]],[[2,[5,9]]],3],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,5,[]],0,[-1,5,[]],[[-1,[34,[-2]],[59,[-2]],[59,[-2]],[65,[-2]]],[[47,[-2]]],[],[]],[-1,9,[]],[[-1,[34,[-2]],[50,[[59,[-2]]]]],[[59,[-2]]],[],[]],[[-1,-3,[42,[-2]],[34,[-2]],[50,[[43,[-2]]]],[43,[-2]],[51,[-2]]],[[7,[[2,[[43,[-2]],[43,[-2]],[51,[-2]]]],45]]],[],[],[[46,[-2]]]],[[-1,-3,[34,[-2]],[42,[-2]],[63,[-2]],[43,[-2]],[43,[-2]],[51,[-2]]],[[7,[[2,[[43,[-2]],[43,[-2]],[51,[-2]]]],45]]],[],[],[[46,[-2]]]],0,0,0,[[[87,[-1,-2]]],5,3,[[88,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[87,[-1,-2]]],[[87,[-1,-2]]],3,[[88,[-1]]]],[[-1,-2],2,[],[]],[-2,[[74,[[87,[-1,-2]]]]],3,[[88,[-1]]]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[87,[-1,-2]]],5,3,[[88,[-1]],13]],[[[87,[-1,-2]],11],12,[13,3],[13,[88,[-1]]]],[-1,-1,[]],[[[87,[-1,-2]]],9,3,[[88,[-1]],13]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[87,[-1,-2]]],58,3,[[88,[-1]]]],[-2,[[87,[-1,-2]]],3,[[88,[-1]]]],[[]],[[[87,[-1,-2]],[34,[-1]],[50,[[59,[-1]]]]],[[59,[-1]]],3,[[88,[-1]],13]],[[[87,[-1,-2]],-3,[42,[-1]],[34,[-1]],[50,[[43,[-1]]]],[43,[-1]],[51,[-1]]],[[74,[[2,[[43,[-1]],[43,[-1]],[51,[-1]]]],45]]],3,[[88,[-1]]],[[46,[-1]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[89,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[89,[-1]]],[[89,[-1]]],[4,3]],[[[90,[-1]]],[[90,[-1]]],[4,3]],[[[91,[-1]]],[[91,[-1]]],[4,3]],[[[92,[-1]]],[[92,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[90,[-1]]],[93,3]],[[],[[91,[-1]]],[93,3]],[[],[[92,[-1]]],[93,3]],[[],[[94,[-1]]],3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[90,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[91,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[92,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[94,[-1]]],-1,3],[[[89,[-1]]],5,3],[[[90,[-1]]],5,3],[[[91,[-1]]],5,3],[[[92,[-1]]],5,3],[[[89,[-1]],[34,[-1]],[59,[-1]],[59,[-1]],[65,[-1]]],[[47,[-1]]],3],[[[95,[-1]],11],12,13],[[[89,[-1]],11],12,[13,3]],[[[90,[-1]],11],12,[13,3]],[[[91,[-1]],11],12,[13,3]],[[[92,[-1]],11],12,[13,3]],[[[94,[-1]],11],12,[13,3]],[[[96,[-1]],11],12,[13,3]],[[[97,[-1]],11],12,[13,3]],[-1,-1,[]],[[[91,[-1]]],[[89,[-1]]],3],[[[92,[-1]]],[[89,[-1]]],3],[-1,-1,[]],[[[90,[-1]]],[[89,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[89,[-1]]],9,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[94,[-1]],-1,-1],[[7,[9,[95,[-1]]]]],3],[[[34,[-1]],[99,[[98,[84]]]],[100,[-1,[89,[-1]]]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[94,[-1]]],5,3],[[[94,[-1]],-1],[[7,[[27,[-1]],[95,[-1]]]]],3],[[[34,[-1]]],[[94,[-1]]],3],[[[34,[-1]],5],[[94,[-1]]],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[94,[-1]],-1,-1],[[7,[[2,[[97,[-1]],9]],[95,[-1]]]]],3],[[[94,[-1]],-1],[[7,[[96,[-1]],[95,[-1]]]]],3],[[[94,[-1]]],-1,3],[[[94,[-1]],5],5,3],[[[90,[-1]],-2],7,3,28],[[[91,[-1]],-2],7,3,28],[[[92,[-1]],-2],7,3,28],[[[89,[-1]],[34,[-1]],[50,[[59,[-1]]]]],[[59,[-1]]],3],[[[90,[-1]],[34,[-1]],[50,[[59,[-1]]]]],[[59,[-1]]],3],[[[91,[-1]],[34,[-1]],[50,[[59,[-1]]]]],[[59,[-1]]],3],[[[92,[-1]],[34,[-1]],[50,[[59,[-1]]]]],[[59,[-1]]],3],[[[89,[-1]],-2,[42,[-1]],[34,[-1]],[50,[[43,[-1]]]],[43,[-1]],[51,[-1]]],[[7,[[2,[[43,[-1]],[43,[-1]],[51,[-1]]]],45]]],3,[[46,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[96,[-1]],-1,-1,-1,[101,[-1]]],9,3],[[[97,[-1]],-1,-1,-1,[27,[-1]],-1,[101,[-1]]],9,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,102,[]],[-1,102,[]],[-1,102,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[103,103],[[[104,[-1]]],[[104,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[105,11],12],[[105,11],12],[[103,11],12],[[103,11],12],[[[104,[-1]],11],12,3],[[[104,[-1]],11],12,[13,3]],[106,105],[107,105],[45,105],[103,105],[-1,-1,[]],[107,103],[-1,-1,[]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[-1,[],[]],[-1,[],[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[105,[[27,[102]]]],[103,[[27,[102]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[47,[-1]]],[[47,[-1]]],[4,3]],[[[41,[-1]]],[[41,[-1]]],[4,3]],[[[49,[-1,-2,-3,-4]]],[[49,[-1,-2,-3,-4]]],[4,108],[4,108],[4,3],4],[109,109],[[[48,[-1]]],[[48,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[41,[-1]]],3],[[],109],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[109]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[34,[-1]]],[[59,[-1]]],3],0,[[[47,[-1]],[47,[-1]]],9,[10,3]],[[[41,[-1]],[41,[-1]]],9,[10,3]],[[[49,[-1,-2,-3,-4]],[49,[-1,-2,-3,-4]]],9,[10,108],[10,108],[10,3],10],[[109,109],9],[[[48,[-1]],[48,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[110,[-1,-2]]],[[7,[[2,[[47,[-1]],5,[35,[[59,[-1]]]]]],103]]],3,[[37,[-1]]]],[[[34,[-1]],58],[[7,[[59,[-1]],103]]],3],0,[[[47,[-1]],11],[[7,[2,111]]],3],[[[47,[-1]],[34,[-1]],84,-2],[[85,[2]]],3,86],[[[47,[-1]],11],12,[13,3]],[[[41,[-1]],11],12,[13,3]],[[[49,[-1,-2,-3,-4]],11],12,[13,108],[13,108],[13,3],13],[[109,11],12],[[[112,[-1,-2,-3]],11],12,[13,108],[13,3],[13,[37,[-2]]]],[[[48,[-1]],11],12,[13,3]],[[[110,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[65,[-1]]],109,3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[59,[-1]],[59,[-1]],[34,[-1]],5,-2,[100,[-1,-3]]],[[7,[[35,[[49,[[47,[-1]],[48,[-1]],-1,-3]]]],103]]],3,113,[[37,[-1]]]],[[[41,[-1]]],[[27,[[63,[-1]]]]],3],[[[110,[-1,-2]]],[[7,[[35,[[49,[[47,[-1]],[48,[-1]],-1,-2]]]],103]]],3,[[37,[-1]]]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],0,[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[110,[-1,-2]]],[[47,[-1]]],3,[[37,[-1]]]],0,[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[[47,[-1]]],9,3],[[[49,[[47,[-1]],-2,-1,-3]]],9,3,108,[[37,[-1]]]],[109,9],[[[41,[-1]]],9,3],[-1,9,[]],[[[47,[-1]]],9,3],[109,9],[109,9],[[[41,[-1]]],9,3],[-1,9,[]],[[[47,[-1]]],9,3],[109,9],[[[110,[-1,-2]]],[[7,[[114,[[112,[[48,[-1]],-1,-2]]]],103]]],3,[[37,[-1]]]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[-1,[34,[-2]],5],2,[],[]],[[[47,[-1]],[34,[-1]],5],2,3],[[[49,[[47,[-1]],-2,-1,-3]],[34,[-1]]],2,3,108,[[37,[-1]]]],[[[47,[-1]],[34,[-1]]],[[27,[[59,[-1]]]]],3],0,[[[59,[-1]],[59,[-1]],[34,[-1]],5,[100,[-1,-2]]],[[110,[-1,-2]]],3,[[37,[-1]]]],[[[112,[[48,[-1]],-1,-2]]],27,3,[[37,[-1]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[49,[[47,[-1]],-2,-1,-3]],[49,[[47,[-1]],-2,-1,-3]]],9,3,108,[[37,[-1]]]],[[-1,[34,[-2]],[100,[-2,-3]]],[[7,[[2,[-1,-4,[41,[-2]]]],103]]],17,[],[],[]],[[[47,[-1]],[34,[-1]],[100,[-1,-2]]],[[7,[[2,[[47,[-1]],[48,[-1]],[41,[-1]]]],103]]],3,[[37,[-1]]]],[[109,-1],7,28],[[[50,[[49,[[47,[-1]],-2,-1,-3]]]]],5,3,108,[[37,[-1]]]],[-1,109,[]],[[[47,[-1]]],109,3],[[109,[34,[-1]]],[[27,[[65,[-1]]]]],3],[[[47,[-1]],[34,[-1]]],[[35,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[47,[-1]],[34,[-1]]],[[7,[[35,[-1]],107]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[[[100,[-1,-2]],-3,[34,[-1]]],2,3,[[37,[-1]]],[[116,[[115,[-1,-2]]]]]],[[[100,[-1,-2]],-3,-4,[34,[-1]]],2,3,[[37,[-1]]],[[116,[117]]],[[116,[-2]]]],[[[118,[-1]]],5,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[119,[-1]]],[[119,[-1]]],[4,3]],[[[118,[-1]]],[[118,[-1]]],[4,3]],[[[100,[-1,-2]]],[[100,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[100,[-1,-2]]],5,3,[[37,[-1]]]],[[[100,[-1,-2]]],[[120,[117,[2,[-2,[63,[-1]]]]]]],3,[[37,[-1]]]],[[],[[100,[-1,-2]]],[93,3],[93,[37,[-1]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[119,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[118,[-2]]]]],8,[121,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[100,[-2,-3]]]]],8,[121,3],[121,[37,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[119,[-1]]],5,3],[[[118,[-1]]],5,3],[[[118,[-1]],[34,[-1]],[59,[-1]],[59,[-1]],[65,[-1]]],[[47,[-1]]],3],[[[119,[-1]],11],12,[13,3]],[[[118,[-1]],11],12,[13,3]],[[[100,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[115,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[[[119,[-1]]],[[118,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[2,[-1,-3]]],[[115,[-2,-3]]],[[116,[117]]],3,[[37,[-2]]]],[[[100,[-1,-2]],5],[[27,[-2]]],3,[[37,[-1]]]],[[[100,[-1,-2]],[63,[-1]]],[[27,[-2]]],3,[[37,[-1]]]],[[[100,[-1,-2]],5],[[27,[[63,[-1]]]]],3,[[37,[-1]]]],[[[100,[-1,-2]],[63,[-1]]],[[27,[5]]],3,[[37,[-1]]]],[[[118,[-1]]],9,3],[[[100,[-1,-2]]],9,3,[[37,[-1]]]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[100,[-1,-2]]],9,3,[[37,[-1]]]],[[[100,[-1,-2]]],29,3,[[37,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[100,[-1,-2]],[34,[-1]],[59,[-1]]],[[27,[[2,[-2,[63,[-1]]]]]]],3,[[37,[-1]]]],[[[100,[-1,-2]]],5,3,[[37,[-1]]]],[[],[[100,[-1,-2]]],3,[[37,[-1]]]],[[-1,-4],[[115,[-2,-3]]],[[116,[117]]],3,[[37,[-2]]],[[116,[-3]]]],[[[34,[-1]],[35,[-3]]],[[100,[-1,-2]]],3,[[37,[-1]]],[[116,[[115,[-1,-2]]]]]],[[]],[[]],[[]],[[]],[[[119,[-1]],-2],7,3,28],[[[118,[-1]],-2],7,[122,3],28],[[[100,[-1,-2]],-3],7,[122,3],[122,[37,[-1]]],28],[[[119,[-1]],[34,[-1]],[50,[[59,[-1]]]]],[[59,[-1]]],3],[[[118,[-1]],[34,[-1]],[50,[[59,[-1]]]]],[[59,[-1]]],3],[[[118,[-1]],-2,[42,[-1]],[34,[-1]],[50,[[43,[-1]]]],[43,[-1]],[51,[-1]]],[[7,[[2,[[43,[-1]],[43,[-1]],[51,[-1]]]],45]]],3,[[46,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[123,[-1]],-2,[34,[-1]]],[[7,[[2,[[44,[-1]],[43,[-1]],[51,[-1]]]],45]]],3,[[46,[-1]]]],[[-2,[34,[-1]]],[[7,[[2,[[44,[-1]],[43,[-1]],[51,[-1]]]],45]]],3,[[46,[-1]]]],[[-2,[27,[[123,[-1]]]],[34,[-1]]],[[7,[[2,[[44,[-1]],[43,[-1]],[51,[-1]]]],45]]],3,[[46,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[124,[-1]]],[[124,[-1]]],[4,3]],[[[123,[-1]]],[[123,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[124,[-1]],[124,[-1]]],9,[10,3]],[[[123,[-1]],[123,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[124,[-1]],11],12,[13,3]],[[[124,[-1]],[34,[-1]],84,-2],[[85,[2]]],3,86],[[[123,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[[123,[-1]],-2],2,3,19],[[-2,[34,[-1]],[43,[-1]],[51,[-1]]],[[7,[[44,[-1]],45]]],3,[[46,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[124,[-1]]],9,3],[[[124,[-1]]],9,3],[[[124,[-1]]],9,3],[[[124,[-1]]],9,3],[[[124,[-1]]],9,3],[[[124,[-1]]],9,3],[[[124,[-1]]],9,3],[[[124,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[125,125],[[[126,[-1]]],[[126,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[126,[-1]],[126,[-1]]],26,3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[125]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[126,[-2]]]]],8,3],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[125,125],9],[[[126,[-1]],[126,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[125,11],12],[[125,11],12],[[[126,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[[[50,[127]]],[[27,[-1]]],[]],[128,-1,[]],[83,-1,[]],[129,-1,[]],[130,-1,[]],[131,-1,[]],[132,-1,[]],[133,-1,[]],[15,-1,[]],[-1,125,[]],[[-1,-2],15,[16,17],18],[[[126,[-1]],-2],2,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,29,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,9,[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],-1,[]],[[],-1,[]],[[[126,[-1]],[126,[-1]]],[[27,[26]]],3],[[]],[[]],[[125,-1],7,28],[[[126,[-1]],-2],7,3,28],[-1,[[35,[127]]],[]],[-1,[[27,[128]]],[]],[-1,[[27,[83]]],[]],[-1,[[27,[129]]],[]],[-1,[[27,[130]]],[]],[-1,[[27,[131]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[27,[134]]],[]],[-1,134,[]],[-1,[[27,[132]]],[]],[-1,[[27,[133]]],[]],[-1,133,[]],[-1,[[27,[15]]],[]],[-1,15,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[135,[-1]]],[[137,[-1,136]]],3],[[[135,[-1]]],[[137,[-1,138]]],3],[[[135,[-1]]],[[137,[-1,139]]],3],[[[135,[-1]]],[[137,[-1,140]]],3],[[[141,[-1]],[35,[-1]]],[[2,[[35,[-1]],-1]]],3],[142,142],[[[135,[-1]]],[[135,[-1]]],[4,3]],[[[101,[-1]]],[[101,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[[101,[-1]],[67,[-1]]],-1,3],[[[135,[-1]],142],[[141,[-1]]],3],0,0,[[],[[135,[-1]]],3],[[],[[101,[-1]]],[93,3]],[[],[[143,[-1]]],[93,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[[142,11],12],[[[141,[-1]],11],12,[13,3]],[[[135,[-1]],11],12,[13,3]],[[[101,[-1]],11],12,[13,3]],[[[143,[-1]],11],12,[13,3]],[-1,-1,[]],[5,142],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[143,[-1]],[126,[-1]]],[[27,[[67,[-1]]]]],3],[[[101,[-1]],[67,[-1]]],-1,3],[[[101,[-1]],[67,[-1]]],-1,3],[[[101,[-1]],[67,[-1]]],-1,3],[[[101,[-1]],[67,[-1]]],-1,3],[[],5],[[],5],[[],5],[[],5],[[],5],[[[143,[-1]],[126,[-1]],[67,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[67,[-2]]],[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[144,[-1,-2,-3]]],[[35,[-1]]],[145,93,108,146,13],108,3],[[[144,[-1,-2,-3]],[34,[-3]]],2,[145,93,108,146,13],108,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[147,[-1]],[34,[-1]],[59,[-1]]],[[74,[[2,[[59,[-1]],[59,[-1]]]],107]]],3],[[[149,[[148,[-1]]]],[34,[-1]],[59,[-1]]],[[74,[[2,[[59,[-1]],[59,[-1]]]],107]]],3],[[[150,[-1]],69,[34,[-1]],[59,[-1]]],[[74,[[2,[[59,[-1]],[59,[-1]]]],107]]],3],[[[144,[69,[148,[-1]],-1]],69,[34,[-1]],[59,[-1]]],[[74,[[2,[[59,[-1]],[59,[-1]]]],107]]],3],[[[150,[-1]],69,[34,[-1]],[59,[-1]]],[[74,[[2,[[59,[-1]],[59,[-1]]]],103]]],3],[[[144,[69,[148,[-1]],-1]],69,[34,[-1]],[59,[-1]]],[[74,[[2,[[59,[-1]],[59,[-1]]]],103]]],3],0,0,[[[151,[-1,-3,-2]],[34,[-2]],[141,[-2]]],[[152,[-2]]],145,3,[[153,[-2]]]],0,0,0,[[[149,[-1]]],[[149,[-1]]],4],[[[148,[-1]]],[[148,[-1]]],[4,3]],[[[154,[-1]]],[[154,[-1]]],[4,3]],[[[155,[-1]]],[[155,[-1]]],[4,3]],[[[156,[-1]]],[[156,[-1]]],[4,3]],[69,69],[70,70],[[[144,[-1,-2,-3]]],[[144,[-1,-2,-3]]],[4,145],4,[4,3]],[[[151,[-1,-3,-2]]],[[151,[-1,-3,-2]]],[4,145],[4,3],[4,[153,[-2]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[[147,[-1]],[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[149,[[148,[-1]]]],[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],0,0,[[[150,[-1]],69,[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[144,[69,[148,[-1]],-1]],69,[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],0,0,0,[[],69],[[],70],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[149,[-1]],[149,[-1]]],9,10],[[[148,[-1]],[148,[-1]]],9,[10,3]],[[[156,[-1]],[156,[-1]]],9,[10,3]],[[69,69],9],[[70,70],9],[[[144,[-1,-2,-3]],[144,[-1,-2,-3]]],9,[10,145],10,[10,3]],[[[151,[-1,-3,-2]],[151,[-1,-3,-2]]],9,[10,145],[10,3],[10,[153,[-2]]]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[150,[-1]],69,[59,[-1]],[59,[-1]],[59,[-1]],[34,[-1]]],[[59,[-1]]],3],[[[144,[69,[148,[-1]],-1]],69,[59,[-1]],[59,[-1]],[59,[-1]],[34,[-1]]],[[59,[-1]]],3],[[[157,[-1]],[34,[-1]],[65,[-1]]],[[27,[[71,[-1]]]]],3],[[[149,[[156,[-1]]]],[34,[-1]],[65,[-1]]],[[27,[[71,[-1]]]]],3],[[[158,[-1]],70,[34,[-1]],[65,[-1]]],[[27,[[71,[-1]]]]],3],[[[144,[70,[156,[-1]],-1]],70,[34,[-1]],[65,[-1]]],[[27,[[71,[-1]]]]],3],[[[149,[-1]],11],12,13],[[[148,[-1]],11],12,[13,3]],[[[154,[-1]],11],12,[13,3]],[[[155,[-1]],11],12,[13,3]],[[[156,[-1]],11],12,[13,3]],[[69,11],12],[[70,11],12],[[[144,[-1,-2,-3]],11],12,[13,145],13,[13,3]],[[[151,[-1,-3,-2]],11],12,[13,145],[13,3],[13,[153,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[144,[-1,-3,-2]]],[[151,[-1,-3,-2]]],145,3,[[153,[-2]]]],[-1,-1,[]],[[[144,[-1,-2,-3]],-1],[[149,[-2]]],[145,93,108,146,13],108,3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[69,-1],2,19],[[70,-1],2,19],0,0,0,[-1,5,[]],[69,5],[70,5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[[157,[-1]],[34,[-1]],[71,[-1]]],[[65,[-1]]],3],[[[149,[[156,[-1]]]],[34,[-1]],[71,[-1]]],[[65,[-1]]],3],[[[158,[-1]],70,[34,[-1]],[71,[-1]]],[[65,[-1]]],3],[[[144,[70,[156,[-1]],-1]],70,[34,[-1]],[71,[-1]]],[[65,[-1]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],5],[[[151,[-1,-3,-2]],[34,[-2]]],[[35,[[2,[-1,27]]]]],145,3,[[153,[-2]]]],0,0,0,[[],[[144,[-1,-2,-3]]],[145,93,108,146,13],108,3],[[],[[144,[-1,-2,-3]]],[145,93,108,146,13],108,3],[[[149,[-1]]],[[144,[-2,-1,-3]]],108,[145,93,108,146,13],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[-1,[[159,[-2]]],[],[]],[[-1,[34,[-2]]],[[74,[[159,[-2]]]]],[],[]],[[[148,[-1]],[34,[-1]]],[[74,[[159,[-1]]]]],3],[[[154,[-1]]],[[159,[-1]]],3],[[[155,[-1]]],[[159,[-1]]],3],[[[156,[-1]],[34,[-1]]],[[74,[[159,[-1]]]]],3],0,0,0,[[[147,[-1]],[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[149,[[148,[-1]]]],[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[150,[-1]],69,[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[144,[69,[148,[-1]],-1]],69,[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[144,[-1,-2,-3]]],[[35,[[149,[-2]]]]],[145,93,108,146,13],108,3],[[[144,[-1,-2,-3]]],5,[145,93,108,146,13],108,3],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,[34,[-2]]],27,[],[]],[[[149,[-2]],[34,[-1]]],27,3,[[153,[-1]]]],[[[148,[-1]],[34,[-1]]],27,3],[[[156,[-1]],[34,[-1]]],27,3],[[[144,[-1,-2,-3]]],5,[145,93,108,146,13],108,3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[160,-2,[161,[-1]]],[[74,[[162,[-1]],45]]],3,[[46,[-1]]]],[[160,[50,[0]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[160,[50,[[163,[-1]]]],[161,[-1]],[164,[-1]],[35,[[163,[-1]]]]],[[74,[[2,[[165,[-1]],0]]]]],3],[[160,[50,[[163,[-1]]]],[161,[-1]],-2,5,-3],[[74,[[2,[[35,[[165,[-1]]]],5,[35,[0]]]]]]],3,113,113],[[160,[35,[[163,[-1]]]],[161,[-1]],-2,5],[[74,[[2,[[35,[[163,[-1]]]],5,[35,[[163,[-1]]]]]]]]],3,113],[160,[[74,[2]]]],0,[160,160],[166,166],[167,167],[168,168],[169,169],[170,170],[171,171],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[167]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[160,160],9],[[166,166],9],[[167,167],9],[[168,168],9],[[169,169],9],[[170,170],9],[[171,171],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[160,11],12],[[166,11],12],[[166,11],12],[[167,11],12],[[167,11],12],[[168,11],12],[[169,11],12],[[170,11],12],[[171,11],12],[-1,-1,[]],[[[100,[-1,-2]]],160,3,[[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[167]]],3],[[[163,[-1]],[161,[-1]]],[[27,[168]]],3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[166,-1],2,19],[[167,-1],2,19],[[168,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[160,[[161,[-1]]],3],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[166,172],0,[[29,[35,[166]],5,169],[[74,[160]]]],[[160,[161,[-1]]],5,3],[160,5],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[167,-1],7,28],0,0,[[160,-2,[161,[-1]],[165,[-1]],[162,[-1]],[0,[[173,[-1]]]]],[[74,[[35,[[43,[-1]]]]]]],3,[[46,[-1]]]],[[160,-2,[161,[-1]],[165,[-1]]],[[74,[2]]],3,[[46,[-1]]]],[167,-1,3],[167,-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[168,[161,[-1]]],[[163,[-1]]],3],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[132,[[74,[167]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[160,5],[[74,[160]]]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[162,[-1]]],[93,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],160],[[[163,[-1]],[161,[-1]],5],[[74,[[2,[[35,[[165,[-1]]]],5]]]]],3],[[[163,[-1]],[161,[-1]],5],[[74,[[2,[[35,[[163,[-1]]]],5,[35,[[163,[-1]]]]]]]]],3],[[[163,[-1]],[163,[-1]],[163,[-1]],[161,[-1]],5],[[74,[[2,[[35,[[165,[-1]]]],5]]]]],3],0,0,0,0,0,0,0,0,0,[160,[[164,[-1]]],3],[160,[[165,[-1]]],3],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[174,[-1]]],[[174,[-1]]],[4,3]],[[[164,[-1]]],[[164,[-1]]],[4,3]],[[[165,[-1]]],[[165,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[[],[[164,[-1]]],[93,3]],[[],[[165,[-1]]],[93,3]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[[[174,[-1]],11],12,[13,3]],[[[164,[-1]],11],12,[13,3]],[[[165,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[[],5],[[],5],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[160,[[164,[-1]]],3],0,[[]],[[]],[[]],[[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[163,[-1]],167],[[163,[-1]]],3],[128,[[163,[-1]]],3],[[[163,[-1]]],[[163,[-1]]],[4,3]],[[-1,-2],2,[],[]],[-1,[[163,[-1]]],3],[[[163,[-1]],[161,[-1]]],29,3],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[163,[-2]]]]],8,[121,3]],[-1,[[7,[[175,[-2]]]]],8,[121,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[163,[-1]],[163,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[163,[-1]],11],12,[13,3]],[[[175,[-1]],11],12,[13,3]],[[[163,[-1]],[161,[-1]],84],29,3],[-1,-1,[]],[-1,-1,[]],[[[163,[-1]]],[[27,[-1]]],3],[[-1,-2],15,[16,17],18],[[[163,[-1]]],[[27,[5]]],3],[[[163,[-1]]],[[27,[5]]],3],[[[163,[-1]]],[[27,[5]]],3],[[[163,[-1]],-2],2,3,19],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[163,[-1]]],9,3],[[[163,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[167,[[163,[-1]]],3],[-1,[[163,[-1]]],3],[15,[[163,[-1]]],3],[[]],[[]],[[[163,[-1]],-2],7,[122,3],28],[[[175,[-1]],-2],7,[122,3],28],[[[163,[-1]]],167,3],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[15,[[163,[-1]]],3],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[161,[-1]],[163,[-1]]],[[74,[[2,[[163,[-1]],[163,[-1]]]]]]],3],[[[161,[-1]],[163,[-1]]],[[74,[[163,[-1]]]]],3],[[],[[161,[-1]]],[93,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[161,[-1]],5],[[27,[[2,[[163,[-1]],[163,[-1]]]]]]],3],[[[161,[-1]],5],[[27,[[2,[[163,[-1]],[163,[-1]],[163,[-1]]]]]]],3],[[[161,[-1]],5],[[27,[[2,[[163,[-1]],[163,[-1]],[163,[-1]],[163,[-1]]]]]]],3],[[[161,[-1]],[163,[-1]]],[[27,[117]]],3],[[[161,[-1]],[163,[-1]]],[[27,[29]]],3],[[[161,[-1]],[163,[-1]]],[[27,[117]]],3],[[[161,[-1]],[163,[-1]]],[[27,[117]]],3],[[[161,[-1]],5],[[27,[[35,[29]]]]],3],[[[161,[-1]],11],12,[13,3]],[-1,-1,[]],[[[161,[-1]],[163,[-1]]],[[74,[[176,[-1]]]]],3],[[[161,[-1]],-1,[163,[-1]]],[[74,[[163,[-1]]]]],3],[[[161,[-1]],-1,[163,[-1]]],[[74,[[2,[-1,[176,[-1]]]]]]],3],[[[161,[-1]]],2,3],[[],5],[[[161,[-1]],167,[163,[-1]],[163,[-1]]],[[163,[-1]]],3],[[[161,[-1]],167,[163,[-1]],[163,[-1]],[176,[-1]]],[[163,[-1]]],3],[[[161,[-1]],167,[163,[-1]],[163,[-1]],[163,[-1]]],[[163,[-1]]],3],[[[161,[-1]],167,[163,[-1]],[163,[-1]],[163,[-1]],[176,[-1]]],[[163,[-1]]],3],[[[161,[-1]],167,[163,[-1]],[163,[-1]],[163,[-1]],[163,[-1]]],[[163,[-1]]],3],[[[161,[-1]],167,[163,[-1]],[163,[-1]],[163,[-1]],[163,[-1]],[176,[-1]]],[[163,[-1]]],3],[[[161,[-1]],58],[[163,[-1]]],3],[[[161,[-1]]],[[163,[-1]]],3],[[[161,[-1]],58],[[163,[-1]]],3],[[[161,[-1]],117],[[163,[-1]]],3],[[[161,[-1]],[50,[29]]],[[163,[-1]]],3],[[[161,[-1]],[177,[-1]]],[[163,[-1]]],3],[-1,-2,[],[]],[[[161,[-1]],58],[[163,[-1]]],3],[[],[[7,[24,25]]]],[[[161,[-1]],[35,[[163,[-1]]]]],[[163,[-1]]],3],[[[161,[-1]],-1],[[27,[[2,[-1,[163,[-1]]]]]]],3],[[]],0,[[[161,[-1]],[99,[[98,[84]]]],58],[[74,[[163,[-1]]]]],3],[[[161,[-1]],[99,[[98,[84]]]],58],[[74,[[2,[178,[163,[-1]],9]],179]]],3],[[[161,[-1]],58],[[74,[[163,[-1]]]]],3],[[[161,[-1]],[50,[[163,[-1]]]]],[[74,[[35,[-1]]]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[[[180,[-1]],-1,-1,[176,[-1]]],2,3],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[180,[-1]]],[93,3]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[180,[-2]]]]],8,[121,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[180,[-1]],11],12,[13,3]],[-1,-1,[]],[[[180,[-1]],[176,[-1]]],[[27,[[175,[-1]]]]],3],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[[180,[-1]],-1],[[27,[[2,[-1,[176,[-1]]]]]]],3],[[]],[[[161,[-1]],[176,[-1]],[180,[-1]]],[[74,[[163,[-1]]]]],3],[[[180,[-1]],[163,[-1]],[161,[-1]]],[[74,[[176,[-1]]]]],3],[[[180,[-1]],-2],7,[122,3],28],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[181,11],12],[[181,182],29],[-1,-1,[]],[[181,[50,[182]]],[[74,[2]]]],[[],5],[[181,29],182],[-1,-2,[],[]],[[],[[7,[24,25]]]],[181,182],[182,181],[[]],[[181,58],[[27,[182]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[181,181],[[74,[2]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,[-1,102,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[179,179],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],0,0,[[179,11],12],[[179,11],12],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],0,0,0,[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[183,58],[-1,-2,[],[]],[-1,-2,[],[]],[183,183],[[-1,-2],2,[],[]],[183,128],[[183,178],[[184,[-1,[35,[127]]]]],3],[[],183],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[183,-1],29,[[185,[[50,[127]]]]]],[[183,183],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[183,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[183,128],9],[[],[[7,[24,25]]]],[[],[[0,[113]]]],[178,[[184,[-1,183]]],3],[[],[[0,[113]]]],[[],[[0,[113]]]],[183,[[0,[113]]]],[[],[[0,[113]]]],[183,[[32,[113]]]],[183,[[0,[113]]]],[[],[[0,[113]]]],[[]],[183,133],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-1,58,[186,[-1,-2]]],[[186,[-1,-2]]],[187,4,188],3],[[-1,189,[186,[-1,-2]]],[[186,[-1,-2]]],[187,4,188],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[190,[-1]]],[[190,[-1]]],[4,3]],[[[186,[-1,-2]]],[[186,[-1,-2]]],[4,188],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[[190,[-1]],[190,[-1]]],9,[10,3]],[[[186,[-1,-2]],[186,[-1,-2]]],9,[10,188],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,0,[[[190,[-1]],11],12,3],[[[190,[-1]],11],12,[13,3]],[[[186,[-1,-2]],11],12,[13,188],[13,3]],[[[186,[178,-1]],11],12,3],[-1,-1,[]],[-1,-1,[]],[[-1,189],[[186,[-1,-2]]],[187,4,188],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[190,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[[191,[-1,-2,[186,[-1,-3]]]],-4],[[191,[-1,-2,[186,[-1,-3]]]]],188,[],3,113],[[-1,[190,[-2]]],[[186,[-1,-2]]],188,3],[[[27,[-1]],-2,[190,[-3]]],[[191,[-2,-1,[186,[-2,-3]]]]],[],188,3],[[[186,[-1,-2]],[186,[-1,-2]]],[[186,[-1,-2]]],[187,4,188],3],[[]],[[]],[[[7,[-1,-2]],-3,-4],[[191,[-3,-1,[186,[-3,-5]]]]],[],[],188,113,3],[[-1,[190,[-2]]],[[191,[-1,-3,[186,[-1,-2]]]]],188,3,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[192,192],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[192,192],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[192,11],12],[-1,-1,[]],[[178,178],192],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[58,5,5,5,5],29],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[193,193],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[193,193],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[193,11],12],[-1,-1,[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[128,58],[[0,[113]]]],[[],[[0,[113]]]],[[128,9,58],[[0,[113]]]],[[128,9,58],[[0,[113]]]],[128,[[0,[113]]]],[[128,9,58],[[0,[113]]]],[[128,9,58],[[0,[113]]]],[[],[[0,[113]]]],[[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[99,[[98,[84]]]],9],[[0,[113]]]],[[],[[0,[113]]]],[[],[[0,[113]]]],[178,[[184,[-1,178]]],3],[[[99,[[98,[84]]]],9,9],[[0,[113]]]],[[[99,[[98,[84]]]],9],[[0,[113]]]],[[],[[0,[113]]]],[183,[[0,[113]]]],[[[99,[[98,[84]]]],9],[[0,[113]]]],[[[99,[[98,[84]]]],9],[[0,[113]]]],[[[99,[[98,[84]]]],9],[[0,[113]]]],[[[99,[[98,[84]]]],9],[[0,[113]]]],[178,[[184,[-1,[35,[178]]]]],3],[178,[[184,[-1,[35,[178]]]]],3],[[],[[0,[113]]]],[[[99,[[98,[84]]]],9],[[0,[113]]]],[58,[[0,[113]]]],[58,[[0,[113]]]],[[],[[0,[113]]]],[[[99,[[98,[84]]]],9,9],[[0,[113]]]],[[],[[0,[113]]]],0,0,0,0,0,[[-1,5],5,[]],[[-1,5],5,[]],[[-1,[59,[-2]],[59,[-2]],[34,[-2]],5,[40,[[100,[-2,-3]]]]],[[7,[[35,[[49,[[47,[-2]],[48,[-2]],-2,-3]]]],105]]],[],[],[]],0,[-1,[[100,[-2,-3]]],[],[],[]],[[-1,5],5,[]],[[-1,5],9,[]],[[-1,5],9,[]],[[5,[100,[-1,-2]]],-3,[],[],[]],0,[[-1,[50,[[36,[-2,-3]]]]],[[7,[[35,[[2,[[36,[-2,-3]],[194,[-2]]]]]],45]]],[],[],[]],[[],5],[-1,[[35,[-2]]],[],[]],[-1,5,[]],[-1,5,[]],0,[[[35,[[2,[[36,[-1,-2]],[194,[-1]]]]]]],[[7,[9,45]]],[3,108],[[37,[-1]]]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[195,[-1]]],[[195,[-1]]],[4,196,197]],[[-1,-2],2,[],[]],[[5,[40,[[100,[57,-1]]]]],[[7,[[198,[54]],45]]],[[37,[57]]]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[195,[-2]]]]],8,[196,197]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[195,[-1]],11],12,[13,196,197]],[[[199,[-1,-3,-2]],11],12,[13,196,197],[13,3],[13,[37,[-2]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[199,[54,-1,57]]],[[100,[57,-1]]],[[37,[57]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[100,[57,-1]]],[[199,[54,-1,57]]],[[37,[57]]]],[[[199,[54,-1,57]],[200,[54]],[201,[54]],[59,[57]],[59,[57]],[34,[57]],5,-2,[40,[[100,[57,-1]]]]],[[7,[[2,[[195,[54]],[47,[57]],[47,[57]]]],105]]],[[37,[57]]],[202,4]],[[]],[[]],[[]],0,0,[[[199,[54,-1,57]],[36,[57,-1]],[200,[54]],-2],[[7,[[56,[54]],45]]],[[37,[57]]],202],[[[199,[54,-1,57]]],5,[[37,[57]]]],0,[[[195,[-1]],-2],7,[196,197],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[55,[54]],[203,[54]],[50,[57]],[50,[57]],[204,[54]],-1],[[7,[9,45]]],[202,22]],[[[36,[57,-1]],[55,[54]],[56,[54]]],[[7,[9,45]]],[[37,[57]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[205,[-1,-2]]],[[205,[-1,-2]]],[206,4],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[[207,[-1,-2]],[205,[-1,-2]]],[[7,[[207,[-1,-2]],105]]],206,[[37,[-1]]]],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[205,[-2,-3]]]]],8,206,[[37,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[207,[-2,-3]]]]],8,[121,206],[121,[37,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[[[205,[-1,-2]],-3],[[85,[2]]],206,[[37,[-1]]],86],[[[208,[-1,-2]],[205,[-1,-2]],[59,[-1]],[59,[-1]],[34,[-1]],5,[40,[[100,[-1,-2]]]]],[[7,[[2,[[207,[-1,-2]],[35,[-1]],[35,[-1]],5]],105]]],206,[[37,[-1]]]],[[[205,[-1,-2]],[50,[127]]],[[27,[[50,[127]]]]],206,[[37,[-1]]]],[[[205,[-1,-2]]],5,206,[[37,[-1]]]],[[[208,[-1,-2]],11],12,[13,206],[13,[37,[-1]]]],0,0,[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[208,[-1,-2]]],[[100,[-1,-2]]],206,[[37,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[[5,[100,[-1,-2]]],[[208,[-1,-2]]],206,[[37,[-1]]]],0,[[]],[[]],[[]],[[[208,[-1,-2]],[205,[-1,-2]],[50,[[49,[[47,[-1]],[48,[-1]],-1,-2]]]],[34,[-1]],[40,[[100,[-1,-2]]]]],[[7,[[2,[[207,[-1,-2]],[35,[-1]],[35,[-1]],5]],105]]],206,[[37,[-1]]]],[[[205,[-1,-2]],[34,[-1]],[50,[[209,[-1,-2]]]],5,[35,[-1]],[40,[[100,[-1,-2]]]]],[[7,[[207,[-1,-2]],105]]],206,[[37,[-1]]]],[[5,[40,[[100,[-1,-2]]]]],[[205,[-1,-2]]],206,[[37,[-1]]]],[[[208,[-1,-2]]],5,206,[[37,[-1]]]],[[[205,[-1,-2]],-3],7,206,[[37,[-1]]],28],[[[207,[-1,-2]],-3],7,[122,206],[122,[37,[-1]]],28],0,[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[207,[-1,-2]],[205,[-1,-2]],5,[50,[-1]],[50,[-1]]],[[7,[9,106]]],206,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[[210,[-1,-2]]],5,3,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[39,[-1,-2]],[41,[-1]]],5,3,[[37,[-1]]]],[[[210,[-1,-2]]],5,3,[[37,[-1]]]],[[[211,[-1,-2]]],[[211,[-1,-2]]],[206,4],[4,[37,[-1]]]],[[[39,[-1,-2]]],[[39,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[[210,[-1,-2]]],[[210,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[211,[-2,-3]]]]],8,206,[[37,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[212,[-2,-3]]]]],8,[121,206],[[37,[-2]]]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[5,2],[[[211,[-1,-2]],-3],[[85,[2]]],206,[[37,[-1]]],86],[[[213,[-1,-2]],[27,[[211,[-1,-2]]]],[59,[-1]],[59,[-1]],[34,[-1]],5,[40,[[100,[-1,-2]]]]],[[7,[[2,[[212,[-1,-2]],[35,[-1]],[35,[-1]],5]],105]]],206,[[37,[-1]]]],[[[211,[-1,-2]],[50,[127]]],[[27,[[50,[127]]]]],206,[[37,[-1]]]],[[[211,[-1,-2]]],5,206,[[37,[-1]]]],[[[213,[-1,-2]],11],12,[13,206],[13,[37,[-1]]]],[[[39,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[210,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[5,[50,[[49,[[47,[-1]],[48,[-1]],-1,-2]]]],[34,[-1]],[40,[[39,[-1,-2]]]]],[[214,[-3,-2]]],3,[[37,[-1]]],215],[[[214,[-1,-3]],5],[],215,3,[[37,[-2]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[213,[-1,-2]]],[[100,[-1,-2]]],206,[[37,[-1]]]],[[[39,[-1,-2]]],[[40,[[100,[-1,-2]]]]],3,[[37,[-1]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[5,[100,[-1,-2]]],[[213,[-1,-2]]],206,[[37,[-1]]]],[[[40,[[100,[-1,-2]]]],5],[[39,[-1,-2]]],3,[[37,[-1]]]],[[[40,[[100,[-1,-2]]]],5],[[39,[-1,-2]]],3,[[37,[-1]]]],[[[39,[-1,-2]]],5,3,[[37,[-1]]]],[[[210,[-1,-2]]],5,[206,3],[[37,[-1]]]],[[[214,[-1,-3]]],5,215,3,[[37,[-2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[210,[-1,-2]],5],[[210,[-1,-2]]],[206,3],[[37,[-1]]]],[[[213,[-1,-2]],[27,[[211,[-1,-2]]]],[50,[[49,[[47,[-1]],[48,[-1]],-1,-2]]]],[34,[-1]],[40,[[100,[-1,-2]]]]],[[7,[[2,[[212,[-1,-2]],[35,[-1]],[35,[-1]],5]],105]]],206,[[37,[-1]]]],[[[27,[[211,[-1,-2]]]],[34,[-1]],[214,[[216,[-1]],-2]],5,[35,[-1]],[40,[[100,[-1,-2]]]]],[[7,[[212,[-1,-2]],105]]],206,[[37,[-1]]]],[[[213,[-1,-2]]],5,206,[[37,[-1]]]],[[[39,[-1,-2]]],5,3,[[37,[-1]]]],[[[211,[-1,-2]],-3],7,206,[[37,[-1]]],28],[[[212,[-1,-2]],-3],7,[122,206],[[37,[-1]]],28],[[[210,[-1,-2]],-3,[27,[[44,[-1]]]],[50,[[44,[-1]]]]],[[7,[[2,[[27,[[44,[-1]]]],[35,[[44,[-1]]]]]],45]]],3,[[37,[-1]]],[[46,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[212,[-1,-2]],[219,[[216,[-1]],[217,[-1]],[210,[-1,-2]],218]],[27,[[211,[-1,-2]]]],5,[50,[-1]],[50,[-1]]],[[7,[9,220]]],206,[[37,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,[[-2,[34,[-1]],[27,[[59,[-1]]]]],[[7,[[2,[[44,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]]],45]]],3,[[46,[-1]]]],[[-2,[34,[-1]],[27,[[59,[-1]]]]],[[7,[[2,[[44,[-1]],[43,[-1]],[43,[-1]],[43,[-1]]]],45]]],3,[[46,[-1]]]],[[[221,[-1,129]]],[[27,[[221,[-1,129]]]]],3],[[[221,[-1,129]]],[[27,[[221,[-1,129]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[221,[-1,129]],129],[[221,[-1,129]]],3],[222,222],[[[221,[-1,-2]]],[[221,[-1,-2]]],[4,3],[4,223]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[222,222],26],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[[222,222],9],[[[221,[-1,-2]],[221,[-1,-2]]],9,[10,3],[10,223]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[59,[-1]],[34,[-1]],84,-2],[[85,[2]]],3,86],[[[65,[-1]],[34,[-1]],84,-2],[[85,[2]]],3,86],[[222,11],12],[[[221,[-1,-2]],11],12,[13,3],[13,223]],[128,[[59,[-1]]],3],[-1,-1,[]],[-1,-1,[]],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[222,-1],2,19],[[[221,[-1,-2]],-3],2,3,223,19],[222,[[27,[5]]]],[[-1,5],[[221,[-2,-1]]],223,3],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[[[221,[-1,129]]],9,3],[[[221,[-1,129]]],9,3],[[[65,[-1]]],9,3],[[[221,[-1,83]]],9,3],[-1,9,[]],[[[59,[-1]]],9,3],[[[221,[-1,129]]],9,3],[[[221,[-1,129]]],9,3],[222,9],[222,9],[[[221,[-1,-2]]],9,3,223],[[-1,129],9,[]],[[[59,[-1]],129],9,3],[-1,9,[]],[[[59,[-1]]],9,3],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[83,222],[[65,[-1]]],3],[5,222],[[83,222],[[221,[-1,83]]],3],[-1,[[221,[-2,-1]]],223,3],[[-1,5],[[221,[-2,-1]]],223,3],[222,[[27,[5]]]],[[222,222],[[27,[26]]]],[[]],[[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[5,9,[40,[[100,[-1,-2]]]],78],[[7,[[40,[[205,[-1,-2]]]],224]]],206,[[37,[-1]]]],[[],72],[[5,[40,[[100,[-1,-2]]]],-3],[[7,[-4,224]]],206,[[37,[-1]]],62,[]],0,0,0,0,[-1,102,[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[224,11],12],[[224,11],12],[-1,-1,[]],[225,224],[226,224],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[224,[[27,[102]]]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[227,[-1,-2]]],[[227,[-1,-2]]],[4,3],[4,[37,[-1]]]],[[-1,-2],2,[],[]],[[],228],[[],228],0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],0,[[[227,[-1,-2]],[59,[-1]],[34,[-1]]],[[74,[[2,[[59,[-1]],5,[65,[-1]],[35,[[59,[-1]]]]]]]]],3,[[37,[-1]]]],[[[227,[-1,-2]],11],12,[13,3],[13,[37,[-1]]]],[[[229,[-1,-3,-2]],11],12,[13,3],[13,[37,[-1]]],[13,[230,[-1,-2]]]],[-1,-1,[]],[-1,-1,[]],[[-1,[34,[-2]],[99,[[98,[84]]]],-3],[[74,[2]]],[],[],[[185,[231]],108]],[[-1,[34,[-2]],[99,[[98,[84]]]],178,-3],[[74,[178]]],[],[],[[185,[231]],108]],[[-1,[34,[-2]],[99,[[98,[84]]]],-3],[[74,[2]]],[],[],[[185,[231]]]],[[-1,[34,[-2]],[99,[[98,[84]]]],[59,[-2]],-3],[[74,[2]]],[],[],[[185,[231]],108]],[[[227,[-1,-2]],[34,[-1]],[99,[[98,[84]]]],[59,[-1]],-3],[[74,[2]]],3,[[37,[-1]]],[[185,[231]],108]],[[-1,[34,[-2]],84,[59,[-2]]],[[74,[[2,[[47,[-2]],[47,[-2]],5]]]]],[],[]],[[[227,[-1,-2]],[34,[-1]],84,[59,[-1]]],[[74,[[2,[[47,[-1]],[47,[-1]],5]]]]],3,[[37,[-1]]]],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,[[],29],[[],29],[[[34,[-1]],5,[27,[228]],[100,[-1,-2]]],-3,[],[],[]],[[[34,[-1]],5,[27,[228]],[100,[-1,-2]]],[[227,[-1,-2]]],3,[[37,[-1]]]],[[[34,[-1]],5,[27,[228]],[100,[-1,-2]]],[[227,[-1,-2]]],3,[[37,[-1]]]],[[[34,[-1]],5,[27,[228]],[100,[-1,-2]]],[[74,[[229,[-1,-3,-2]]]]],3,[[37,[-1]]],[[230,[-1,-2]]]],[[]],[[]],[[-1,29],29,[]],[[[227,[-1,-2]],29],29,3,[[37,[-1]]]],[-1,29,[]],[[[227,[-1,-2]]],29,3,[[37,[-1]]]],[[[27,[-1]],[100,[-2,-3]]],[[74,[2]]],[[185,[231]]],[3,121],[[37,[-2]]]],[[[100,[-1,-2]]],[[74,[2]]],[3,121],[[37,[-1]]]],[[[34,[-1]],[229,[-1,-3,-2]],[27,[-4]]],[[74,[2]]],3,[[37,[-1]]],[[230,[-1,-2]]],[[185,[231]]]],[[[229,[-1,-3,-2]]],[[74,[2]]],3,[[37,[-1]]],[[230,[-1,-2]]]],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[84,181],2],[-1,-2,[],[]],[-1,-2,[],[]],[[],84],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[84,11],12],[[84,182],29],[-1,-1,[]],[84,182],[[84,[50,[182]]],[[74,[2]]]],[[],5],[[],84],[[],84],[[84,-1],182,[[185,[58]]]],[[84,[50,[-1]],9,9],[[74,[182]]],[[185,[58]]]],[[84,[50,[-1]],9],[[74,[182]]],[[185,[58]]]],[-1,-2,[],[]],[[],[[7,[24,25]]]],[58,117],[[],117],[181,84],[[]],[84,[[99,[[98,[84]]]]]],[[84,58],[[27,[182]]]],[[84,182],[[74,[2]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[84,181],[[74,[2]]]],[58,117],[-1,-2,[],[]],0,0,0,0,[-1,102,[]],[[[34,[-1]],9],[[59,[-1]]],3],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[[34,[-1]],[59,[-1]]],[[7,[[59,[-1]],107]]],3],0,[[[34,[-1]],[59,[-1]]],[[7,[[2,[[59,[-1]],[59,[-1]]]],107]]],3],[[[34,[-1]],[59,[-1]]],[[7,[[59,[-1]],107]]],3],0,0,[107,107],[[[232,[-1]]],[[232,[-1]]],[4,3]],[[[233,[-1]]],[[233,[-1]]],[4,3]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,0,[[[34,[-1]],[59,[-1]]],[[59,[-1]]],3],0,[[[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],0,[[[34,[-1]],[59,[-1]],[59,[-1]]],9,3],0,0,0,[[],[[34,[-1]]],3],0,0,[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],0,[5,2],[5,2],[5,2],[5,2],0,0,0,0,0,[[[34,[-1]]],[[233,[-1]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[124,[-1]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[128]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[2,[[126,[-1]],[59,[-1]]]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[2,[[59,[-1]],[59,[-1]]]]]]],3],[[[34,[-1]],[65,[-1]]],[[27,[[71,[-1]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[2,[[59,[-1]],[59,[-1]],[59,[-1]]]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[117]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[35,[[59,[-1]]]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[117]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[1,[-1]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[2,[[59,[-1]],[59,[-1]]]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[29]]],3],[[[34,[-1]],[59,[-1]]],[[27,[117]]],3],[[[34,[-1]],[59,[-1]]],[[27,[117]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[2,[[59,[-1]],[59,[-1]]]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[123,[-1]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[14]]],3],[[[34,[-1]],[64,[-1]]],[[27,[[65,[-1]]]]],3],[[[34,[-1]],[63,[-1]]],[[27,[[59,[-1]]]]],3],[[[34,[-1]],11],12,[13,3]],[[107,11],12],[[107,11],12],[[[232,[-1]],11],12,[13,3]],[[[233,[-1]],11],12,[13,3]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[[[34,[-1]]],[[65,[-1]]],3],[[[34,[-1]]],[[65,[-1]]],3],[[[34,[-1]]],[[65,[-1]]],3],[[[34,[-1]]],[[65,[-1]]],3],[[[34,[-1]],[65,[-1]]],[[27,[[67,[-1]]]]],3],[[[34,[-1]],[123,[-1]]],[[27,[[67,[-1]]]]],3],[[[34,[-1]],129,-1],[[27,[[59,[-1]]]]],3],[[[34,[-1]],-2],[[27,[[59,[-1]]]]],3,[[116,[[1,[-1]]]]]],[[[34,[-1]],[59,[-1]]],[[27,[[63,[-1]]]]],3],[[[34,[-1]],[65,[-1]],[27,[[234,[-1]]]]],[[7,[[2,[[64,[-1]],[27,[[235,[-1]]]]]],107]]],3],[[[34,[-1]],[59,[-1]],[27,[[234,[-1]]]]],[[7,[[2,[[63,[-1]],[27,[[236,[-1]]]]]],107]]],3],0,0,[[[34,[-1]],[65,[-1]]],[[27,[[64,[-1]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[63,[-1]]]]],3],[[[34,[-1]],58],[[63,[-1]]],3],[[[34,[-1]],117],[[63,[-1]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[[34,[-1]],-1,[59,[-1]]],[[27,[[59,[-1]]]]],3],[[[34,[-1]],-1,[59,[-1]]],[[59,[-1]]],3],0,[[[34,[-1]]],2,3],0,0,[-1,[],[]],[[],5],[[],5],[[],5],[[],5],[[[34,[-1]],128],[[59,[-1]]],3],[[[34,[-1]],-1,[59,[-1]]],[[59,[-1]]],3],[[[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[34,[-1]]],[[65,[-1]]],3],[[[34,[-1]]],[[65,[-1]]],3],[[[34,[-1]]],[[65,[-1]]],3],[[[34,[-1]]],[[65,[-1]]],3],[[[34,[-1]],[59,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[34,[-1]],[50,[[59,[-1]]]]],[[59,[-1]]],3],[[[34,[-1]],129,-1],[[59,[-1]]],3],[[[34,[-1]],-1],[[59,[-1]]],3],[[[34,[-1]],-1],[[59,[-1]]],3],[[[34,[-1]],-1],[[59,[-1]]],3],[[[34,[-1]],-1],[[59,[-1]]],3],[[[34,[-1]],-2],[[59,[-1]]],3,[[116,[[1,[-1]]]]]],[[[34,[-1]],-1],[[59,[-1]]],3],[[[34,[-1]],-1],[[59,[-1]]],3],[[[34,[-1]],-1],[[59,[-1]]],3],[[[34,[-1]],-1],[[59,[-1]]],3],[[[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[34,[-1]],58],[[59,[-1]]],3],[[[34,[-1]],117],[[59,[-1]]],3],[[[34,[-1]],[50,[29]]],[[59,[-1]]],3],[[[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],[[[34,[-1]],9],[[59,[-1]]],3],[[[34,[-1]],[177,[-1]]],[[59,[-1]]],3],[[[34,[-1]],[123,[-1]]],[[59,[-1]]],3],[[[34,[-1]],15],[[59,[-1]]],3],[[[34,[-1]],14],[[59,[-1]]],3],[[[34,[-1]],[64,[-1]],[234,[-1]]],[[27,[[65,[-1]]]]],3],[[[34,[-1]],[63,[-1]],[234,[-1]]],[[27,[[59,[-1]]]]],3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[34,[-1]],-2],[[59,[-1]]],3,[[185,[58]]]],0,[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],0,0,0,0,0,0,[[[34,[-1]],[50,[[59,[-1]]]]],[[59,[-1]]],3],0,[[[34,[-1]],[65,[-1]]],[[65,[-1]]],3],0,[[],[[34,[-1]]],3],[[[34,[-1]]],[[233,[-1]]],3],[[[34,[-1]]],[[59,[-1]]],3],0,[[[34,[-1]],-2],[[59,[-1]]],3,[[116,[[1,[-1]]]]]],0,0,0,0,0,[[[34,[-1]],[59,[-1]]],[[27,[[2,[-1,[59,[-1]]]]]]],3],0,[[[34,[-1]],[59,[-1]]],[[7,[[2,[-1,[59,[-1]]]],107]]],3],[[]],[[]],[[]],[[]],0,0,[[[232,[-1]]],[[59,[-1]]],3],[[[34,[-1]],[59,[-1]],[59,[-1]]],[[7,[9,107]]],3],0,0,[[[34,[-1]],58],[[7,[[59,[-1]],179]]],3],[[[34,[-1]],[99,[[98,[84]]]],178],[[7,[[2,[178,[59,[-1]],9]],179]]],3],[[[34,[-1]],[99,[[98,[84]]]],58],[[7,[[59,[-1]],179]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[59,[-1]]]]],3],0,[[[34,[-1]],[59,[-1]]],[[7,[[59,[-1]],107]]],3],[[[34,[-1]],58],[[59,[-1]]],3],0,[[[34,[-1]],[59,[-1]],[59,[-1]]],[[59,[-1]]],3],0,[[[34,[-1]]],[[59,[-1]]],3],0,[[[34,[-1]],-2],[[59,[-1]]],3,[[185,[58]]]],0,[[[34,[-1]]],[[59,[-1]]],3],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[[[34,[-1]],[65,[-1]]],[[27,[[235,[-1]]]]],3],[[[34,[-1]],[59,[-1]]],[[27,[[236,[-1]]]]],3],[[[34,[-1]],[59,[-1]]],[[7,[[2,[[234,[-1]],[63,[-1]]]],107]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],0,[[[34,[-1]],15],[[59,[-1]]],3],0,[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[[[34,[-1]],58],[[59,[-1]]],3],[[[232,[-1]]],-1,3],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[34,[-1]],-1,-1],[[7,[[64,[-1]],107]]],3],0,[[[34,[-1]],-1,-1],[[7,[[63,[-1]],107]]],3],0,[[[232,[-1]]],[[63,[-1]]],3],0,0,0,0,0,[[]],[[117,117],[[27,[117]]]],[-1,-2,[],[]],[-1,-2,[],[]],[117,117],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[117]]],8],[[117,58],117],[117,[[27,[117]]]],[5,2],[[117,117],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[117,[50,[-1]]],117,[[185,[58]]]],[[117,11],12],[[117,11],12],[58,29],[117,29],[117,29],[117,29],[58,117],[-1,-1,[]],[58,[[27,[117]]]],[[-1,-2],15,[16,17],18],[[117,117],9],[[117,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[117,9],[117,9],[117,9],[117,9],[128,9],[[[50,[-1]]],117,[[185,[58]]]],[[[35,[29]]],117],[[],[[7,[24,25]]]],[117,[[74,[58]]]],[[[50,[-1]],9],117,[[185,[58]]]],[[[35,[29]],9],117],[[117,117],[[27,[26]]]],[117,[[50,[29]]]],[[]],[117,9],[9,117],[[],117],[[],117],[[117,-1],7,28],[117,2],[[[50,[-1]]],117,[[185,[58]]]],[[[35,[29]]],117],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[177,[-1]]],[[177,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[177,[-1]],[177,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[177,[-1]],11],12,3],[[[177,[-1]],11],12,[13,3]],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],[[35,[-1]]],[]],[[],[[35,[130]]]],[[],[[35,[131]]]],[[],[[35,[58]]]],[[129,-2],[[44,[-1]]],3,[[46,[-1]]]],[[83,-2],[[44,[-1]]],3,[[46,[-1]]]],[[130,-2],[[44,[-1]]],3,[[46,[-1]]]],[[131,-2],[[44,[-1]]],3,[[46,[-1]]]],[[]],[[]],[[]],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[129,129],[83,83],[130,130],[131,131],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[129]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[83]]],8],[-1,[[7,[130]]],8],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[131]]],8],[5,2],[5,2],[5,2],[5,2],[[129,129],9],[[83,83],9],[[130,130],9],[[131,131],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[129,11],12],[[129,11],12],[[83,11],12],[[83,11],12],[[130,11],12],[[130,11],12],[[131,11],12],[[131,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,[[27,[-2]]],3,[]],[-1,[[27,[129]]],3],[-1,[[27,[83]]],3],[-1,[[27,[130]]],3],[-1,[[27,[131]]],3],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[-1,-2],15,[16,17],18],[[129,-1],2,19],[[83,-1],2,19],[[130,-1],2,19],[[131,-1],2,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[129,9],[131,9],[[129,129],9],[129,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[130,130],[[27,[26]]]],[[131,131],[[27,[26]]]],[[]],[[]],[[]],[[]],[[129,-1],7,28],[[83,-1],7,28],[[130,-1],7,28],[[131,-1],7,28],[[-1,5],9,[]],[[130,5],9],[[131,5],9],[-1,58,[]],[130,58],[131,58],[-1,-2,[],3],[129,-1,3],[83,-1,3],[130,-1,3],[131,-1,[[237,[15]],238]],[-1,[],[]],[129],[83],[130],[131],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[132,[[7,[129]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[132,[[7,[83]]]],[-1,[[7,[-2]]],[],[]],[132,[[7,[130]]]],[132,[[7,[131]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[14,14],14],[[]],[-1,-2,[],[]],[-1,-2,[],[]],[14,14],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[14]]],8],[[14,14],14],[5,2],[[14,14],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[14,11],12],[[14,11],12],[15,14],[-1,-1,[]],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[14,9],[[],[[7,[24,25]]]],[[14,14],14],[[14,14],[[27,[26]]]],[[]],[[14,14],14],[[14,-1],7,28],[[14,14],14],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[[-1,[34,[-2]],84,-3],[[85,[2]]],[],[],86],[[-1,[34,[-2]],84],29,[],[]],0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,127],[239,239],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[239,239],9],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[239,11],12],[[239,11],12],[-1,-1,[]],[[[50,[127]]],[[74,[239]]]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[50,[127]]],[[27,[5]]]],0,[239,127],[127,9],[127,9],[239,[[35,[127]]]],[-1,-2,[],[]],[-1,29,[]],[5,[[35,[127]]]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,102,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,240,21],[-1,240,21],0,[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[240,11],12],[[240,11],12],[-1,-1,[]],0,[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[-1,[],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],0,[-1,29,[]],0,[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,58,[50,[58]],-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,58,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,58,[50,[58]],-1],7,242],[[241,5,-1],7,242],[[241,58,5,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,-1],7,242],[[241,58,-1],7,242],[5,2],[[241,11],12],[-1,-1,[]],[239,[[7,[-1,240]]],121],[239,241],[[],5],[-1,-2,[],[]],[241,9],[[],[[7,[24,25]]]],[[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[5,2],[5,2],[5,2],[5,2],[243,7],[243,7],[243,7],[244,7],[245,7],[246,7],[246,7],[[247,11],12],[[243,11],12],[[244,11],12],[[245,11],12],[[246,11],12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],5],[[],5],[[],5],[[],5],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[247,9],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[],[[7,[24,25]]]],[[]],[[]],[[]],[[]],[[]],[[247,9],7],[[247,[50,[127]]],7],[[247,128],7],[[243,-1],[[7,[2]]],[122,17]],[[243,-1],[[7,[2]]],[122,17]],[[247,248],7],[[247,249],7],[[243,-1],[[7,[2]]],[122,17]],[[245,-1],[[7,[2]]],[122,17]],[[246,58,-1],[[7,[2]]],[122,17]],[[246,58,-1],[[7,[2]]],[122,17]],[[247,250],7],[[247,251],7],[[247,252],7],[[247,253],7],[[244,-1],[[7,[2]]],[122,17]],[[247,[27,[5]]],7],[[247,58,-1],7,[122,17]],[[247,58,133,58,-1],7,[122,17]],[247,7],[[247,[27,[5]]],7],[[247,-1],7,[122,17]],[[247,58],7],[[247,58,5],7],[[247,58,133,58,5],7],[[247,5],7],[[247,58,5],7],[[247,58,133,58,5],7],[[247,132],7],[[247,133],7],[[247,15],7],[[247,127],7],[247,7],[[247,58],7],[[247,58,133,58],7],[[244,-1],[[7,[2]]],[122,17]],[-1,[[7,[239,240]]],122],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[235,[-1]]],[[235,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[-1,[[7,[[235,[-2]]]]],8,[121,3]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[5,2],[[[235,[-1]],[235,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[235,[-1]],11],12,[13,3]],[-1,-1,[]],[[[235,[-1]]],[[67,[-1]]],3],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[235,[-1]],-2],7,[122,3],28],[-1,-2,[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[235,[-1]],[101,[-1]]],[[64,[-1]]],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[236,[-1]]],[[236,[-1]]],[4,3]],[[-1,-2],2,[],[]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[236,[-2]]]]],8,[121,3]],[5,2],[[[236,[-1]],[236,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[236,[-1]],11],12,3],[[[236,[-1]],11],12,[13,3]],[-1,-1,[]],[[[34,[-1]],[59,[-1]]],[[27,[[236,[-1]]]]],3],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[]],[[[236,[-1]],-2],7,[122,3],28],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[[[236,[-1]],[101,[-1]]],[[63,[-1]]],3],0,0,0,0,0,0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[254,[-1,-2]]],[[254,[-1,-2]]],[4,223],[4,3]],[[-1,-2],2,[],[]],[[[254,[-1,-2]],[254,[-1,-2]]],26,223,3],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[254,[-2,-3]]]]],8,[121,223],[121,3]],[5,2],[[[254,[-1,-2]],[254,[-1,-2]]],9,[10,223],[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[[254,[-1,-2]],11],12,[223,21],3],[[[254,[-1,-2]],11],12,[13,223],[13,3]],[-1,-1,[]],[58,[[7,[[254,[-1,-2]],255]]],223,3],[58,[[7,[[63,[-1]],107]]],3],[58,[[7,[[254,[129,-1]],107]]],3],[[-1,-2],[[254,[-1,-2]]],223,3],[[-1,-2],15,[16,17],18],[[[254,[-1,-2]],-3],2,223,3,19],[[-1,-2],[[20,[-2,-3]]],[],[21,22,23],[]],[[],5],[-1,-2,[],[]],[[[254,[-1,-2]]],[[67,[-2]]],223,3],[[],[[7,[24,25]]]],[[[254,[-1,-2]],[254,[-1,-2]]],[[27,[26]]],223,3],[[[254,[-1,-2]]],[[2,[-2,-2]]],223,3],[[]],[[[254,[-1,-2]],-3],7,[122,223],[122,3],28],[[[254,[-1,-2]]],-1,223,3],[[[254,[-1,-2]]],-2,223,3],[[[254,[-1,-2]]],29,223,3],[-1,-2,[],[]],[-1,29,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[[[254,[-1,-2]]],-2,223,3],[-1,-2,[],[]],0,[[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[234,[-1]]],[[234,[-1]]],[4,3]],[[-1,-2],2,[],[]],0,[[],[[234,[-1]]],[93,3]],[5,-1,[]],[5,-1,[]],[[-1,-2],[[7,[[6,[-3,-4]]]]],[],[],[],[]],[-1,[[7,[[234,[-2]]]]],8,[121,3]],[5,2],[[[234,[-1]],[234,[-1]]],9,[10,3]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],[[-1,-2],9,[],[]],0,[[[234,[-1]],11],12,[13,3]],[-1,-1,[]],[[[234,[-1]],[64,[-1]]],[[27,[[235,[-1]]]]],3],[[[234,[-1]],[63,[-1]]],[[27,[[236,[-1]]]]],3],[[[63,[-1]]],[[27,[[236,[-1]]]]],3],[[],5],[[[234,[-1]],[34,[-1]],[59,[-1]]],[[27,[[63,[-1]]]]],3],[[[234,[-1]],[63,[-1]],[27,[[236,[-1]]]]],[[27,[[27,[[236,[-1]]]]]]],3],[-1,-2,[],[]],[[],[[7,[24,25]]]],[[],[[234,[-1]]],3],[[[34,[-1]],[59,[-1]]],[[2,[[234,[-1]],[27,[[63,[-1]]]]]]],3],[[[234,[-1]],[101,[-1]]],[[63,[-1]]],3],[[]],[[[234,[-1]],58,[101,[-1]]],[[2,[[63,[-1]],[236,[-1]]]]],3],[[[234,[-1]],117,[101,[-1]]],[[2,[[63,[-1]],[236,[-1]]]]],3],[[[234,[-1]],-2],7,[122,3],28],[-1,-2,[],[]],[[[234,[-1]]],[[34,[-1]]],3],[[[234,[-1]],[63,[-1]]],[[7,[[2,[[34,[-1]],[59,[-1]]]],107]]],3],[[[34,[-1]]],[[234,[-1]]],3],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,30,[]],[[[32,[-1,31]]],[[32,[33,31]]],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]]],"c":[],"p":[[4,"Num",0],[15,"tuple"],[8,"LurkField",1420],[8,"Clone",4693],[15,"usize"],[3,"With",4694],[4,"Result",4695],[8,"Deserializer",4696],[15,"bool"],[8,"PartialEq",4697],[3,"Formatter",4698],[6,"Result",4698],[8,"Debug",4698],[4,"UInt",4143],[15,"u64"],[8,"Hash",4699],[8,"Sized",4700],[8,"BuildHasher",4699],[8,"Hasher",4699],[3,"IndentedSection",4701],[8,"Display",4698],[8,"Send",4700],[8,"Sync",4700],[3,"Layout",4702],[3,"LayoutError",4702],[4,"Ordering",4697],[4,"Option",4703],[8,"Serializer",4704],[3,"String",4705],[3,"TypeId",4706],[3,"Global",4707],[3,"Box",4708],[8,"Any",4706],[3,"Store",3533],[3,"Vec",4709],[3,"MultiFrame",105],[8,"Coprocessor",617],[3,"CircuitFrame",105],[4,"FoldingConfig",3123],[3,"Arc",4710],[4,"Meta",973],[3,"GlobalAllocations",191],[3,"AllocatedPtr",278],[3,"AllocatedNum",4711],[4,"SynthesisError",4712],[8,"ConstraintSystem",4712],[3,"IO",973],[3,"Witness",973],[3,"Frame",973],[15,"slice"],[3,"AllocatedContPtr",278],[6,"ConsCircuitWitness",1661],[6,"ContCircuitWitness",1661],[3,"Bls12",4713],[3,"PreparedVerifyingKey",4714],[3,"Proof",4715],[3,"Scalar",4716],[15,"str"],[6,"Ptr",3282],[4,"Boolean",4717],[8,"PrimeField",4718],[8,"FnOnce",4719],[6,"ZExprPtr",4598],[6,"ZContPtr",4598],[6,"ContPtr",3282],[8,"IntoHashComponents",1523],[15,"array"],[8,"AsAllocatedHashComponents",278],[4,"ConsName",1661],[4,"ContName",1661],[4,"Continuation",536],[3,"Utf8PathBuf",4720],[3,"HashMap",4721],[6,"Result",4722],[4,"Backend",393],[6,"Scalar",4723],[3,"Repl",417],[3,"Utf8Path",4720],[4,"Flow",438],[3,"ParallelConfig",438],[3,"WitnessGeneration",438],[3,"Config",438],[4,"ContTag",3907],[3,"State",3495],[6,"Result",4724],[8,"Write",4725],[3,"CircomCoprocessor",629],[8,"CircomGadget",186],[4,"TrieCoproc",660],[3,"NewCoprocessor",660],[3,"LookupCoprocessor",660],[3,"InsertCoprocessor",660],[8,"Default",4726],[3,"Trie",660],[4,"Error",660],[3,"LookupProof",660],[3,"InsertProof",660],[3,"RefCell",4727],[3,"Rc",4728],[3,"Lang",1212],[3,"PoseidonCache",1523],[8,"Error",4729],[4,"ReductionError",878],[4,"LurkError",878],[4,"ProofError",878],[4,"NovaError",4730],[3,"Error",3533],[8,"Copy",4700],[4,"Status",973],[3,"Evaluator",973],[3,"Error",4698],[3,"FrameIt",973],[8,"Fn",4719],[3,"Take",4731],[3,"Binding",1212],[8,"Into",4732],[3,"Symbol",3799],[4,"Coproc",1212],[3,"DummyCoprocessor",1212],[3,"IndexMap",4733],[8,"Deserialize",4696],[8,"Serialize",4704],[3,"Thunk",1335],[4,"Expression",1335],[4,"LanguageField",1420],[3,"FWrap",1420],[15,"u8"],[15,"char"],[4,"ExprTag",3907],[4,"Op1",3907],[4,"Op2",3907],[15,"u16"],[15,"u32"],[15,"u128"],[3,"HashConstants",1523],[6,"U3",4734],[3,"PoseidonConstants",4735],[6,"U4",4734],[6,"U6",4734],[6,"U8",4734],[4,"HashConst",1523],[4,"HashArity",1523],[3,"InversePoseidonCache",1523],[3,"HashWitness",1661],[8,"HashName",1661],[8,"Eq",4697],[6,"ConsStub",1661],[3,"Cons",1661],[4,"Stub",1661],[6,"ConsWitness",1661],[3,"CircuitHashWitness",1661],[6,"HashCircuitWitnessBlocks",1661],[8,"ContentAddressed",1661],[3,"ScalarCons",1661],[3,"ScalarCont",1661],[3,"Cont",1661],[6,"ContStub",1661],[6,"ContWitness",1661],[6,"Preimage",1661],[3,"Func",2038],[3,"Store",2543],[3,"GlobalAllocator",2311],[4,"Ptr",2465],[3,"Preimages",2357],[3,"Frame",2357],[3,"Var",2038],[4,"Tag",2038],[4,"Lit",2038],[3,"Block",2038],[4,"Ctrl",2038],[4,"Op",2038],[6,"AString",2038],[4,"AllocatedVal",2311],[4,"PreimageData",2357],[4,"ZChildren",2465],[6,"ZPtr",2465],[4,"Syntax",3868],[6,"Span",2654],[4,"Error",2654],[3,"ZStore",2598],[3,"Package",2626],[6,"SymbolRef",2626],[4,"LitBase",2695],[6,"ParseResult",2654],[8,"AsRef",4732],[3,"ParseError",2742],[8,"InputLength",4736],[8,"AsBytes",4736],[4,"ErrorKind",4737],[4,"ParseErrorKind",2742],[6,"IResult",4738],[4,"Pos",2824],[4,"StringFragment",2862],[3,"TestConstraintSystem",4739],[3,"Proof",2943],[8,"Engine",4740],[8,"MultiMillerLoop",4740],[3,"PublicParams",2943],[3,"Groth16Prover",2943],[3,"Parameters",4741],[3,"GenericSRS",4742],[8,"RngCore",4743],[3,"VerifierSRS",4742],[3,"AggregateProofAndInstance",4744],[3,"PublicParams",3020],[8,"CurveCycleEquipped",3020],[4,"Proof",3020],[3,"NovaProver",3020],[6,"C1",3020],[3,"NIVCStep",3123],[3,"PublicParams",3123],[4,"Proof",3123],[3,"SuperNovaProver",3123],[3,"NIVCSteps",3123],[8,"Group",4745],[6,"G1",3020],[6,"G2",3020],[3,"TrivialSecondaryCircuit",4746],[3,"RunningClaim",4747],[4,"SuperNovaError",4748],[3,"GPtr",3282],[4,"RawPtr",3282],[8,"Tag",3907],[4,"Error",3392],[3,"Error",4749],[3,"Error",4724],[3,"ReplState",3423],[3,"Command",4750],[3,"Repl",3423],[8,"ReplTrait",3423],[3,"Path",4751],[3,"ConstantPtrs",3533],[3,"NamedConstants",3533],[3,"ZStore",4647],[4,"ZCont",4466],[4,"ZExpr",4546],[8,"From",4732],[8,"Field",4718],[4,"ZData",4188],[4,"SerdeError",4236],[3,"Deserializer",4269],[8,"Visitor",4696],[3,"SerializeCell",4321],[3,"SerializeMap",4321],[3,"SerializeTupleVariant",4321],[3,"StructSerializer",4321],[3,"Serializer",4321],[15,"f32"],[15,"f64"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[3,"ZPtr",4598],[3,"Error",4722],[8,"ToInputs",100],[13,"Let",585],[13,"LetRec",585],[13,"Call0",585],[13,"Call",585],[13,"Call2",585],[13,"Tail",585],[13,"Lookup",585],[13,"Unop",585],[13,"Binop",585],[13,"Binop2",585],[13,"If",585],[13,"Emit",585],[8,"CoCircuit",617],[6,"ChildMap",660],[8,"Evaluable",973],[8,"CAddr",1661],[4,"Val",2357],[13,"Pos",2856],[8,"Prover",2921],[8,"Provable",2921],[8,"TypePredicates",3282],[8,"Op",3907],[8,"Write",4185],[13,"Let",4514],[13,"LetRec",4514],[13,"Call0",4514],[13,"Call",4514],[13,"Call2",4514],[13,"Tail",4514],[13,"Lookup",4514],[13,"Unop",4514],[13,"Binop",4514],[13,"Binop2",4514],[13,"If",4514],[13,"Emit",4514],[13,"Fun",4595]]},\
"lurk_macros":{"doc":"Lurk Macros","t":"YYOOX","n":["Coproc","TryFromRepr","let_store","lurk","serde_test"],"q":[[0,"lurk_macros"]],"d":["","This macro derives an impl of TryFrom for an enum type T …","Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …","","This macro is used to generate round-trip serialization …"],"i":[0,0,0,0,0],"f":[0,0,0,0,0],"c":[],"p":[]},\
"lurk_metrics":{"doc":"Metrics infrastructure","t":"RDDLLLLLLLLLLLLLLLLLLL","n":["METRICS_TARGET_NAME","MetricsSink","MetricsSinkHandle","borrow","borrow","borrow_mut","borrow_mut","drop","fmt","fmt","from","from","init","into","into","shutdown","try_from","try_from","try_into","try_into","type_id","type_id"],"q":[[0,"lurk_metrics"],[22,"core::fmt"],[23,"core::fmt"],[24,"core::any"]],"d":["","A global metrics sink that keeps a list of thread-local …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Initialize and install the global metrics sink, and return …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,0,3,1,3,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[3,4],5],[[1,4],5],[-1,-1,[]],[-1,-1,[]],[[],1],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,[[6,[-2]]],[],[]],[-1,7,[]],[-1,7,[]]],"c":[],"p":[[3,"MetricsSinkHandle",0],[15,"tuple"],[3,"MetricsSink",0],[3,"Formatter",22],[6,"Result",22],[4,"Result",23],[3,"TypeId",24]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
