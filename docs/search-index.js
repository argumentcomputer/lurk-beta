var searchIndex = JSON.parse('{\
"clutch":{"doc":"","t":"DLLLLLLLLLLLLLLLLLLLLL","n":["ClutchState","borrow","borrow_mut","command","deref","deref_mut","drop","from","handle_meta","handle_non_meta","init","into","maybe_handle_command","name","new","process_line","prompt","references","try_from","try_into","type_id","vzip"],"q":[[0,"clutch"]],"d":["","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Returns two bools. First bool is true if input is a …","","","","","","","","",""],"i":[0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4],"f":[0,[[]],[[]],[[],1],[2],[2],[2],[[]],[[[4,[3]],[5,[3]],[6,[3]],7,[0,[[9,[8]],10]]],11],[[[4,[3]],[5,[3]],[6,[3]],12],11],[[],2],[[]],[[[4,[3]],[5,[3]],13,7],11],[[],14],[[[5,[3]],2,[15,[1]]],[[4,[3]]]],[[[4,[3]],14],14],[[[4,[3]]],14],[[16,17,[19,[18]]],[[21,[20]]]],[[],21],[[],21],[[],22],[[]]],"c":[],"p":[[3,"Command"],[15,"usize"],[6,"Scalar"],[3,"ClutchState"],[3,"Store"],[3,"Ptr"],[3,"Package"],[3,"Path"],[8,"AsRef"],[8,"Copy"],[6,"Result"],[15,"bool"],[15,"str"],[3,"String"],[4,"Option"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"fcomm":{"doc":"","t":"DEDDGRDNDININEDDGNNDNDDGGEGNNNHDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLFMMLLLLLLLLLLLLLLLLLLLLLLLLMMMMFMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLALLLFLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLMMFMLLLLMMMLLLFKLLLLLLLLLLLLLLKLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMMMFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLNNENNNNNNNNNLLLLLLLLLLLLLLLLLLLLLLL","n":["Cert","Claim","Commitment","CommittedExpression","CommittedExpressionMap","DEFAULT_REDUCTION_COUNT","Evaluation","Evaluation","Expression","FileStore","Five","Id","Ipld","LurkPtr","LurkScalarBytes","LurkScalarIpld","NovaProofCache","One","OneHundred","Opening","Opening","OpeningRequest","Proof","PublicParamDiskCache","PublicParamMemCache","ReductionCount","S1","ScalarBytes","Source","Ten","VERBOSE","VerificationResult","apply","apply_and_prove","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chain","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid","cid_from_string","claim","claim_cid","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","comm","commitment","commitment","commitment","committed_expression_store","cont","cont_out","count","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","env","env_out","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","error","eval","eval","eval_and_prove","evaluate","evaluation","evaluation_io","expr","expr","expr","expr_out","expr_ptr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_comm","from_hex","from_ptr","from_ptr_and_secret","from_ptr_with_hiding","get_hash","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","has_id","hash","id","id","id","id","id","id","id","id","id","id","id","id","id","id","id","init","init","init","init","init","init","init","init","init","init","init","init","init","init","input","input","into","into","into","into","into","into","into","into","into","into","into","into","into","into","io","is_evaluation","is_opening","iterations","new_commitment","nova_proof_cache","num_steps","open","open_and_prove","opening","opening_io","output","proof","proof_cid","prove_claim","ptr","ptr","public_params","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_path","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","read_from_stdin","reduction_count","references","references","references","references","references","references","references","references","references","references","references","references","references","references","secret","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","signature","status","status","string_cid","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verified","verified","verifier_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","write_to_path","CacheError","CommitmentParseError","Error","EvaluationFailure","IOError","JsonError","OpeningFailure","StoreError","SynthesisError","UnknownCommitment","UnsupportedReductionCount","VerificationError","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","from","init","into","provide","references","source","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"fcomm"],[466,"fcomm::error"]],"deturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,7,0,0,17,0,27,0,0,0,0,17,17,0,7,0,0,0,0,0,0,27,27,17,0,0,24,24,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,22,63,17,18,21,22,23,24,25,26,27,4,33,12,7,29,0,12,29,17,18,21,22,23,24,25,26,27,4,7,29,17,18,21,22,23,24,25,26,27,4,7,29,21,22,24,4,0,18,18,17,18,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,18,18,17,18,21,22,23,24,25,26,27,4,7,29,17,18,21,24,25,7,0,18,23,12,0,7,12,18,23,4,18,4,18,21,22,23,24,25,26,27,4,33,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,21,21,27,21,21,17,63,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,63,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,22,24,17,18,21,22,23,24,25,26,27,4,33,12,7,29,12,7,7,18,24,0,12,24,24,7,12,24,12,29,12,21,27,0,64,17,18,21,22,23,24,25,26,27,4,33,12,7,29,64,17,18,21,22,23,24,25,26,27,4,33,12,7,29,12,17,18,21,22,23,24,25,26,27,4,33,12,7,29,4,17,18,21,22,23,24,25,26,27,4,33,12,7,29,29,18,24,0,17,18,21,22,23,24,25,26,27,4,7,29,21,17,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,17,18,21,22,23,24,25,26,27,4,33,12,7,29,33,29,29,12,17,18,21,22,23,24,25,26,27,4,33,12,7,29,64,17,18,21,22,23,24,25,26,27,4,33,12,7,29,8,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[3,[1]],[4,[1]],5,6],[[9,[[7,[1]],8]]]],[[[2,[1]],[3,[1]],[4,[1]],5,6,6,[10,[1]],11],[[9,[[12,[1]],8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],13],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[15,[[9,[13,16]]]],0,0,[17,17],[18,18],[[[21,[[0,[19,20]]]]],[[21,[[0,[19,20]]]]]],[[[22,[[0,[19,20]]]]],[[22,[[0,[19,20]]]]]],[23,23],[[[24,[[0,[19,20]]]]],[[24,[[0,[19,20]]]]]],[25,25],[26,26],[27,27],[[[4,[[0,[19,20,28]]]]],[[4,[[0,[19,20,28]]]]]],[[[7,[[0,[19,20]]]]],[[7,[[0,[19,20]]]]]],[29,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[],30],0,0,[17,5],[[],18],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[31,[[9,[17]]]],[31,[[9,[18]]]],[31,[[9,[[21,[20]]]]]],[31,[[9,[[22,[[0,[32,20]]]]]]]],[31,[[9,[23]]]],[31,[[9,[[24,[[0,[32,20]]]]]]]],[31,[[9,[25]]]],[31,[[9,[26]]]],[31,[[9,[27]]]],[31,[[9,[[4,[[0,[32,20,28]]]]]]]],[31,[[9,[33]]]],[31,[[9,[[12,[[0,[32,20]]]]]]]],[31,[[9,[[7,[[0,[32,20]]]]]]]],[31,[[9,[29]]]],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],[5],0,0,[[17,17],6],[[18,18],6],[[[21,[[0,[34,20]]]],[21,[[0,[34,20]]]]],6],[[[22,[[0,[34,20]]]],[22,[[0,[34,20]]]]],6],[[23,23],6],[[[24,[[0,[34,20]]]],[24,[[0,[34,20]]]]],6],[[25,25],6],[[26,26],6],[[27,27],6],[[[4,[[0,[34,20,28]]]],[4,[[0,[34,20,28]]]]],6],[[[7,[[0,[34,20]]]],[7,[[0,[34,20]]]]],6],[[29,29],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],0,[[[2,[[0,[20,28]]]],[3,[[0,[20,28]]]],5],[[9,[18,8]]]],[[23,[2,[[0,[20,28,35]]]],5],[[9,[[3,[[0,[20,28,35]]]],8]]]],[[[2,[1]],[3,[1]],5,6,[10,[1]],11],[[9,[[12,[1]],8]]]],[[[2,[20]],[3,[20]],5],[[9,[8]]]],[[[7,[20]]],[[36,[18]]]],[[[12,[1]],[2,[1]]],[[9,[8]]]],0,0,0,0,[[[4,[[0,[20,28,35]]]],[2,[[0,[20,28,35]]]],5],[[9,[[3,[[0,[20,28,35]]]],8]]]],[[18,37],38],[[[21,[[0,[39,20]]]],37],38],[[[22,[[0,[39,20]]]],37],38],[[23,37],38],[[[24,[[0,[39,20]]]],37],38],[[25,37],38],[[26,37],38],[[27,37],38],[[[4,[[0,[39,20,28]]]],37],38],[[33,37],38],[[[7,[[0,[39,20]]]],37],38],[[29,37],38],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[[0,[20,28,35]]]],[3,[[0,[20,28,35]]]]],[[21,[[0,[20,28,35]]]]]],[40,[[9,[[21,[20]]]]]],[[[2,[[0,[20,28]]]],[3,[[0,[20,28]]]]],27],[[[2,[[0,[20,28,35]]]],[3,[[0,[20,28,35]]]],[0,[20,28,35]]],[[21,[[0,[20,28,35]]]]]],[[[2,[[0,[20,28,35]]]],[3,[[0,[20,28,35]]]]]],[[[0,[41,42]],43],44],[45,6],[45,6],[45,6],[45,6],[45,6],[45,6],[45,6],[45,6],[45,6],[45,6],[45,6],[45,6],[45,6],[45,6],[45,6],[[17,46]],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[12,[1]],[2,[1]]],[[9,[8]]]],[[[7,[20]]],6],[[[7,[20]]],6],0,0,[5,47],0,[[[2,[1]],[22,[1]],5,6],[[9,[[7,[1]],8]]]],[[[2,[1]],[22,[1]],5,6,[10,[1]],11],[[9,[[12,[1]],8]]]],[[[7,[20]]],[[36,[[24,[20]]]]]],[[[12,[1]],[2,[1]]],[[9,[8]]]],0,0,0,[[[2,[1]],[7,[1]],5,6,[10,[1]],11],[[9,[[12,[1]],8]]]],[[[21,[[0,[20,28,35]]]],[2,[[0,[20,28,35]]]]],[[3,[[0,[20,28,35]]]]]],[[27,[2,[[0,[20,28,35]]]],5],[[3,[[0,[20,28,35]]]]]],[5,[[9,[[48,[11]],8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[[40,[49]]],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],[[],[[9,[8]]]],0,[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],[[50,51,[52,[14]]],[[9,[53]]]],0,[[17,54],9],[[18,54],9],[[[21,[20]],54],9],[[[22,[[0,[28,20]]]],54],9],[[23,54],9],[[[24,[[0,[28,20]]]],54],9],[[25,54],9],[[26,54],9],[[27,54],9],[[[4,[[0,[28,20,28]]]],54],9],[[33,54],9],[[[12,[[0,[28,20]]]],54],9],[[[7,[[0,[28,20]]]],54],9],[[29,54],9],0,0,0,[31,[[9,[13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[21,[20]]],45],[[],9],[5,[[9,[17]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],[[],55],0,0,0,[[[12,[1]],11],[[9,[33,8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],[[[40,[49]]]],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[5],[5],[5],[[8,37],38],[[8,37],38],[56,8],[57,8],[58,8],[[]],[59,8],[60,8],[[],5],[[]],[61],[[50,51,[52,[14]]],[[9,[53]]]],[8,[[36,[62]]]],[[],45],[[],9],[[],9],[[],55],[[]]],"c":[],"p":[[6,"S1"],[3,"Store"],[3,"Ptr"],[3,"CommittedExpression"],[15,"usize"],[15,"bool"],[4,"Claim"],[4,"Error"],[4,"Result"],[3,"NovaProver"],[3,"PublicParams"],[3,"Proof"],[6,"Cid"],[3,"Cid"],[15,"str"],[4,"Error"],[4,"ReductionCount"],[3,"Evaluation"],[8,"Clone"],[8,"LurkField"],[3,"Commitment"],[3,"OpeningRequest"],[3,"Expression"],[3,"Opening"],[3,"LurkScalarBytes"],[3,"LurkScalarIpld"],[4,"LurkPtr"],[8,"Serialize"],[3,"Cert"],[6,"CommittedExpressionMap"],[8,"Deserializer"],[8,"Deserialize"],[3,"VerificationResult"],[8,"PartialEq"],[8,"DeserializeOwned"],[4,"Option"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"AsRef"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[15,"u64"],[3,"String"],[8,"Hasher"],[6,"NovaProofCache"],[3,"Arc"],[3,"Path"],[3,"RawCodec"],[8,"Read"],[8,"Extend"],[3,"Error"],[8,"Serializer"],[3,"TypeId"],[3,"Error"],[4,"SynthesisError"],[3,"Error"],[3,"Error"],[4,"FromHexError"],[3,"Demand"],[8,"Error"],[8,"Id"],[8,"FileStore"]]},\
"lurk":{"doc":"","t":"ENCCRNCLLLALLLLLLLLLAALLLLLLLLALLLLLALLLAALALAALALAALLLLLALAIKKNENNIDDDDNNNENDLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLFMLLLLLLLLFMLLLLLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLKLLLKLLLLLKLLLKLLLLLMLLKLFLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMNSDEINNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNDEGGDEGGNNNNNNNNNNNNNNNNNNIDNNNNNRRNNNNNNNENNNNNLLLLLLLLLLLLLLMLLLLLLLLMLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNNIEEDNNNNNNLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLRDLLLLLLLLLLMLLLLLLLMLLLLLLLLLLLERNRRNLLLLLLLLLLLLFLFLLLLLLLIIIQLLALLLKALKKKKFDHDDRLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLMLLLLLLLLLLLLLLLLLLLGGNGGGGDGEDNGGGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLDDILLLLLLKLMLLLLLLMLLLLLLKLKLLLLLLMKLLKLKLLLKLKLLLFFFLLLLLLLLLLNNNNNNNNNNNNNNNNNNEEDDNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNNNNNNNNNNNNNNNNDDENNNDNENNEEENINNNDNNINNIQDDDGGDNNQNNDNINNLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMMLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLMMLLLLLLLMLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLKLKLLLLLMMMMMLLMLLLLLLMLMMLMLLLMLLLMMLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLMMLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNENDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLMLLLLLLLLLLLLLLLLLLNNNNNNNNNNNNNNNNENNNNNNNNENNNNNNNNNNNNNNNNIEENNNNNNNNNINNNNNNKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIKL","n":["Num","Scalar","Sym","Symbol","TEST_SEED","U64","UInt","add_assign","borrow","borrow_mut","circuit","clone","clone_into","deref","deref_mut","deserialize","div_assign","drop","eq","equivalent","eval","field","fmt","fmt","from","from","from","from_scalar","get_hash","hash","hash_witness","init","into","into_scalar","is_negative","is_zero","light_data","most_negative","most_positive","mul_assign","package","parser","partial_cmp","proof","references","repl","scalar_store","serialize","store","sub_assign","sym","tag","to_owned","to_string","try_from","try_into","type_id","uint","vzip","writer","ToInputs","input_size","to_inputs","ApplyContinuation","Control","Error","Error","Evaluable","Evaluator","Frame","FrameIt","IO","Incomplete","MakeThunk","Return","Status","Terminal","Witness","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cont","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_sym_env","env","eq","eq","eq","eq","equivalent","equivalent","equivalent","eval","eval_to_ptr","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","generate_frames","get_frames","i","init","init","init","init","init","init","init","initial","input","input_size","into","into","into","into","into","into","into","into_iter","into_results","is_apply_continuation","is_complete","is_complete","is_complete","is_complete","is_error","is_error","is_error","is_incomplete","is_make_thunk","is_return","is_terminal","is_terminal","is_terminal","iter","log","log","log","maybe_emitted_expression","new","next","output","peekmore","precedes","reduce","reduce","reduce_with_witness","references","references","references","references","references","references","references","serialize","significant_frame_count","status","status","to_cont","to_inputs","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_vector","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","witness","BLS12_381","FIELD","FWrap","LanguageField","LurkField","Pallas","Vesta","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","de","deref","deref","deref_mut","deref_mut","deserialize","drop","drop","eq","equivalent","fmt","from","from","from_bytes","from_char","from_cont_tag","from_expr_tag","from_op1","from_op2","from_u16","from_u32","from_u64","get_field","get_hash","hash","hex_digits","init","init","into","into","is_negative","most_negative","most_positive","partial_cmp","references","references","ser","serialize","to_bytes","to_char","to_cont_tag","to_expr_tag","to_op1","to_op2","to_owned","to_u16","to_u32","to_u32_unchecked","to_u64","to_u64_unchecked","trimmed_hex_digits","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ApplyContinuation","Begin","Binding","Blank","ClosedEnv","Cons","ConsName","ConsStub","ConsWitness","Cont","ContName","ContStub","ContWitness","Dummy","Env","EnvCaar","EnvCar","EnvToUse","Expanded","ExpandedInner","ExpandedInner0","Expr","ExprCaaadr","ExprCaadr","ExprCadr","ExprCddr","ExprCdr","ExtendedClosureEnv","ExtendedRec","FunBody","FunExpanded","HashName","HashWitness","InnerBody","InnerLambda","Lambda","LetLike","Lookup","MAX_CONSES_PER_REDUCTION","MAX_CONTS_PER_REDUCTION","MakeThunk","NeverUsed","NeverUsed","NewRec","NewRecCadr","NewerCont","NewerCont2","Stub","TheCons","UnevaledArgs","UnevaledArgsCdr","UnopConsLike","Value","all_names","assert_invariants","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car_cdr","car_cdr","car_cdr_mut","car_cdr_mut","car_cdr_mut_named","car_cdr_mut_named","car_cdr_named","car_cdr_named","cdr","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cons","cons","cons","cons_named","cons_named","cont_ptr","continuation","default","default","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","drop","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","extend_named","extend_named","fetch_cont","fetch_cont","fetch_named_cont","fetch_named_cont","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_assigned_slot","get_hash","get_hash","hash","hash","index","index","index","init","init","init","init","init","init","intern_cont","intern_cont","intern_named_cont","intern_named_cont","into","into","into","into","into","into","length","new_blank","new_dummy","new_from_stub","references","references","references","references","references","references","slots","strcons","strcons","strcons_named","strcons_named","stubs_used","stubs_used_count","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","total_stub","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Atom","Cell","Char","Comm","Cons","Encodable","LightData","LightExpr","LightStore","Nil","Num","StrCons","StrNil","SymCons","SymNil","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","byte_count","clone","clone","clone_into","clone_into","de","de","de","de","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","eq","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","from","from","from","init","init","init","into","into","into","references","references","references","scalar_map","ser","ser","ser","ser","tag","tag_is_atom","tag_is_small","to_owned","to_owned","to_string","to_string","to_trimmed_le_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","LURK_EXTERNAL_SYMBOL_NAMES","Package","add_external_symbol","add_external_symbols","borrow","borrow_mut","clone","clone_into","default","deref","deref_mut","drop","external_symbols","fmt","from","init","into","local_symbol","lurk","name","name","new","references","relative_abbreviation","remove_external_symbol","remove_external_symbols","root","to_owned","try_from","try_into","type_id","vzip","Error","KEYWORD_MARKER","NoInput","SYM_MARKER","SYM_SEPARATOR","Syntax","borrow","borrow_mut","clone","clone_into","deref","deref_mut","drop","fmt","fmt","from","init","into","names_keyword","provide","read_symbol_path","references","to_owned","to_string","try_from","try_into","type_id","vzip","Provable","Prover","PublicParameters","PublicParams","expected_total_iterations","frame_padding_count","groth16","multiframe_padding_count","needs_frame_padding","needs_multiframe_padding","new","nova","outer_synthesize","public_input_size","public_inputs","reduction_count","reduction_count","verify_sequential_css","Groth16Prover","INNER_PRODUCT_SRS","Proof","PublicParams","TRANSCRIPT_INCLUDE","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","create_groth_params","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","drop","drop","drop","from","from","from","init","init","init","into","into","into","new","outer_prove","proof","proof_count","prove","reduction_count","reduction_count","references","references","references","serialize","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_groth16_proof","vzip","vzip","vzip","C1","C2","Compressed","EE1","EE2","G1","G2","NovaProver","NovaPublicParams","Proof","PublicParams","Recursive","S1","S2","SS1","SS2","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","compress","deref","deref","deref","deref_mut","deref_mut","deref_mut","deserialize","deserialize","drop","drop","drop","evaluate_and_prove","from","from","from","init","init","init","into","into","into","new","prove_recursively","public_params","reduction_count","references","references","references","serialize","serialize","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","vzip","vzip","vzip","Repl","ReplState","ReplTrait","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","command","command","command","deref","deref","deref_mut","deref_mut","drop","drop","env","eval_expr","from","from","handle_file","handle_form","handle_load","handle_meta","handle_meta","handle_non_meta","handle_non_meta","handle_run","init","init","into","into","limit","maybe_handle_command","maybe_handle_command","maybe_handle_command","name","name","new","new","new","new","process_line","process_line","prompt","prompt","references","references","repl","repl_cli","run_repl","save_history","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Binop","Binop2","Call","Call2","Char","Comm","Cons","Dummy","Emit","Error","Fun","If","Let","LetRec","Lookup","Nil","Num","Outermost","ScalarContinuation","ScalarExpression","ScalarStore","ScalarThunk","Str","Sym","Tail","Terminal","Thunk","UInt","Unop","add_one_ptr","add_ptr","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","finalize","fmt","fmt","fmt","fmt","fmt","from","from","from","from","get_cont","get_expr","get_hash","hash","init","init","init","init","into","into","into","into","new_with_expr","references","references","references","references","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_store","to_store_with_expr","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","arg","body","closed_env","A3","A3","A4","A4","A6","A6","A8","A8","Binop","Binop2","Call","Call0","Call2","Char","Comm","Cons","ConstantPtrs","ContPtr","Continuation","Create","Dummy","Emit","Error","Error","Expression","Fun","Get","HashArity","HashConst","HashScalar","If","IntoHashComponents","Let","LetRec","Lookup","NamedConstants","Nil","Num","Object","Opaque","Outermost","Pointer","Pointer","Ptr","RawPtr","SPtr","ScalarContPtr","ScalarPtr","Store","Str","Sym","Tag","Tail","Terminal","Thunk","Thunk","TypePredicates","UInt","Unop","allocate_components","allocate_dummy_components","allocate_maybe_dummy_components","allocate_maybe_fun_unconstrained","arbitrary_with","as_cons","as_list","as_simple_keyword_string","as_str","as_sym","as_sym_str","atom","begin","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","car","car","car_cdr","car_cdr_mut","cdr","cdr","char","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","comm","commit","cons","cons","cons_eq","cont_tag","current_env","de","default","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","diff","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","dummy","emit","eq","eq","eq","eq","eq","eq","eq","equal","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval","fetch","fetch_char","fetch_comm","fetch_cons","fetch_cont","fetch_fun","fetch_num","fetch_scalar","fetch_scalar_cont","fetch_str","fetch_sym","fetch_uint","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_parts","get_begin","get_char","get_char_from_u32","get_constants","get_cont_dummy","get_cont_error","get_cont_outermost","get_cont_terminal","get_expr_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash","get_hash_components_cont","get_hash_components_thunk","get_lurk_sym","get_maybe_opaque","get_nil","get_num","get_quote","get_simple_cont","get_str","get_sym","get_t","get_u64","greater","greater_equal","hash","hash","hash","hash","hash","hash","hash_components","hash_cont","hash_expr","hash_expr_aux","hash_nil","hash_string_mut","hash_sym","hidden","hide","hide","hydrate_scalar_cache","idx","if_","init","init","init","init","init","init","init","init","init","init","init","init","init","init","insert_in_store","intern_comm","intern_cons","intern_cont_dummy","intern_cont_error","intern_cont_outermost","intern_cont_terminal","intern_fun","intern_key","intern_list","intern_maybe_opaque_comm","intern_maybe_opaque_cons","intern_maybe_opaque_fun","intern_maybe_opaque_sym","intern_nil","intern_num","intern_opaque_comm","intern_opaque_cons","intern_opaque_fun","intern_opaque_sym","intern_scalar_cont_ptr","intern_scalar_ptr","intern_str","intern_strcons","intern_sym","intern_sym_with_case_conversion","intern_thunk","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_hash_components","into_hash_components","is_atom","is_cons","is_cons","is_error","is_fun","is_fun","is_fun","is_keyword_sym","is_list","is_list","is_nil","is_null","is_num","is_opaque","is_opaque","is_potentially","is_potentially","is_self_evaluating","is_self_evaluating","is_str","is_sym","is_thunk","key","lambda","less","less_equal","let_","letrec","list","lurk_sym","modulo","new","new","new","new_opaque_ptr","new_opaque_raw_ptr","nil","nil","num","num","num_equal","open","open","open_mut","partial_cmp","partial_cmp","product","provide","ptr","ptr_eq","quote","quotient","read","read_in_package","read_maybe_meta","read_next","read_string","references","references","references","references","references","references","references","references","references","references","references","references","references","references","root_sym","scalar_from_parts","scalar_from_parts_cont","scalar_ptr","secret","secret","secret_mut","ser","serialize","str","strcons","strcons","sum","sym","t","t","tag","tag","tag","tag","tag_field","tag_field","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u64","uint64","value","value","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","body","body","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","continuation","evaled_arg","function","operator","operator","operator","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","saved_env","unevaled_arg","unevaled_args","unevaled_args","var","var","Key","Sym","Sym","Symbol","arbitrary_with","arbitrary_with","borrow","borrow","borrow_mut","borrow_mut","child","child","clone","clone","clone_into","clone_into","deref","deref","deref_mut","deref_mut","deserialize","deserialize","drop","drop","eq","eq","equivalent","equivalent","extend","extend","fmt","fmt","from","from","from","from","full_name","full_name","full_sym_name","get_hash","get_hash","hash","hash","init","init","into","into","is_keyword","is_keyword","is_opaque","is_root","is_root","is_toplevel","is_toplevel","key_root","keyword_name","name","name","new","new","new_absolute","new_absolute","new_from_path","new_key","new_opaque","new_opaque","new_sym","opaque","parent","parent","partial_cmp","partial_cmp","path","path","path","references","references","root","root","serialize","serialize","simple_keyword_name","symbol","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Atom","Begin","Binop","Binop2","Call","Call0","Call2","Car","Cdr","Char","Char","Comm","Comm","Commit","Cons","Cons","ContTag","Diff","Dummy","Emit","Emit","Equal","Error","Eval","Eval","ExprTag","Fun","Greater","GreaterEqual","Hide","If","Key","Less","LessEqual","Let","LetRec","Lookup","Modulo","Nil","Num","Num","NumEqual","Op","Op1","Op2","Open","Outermost","Product","Quotient","Secret","Str","StrCons","Sum","Sym","Tag","Tail","Terminal","Thunk","U64","U64","Unop","all","all","all","all_symbol_names","allocate_constant","allocate_constant","allocate_constant","allocate_constant","arbitrary_with","arbitrary_with","arbitrary_with","arbitrary_with","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","drop","drop","drop","drop","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_field","from_field","from_field","from_field","from_field","get_hash","get_hash","get_hash","get_hash","hash","hash","hash","hash","init","init","init","init","into","into","into","into","is_fun","is_numeric","is_potentially","is_self_evaluating","partial_cmp","partial_cmp","references","references","references","references","serialize","serialize","serialize","supports_arity","supports_arity","supports_arity","symbol_name","symbol_name","symbol_name","to_field","to_field","to_field","to_field","to_field","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_field_bytes","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","U64","UInt","add","arbitrary_with","borrow","borrow_mut","clone","clone_into","deref","deref_mut","deserialize","div","drop","eq","equivalent","fmt","fmt","from","from","init","into","is_zero","mul","partial_cmp","references","rem","serialize","sub","to_owned","to_string","try_from","try_into","type_id","vzip","Write","fmt","fmt_to_string"],"q":[[0,"lurk"],[60,"lurk::circuit"],[63,"lurk::eval"],[252,"lurk::field"],[326,"lurk::hash_witness"],[543,"lurk::light_data"],[632,"lurk::package"],[664,"lurk::parser"],[692,"lurk::proof"],[710,"lurk::proof::groth16"],[769,"lurk::proof::nova"],[835,"lurk::repl"],[898,"lurk::scalar_store"],[1029,"lurk::scalar_store::ScalarContinuation"],[1059,"lurk::scalar_store::ScalarExpression"],[1062,"lurk::store"],[1582,"lurk::store::Continuation"],[1614,"lurk::sym"],[1707,"lurk::tag"],[1909,"lurk::uint"],[1943,"lurk::writer"]],"d":["Finite field element type for Lurk. Has different internal …","a scalar field element in full field representation","","","","a small scalar field element in U64 representation for …","","","","","","","","","","","","","","","","The finite field used in the language.","","","","Returns the argument unchanged.","","Creates a new <code>Num&lt;F&gt;</code> from the given scalar <code>s</code>.","","","","","Calls <code>U::from(self)</code>.","Converts <code>self</code> into a scalar value of type <code>F</code>.","Returns true if <code>self</code> is negative.","Determines if <code>self</code> is zero.","<code>LightData</code> is a lightweight binary data serialization …","Returns the most negative value representable by <code>Num&lt;F&gt;</code>.","Returns the most positive value representable by <code>Num&lt;F&gt;</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The BLS12-381 scalar field,","The type of the field element’s representation","Wrapper struct around a field element that implements …","The type of finite fields used in the language For …","Trait implemented by finite fields used in the language","The Pallas field,","The Vesta field,","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Attempts to construct a field element from a byte slice","Constructs a field element from a char","Constructs a field element from a ContTag","Constructs a field element from an ExprTag","Constructs a field element from an Op1","Constructs a field element from an Op2","Constructs a field element from a u16","Constructs a field element from a u32","Constructs a field element from a u64","Returns the LanguageField of the field","","","Converts the field element to a hexadecimal string","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","A field element is defined to be negative if it is odd …","We define this to be the smallest negative field element","0 - 1 is one minus the modulus, which must be even in a …","","","","","","Converts the field element to a byte vector","Attempts to convert the field element to a char","Attempts to convert the field element to a ContTag","Attempts to convert the field element to an ExprTag","Attempts to convert the field element to an Op1","Attempts to convert the field element to an Op2","","Attempts to convert the field element to a u16","Attempts to convert the field element to a u32","Converts the first 4 bytes of the field element to a u32","Attempts to convert the field element to a u64","Converts the first 8 bytes of the field element to a u64","Converts the field to a variable-length hex string","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An Atom contains a byte sequence.","A Cell contains an arbitrary number of child nodes.","Analogous to ScalarExpression::Char","Analogous to ScalarExpression::Comm","Analogous to ScalarExpression::Cons","A trait for types that can be serialized and deserialized …","<code>LightData</code> is a binary tree with two types of nodes: Atom …","Enum to represent a light expression.","LightStore contains a fragment of the ScalarStore, but …","Analogous to ScalarExpression::Nil","Analogous to ScalarExpression::Num","Replaces ScalarExpression::Str, contains a string and a …","Analogous to ScalarExpression::Str(“”), but as a …","Replaces ScalarExpression::Sym, contains a symbol and a …","Analogous to ScalarExpression::Sym(Sym::root()), but as a …","","","","","","","","","","Returns the number of bytes required to encode the given …","","","","","Deserializes a <code>LightData</code> into this value.","","","Deserializes a <code>LightData</code> from a <code>&amp;[u8]</code>.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","An analogous to the ScalarStore’s scalar_map, but with …","Serializes this value into a <code>LightData</code>.","","","Serializes this <code>LightData</code> into a <code>Vec&lt;u8&gt;</code>.","Returns the tag byte for this <code>LightData</code>.","Determines if a given tag byte represents an <code>Atom</code>.","Determines if a given tag byte represents a <code>Cell</code> with a …","","","","","Returns the little-endian byte sequence for the given …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns two bools. First bool is true if input is a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ScalarStore</code> allows realization of a graph of <code>ScalarPtr</code>s …","","","","","","","","","Add all ScalarPtrs representing and reachable from expr.","Add the <code>ScalarPtr</code> representing <code>expr</code>, and queue it for …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Method which finalizes the <code>ScalarStore</code>, ensuring that all …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ScalarStore</code> and add all <code>ScalarPtr</code>s reachable …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","arg, body, closed env","","","","","","","","","","","","","","","","","","","","A struct representing a scalar pointer with a tag and a …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mutable version of car_cdr to handle Str. <code>(cdr str)</code> may …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fill the cache for Scalars. Only Ptrs which have been …","","","","","","","","","","","","","","","","","","","","","","","","","","Helper to allocate a list, instead of manually using <code>cons</code>.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codenumeration type for symbol names, which can either be a …","","Type for hieararchical symbol names","","","","","","","Creates a new Symbol with a child path segment added to …","Creates a new Sym with a child path segment added to the …","","","","","","","","","","","","","","","","","Creates a new Symbol with the path extended by the given …","Creates a new Sym with the path extended by the given …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the full name of the Symbol.","Returns the full name of the Symbol or Keyword symbol.","The full name corresponding to the symbol or keyword’s …","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if the Sym is a keyword.","Returns true if the Symbol is marked as opaque.","Returns true if the Symbol is the root Symbol, i.e. if it …","Returns true if the Sym is the root symbol.","Returns true if the Symbol is a top-level Symbol, i.e. if …","Returns true if the Sym is toplevel","Returns the root Keyword Symbol.","The full name corresponding to a Sym, if it is a keyword.","Returns the name of the Symbol.","","Creates a new Symbol with the given name and a path …","Creates a new Sym with the given name.","Creates a new Symbol with an absolute path derived from …","Creates a new absolute Sym with the given name.","Creates a new Sym from a path vector and a boolean flag …","Creates a new Keyword Sym with a name derived from the …","Creates a new opaque Symbol with an empty path.","Creates a new opaque Sym.","Creates a new Sym with a name derived from the given …","","Returns the parent Symbol of the Symbol, if there is one.","Returns the parent of the Sym or Keyword, if there is one.","","","Returns a reference to the path vector of the Symbol.","Returns a reference to the path vector of the Sym.","","","","Creates a new Symbol with the root path <code>[&quot;&quot;]</code>.","Returns the root Symbol.","","","The simple name corresponding to a Sym, if it is a keyword …","Returns true if the Sym is a symbol.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","This explicitly defines a shortcut to access the canonical …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unsigned fixed-width integer type for Lurk.","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,2,0,0,0,2,0,2,2,2,0,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,2,2,2,2,0,2,2,2,2,2,0,2,2,2,0,0,2,0,2,0,0,2,0,2,0,0,2,2,2,2,2,0,2,0,0,134,134,35,0,33,35,0,0,0,0,0,33,35,35,0,33,0,37,30,32,33,42,34,35,37,30,32,33,42,34,35,30,32,33,34,35,30,32,33,34,35,30,33,37,30,32,33,42,34,35,37,30,32,33,42,34,35,33,37,30,32,33,42,34,35,0,30,30,32,33,34,30,32,33,37,0,30,30,30,30,32,33,42,34,35,37,30,32,33,33,42,34,35,37,37,32,37,30,32,33,42,34,35,37,32,30,37,30,32,33,42,34,35,42,35,35,135,30,32,33,135,30,33,33,35,35,135,30,33,37,135,30,32,30,37,42,32,42,32,135,30,0,37,30,32,33,42,34,35,33,32,135,30,33,30,30,32,33,34,35,30,30,37,30,32,33,42,34,35,37,30,32,33,42,34,35,37,30,32,33,42,34,35,37,30,32,33,42,34,35,32,59,1,0,0,0,59,59,49,59,49,59,49,49,49,49,49,59,49,59,49,49,59,49,49,49,49,59,49,1,1,1,1,1,1,1,1,1,1,49,49,1,59,49,59,49,1,1,1,49,59,49,49,49,1,1,1,1,1,1,49,1,1,1,1,1,1,59,49,59,49,59,49,59,49,71,69,69,67,69,0,0,0,0,0,0,0,0,67,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,0,0,69,69,69,71,71,0,0,71,69,71,69,69,71,71,0,69,69,69,69,67,64,64,67,66,70,69,71,64,67,66,70,69,71,64,66,65,67,65,67,68,64,68,64,66,67,66,70,69,71,64,67,66,70,69,71,64,65,67,66,68,64,70,70,69,71,67,66,70,69,71,64,67,66,70,69,71,64,67,66,70,69,71,64,67,66,70,69,71,64,67,66,70,69,71,68,64,72,67,74,64,67,66,70,69,71,64,67,66,70,69,71,64,64,69,71,69,71,61,69,71,67,66,70,69,71,64,72,67,74,64,67,66,70,69,71,64,64,64,64,64,67,66,70,69,71,64,64,65,67,68,64,64,64,67,66,70,69,71,64,64,67,66,70,69,71,64,67,66,70,69,71,64,67,66,70,69,71,64,67,66,70,69,71,64,50,50,75,75,75,0,0,0,0,75,75,75,75,75,75,76,75,50,76,75,50,76,75,50,50,75,50,75,50,136,76,75,50,76,75,50,76,75,50,76,75,50,76,75,50,75,50,76,75,75,50,50,76,75,50,76,75,50,76,75,50,76,75,50,76,136,76,75,50,50,50,50,75,50,75,50,50,76,75,50,76,75,50,76,75,50,76,75,50,0,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,80,0,0,80,80,80,80,80,80,80,80,80,80,80,80,80,0,80,0,80,80,80,80,80,80,80,0,0,0,137,137,137,0,137,137,137,137,0,137,138,138,138,137,0,0,0,0,0,0,89,88,86,89,88,86,86,86,89,89,88,86,89,88,86,86,89,88,86,89,88,86,89,88,86,89,88,86,89,89,86,86,89,89,86,89,88,86,86,86,89,88,86,89,88,86,89,88,86,89,89,89,88,86,0,0,99,0,0,0,0,0,0,0,0,99,0,0,0,0,101,100,99,101,100,99,99,101,100,99,101,100,99,100,99,101,100,99,101,101,100,99,101,100,99,101,100,99,101,99,0,101,101,100,99,100,99,101,100,99,101,100,99,101,100,99,99,101,100,99,0,0,0,108,104,108,104,104,104,107,104,104,108,104,108,104,108,104,104,104,108,104,107,107,107,107,104,107,104,107,108,104,108,104,104,107,104,104,107,104,107,108,104,104,107,104,107,104,108,104,0,0,0,108,104,108,104,108,104,108,104,108,104,113,113,113,113,111,111,111,113,113,113,111,113,113,113,113,111,111,113,0,0,0,0,111,111,113,113,111,111,113,109,109,111,112,113,109,111,112,113,109,111,112,113,109,111,112,113,109,111,112,113,109,111,109,111,112,113,109,111,112,113,109,111,112,113,109,111,112,113,109,111,112,113,109,111,112,113,109,109,111,111,112,113,109,111,112,113,109,109,113,113,109,111,112,113,109,111,112,113,109,109,111,112,113,109,111,112,113,109,111,112,113,109,109,111,109,109,111,112,113,109,111,112,113,109,111,112,113,109,111,112,113,139,140,141,142,143,144,145,146,147,148,139,140,149,147,142,145,146,147,141,142,143,144,146,139,140,141,146,148,139,140,150,150,150,127,151,127,151,127,151,127,151,73,73,73,73,73,119,119,119,0,0,0,120,73,73,0,73,0,119,120,0,0,0,73,0,73,73,73,0,119,119,0,119,73,0,152,0,0,0,0,0,0,119,119,153,73,73,0,119,0,119,73,117,117,117,36,122,36,36,119,119,119,119,47,47,127,151,120,28,36,122,43,123,119,117,73,48,124,47,127,151,120,28,36,122,43,123,119,117,73,48,124,47,28,47,28,28,28,47,47,120,36,122,43,123,119,117,73,48,124,47,120,36,122,43,123,119,117,73,48,124,47,122,123,47,47,28,47,28,73,47,122,28,127,151,120,28,36,122,43,123,119,117,73,48,124,47,127,151,120,28,36,122,43,123,119,117,73,48,124,47,122,47,127,151,120,28,36,122,43,123,119,117,73,48,124,47,47,47,36,122,43,123,119,117,73,47,36,122,43,123,119,117,73,47,28,28,28,28,28,28,28,28,28,28,28,28,120,28,36,36,122,122,43,43,123,119,119,117,73,73,48,48,124,47,127,127,151,120,28,36,36,122,43,123,119,117,73,48,124,47,122,28,28,28,28,28,28,28,28,28,36,122,43,123,117,73,28,28,28,28,28,28,28,73,28,28,28,28,47,47,36,122,43,123,117,73,117,28,28,28,28,28,28,28,28,47,28,123,47,127,151,120,28,36,122,43,123,119,117,73,48,124,47,73,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,127,151,120,28,36,122,43,123,119,117,73,48,124,47,154,122,36,36,119,43,155,36,119,119,36,119,36,119,119,36,119,155,36,155,36,119,119,119,28,47,47,47,47,47,28,28,47,28,43,47,28,28,28,47,28,47,47,28,47,28,122,123,47,48,124,28,47,47,28,28,28,28,28,127,151,120,28,36,122,43,123,119,117,73,48,124,47,28,28,28,124,28,47,28,122,122,28,28,47,47,28,28,47,153,36,122,43,153,122,120,36,122,43,123,119,117,73,48,124,47,122,48,127,151,120,28,36,122,43,123,119,117,73,48,124,47,127,151,120,28,36,122,43,123,119,117,73,48,124,47,127,151,120,28,36,122,43,123,119,117,73,48,124,47,47,28,122,124,127,151,120,28,36,122,43,123,119,117,73,48,124,47,156,157,158,159,160,161,162,163,164,165,166,156,157,167,165,160,163,164,165,158,159,160,161,162,164,156,157,159,164,166,156,157,79,0,79,0,131,79,131,79,131,79,131,79,131,79,131,79,131,79,131,79,131,79,131,79,131,79,131,79,131,79,131,79,131,79,79,79,131,79,79,131,79,131,79,131,79,131,79,131,79,131,131,79,131,79,79,79,131,79,131,79,131,79,79,79,131,79,79,131,131,79,131,79,131,79,131,131,79,131,79,131,79,79,79,131,79,131,79,131,79,131,79,131,79,55,56,53,53,53,53,53,55,55,54,55,54,55,55,54,56,0,56,53,53,55,56,53,55,56,0,54,56,56,56,53,54,56,56,53,53,53,56,54,54,55,56,0,0,0,55,53,56,56,55,54,56,56,54,0,53,53,54,54,55,53,168,55,56,168,54,53,55,56,54,53,55,56,54,53,55,56,54,53,55,56,54,53,55,56,54,53,55,56,54,53,55,56,54,53,55,56,54,55,56,54,53,55,56,54,53,55,56,54,53,55,56,54,54,53,53,55,55,56,56,54,53,55,56,121,54,53,55,56,54,53,55,56,54,53,55,56,54,53,55,56,54,53,55,56,54,56,54,54,55,56,54,53,55,56,54,55,56,168,55,56,168,55,56,121,54,53,55,56,121,54,53,55,56,54,53,55,56,54,53,55,56,54,54,53,53,55,55,56,56,54,53,55,56,54,53,55,56,54,53,55,56,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,169,169],"f":[0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[]],[[]],0,[[[2,[[0,[3,1]]]]],[[2,[[0,[3,1]]]]]],[[]],[4],[4],[5,[[6,[[2,[1]]]]]],[[[2,[1]],[2,[1]]]],[4],[[[2,[[0,[7,1]]]],[2,[[0,[7,1]]]]],8],[[],8],0,0,[[[2,[[0,[9,1]]]],10],11],[[[2,[1]],10],11],[12,[[2,[1]]]],[[]],[13,[[2,[1]]]],[1,[[2,[1]]]],[[[0,[14,15]],16],13],[[[2,[1]],17]],0,[[],4],[[]],[[[2,[1]]],1],[[[2,[1]]],8],[[[2,[1]]],8],0,[[],[[2,[1]]]],[[],[[2,[1]]]],[[[2,[1]],[2,[1]]]],0,0,[[[2,[1]],[2,[1]]],[[19,[18]]]],0,[[20,21,[23,[22]]],[[6,[24]]]],0,0,[[[2,[1]],25],6],0,[[[2,[1]],[2,[1]]]],0,0,[[]],[[],26],[[],6],[[],6],[[],27],0,[[]],0,0,[[],4],[28,29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[30,[[0,[3,1]]]]],[[30,[[0,[3,1]]]]]],[[[32,[[0,[3,31]],[0,[3,31]]]]],[[32,[[0,[3,31]],[0,[3,31]]]]]],[33,33],[[[34,[[0,[3,1]]]]],[[34,[[0,[3,1]]]]]],[[[35,[[0,[3,1]]]]],[[35,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],0,[[],33],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[33]]]],[4],[4],[4],[4],[4],[4],[4],[[[28,[1]]],[[36,[1]]]],0,[[[30,[[0,[7,1]]]],[30,[[0,[7,1]]]]],8],[[[32,[[0,[7,31]],[0,[7,31]]]],[32,[[0,[7,31]],[0,[7,31]]]]],8],[[33,33],8],[[[34,[[0,[7,1]]]],[34,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[[37,[1]]],[[6,[0]]]],[[[28,[1]],38],[[6,[[36,[1]],0]]]],0,[[[30,[1]],10],[[6,[39]]]],[[[30,[1]],[28,[1]],40],41],[[[30,[[0,[9,1]]]],10],11],[[[32,[[0,[9,31]],[0,[9,31]]]],10],11],[[33,10],11],[[[42,[[0,[9,31]],[0,[9,1]]]],10],11],[[[34,[[0,[9,1]]]],10],11],[[[35,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[[43,[1]]],33],[[]],[[]],[[]],[[[36,[1]],[36,[1]],[28,[1]],4,44],[[6,[[29,[[32,[[30,[1]],[34,[1]]]]]],0]]]],[[[37,[1]]],[[6,[[29,[[32,[[30,[1]],[34,[1]]]]]],0]]]],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[37,[1]]],[[30,[1]]]],0,[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[35,[1]],[28,[1]]]],[[[35,[1]]],8],[[],8],[[[30,[1]]],8],[[[32,[[30,[1]],31]]],8],[33,8],[[],8],[[[30,[1]]],8],[33,8],[33,8],[[[35,[1]]],8],[[[35,[1]]],8],[[],8],[[[30,[1]]],8],[33,8],[[[37,[1]]],[[6,[[45,[[42,[[34,[1]],1]]]],0]]]],[[28,4]],[[[30,[1]],[28,[1]],4]],[[[32,[[30,[1]],31]],[28,[1]]]],[[[30,[1]],[28,[1]]],[[19,[[36,[1]]]]]],[[[36,[1]],[36,[1]],[28,[1]],4],[[37,[1]]]],[[[42,[[34,[1]],1]]],19],0,[[],46],[[[32,[[30,[1]],31]],[32,[[30,[1]],31]]],8],[[15,28],[[6,[0]]]],[[[30,[1]],[28,[1]]],[[6,[0]]]],[[[36,[1]],[36,[1]],[43,[1]],[28,[1]],[47,[1]]],[[6,[0]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[33,25],6],[[],4],[[],33],[[[30,[1]]],33],[[33,[28,[1]]],[[19,[[43,[1]]]]]],[[[30,[1]],[28,[1]]],[[29,[1]]]],[[]],[[]],[[]],[[]],[[]],[[],26],[[[30,[1]],[28,[1]]],[[6,[[29,[1]],48]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[[49,[[0,[3,1]]]]],[[49,[[0,[3,1]]]]]],[[]],[[[49,[1]],[49,[1]]],18],[50,[[51,[[49,[1]]]]]],[4],[4],[4],[4],[5,[[6,[[49,[1]]]]]],[4],[4],[[[49,[[0,[7,1]]]],[49,[[0,[7,1]]]]],8],[[],8],[[[49,[[0,[9,1]]]],10],11],[[]],[[]],[[],19],[52],[53],[54],[55],[56],[57],[58],[13],[[],59],[[[0,[14,15]],16],13],[[[49,[1]],17]],[[],26],[[],4],[[],4],[[]],[[]],[[],8],[[]],[[]],[[[49,[1]],[49,[1]]],[[19,[18]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[49,[1]]],50],[[[49,[1]],25],6],[[],[[29,[60]]]],[[],[[19,[52]]]],[[],[[19,[53]]]],[[],[[19,[54]]]],[[],[[19,[55]]]],[[],[[19,[56]]]],[[]],[[],[[19,[57]]]],[[],[[19,[58]]]],[[],58],[[],[[19,[13]]]],[[],13],[[],26],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[64,[[0,[61,62,31,63,9]],31,1]]],[[29,[[0,[61,62,31,63,9]]]]]],[[[64,[[0,[61,62,31,63,9]],31,1]],[28,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[[65,[1]],[28,[1]],[36,[1]]],[[6,[48]]]],[[[67,[[66,[1]]]],[28,[1]],[36,[1]]],[[6,[48]]]],[[[65,[1]],[28,[1]],[36,[1]]],[[6,[48]]]],[[[67,[[66,[1]]]],[28,[1]],[36,[1]]],[[6,[48]]]],[[[68,[1]],69,[28,[1]],[36,[1]]],[[6,[48]]]],[[[64,[69,[66,[1]],1]],69,[28,[1]],[36,[1]]],[[6,[48]]]],[[[68,[1]],69,[28,[1]],[36,[1]]],[[6,[0]]]],[[[64,[69,[66,[1]],1]],69,[28,[1]],[36,[1]]],[[6,[0]]]],0,[[[67,[3]]],[[67,[3]]]],[[[66,[[0,[3,1]]]]],[[66,[[0,[3,1]]]]]],[[[70,[[0,[3,1]]]]],[[70,[[0,[3,1]]]]]],[69,69],[71,71],[[[64,[[0,[3,61]],3,[0,[3,1]]]]],[[64,[[0,[3,61]],3,[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[[65,[1]],[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],[[[67,[[66,[1]]]],[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],0,[[[68,[1]],69,[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],[[[64,[69,[66,[1]],1]],69,[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],0,0,[[],69],[[],71],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[67,[7]],[67,[7]]],8],[[[66,[[0,[7,1]]]],[66,[[0,[7,1]]]]],8],[[[70,[[0,[7,1]]]],[70,[[0,[7,1]]]]],8],[[69,69],8],[[71,71],8],[[[64,[[0,[7,61]],7,[0,[7,1]]]],[64,[[0,[7,61]],7,[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[[68,[1]],69,[36,[1]],[36,[1]],[36,[1]],[28,[1]]],[[36,[1]]]],[[[64,[69,[66,[1]],1]],69,[36,[1]],[36,[1]],[36,[1]],[28,[1]]],[[36,[1]]]],[[[72,[1]],[28,[1]],[43,[1]]],[[19,[[73,[1]]]]]],[[[67,[[70,[1]]]],[28,[1]],[43,[1]]],[[19,[[73,[1]]]]]],[[[74,[1]],71,[28,[1]],[43,[1]]],[[19,[[73,[1]]]]]],[[[64,[71,[70,[1]],1]],71,[28,[1]],[43,[1]]],[[19,[[73,[1]]]]]],[[[67,[9]],10],11],[[[66,[[0,[9,1]]]],10],11],[[[70,[[0,[9,1]]]],10],11],[[69,10],11],[[71,10],11],[[[64,[[0,[9,61]],9,[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[]],[[]],[[[64,[[0,[61,62,31,63,9]],31,1]],[0,[61,62,31,63,9]]],[[67,[31]]]],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[69,17]],[[71,17]],[[],4],[69,4],[71,4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[72,[1]],[28,[1]],[73,[1]]],[[43,[1]]]],[[[67,[[70,[1]]]],[28,[1]],[73,[1]]],[[43,[1]]]],[[[74,[1]],71,[28,[1]],[73,[1]]],[[43,[1]]]],[[[64,[71,[70,[1]],1]],71,[28,[1]],[73,[1]]],[[43,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],4],[[],[[64,[[0,[61,62,31,63,9]],31,1]]]],[[],[[64,[[0,[61,62,31,63,9]],31,1]]]],[[[67,[31]]],[[64,[[0,[61,62,31,63,9]],31,1]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],0,[[[65,[1]],[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],[[[67,[[66,[1]]]],[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],[[[68,[1]],69,[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],[[[64,[69,[66,[1]],1]],69,[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],[[[64,[[0,[61,62,31,63,9]],31,1]]],[[29,[[67,[31]]]]]],[[[64,[[0,[61,62,31,63,9]],31,1]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[[64,[[0,[61,62,31,63,9]],31,1]]],4],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,60],[[[75,[[0,[3,1]]]]],[[75,[[0,[3,1]]]]]],[50,50],[[]],[[]],[50,[[51,[15]]]],[50,[[51,[[76,[1]]]]]],[50,[[51,[[75,[1]]]]]],[[],[[51,[50]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[[[76,[[0,[7,1]]]],[76,[[0,[7,1]]]]],8],[[[75,[[0,[7,1]]]],[75,[[0,[7,1]]]]],8],[[50,50],8],[[],8],[[],8],[[[76,[[0,[9,1]]]],10],11],[[[75,[1]],10],11],[[[75,[[0,[9,1]]]],10],11],[[50,10],11],[[50,10],11],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],0,[[],50],[[[76,[1]]],50],[[[75,[1]]],50],[50,[[29,[60]]]],[50,60],[60,8],[60,8],[[]],[[]],[[],26],[[],26],[4,[[29,[60]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[]],[[]],[[]],0,0,[[77,[78,[38]]]],[77],[[]],[[]],[77,77],[[]],[[],77],[4],[4],[4],0,[[77,10],11],[[]],[[],4],[[]],[[77,79],[[19,[79]]]],[[],77],[77,79],0,[79,77],[[20,21,[23,[22]]],[[6,[24]]]],[[77,79],79],[[77,79]],[77],[[],77],[[]],[[],6],[[],6],[[],27],[[]],0,0,0,0,0,0,[[]],[[]],[80,80],[[]],[4],[4],[4],[[80,10],11],[[80,10],11],[[]],[[],4],[[]],[38],[81],[[[46,[82]]],[[6,[80]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[]],[[],26],[[],6],[[],6],[[],27],[[]],0,0,0,0,[4,4],[4,4],0,[4,4],[4,8],[4,8],[4],0,[[],[[6,[29,83]]]],[[],4],[[],29],[[],4],[[],4],[29,[[6,[8,83]]]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[86,[[0,[3,84,85]]]]],[[86,[[0,[3,84,85]]]]]],[[]],[4,[[6,[[88,[87]],83]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[[86,[[0,[84,85]]]]]]]],[4],[4],[4],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[4,[[89,[87]]]],[[[89,[87]],[90,[87]],[91,[87]],[36,[92]],[36,[92]],[28,[92]],4,[0,[93,3]]],[[6,[0]]]],0,0,[[[89,[87]],[0,[92,[30,[92]],[34,[92]]]],[90,[87]],93],[[6,[[94,[87]],83]]]],[[[89,[87]]],4],0,[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[86,[[0,[84,85]]]],25],6],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[[95,[87]],[96,[87]],[97,[87]],[0,[93,98]]],[[6,[8,83]]]],[[[0,[92,[30,[92]],[34,[92]]]],[95,[87]],[94,[87]]],[[6,[8,83]]]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[99,100],[[6,[99,0]]]],[4],[4],[4],[4],[4],[4],[5,[[6,[100]]]],[5,[[6,[99]]]],[4],[4],[4],[[[101,[1]],100,[36,[102]],[36,[102]],[28,[102]],4],[[6,[0]]]],[[]],[[]],[[]],[[],4],[[],4],[[],4],[[]],[[]],[[]],[4,[[101,[1]]]],[[100,[28,[102]],4,[29,[102]]],[[6,[99,0]]]],[4,100],[[[101,[1]]],4],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[100,25],6],[[99,25],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[99,100,4,[29,[102]]],[[6,[8,103]]]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[[104,[[0,[3,1]]]]],[[104,[[0,[3,1]]]]]],[[]],[[],105],[[],105],0,[4],[4],[4],[4],[4],[4],0,[[[104,[1]],[36,[1]],[28,[1]]],51],[[]],[[]],[[28,[0,[[78,[106]],31]],77,8],51],[[28,[46,[82]],77,[0,[[78,[106]],31]],8],51],[[28,[78,[106]],77],51],[[28,36,77,[0,[[78,[106]],31]]],51],[[[104,[1]],[28,[1]],[36,[1]],77,[0,[[78,[106]],31]]],51],[[28,36,8],51],[[[104,[1]],[28,[1]],[36,[1]],8],51],[[28,[0,[[78,[106]],31]],77],51],[[],4],[[],4],[[]],[[]],0,[[28,38,77],51],[[[104,[1]],[28,[1]],38,77],51],[[[104,[1]],[28,[1]],38,77],51],[[],26],[[],26],[[28,4,[19,[105]]]],[[[28,[1]],4,[19,[105]]],[[51,[[108,[1,[107,[1]]]]]]]],[[[28,[1]],4,[19,[105]]],[[104,[1]]]],[[[28,[1]],4,[19,[105]]],[[104,[1]]]],[26,26],[[[104,[1]],26],26],[[],26],[[[104,[1]]],26],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[19,[[78,[106]]]]],51],[[],51],[[[28,[1]],[108,[1,[107,[1]]]],[19,[[78,[106]]]]],51],[[[108,[1,[107,[1]]]]],51],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[109,[1]],[28,[1]],[36,[1]]],[[19,[[110,[1]]]]]],[[[109,[1]],[28,[1]],[36,[1]]],[[19,[[110,[1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[109,[[0,[3,1]]]]],[[109,[[0,[3,1]]]]]],[[[111,[[0,[3,1]]]]],[[111,[[0,[3,1]]]]]],[[[112,[[0,[3,1]]]]],[[112,[[0,[3,1]]]]]],[[[113,[[0,[3,1]]]]],[[113,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[],[[109,[[0,[62,1]]]]]],[[],[[111,[1]]]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[109,[[0,[114,62,1]]]]]]]],[5,[[6,[[111,[[0,[114,1]]]]]]]],[5,[[6,[[112,[[0,[114,1]]]]]]]],[5,[[6,[[113,[[0,[114,1]]]]]]]],[4],[4],[4],[4],[[[109,[[0,[7,1]]]],[109,[[0,[7,1]]]]],8],[[[111,[[0,[7,1]]]],[111,[[0,[7,1]]]]],8],[[[112,[[0,[7,1]]]],[112,[[0,[7,1]]]]],8],[[[113,[[0,[7,1]]]],[113,[[0,[7,1]]]]],8],[[],8],[[],8],[[],8],[[],8],[[[109,[1]],[28,[1]]]],[[[109,[[0,[9,1]]]],10],11],[[[111,[[0,[9,1]]]],10],11],[[[111,[1]],10],11],[[[112,[[0,[9,1]]]],10],11],[[[113,[[0,[9,1]]]],10],11],[[]],[[]],[[]],[[]],[[[109,[1]],[115,[1]]],[[19,[[113,[1]]]]]],[[[109,[1]],[110,[1]]],[[19,[[111,[1]]]]]],[[[0,[14,15]],16],13],[[[113,[[0,[14,1]]]],17]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[[[28,[1]],[36,[1]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[109,[[0,[116,1]]]],25],6],[[[111,[[0,[116,1]]]],25],6],[[[112,[[0,[116,1]]]],25],6],[[[113,[[0,[116,1]]]],25],6],[[]],[[]],[[]],[[]],[[[109,[1]]],[[19,[[28,[1]]]]]],[[[109,[1]],[110,[1]]],19],[[],26],[[[76,[1]]],[[6,[[109,[1]]]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[117,[1]],[118,[1]],[28,[1]]],[[6,[83]]]],[[[118,[1]],[28,[1]]],[[6,[83]]]],[[[118,[1]],[19,[[117,[1]]]],[28,[1]]],[[6,[83]]]],[[[118,[1]],[28,[1]],[19,[[36,[1]]]]],[[6,[83]]]],[[]],[[[36,[1]]],[[19,[[36,[1]]]]]],[[[36,[1]]],[[19,[[36,[1]]]]]],[[[119,[1]]],[[19,[26]]]],[[[119,[1]]],[[19,[38]]]],[[[119,[1]]],[[19,[79]]]],[[[119,[1]]],[[19,[26]]]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[28,[1]],[36,[1]]],[[6,[[36,[1]],48]]]],0,[[[28,[1]],[36,[1]]],[[6,[48]]]],[[[28,[1]],[36,[1]]],[[6,[48]]]],[[[28,[1]],[36,[1]]],[[6,[[36,[1]],48]]]],0,0,[120,120],[[[36,[[0,[3,1]]]]],[[36,[[0,[3,1]]]]]],[[[122,[[0,[3,121]],[0,[3,1]]]]],[[122,[[0,[3,121]],[0,[3,1]]]]]],[[[43,[[0,[3,1]]]]],[[43,[[0,[3,1]]]]]],[[[123,[[0,[3,1]]]]],[[123,[[0,[3,1]]]]]],[[[119,[[0,[3,1]]]]],[[119,[[0,[3,1]]]]]],[[[117,[[0,[3,1]]]]],[[117,[[0,[3,1]]]]]],[[[73,[[0,[3,1]]]]],[[73,[[0,[3,1]]]]]],[48,48],[[[124,[[0,[3,1]]]]],[[124,[[0,[3,1]]]]]],[[[47,[[0,[3,1]]]]],[[47,[[0,[3,1]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[122,[121,1]],[122,[121,1]]],18],[[[123,[[0,[125,1]]]],[123,[[0,[125,1]]]]],18],0,0,[[[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],0,[[[28,[1]],[36,[1]],[36,[1]]],8],[[[73,[1]]],53],0,[50,[[51,[[122,[121,1]]]]]],[[],[[28,[1]]]],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[[122,[121,1]]]]]],0,[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],[4],0,0,[[[36,[[0,[7,1]]]],[36,[[0,[7,1]]]]],8],[[[122,[[0,[7,121]],[0,[7,1]]]],[122,[[0,[7,121]],[0,[7,1]]]]],8],[[[43,[[0,[7,1]]]],[43,[[0,[7,1]]]]],8],[[[123,[[0,[7,1]]]],[123,[[0,[7,1]]]]],8],[[[119,[[0,[7,1]]]],[119,[[0,[7,1]]]]],8],[[[117,[[0,[7,1]]]],[117,[[0,[7,1]]]]],8],[[[73,[[0,[7,1]]]],[73,[[0,[7,1]]]]],8],0,[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],0,[[[28,[1]],[36,[1]]],[[19,[[119,[1]]]]]],[[[28,[1]],[36,[1]]],[[19,[52]]]],[[[28,[1]],[36,[1]]],19],[[[28,[1]],[36,[1]]],19],[[[28,[1]],[43,[1]]],[[19,[[73,[1]]]]]],[[[28,[1]],[36,[1]]],19],[[[28,[1]],[36,[1]]],[[19,[[2,[1]]]]]],[[[28,[1]],[110,[1]]],[[19,[[36,[1]]]]]],[[[28,[1]],[115,[1]]],[[19,[[43,[1]]]]]],[[[28,[1]],[36,[1]]],[[19,[38]]]],[[[28,[1]],[36,[1]]],[[19,[79]]]],[[[28,[1]],[36,[1]]],[[19,[12]]]],[[120,10],11],[[[28,[[0,[9,1]]]],10],11],[[[36,[[0,[9,1]]]],10],11],[[[36,[1]],[28,[1]],40],41],[[[122,[[0,[121,126]],1]],10],11],[[[122,[[0,[9,121]],[0,[9,1]]]],10],11],[[[43,[[0,[9,1]]]],10],11],[[[43,[1]],[28,[1]],40],41],[[[123,[[0,[9,1]]]],10],11],[[[119,[[0,[9,1]]]],10],11],[[[119,[1]],[28,[1]],40],41],[[[117,[[0,[9,1]]]],10],11],[[[73,[[0,[9,1]]]],10],11],[[[73,[1]],[28,[1]],40],41],[[48,10],11],[[48,10],11],[[[124,[[0,[9,1]]]],10],11],[[[47,[[0,[9,1]]]],10],11],[4,127],[[]],[[]],[[]],[[]],[52,[[36,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[121,1],[[122,[121,1]]]],[[[28,[1]]],[[36,[1]]]],[[[28,[1]],52],[[36,[1]]]],[[[28,[1]],58],[[36,[1]]]],[[[28,[1]]],[[47,[1]]]],[[[28,[1]]],[[43,[1]]]],[[[28,[1]]],[[43,[1]]]],[[[28,[1]]],[[43,[1]]]],[[[28,[1]]],[[43,[1]]]],[[[28,[1]],[36,[1]]],[[19,[[110,[1]]]]]],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[28,[1]],[43,[1]]],19],[[[28,[1]],[117,[1]]],19],[[[28,[1]],[78,[38]],8],[[19,[[36,[1]]]]]],[[[28,[1]],54,1],[[19,[[36,[1]]]]]],[[[28,[1]]],[[36,[1]]]],[[[28,[1]],[128,[[2,[1]]]]],[[19,[[36,[1]]]]]],[[[28,[1]]],[[36,[1]]]],[[[73,[1]]],[[43,[1]]]],[[[28,[1]],[78,[38]]],[[19,[[36,[1]]]]]],[[[28,[1]],79],[[19,[[36,[1]]]]]],[[[28,[1]]],[[36,[1]]]],[[[28,[1]],13],[[36,[1]]]],0,0,[[[36,[1]],17]],[[[122,[121,1]],17]],[[[43,[1]],17]],[[[123,[1]],17]],[[[117,[1]],17]],[[[73,[[0,[14,1]]]],17]],[[[118,[1]],[28,[1]],[0,[1]],[0,[1]]],[[6,[[129,[1]],83]]]],[[[28,[1]],[43,[1]]],[[19,[[115,[1]]]]]],[[[28,[1]],[36,[1]]],[[19,[[110,[1]]]]]],[[[28,[1]],[36,[1]],120],[[19,[[110,[1]]]]]],[[[28,[1]],120],[[19,[[110,[1]]]]]],[[[28,[1]],[78,[38]]],1],[[[28,[1]],[36,[1]],120],[[19,[[110,[1]]]]]],[[[28,[1]],1,[36,[1]]],[[19,[[36,[1]]]]]],[[[28,[1]],1,[36,[1]]],[[36,[1]]]],0,[[[28,[1]]]],[[[123,[1]]],4],0,[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[[73,[1]],[28,[1]]]],[[[28,[1]],1,[36,[1]]],[[36,[1]]]],[[[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],[[[28,[1]]],[[43,[1]]]],[[[28,[1]]],[[43,[1]]]],[[[28,[1]]],[[43,[1]]]],[[[28,[1]]],[[43,[1]]]],[[[28,[1]],[36,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],[[[28,[1]],79],[[36,[1]]]],[[[28,[1]]],[[36,[1]]]],[[[28,[1]],1],[[36,[1]]]],[[[28,[1]],1],[[36,[1]]]],[[[28,[1]],1],[[36,[1]]]],[[[28,[1]],1],[[36,[1]]]],[[[28,[1]]],[[36,[1]]]],[[[28,[1]],[128,[[2,[1]]]]],[[36,[1]]]],[[[28,[1]],1],[[36,[1]]]],[[[28,[1]],1],[[36,[1]]]],[[[28,[1]],1],[[36,[1]]]],[[[28,[1]],1],[[36,[1]]]],[[[28,[1]],[115,[1]],[109,[1]]],[[19,[[43,[1]]]]]],[[[28,[1]],[110,[1]],[109,[1]]],[[19,[[36,[1]]]]]],[[[28,[1]],[78,[38]]],[[36,[1]]]],[[[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],[[[28,[1]],79],[[36,[1]]]],[[[28,[1]],[78,[38]],77],[[36,[1]]]],[[[28,[1]],[117,[1]]],[[36,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[122,[121,1]]]],[[[36,[1]]],8],[[[36,[1]]],8],[[[119,[1]]],8],[[[43,[1]]],8],[[],8],[[[36,[1]]],8],[[[119,[1]]],8],[[[119,[1]]],8],[[[36,[1]]],8],[[[119,[1]]],8],[[[36,[1]]],8],[[[119,[1]]],8],[[[119,[1]]],8],[[[36,[1]]],8],[[[119,[1]]],8],[54,8],[[[36,[1]],54],8],[[],8],[[[36,[1]]],8],[[[119,[1]]],8],[[[119,[1]]],8],[[[119,[1]]],8],[[[28,[1]],[78,[38]]],[[36,[1]]]],0,0,0,0,0,[[[28,[1]]],[[36,[1]]]],[[[28,[1]],[78,[38]]],[[36,[1]]]],0,[[],[[28,[1]]]],[[53,[123,[1]]],[[43,[1]]]],[[[28,[1]]],[[47,[1]]]],[[[28,[1]]],[[36,[1]]]],[[[28,[1]]],[[123,[1]]]],[[[28,[1]]],[[36,[1]]]],0,[[[28,[1]],[128,[[2,[1]]]]],[[36,[1]]]],0,0,[[[28,[1]],[36,[1]]],19],0,[[[28,[1]],[36,[1]]],[[6,[48]]]],[[[122,[121,1]],[122,[121,1]]],[[19,[18]]]],[[[123,[[0,[130,1]]]],[123,[[0,[130,1]]]]],[[19,[18]]]],0,[81],[[[124,[1]]],[[36,[1]]]],[[[28,[1]],[36,[1]],[36,[1]]],[[6,[8,48]]]],0,0,[[[28,[1]],38],[[6,[[36,[1]],80]]]],[[[28,[1]],38,77],[[6,[[36,[1]],80]]]],[[[28,[1]],[46,[82]],77],[[6,[80]]]],[[[28,[1]],[46,[82]],77],[[6,[[36,[1]],80]]]],[[[28,[1]],[46,[82]]],[[6,[[36,[1]],80]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[[28,[1]],[78,[38]],8],[[36,[1]]]],[[[28,[1]],1,1],[[19,[[110,[1]]]]]],[[[28,[1]],1,1],[[19,[[115,[1]]]]]],[[[124,[1]]],[[110,[1]]]],[[[28,[1]],[36,[1]]],[[19,[[36,[1]]]]]],0,[[[28,[1]],[36,[1]]],[[6,[[36,[1]],48]]]],[[[122,[121,1]]],50],[[[122,[121,1]],25],6],[[[28,[1]],[78,[38]]],[[36,[1]]]],[[[28,[1]],[36,[1]],[36,[1]]],[[36,[1]]]],0,0,[[[28,[1]],[78,[38]]],[[36,[1]]]],[[[28,[1]]],[[36,[1]]]],0,[[]],[[[36,[1]]],54],[[[122,[121,1]]],121],[[[43,[1]]]],[[]],[[[122,[121,1]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],0,[[[28,[1]],13],[[36,[1]]]],[[[122,[121,1]]],1],[[[124,[1]]],1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[131,26],131],[[79,26],79],[131,131],[79,79],[[]],[[]],[4],[4],[4],[4],[5,[[6,[131]]]],[5,[[6,[79]]]],[4],[4],[[131,131],8],[[79,79],8],[[],8],[[],8],[131,131],[79,79],[[131,10],11],[[79,10],11],[[]],[[]],[38,79],[26,79],[131,26],[79,26],[79,26],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[131,17]],[[79,17]],[[],4],[[],4],[[]],[[]],[131,8],[79,8],[131,8],[131,8],[79,8],[131,8],[79,8],[[],79],[79,[[19,[26]]]],[131,26],[79,26],[26,131],[26,79],[26,131],[26,79],[[8,[29,[26]]],79],[26,79],[[],131],[8,79],[26,79],0,[131,[[19,[131]]]],[79,[[19,[79]]]],[[131,131],[[19,[18]]]],[[79,79],[[19,[18]]]],[131,[[29,[26]]]],[79,[[29,[26]]]],0,[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[],131],[[],79],[[131,25],6],[[79,25],6],[79,[[19,[26]]]],[79,131],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],29],[[],[[29,[55]]]],[[],[[29,[56]]]],[[],[[29,[38]]]],[[54,[118,[1]]],[[6,[[129,[1]],83]]]],[[53,[118,[1]]],[[6,[[129,[1]],83]]]],[[55,[118,[1]]],[[6,[[129,[1]],83]]]],[[56,[118,[1]]],[[6,[[129,[1]],83]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54,54],[53,53],[55,55],[56,56],[[]],[[]],[[]],[[]],[4],[4],[4],[4],[4],[4],[4],[4],[5,[[6,[54]]]],[5,[[6,[55]]]],[5,[[6,[56]]]],[4],[4],[4],[4],[[54,54],8],[[53,53],8],[[55,55],8],[[56,56],8],[[],8],[[],8],[[],8],[[],8],[[54,10],11],[[54,10],11],[[53,10],11],[[53,10],11],[[55,10],11],[[55,10],11],[[56,10],11],[[56,10],11],[[]],[[]],[[]],[[]],[1,19],[1,[[19,[54]]]],[1,[[19,[53]]]],[1,[[19,[55]]]],[1,[[19,[56]]]],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[[0,[14,15]],16],13],[[54,17]],[[53,17]],[[55,17]],[[56,17]],[[],4],[[],4],[[],4],[[],4],[[]],[[]],[[]],[[]],[54,8],[56,8],[[54,54],8],[54,8],[[55,55],[[19,[18]]]],[[56,56],[[19,[18]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[54,25],6],[[55,25],6],[[56,25],6],[4,8],[[55,4],8],[[56,4],8],[[],38],[55,38],[56,38],[[],1],[54,1],[53,1],[55,1],[56,[[0,[[132,[13]],133]]]],[[]],[54],[53],[55],[56],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],26],[[],26],[57,[[6,[54]]]],[[],6],[57,[[6,[53]]]],[[],6],[57,[[6,[55]]]],[[],6],[57,[[6,[56]]]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],27],[[],27],[[],27],[[],27],[[]],[[]],[[]],[[]],0,0,[[12,12],12],[[]],[[]],[[]],[12,12],[[]],[4],[4],[5,[[6,[12]]]],[[12,12],12],[4],[[12,12],8],[[],8],[[12,10],11],[[12,10],11],[[]],[13,12],[[],4],[[]],[12,8],[[12,12],12],[[12,12],[[19,[18]]]],[[20,21,[23,[22]]],[[6,[24]]]],[[12,12],12],[[12,25],6],[[12,12],12],[[]],[[],26],[[],6],[[],6],[[],27],[[]],0,[[28,40],41],[28,26]],"c":[],"p":[[8,"LurkField"],[4,"Num"],[8,"Clone"],[15,"usize"],[8,"Deserializer"],[4,"Result"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"UInt"],[15,"u64"],[8,"Hash"],[8,"Sized"],[8,"BuildHasher"],[8,"Hasher"],[4,"Ordering"],[4,"Option"],[3,"RawCodec"],[8,"Read"],[3,"Cid"],[8,"Extend"],[3,"Error"],[8,"Serializer"],[3,"String"],[3,"TypeId"],[3,"Store"],[3,"Vec"],[3,"IO"],[8,"Copy"],[3,"Frame"],[4,"Status"],[3,"Witness"],[4,"Control"],[3,"Ptr"],[3,"Evaluator"],[15,"str"],[3,"Error"],[8,"Write"],[6,"Result"],[3,"FrameIt"],[3,"ContPtr"],[8,"Fn"],[3,"Take"],[3,"PeekMoreIterator"],[3,"NamedConstants"],[3,"Error"],[3,"FWrap"],[4,"LightData"],[6,"Result"],[15,"char"],[4,"ContTag"],[4,"ExprTag"],[4,"Op1"],[4,"Op2"],[15,"u16"],[15,"u32"],[4,"LanguageField"],[15,"u8"],[8,"HashName"],[8,"Default"],[8,"Eq"],[3,"HashWitness"],[6,"ConsStub"],[3,"Cons"],[4,"Stub"],[6,"ConsWitness"],[4,"ConsName"],[3,"Cont"],[4,"ContName"],[6,"ContStub"],[4,"Continuation"],[6,"ContWitness"],[4,"LightExpr"],[3,"LightStore"],[3,"Package"],[8,"AsRef"],[4,"Sym"],[4,"Error"],[3,"Demand"],[8,"Iterator"],[4,"SynthesisError"],[8,"Engine"],[8,"MultiMillerLoop"],[3,"Proof"],[3,"Bls12"],[3,"PublicParams"],[3,"Groth16Prover"],[3,"Parameters"],[3,"GenericSRS"],[3,"Scalar"],[8,"RngCore"],[3,"Proof"],[3,"PreparedVerifyingKey"],[3,"VerifierSRS"],[3,"AggregateProofAndInstance"],[8,"Send"],[4,"Proof"],[3,"PublicParams"],[3,"NovaProver"],[6,"S1"],[4,"NovaError"],[3,"ReplState"],[3,"Command"],[3,"Path"],[8,"ReplTrait"],[3,"Repl"],[3,"ScalarStore"],[6,"ScalarPtr"],[4,"ScalarExpression"],[3,"ScalarThunk"],[4,"ScalarContinuation"],[8,"Deserialize"],[6,"ScalarContPtr"],[8,"Serialize"],[3,"Thunk"],[8,"ConstraintSystem"],[4,"Expression"],[4,"HashScalar"],[8,"Tag"],[3,"SPtr"],[3,"RawPtr"],[3,"ConstantPtrs"],[8,"Ord"],[8,"Display"],[4,"HashArity"],[8,"Into"],[3,"AllocatedNum"],[8,"PartialOrd"],[3,"Symbol"],[8,"From"],[8,"Field"],[8,"ToInputs"],[8,"Evaluable"],[8,"Encodable"],[8,"Prover"],[8,"Provable"],[13,"Let"],[13,"LetRec"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[13,"Fun"],[4,"HashConst"],[8,"Object"],[8,"Pointer"],[8,"IntoHashComponents"],[8,"TypePredicates"],[13,"Let"],[13,"LetRec"],[13,"Call0"],[13,"Call"],[13,"Call2"],[13,"Tail"],[13,"Lookup"],[13,"Unop"],[13,"Binop"],[13,"Binop2"],[13,"If"],[13,"Emit"],[8,"Op"],[8,"Write"]]},\
"lurk_macro":{"doc":"Lurk DSL","t":"OO","n":["let_store","lurk"],"q":[[0,"lurk_macro"]],"d":["Binds a mutable <code>Store</code> to the variable <code>s_</code>, which is …",""],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"lurkrs":{"doc":"","t":"F","n":["main"],"q":[[0,"lurkrs"]],"d":[""],"i":[0],"f":[[[],1]],"c":[],"p":[[6,"Result"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
