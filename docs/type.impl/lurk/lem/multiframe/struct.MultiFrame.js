(function() {var type_impls = {
"lurk":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StepCircuit%3CF%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#822-875\">source</a><a href=\"#impl-StepCircuit%3CF%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F: <a class=\"trait\" href=\"lurk/field/trait.LurkField.html\" title=\"trait lurk::field::LurkField\">LurkField</a>, C: <a class=\"trait\" href=\"lurk/coprocessor/trait.Coprocessor.html\" title=\"trait lurk::coprocessor::Coprocessor\">Coprocessor</a>&lt;F&gt;&gt; StepCircuit&lt;F&gt; for <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#825-827\">source</a><a href=\"#method.arity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the the number of inputs or outputs of each step\n(this method is called only at circuit synthesis time)\n<code>synthesize</code> and <code>output</code> methods are expected to take as\ninput a vector of size equal to arity and output a vector of size equal to arity</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.synthesize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#829-874\">source</a><a href=\"#method.synthesize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">synthesize</a>&lt;CS&gt;(\n    &amp;self,\n    cs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut CS</a>,\n    z: &amp;[AllocatedNum&lt;F&gt;]\n) -&gt; <a class=\"type\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;AllocatedNum&lt;F&gt;&gt;, SynthesisError&gt;<span class=\"where fmt-newline\">where\n    CS: ConstraintSystem&lt;F&gt;,</span></h4></section></summary><div class='docblock'>Sythesize the circuit for a computation step and return variable\nthat corresponds to the output of the step <code>z_{i+1}</code></div></details></div></details>","StepCircuit<F>","lurk::proof::nova::C1LEM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiFrameTrait%3C'a,+F,+C%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#385-697\">source</a><a href=\"#impl-MultiFrameTrait%3C'a,+F,+C%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F: <a class=\"trait\" href=\"lurk/field/trait.LurkField.html\" title=\"trait lurk::field::LurkField\">LurkField</a>, C: <a class=\"trait\" href=\"lurk/coprocessor/trait.Coprocessor.html\" title=\"trait lurk::coprocessor::Coprocessor\">Coprocessor</a>&lt;F&gt; + 'a&gt; <a class=\"trait\" href=\"lurk/proof/trait.MultiFrameTrait.html\" title=\"trait lurk::proof::MultiFrameTrait\">MultiFrameTrait</a>&lt;'a, F, C&gt; for <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Ptr\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Ptr\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.Ptr\" class=\"associatedtype\">Ptr</a> = <a class=\"enum\" href=\"lurk/lem/pointers/enum.Ptr.html\" title=\"enum lurk::lem::pointers::Ptr\">Ptr</a>&lt;F&gt;</h4></section></summary><div class='docblock'>The associated <code>Ptr</code> type</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.ContPtr\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.ContPtr\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.ContPtr\" class=\"associatedtype\">ContPtr</a> = <a class=\"enum\" href=\"lurk/lem/pointers/enum.Ptr.html\" title=\"enum lurk::lem::pointers::Ptr\">Ptr</a>&lt;F&gt;</h4></section></summary><div class='docblock'>The associated <code>ContPtr</code> type</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Store\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Store\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.Store\" class=\"associatedtype\">Store</a> = <a class=\"struct\" href=\"lurk/lem/store/struct.Store.html\" title=\"struct lurk::lem::store::Store\">Store</a>&lt;F&gt;</h4></section></summary><div class='docblock'>The associated <code>Store</code> type</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.StoreError\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.StoreError\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.StoreError\" class=\"associatedtype\">StoreError</a> = <a class=\"struct\" href=\"lurk/store/struct.Error.html\" title=\"struct lurk::store::Error\">Error</a></h4></section></summary><div class='docblock'>The error type for the Store type</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.EvalFrame\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.EvalFrame\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.EvalFrame\" class=\"associatedtype\">EvalFrame</a> = Frame&lt;F&gt;</h4></section></summary><div class='docblock'>The associated <code>Frame</code> type</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.CircuitFrame\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.CircuitFrame\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.CircuitFrame\" class=\"associatedtype\">CircuitFrame</a> = Frame&lt;F&gt;</h4></section></summary><div class='docblock'>The associated <code>CircuitFrame</code> type</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.GlobalAllocation\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.GlobalAllocation\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.GlobalAllocation\" class=\"associatedtype\">GlobalAllocation</a> = <a class=\"struct\" href=\"lurk/lem/circuit/struct.GlobalAllocator.html\" title=\"struct lurk::lem::circuit::GlobalAllocator\">GlobalAllocator</a>&lt;F&gt;</h4></section></summary><div class='docblock'>The associated type which manages global allocations</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.AllocatedIO\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.AllocatedIO\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.AllocatedIO\" class=\"associatedtype\">AllocatedIO</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"lurk/circuit/gadgets/pointer/struct.AllocatedPtr.html\" title=\"struct lurk::circuit::gadgets::pointer::AllocatedPtr\">AllocatedPtr</a>&lt;F&gt;&gt;</h4></section></summary><div class='docblock'>The associated type of allocated input and output to the circuit</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.emitted\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#395-397\">source</a><a href=\"#method.emitted\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.emitted\" class=\"fn\">emitted</a>(_store: &amp;<a class=\"struct\" href=\"lurk/lem/store/struct.Store.html\" title=\"struct lurk::lem::store::Store\">Store</a>&lt;F&gt;, eval_frame: &amp;Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.EvalFrame\" title=\"type lurk::proof::MultiFrameTrait::EvalFrame\">EvalFrame</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"lurk/lem/pointers/enum.Ptr.html\" title=\"enum lurk::lem::pointers::Ptr\">Ptr</a>&lt;F&gt;&gt;</h4></section></summary><div class='docblock'>the emitted frames</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.io_to_scalar_vector\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#399-404\">source</a><a href=\"#method.io_to_scalar_vector\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.io_to_scalar_vector\" class=\"fn\">io_to_scalar_vector</a>(\n    store: &amp;Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.Store\" title=\"type lurk::proof::MultiFrameTrait::Store\">Store</a>,\n    io: &amp;&lt;Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.EvalFrame\" title=\"type lurk::proof::MultiFrameTrait::EvalFrame\">EvalFrame</a> as <a class=\"trait\" href=\"lurk/proof/trait.FrameLike.html\" title=\"trait lurk::proof::FrameLike\">FrameLike</a>&lt;<a class=\"enum\" href=\"lurk/lem/pointers/enum.Ptr.html\" title=\"enum lurk::lem::pointers::Ptr\">Ptr</a>&lt;F&gt;, <a class=\"enum\" href=\"lurk/lem/pointers/enum.Ptr.html\" title=\"enum lurk::lem::pointers::Ptr\">Ptr</a>&lt;F&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"lurk/proof/trait.FrameLike.html#associatedtype.FrameIO\" title=\"type lurk::proof::FrameLike::FrameIO\">FrameIO</a>\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;F&gt;</h4></section></summary><div class='docblock'>Returns a public IO vector when equipped with the local store, and the Self::Frame’s IO</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compute_witness\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#406-420\">source</a><a href=\"#method.compute_witness\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.compute_witness\" class=\"fn\">compute_witness</a>(&amp;self, s: &amp;<a class=\"struct\" href=\"lurk/lem/store/struct.Store.html\" title=\"struct lurk::lem::store::Store\">Store</a>&lt;F&gt;) -&gt; WitnessCS&lt;F&gt;</h4></section></summary><div class='docblock'>Populates a WitnessCS with the witness values for the given store.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cached_witness\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#422-424\">source</a><a href=\"#method.cached_witness\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.cached_witness\" class=\"fn\">cached_witness</a>(&amp;mut self) -&gt; &amp;mut <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;WitnessCS&lt;F&gt;&gt;</h4></section></summary><div class='docblock'>Returns a reference to the cached witness values</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.output\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#426-428\">source</a><a href=\"#method.output\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.output\" class=\"fn\">output</a>(\n    &amp;self\n) -&gt; &amp;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&lt;Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.EvalFrame\" title=\"type lurk::proof::MultiFrameTrait::EvalFrame\">EvalFrame</a> as <a class=\"trait\" href=\"lurk/proof/trait.FrameLike.html\" title=\"trait lurk::proof::FrameLike\">FrameLike</a>&lt;<a class=\"enum\" href=\"lurk/lem/pointers/enum.Ptr.html\" title=\"enum lurk::lem::pointers::Ptr\">Ptr</a>&lt;F&gt;, <a class=\"enum\" href=\"lurk/lem/pointers/enum.Ptr.html\" title=\"enum lurk::lem::pointers::Ptr\">Ptr</a>&lt;F&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"lurk/proof/trait.FrameLike.html#associatedtype.FrameIO\" title=\"type lurk::proof::FrameLike::FrameIO\">FrameIO</a>&gt;</h4></section></summary><div class='docblock'>The output of the last frame</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.frames\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#430-432\">source</a><a href=\"#method.frames\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.frames\" class=\"fn\">frames</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.CircuitFrame\" title=\"type lurk::proof::MultiFrameTrait::CircuitFrame\">CircuitFrame</a>&gt;&gt;</h4></section></summary><div class='docblock'>Iterates through the Self::CircuitFrame instances</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.precedes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#434-436\">source</a><a href=\"#method.precedes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.precedes\" class=\"fn\">precedes</a>(&amp;self, maybe_next: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if the supplied instance directly precedes this one in a sequential computation trace.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.synthesize_frames\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#438-491\">source</a><a href=\"#method.synthesize_frames\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.synthesize_frames\" class=\"fn\">synthesize_frames</a>&lt;CS: ConstraintSystem&lt;F&gt;&gt;(\n    &amp;self,\n    cs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut CS</a>,\n    store: &amp;Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.Store\" title=\"type lurk::proof::MultiFrameTrait::Store\">Store</a>,\n    input: Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.AllocatedIO\" title=\"type lurk::proof::MultiFrameTrait::AllocatedIO\">AllocatedIO</a>,\n    frames: &amp;[Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.CircuitFrame\" title=\"type lurk::proof::MultiFrameTrait::CircuitFrame\">CircuitFrame</a>],\n    g: &amp;Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.GlobalAllocation\" title=\"type lurk::proof::MultiFrameTrait::GlobalAllocation\">GlobalAllocation</a>\n) -&gt; <a class=\"type\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.AllocatedIO\" title=\"type lurk::proof::MultiFrameTrait::AllocatedIO\">AllocatedIO</a>, SynthesisError&gt;</h4></section></summary><div class='docblock'>Synthesize some frames.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.blank\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#493-520\">source</a><a href=\"#method.blank\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.blank\" class=\"fn\">blank</a>(folding_config: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"enum\" href=\"lurk/proof/supernova/enum.FoldingConfig.html\" title=\"enum lurk::proof::supernova::FoldingConfig\">FoldingConfig</a>&lt;F, C&gt;&gt;, pc: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class='docblock'>Synthesize a blank circuit.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_frames\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#522-660\">source</a><a href=\"#method.from_frames\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.from_frames\" class=\"fn\">from_frames</a>(\n    frames: &amp;[Frame&lt;F&gt;],\n    store: &amp;'a Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.Store\" title=\"type lurk::proof::MultiFrameTrait::Store\">Store</a>,\n    folding_config: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"enum\" href=\"lurk/proof/supernova/enum.FoldingConfig.html\" title=\"enum lurk::proof::supernova::FoldingConfig\">FoldingConfig</a>&lt;F, C&gt;&gt;\n) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Self&gt;</h4></section></summary><div class='docblock'>Create an instance from some <code>Self::Frame</code>s.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.build_frames\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#662-682\">source</a><a href=\"#method.build_frames\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.build_frames\" class=\"fn\">build_frames</a>(\n    expr: Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.Ptr\" title=\"type lurk::proof::MultiFrameTrait::Ptr\">Ptr</a>,\n    env: Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.Ptr\" title=\"type lurk::proof::MultiFrameTrait::Ptr\">Ptr</a>,\n    store: &amp;Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.Store\" title=\"type lurk::proof::MultiFrameTrait::Store\">Store</a>,\n    limit: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n    ec: &amp;<a class=\"struct\" href=\"lurk/lem/eval/struct.EvalConfig.html\" title=\"struct lurk::lem::eval::EvalConfig\">EvalConfig</a>&lt;'_, F, C&gt;\n) -&gt; <a class=\"type\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.EvalFrame\" title=\"type lurk::proof::MultiFrameTrait::EvalFrame\">EvalFrame</a>&gt;, <a class=\"enum\" href=\"lurk/error/enum.ProofError.html\" title=\"enum lurk::error::ProofError\">ProofError</a>&gt;</h4></section></summary><div class='docblock'>Evaluates and generates the frames of the computation given the expression, environment, and store</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.significant_frame_count\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#684-696\">source</a><a href=\"#method.significant_frame_count\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.MultiFrameTrait.html#tymethod.significant_frame_count\" class=\"fn\">significant_frame_count</a>(frames: &amp;[Self::<a class=\"associatedtype\" href=\"lurk/proof/trait.MultiFrameTrait.html#associatedtype.EvalFrame\" title=\"type lurk::proof::MultiFrameTrait::EvalFrame\">EvalFrame</a>]) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Counting the number of non-trivial frames in the evaluation</div></details></div></details>","MultiFrameTrait<'a, F, C>","lurk::proof::nova::C1LEM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-MultiFrame%3C'a,+F,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#40\">source</a><a href=\"#impl-Debug-for-MultiFrame%3C'a,+F,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"lurk/field/trait.LurkField.html\" title=\"trait lurk::field::LurkField\">LurkField</a>, C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> + <a class=\"trait\" href=\"lurk/coprocessor/trait.Coprocessor.html\" title=\"trait lurk::coprocessor::Coprocessor\">Coprocessor</a>&lt;F&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#40\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","lurk::proof::nova::C1LEM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-NonUniformCircuit%3C%3CF+as+CurveCycleEquipped%3E::G1,+%3CF+as+CurveCycleEquipped%3E::G2,+MultiFrame%3C'a,+F,+C%3E,+TrivialSecondaryCircuit%3C%3C%3CF+as+CurveCycleEquipped%3E::G2+as+Group%3E::Scalar%3E%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#904-927\">source</a><a href=\"#impl-NonUniformCircuit%3C%3CF+as+CurveCycleEquipped%3E::G1,+%3CF+as+CurveCycleEquipped%3E::G2,+MultiFrame%3C'a,+F,+C%3E,+TrivialSecondaryCircuit%3C%3C%3CF+as+CurveCycleEquipped%3E::G2+as+Group%3E::Scalar%3E%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F, C&gt; NonUniformCircuit&lt;&lt;F as <a class=\"trait\" href=\"lurk/proof/nova/trait.CurveCycleEquipped.html\" title=\"trait lurk::proof::nova::CurveCycleEquipped\">CurveCycleEquipped</a>&gt;::<a class=\"associatedtype\" href=\"lurk/proof/nova/trait.CurveCycleEquipped.html#associatedtype.G1\" title=\"type lurk::proof::nova::CurveCycleEquipped::G1\">G1</a>, &lt;F as <a class=\"trait\" href=\"lurk/proof/nova/trait.CurveCycleEquipped.html\" title=\"trait lurk::proof::nova::CurveCycleEquipped\">CurveCycleEquipped</a>&gt;::<a class=\"associatedtype\" href=\"lurk/proof/nova/trait.CurveCycleEquipped.html#associatedtype.G2\" title=\"type lurk::proof::nova::CurveCycleEquipped::G2\">G2</a>, <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;, TrivialSecondaryCircuit&lt;&lt;&lt;F as <a class=\"trait\" href=\"lurk/proof/nova/trait.CurveCycleEquipped.html\" title=\"trait lurk::proof::nova::CurveCycleEquipped\">CurveCycleEquipped</a>&gt;::<a class=\"associatedtype\" href=\"lurk/proof/nova/trait.CurveCycleEquipped.html#associatedtype.G2\" title=\"type lurk::proof::nova::CurveCycleEquipped::G2\">G2</a> as Group&gt;::Scalar&gt;&gt; for <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;<span class=\"where fmt-newline\">where\n    F: <a class=\"trait\" href=\"lurk/proof/nova/trait.CurveCycleEquipped.html\" title=\"trait lurk::proof::nova::CurveCycleEquipped\">CurveCycleEquipped</a> + <a class=\"trait\" href=\"lurk/field/trait.LurkField.html\" title=\"trait lurk::field::LurkField\">LurkField</a>,\n    C: <a class=\"trait\" href=\"lurk/coprocessor/trait.Coprocessor.html\" title=\"trait lurk::coprocessor::Coprocessor\">Coprocessor</a>&lt;F&gt; + 'a,\n    &lt;&lt;<a class=\"type\" href=\"lurk/proof/nova/type.G1.html\" title=\"type lurk::proof::nova::G1\">G1</a>&lt;F&gt; as Group&gt;::Scalar as PrimeField&gt;::Repr: Abomonation,\n    &lt;&lt;<a class=\"type\" href=\"lurk/proof/nova/type.G2.html\" title=\"type lurk::proof::nova::G2\">G2</a>&lt;F&gt; as Group&gt;::Scalar as PrimeField&gt;::Repr: Abomonation,</span></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_circuits\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#911-914\">source</a><a href=\"#method.num_circuits\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">num_circuits</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>How many circuits are provided?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.primary_circuit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#916-922\">source</a><a href=\"#method.primary_circuit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">primary_circuit</a>(&amp;self, circuit_index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;</h4></section></summary><div class='docblock'>Return a new instance of the primary circuit at <code>index</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.secondary_circuit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#924-926\">source</a><a href=\"#method.secondary_circuit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">secondary_circuit</a>(&amp;self) -&gt; <a class=\"type\" href=\"lurk/proof/supernova/type.C2.html\" title=\"type lurk::proof::supernova::C2\">C2</a>&lt;F&gt;</h4></section></summary><div class='docblock'>Return a new instance of the secondary circuit.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.initial_circuit_index\" class=\"method trait-impl\"><a href=\"#method.initial_circuit_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">initial_circuit_index</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Initial circuit index, defaults to zero.</div></details></div></details>","NonUniformCircuit<<F as CurveCycleEquipped>::G1, <F as CurveCycleEquipped>::G2, MultiFrame<'a, F, C>, TrivialSecondaryCircuit<<<F as CurveCycleEquipped>::G2 as Group>::Scalar>>","lurk::proof::nova::C1LEM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-MultiFrame%3C'a,+F,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#40\">source</a><a href=\"#impl-Clone-for-MultiFrame%3C'a,+F,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"lurk/field/trait.LurkField.html\" title=\"trait lurk::field::LurkField\">LurkField</a>, C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> + <a class=\"trait\" href=\"lurk/coprocessor/trait.Coprocessor.html\" title=\"trait lurk::coprocessor::Coprocessor\">Coprocessor</a>&lt;F&gt;&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#40\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","lurk::proof::nova::C1LEM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-StepCircuit%3CF%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#877-902\">source</a><a href=\"#impl-StepCircuit%3CF%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F: <a class=\"trait\" href=\"lurk/field/trait.LurkField.html\" title=\"trait lurk::field::LurkField\">LurkField</a>, C: <a class=\"trait\" href=\"lurk/coprocessor/trait.Coprocessor.html\" title=\"trait lurk::coprocessor::Coprocessor\">Coprocessor</a>&lt;F&gt;&gt; StepCircuit&lt;F&gt; for <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.arity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#880-882\">source</a><a href=\"#method.arity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">arity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return the the number of inputs or outputs of each step\n(this method is called only at circuit synthesis time)\n<code>synthesize</code> and <code>output</code> methods are expected to take as\ninput a vector of size equal to arity and output a vector of size equal to arity</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.synthesize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#884-897\">source</a><a href=\"#method.synthesize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">synthesize</a>&lt;CS: ConstraintSystem&lt;F&gt;&gt;(\n    &amp;self,\n    cs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut CS</a>,\n    _pc: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;AllocatedNum&lt;F&gt;&gt;,\n    z: &amp;[AllocatedNum&lt;F&gt;]\n) -&gt; <a class=\"type\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;(<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;AllocatedNum&lt;F&gt;&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;AllocatedNum&lt;F&gt;&gt;), SynthesisError&gt;</h4></section></summary><div class='docblock'>Synthesize the circuit for a computation step and return variable\nthat corresponds to the output of the step <code>pc_{i+1}</code> and <code>z_{i+1}</code></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.circuit_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#899-901\">source</a><a href=\"#method.circuit_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">circuit_index</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Return this <code>StepCircuit</code>’s assigned index, for use when enforcing the program counter.</div></details></div></details>","StepCircuit<F>","lurk::proof::nova::C1LEM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Circuit%3CF%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#699-789\">source</a><a href=\"#impl-Circuit%3CF%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F: <a class=\"trait\" href=\"lurk/field/trait.LurkField.html\" title=\"trait lurk::field::LurkField\">LurkField</a>, C: <a class=\"trait\" href=\"lurk/coprocessor/trait.Coprocessor.html\" title=\"trait lurk::coprocessor::Coprocessor\">Coprocessor</a>&lt;F&gt;&gt; Circuit&lt;F&gt; for <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.synthesize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#700-788\">source</a><a href=\"#method.synthesize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">synthesize</a>&lt;CS: ConstraintSystem&lt;F&gt;&gt;(\n    self,\n    cs: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;mut CS</a>\n) -&gt; <a class=\"type\" href=\"https://docs.rs/anyhow/1.0.75/anyhow/type.Result.html\" title=\"type anyhow::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, SynthesisError&gt;</h4></section></summary><div class='docblock'>Synthesize the circuit into a rank-1 quadratic constraint system.</div></details></div></details>","Circuit<F>","lurk::proof::nova::C1LEM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Provable%3CF%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#791-820\">source</a><a href=\"#impl-Provable%3CF%3E-for-MultiFrame%3C'a,+F,+C%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, F: <a class=\"trait\" href=\"lurk/field/trait.LurkField.html\" title=\"trait lurk::field::LurkField\">LurkField</a>, C: <a class=\"trait\" href=\"lurk/coprocessor/trait.Coprocessor.html\" title=\"trait lurk::coprocessor::Coprocessor\">Coprocessor</a>&lt;F&gt;&gt; <a class=\"trait\" href=\"lurk/proof/trait.Provable.html\" title=\"trait lurk::proof::Provable\">Provable</a>&lt;F&gt; for <a class=\"struct\" href=\"lurk/lem/multiframe/struct.MultiFrame.html\" title=\"struct lurk::lem::multiframe::MultiFrame\">MultiFrame</a>&lt;'a, F, C&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.public_inputs\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#792-808\">source</a><a href=\"#method.public_inputs\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.Provable.html#tymethod.public_inputs\" class=\"fn\">public_inputs</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;F&gt;</h4></section></summary><div class='docblock'>Returns the public inputs of the provable structure.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.public_input_size\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#811-814\">source</a><a href=\"#method.public_input_size\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.Provable.html#tymethod.public_input_size\" class=\"fn\">public_input_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the size of the public inputs.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.num_frames\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lurk/lem/multiframe.rs.html#817-819\">source</a><a href=\"#method.num_frames\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"lurk/proof/trait.Provable.html#tymethod.num_frames\" class=\"fn\">num_frames</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Returns the number of reduction frames in the provable structure.</div></details></div></details>","Provable<F>","lurk::proof::nova::C1LEM"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()