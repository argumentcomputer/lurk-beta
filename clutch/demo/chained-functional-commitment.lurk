;; First, we define a stateful function that adds its input to an internal counter, initialized to 0.

;; The function returns a new counter value and a commitment to a replacement function wrapping the new counter.

!(commit (letrec ((add (lambda (counter x)
                          (let ((counter (+ counter x)))
                            (cons counter (commit (add counter)))))))
            (add 0)))

;; We chain a next commitment by applying the committed function to a value of 9.

!(chain 0x2da6ae5854eb3055c31cbcd632f4d833a2a73fae5f5be4ee20fad3100285a28a 9)

;; The new counter value is 9, and the function returns a new functional commitment.

;; This new commitment is now the head of the chain.

;; Next, we ccreate a proof of this transtion.

!(prove)

;; We can verify the proof.

!(verify "aeaaz7gfwqsj6ggbokebnnt2in5kjg3jugzie5hafonednmjnfqvw5iya")

;; Now let's chain another call to the new head, adding 12 to the counter.

!(chain 0x30773603a363eac816a6e6e80e39c8eda0342635ffeb63e9c2412e3d3fb4da5b 12)

;; Now the counter is 21, and we have a new head commitment.

;; Prove it.

!(prove)

;; And verify.

!(verify "aeaazi2visjk4l2zouuyjafvxwg7jfmpoad43gc3foikulipxdir5iila")

;; One more time, we'll add 14 to the head commitment's internal state.

!(chain 0x0d628d7c6def025fe258334476b4950cfac1f86cadc68c06497aaee27f208532 14)

;; 21 + 14 = 35, as expected.

;; Prove.

!(prove)

;; Verify.

!(verify "aeaazlu4pjff7qo64jbsemqzlfonmbaqnnzkl2x7dbdtfg7xxboxtwikq")

;; Repeat indefinitely.

;; At every step, we have proof that the head commitment was correctly derived from the previous and some input.

