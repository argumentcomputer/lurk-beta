version: 2.1

setup-env: &setup-env
  MSRV: 1.60.0
  RUSTFLAGS: "-Dwarnings"
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1
  RUST_LOG: info

executors:
  arm64:
    machine:
      image: ubuntu-2004:202101-01
    working_directory: ~/lurk
    resource_class: arm.xlarge
  darwin:
    macos:
      xcode: "14.3.1"
    working_directory: ~/lurk
    resource_class: macos.m1.large.gen1

commands:
  set_env_path:
    steps:
      - run:
          name: Set the PATH env variable
          command: |
            # we need access to rustup in the next command
            export PATH=~/.cargo/bin:$PATH
            # Also put the Rust LLVM tools into the PATH. `rustc` hooks into the rust-toolchain at the root of the repo
            echo "export PATH=$HOME:~/.cargo/bin:$(dirname $(find $(rustc --print sysroot) -name 'rust-lld')):$PATH" | tee -a $BASH_ENV
            source $BASH_ENV

  setup-sccache:
    steps:
      - run:
          name: Install sccache
          command: |
            # Get host target
            host=$(rustc -Vv|grep host|sed -Ee 's/host: //')
            # Normalize the host for Linux downloads
            url="https://github.com/mozilla/sccache/releases/download/v0.5.4/sccache-v0.5.4-${host/linux-*/linux-musl}.tar.gz"
            # Install sccache binary
            curl -LsSf "$url" | tar xzf -
            mv sccache-v0.5.4-${host/linux-*/linux-musl}/sccache $HOME/.cargo/bin
            # This configures Rust to use sccache.
            echo 'export "RUSTC_WRAPPER"="sccache"' >> $BASH_ENV
            # This is the maximum space sccache cache will use on disk.
            echo 'export "SCCACHE_CACHE_SIZE"="1G"' >> $BASH_ENV
            echo 'export "SCCACHE_DIR"="$HOME/.cache/sccache"' >> $BASH_ENV
            sccache --version
            source $BASH_ENV

  restore-sccache-cache:
    steps:
      - restore_cache:
          name: Restore sccache cache
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}
  save-sccache-cache:
    steps:
      - save_cache:
          name: Save sccache cache
          # We use {{ epoch }} to always upload a fresh cache:
          # Of course, restore_cache will not find this exact key,
          # but it will fall back to the closest key (aka the most recent).
          # See https://discuss.circleci.com/t/add-mechanism-to-update-existing-cache-key/9014/13
          key: sccache-cache-stable-{{ arch }}-{{ .Environment.CIRCLE_JOB }}-{{ epoch }}
          paths:
            - "~/.cache/sccache"

  set_versions_n_runners:
    steps:
      - run:
          name: Install rustup
          command: |
            curl --proto '=https' --tlsv1.2 https://sh.rustup.rs -sSf | sh -s -- -y
      - run:
          name: Install nextest
          command: |
            # Get host target
            host=$(rustc -Vv|grep host|sed -Ee 's/host: //')
            # Normalize the host for MacOS downloads
            url="https://get.nexte.st/latest/${host/*-apple-darwin/universal-apple-darwin}.tar.gz"
            # Debug
            echo "Fetching nextest at $url"
            # If nextest isn't here already
            [ -f ${CARGO_HOME:-~/.cargo/bin}/cargo-nextest ] ||
            # Download binary and install to $HOME/.cargo/bin
            curl -LsSf "$url" | tar xzf - -C $HOME/.cargo/bin
      - run:
          name: Print versions
          command: |
            rustup show
            cargo --version
            rustc --version

jobs:
  test:
    parameters:
     os:
       type: executor
    executor: << parameters.os >>
    steps:
      - checkout
      - run:
          name: Update submodules
          command: |
            git submodule update --init --recursive
      - attach_workspace:
          at: "~/"
      - set_versions_n_runners
      - set_env_path
      - setup-sccache
      - restore-sccache-cache
      - run:
          name: Run cargo tests
          command: cargo nextest run --profile ci --workspace --cargo-profile dev-ci
          no_output_timeout: 120m
      - run:
          name: Benches build successfully
          command: cargo bench --no-run --profile dev-ci
      - run:
          name: Doc Tests
          command: cargo test --doc --workspace --profile dev-ci
      - save-sccache-cache
      - run:
          name: Print sccache stats
          command: sccache -s


workflows:
  test-all:
    jobs:
      - test:
          matrix:
            parameters:
              os: [arm64, darwin]
          filters:
            branches:
                ignore:
                  - master
                  - gh-pages
                  - staging.tmp
                  - trying.tmp
                  - staging-squash-merge.tmp
